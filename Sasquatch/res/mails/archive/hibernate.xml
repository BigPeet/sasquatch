<?xml version="1.0" encoding="UTF-8"?>
<mails>
  <mail>
    <header>[hibernate-dev] Checkstyle breaking the OGM build</header>
    <date>Fri May 03 00:41:18 CEST 2013</date>
    <body>Hi Emmanuel, Sorry I can't reproduce it and both maven &amp;amp; intellij plugins are telling me the Label class respects the rules. Guillaume</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Checkstyle breaking the OGM build</header>
    <date>Fri May 03 00:52:13 CEST 2013</date>
    <body>Can't reproduce this either. I'm wondering if we really want to keep this rule: its benefit is limited and even before this case we had trouble with it on windows.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Checkstyle breaking the OGM build</header>
    <date>Fri May 03 08:32:40 CEST 2013</date>
    <body>Works for me on my Mac as expected, i.e. I get the violation only when I really add another new line. Personally I like the rule, several empty lines always look a bit odd to me. But if the check can't be executed reliably, it's surely not big loss. --Gunnar</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Checkstyle breaking the OGM build</header>
    <date>Fri May 03 09:57:59 CEST 2013</date>
    <body>I found the problem, not sure where that comes from though. On a fresh repo clone it works as expected. So I did diff the two and found that the failing version has lines ending as CRLF (Windows) and the fresh repo has lines ending as LF (Unix).</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Checkstyle breaking the OGM build</header>
    <date>Fri May 03 10:00:27 CEST 2013</date>
    <body>Did you get the latest patch (added by Davide) to fix the endofline issue ?</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Checkstyle breaking the OGM build</header>
    <date>Fri May 03 10:11:02 CEST 2013</date>
    <body>Ah, it may then be that you have to re-normalize the line endings in your existing checkout as described in [1]: git rm --cached -r .# Remove everything from the index. git reset --hard# Write both the index and working directory from git's database. [1]</body>
  </mail>
  <mail>
    <header>[hibernate-dev] breaking compatibility issues found in 4.3.0.Beta3</header>
    <date>Fri May 03 09:08:33 CEST 2013</date>
    <body>------------------------- Best Regards,</body>
  </mail>
  <mail>
    <header>[hibernate-dev] breaking compatibility issues found in	4.3.0.Beta3</header>
    <date>Fri May 03 09:11:51 CEST 2013</date>
    <body>For the HHH-8219 - usage of JDK 7 API - I'm working on integrating the Animal Sniffer plug-in to check that only Java 6 classes are used in the code base. --Gunnar</body>
  </mail>
  <mail>
    <header>[hibernate-dev] breaking compatibility issues found in	4.3.0.Beta3</header>
    <date>Fri May 03 14:14:41 CEST 2013</date>
    <body>I dont understand what you mean with HHH-8220.  OK its a change, but how is that breaking any builds? And for JDK 7 we have discussed that on this list already.  Gunnar will work on integrating some checks into the build to make sure we are not using JDK 7 features...</body>
  </mail>
  <mail>
    <header>[hibernate-dev] A synchronous JGroups backend for Hibernate Search</header>
    <date>Fri May 03 11:47:49 CEST 2013</date>
    <body>I did not think of that but an &amp;quot;implicit&amp;quot; or &amp;quot;auto&amp;quot; setting makes some sense. Just to be sure, the new immplicit setting / behavior will break the semantic of what's going on so it should at least but a minor version bump. Correct? BTW, did you guys even found out why using sync was taking so much time? Emmanuel</body>
  </mail>
  <mail>
    <header>[hibernate-dev] A synchronous JGroups backend for Hibernate	Search</header>
    <date>Fri May 03 12:18:09 CEST 2013</date>
    <body>Correct, this was released as 4.3.0.Alpha1 : [ BUT I didn't realize it would effectively change interpretation of existing configurations; my bad, updating the migration guide now.. Yes, although it was a painfully long debug session (week+): the way we where using the JGroups API was &amp;quot;unexpected&amp;quot; and would trigged faulty behaviour. This is way our backend ended up to be mostly rewritten, to better match JGroups typical usage. Also JGroups issues where opened to avoid the pitfall. In short, the operation would complete quickly (&amp;lt;5 milliseconds) on the master node, but then the client thread would be stuck waiting for one more reply than what it would receive in practice, waiting for the timeout: so that added 10 seconds for each RPC. After the timeout would trigger, the client thread would actually realize the ACK *was* received, so wouldn't throw an error as all was processed fine. Added very strict test for this ;-) In my first draft for HSEARCH-1296 I was automatically enabling the blocking behaviour on JGroups if the worker backend was configured to be synchronous (which is the default for workers), but Emmanuel didn't like that and I think he has a good point: The JGroups behaviour and the workers behaviour are two different things; so I just separated this into a new configuration property &amp;quot;block_waiting_ack&amp;quot; (boolean) which of course applies only to the JGroups backends. I agree it's important to keep the two separate, but also if the user is configuring an ASYNC worker, he should set this option to false as there is no benefit in waiting for the delivery. Likewise, if SYNC is required, you would probably want to set this to true. dependant on the worker execution, exposing the property as an override. Thoughts? I guess it's much easier to understand the default behaviour if we keep them separate, still I don't see much use for configuring the two independently. Cheers, Sanne _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] A synchronous JGroups backend for Hibernate	Search</header>
    <date>Fri May 03 12:21:43 CEST 2013</date>
    <body>I did not think of that but an &amp;quot;implicit&amp;quot; or &amp;quot;auto&amp;quot; setting makes some hence it only continued on default JGroups timeout, which is 10sec -- and we had 5 ops aka ~50sec. -Ales In my first draft for HSEARCH-1296 I was automatically enabling the blocking behaviour on JGroups if the worker backend was configured to be synchronous (which is the default for workers), but Emmanuel didn't like that and I think he has a good point: The JGroups behaviour and the workers behaviour are two different things; so I just separated this into a new configuration property &amp;quot;block_waiting_ack&amp;quot; (boolean) which of course applies only to the JGroups backends. I agree it's important to keep the two separate, but also if the user is configuring an ASYNC worker, he should set this option to false as there is no benefit in waiting for the delivery. Likewise, if SYNC is required, you would probably want to set this to true. dependant on the worker execution, exposing the property as an override. Thoughts? I guess it's much easier to understand the default behaviour if we keep them separate, still I don't see much use for configuring the two independently. Cheers, Sanne _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] improved Eclipse project support</header>
    <date>Fri May 03 13:13:53 CEST 2013</date>
    <body>Hi Steve, I've pushed some commits for using the Animal Sniffer plug-in to discover the usage of Java 7 APIs to my fork [1]. This uses the Ant task and fails the build when using methods not existent in Java 6 such as emptyIterator(). I'm still in the process of testing this but thought it would be good to get some early feedback since this is my first change to the ORM build scripts. If you think the change is ok I'll create a PR for this. I'm currently only checking the main classes, if you think test classes should be checked as well that's easy to add. --Gunnar [1] What is &amp;quot;configured JDK baseline&amp;quot;?  Do you have to point to a JDK path? If so, no difference than just setting the javac bootstrap option to a local path. In HV, we use the Animal Sniffer plug-in [1] for that purpose. This checks the code base against a configured JDK baseline and fails the build, when e.g. using a method which is not part of the targeted JDK release. In other words, you still use your current JDK for building (avoiding any bootstrap path fiddling) but make sure you invoke only those parts of the API which are also available in the targeted Java version. Together with the source/target level correctly set, this allows to safely compile with newer JDK versions and still be sure that the code e.g. runs on 6. We use the Maven plug-in, but via the Ant task, this should also be usable for Gradle builds. If you like me to, I can give this a try for ORM. --Gunnar Mainly thats an issue with that fact that so far we have not defined 'bootstrap class path' option to javac to go along with the source/target compatibility settings.  The difficulty is that defining bootstrap for javac becomes very system specific (it needs to name a path).  Sure we could externalize that into a setting, but then what do you do when someone wants to build Hibernate but has not defined this setting?  Do you let the build continue (aka, make the bootstrap setting optional)? Bottom line, just setting source/target compatibility is never enough. On a related note: I know Java 7 is required to compile ORM, but is Java 7 also the required runtime Java version now (I vaguely remember a related discussion around the JPA API JAR)? I'm asking, because the Java 7 method Collections#emptyIterator() is used at two places, making this code not runnable on Java 6. If requiring 7 is intentional, feel free  to ignore this mail ;) --Gunnar I am not touching this :) I think I have explained this 198,052 times thus far lol I must have missed this then. Or I was not yet part of the team at that time. &amp;gt;&amp;gt; see #4 Thanks for the link. I get the reasoning about Maven's &amp;quot;one artifact&amp;quot; rule and the need for re-usable test code. But now that we use Gradle, wouldn't it be possible to move the things from hibernate-testng back to hibernate-core and built two JARs with the different contents from there? To me, a circular dependency between two modules always seems a bit suspicious, also if it is doable with Gradle, turning off warnings in the IDE etc. Btw. also Maven supports this particular use case of creating a main JAR and a JAR with re-usable test infrastructure [1]. We e.g. make use of this in HV. --Gunnar [1] Hi Brett, That's good news, thanks for your efforts. Based on step 3 from your blog post it seems as there still is a circular dependency between some of the modules/projects. Just out of interest, could you give some more details why this kind of setup is required? --Gunnar There's been several complaints about ORM's use of Gradle not generating Eclipse projects correctly.  This was recently cleaned up in HHH-7617 [1]. FYI, there's a quick blog post [2] about how to quickly get up-and-running.  Please let me know if there are any further ways we could streamline the IDE setup. [1] [2] Brett Meyer Red Hat Software Engineer, Hibernate ___________________________________________________ hibernate-dev mailing list ___________________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] improved Eclipse project support</header>
    <date>Fri May 03 14:16:11 CEST 2013</date>
    <body>I'll take a look. Thanks Gunnar! What is &amp;quot;configured JDK baseline&amp;quot;?  Do you have to point to a JDK path? If so, no difference than just setting the javac bootstrap option to a local path. No, you don't point to another JDK path, you use the JDK you are on, i.e. Java 7. You just say which JDK version you want to target, e.g. 1.6. In the HV case, the config is this: The referenced signature artifact contains the API signature for that JDK version, i.e. all Java 1.6 methods, public fields etc. If your code uses a method which is not part of that API signature, the plug-in will fail the build. That is, you still use the Java 7 API to compile against, but the plug-in makes sure you use only those parts of the API which where there already as of Java 6. So this emulates building against Java 6, but without the hassle of handling several actual JDKs, setting up the boot classpath etc. In HV, we use the Animal Sniffer plug-in [1] for that purpose. This checks the code base against a configured JDK baseline and fails the build, when e.g. using a method which is not part of the targeted JDK release. In other words, you still use your current JDK for building (avoiding any bootstrap path fiddling) but make sure you invoke only those parts of the API which are also available in the targeted Java version. Together with the source/target level correctly set, this allows to safely compile with newer JDK versions and still be sure that the code e.g. runs on 6. We use the Maven plug-in, but via the Ant task, this should also be usable for Gradle builds. If you like me to, I can give this a try for ORM. --Gunnar Mainly thats an issue with that fact that so far we have not defined 'bootstrap class path' option to javac to go along with the source/target compatibility settings.  The difficulty is that defining bootstrap for javac becomes very system specific (it needs to name a path).  Sure we could externalize that into a setting, but then what do you do when someone wants to build Hibernate but has not defined this setting?  Do you let the build continue (aka, make the bootstrap setting optional)? Bottom line, just setting source/target compatibility is never enough. On a related note: I know Java 7 is required to compile ORM, but is Java 7 also the required runtime Java version now (I vaguely remember a related discussion around the JPA API JAR)? I'm asking, because the Java 7 method Collections#emptyIterator() is used at two places, making this code not runnable on Java 6. If requiring 7 is intentional, feel free  to ignore this mail ;) --Gunnar 2013/4/15 Steve Ebersole &amp;gt;__com I am not touching this :) I think I have explained this 198,052 times thus far lol I must have missed this then. Or I was not yet part of the team at that time. &amp;gt;&amp;gt; see #4 Thanks for the link. I get the reasoning about Maven's &amp;quot;one artifact&amp;quot; rule and the need for re-usable test code. But now that we use Gradle, wouldn't it be possible to move the things from hibernate-testng back to hibernate-core and built two JARs with the different contents from there? To me, a circular dependency between two modules always seems a bit suspicious, also if it is doable with Gradle, turning off warnings in the IDE etc. Btw. also Maven supports this particular use case of creating a main JAR and a JAR with re-usable test infrastructure [1]. We e.g. make use of this in HV. --Gunnar [1] On Mon 15 Apr 2013 04:10:43 PM CDT, Hi Brett, That's good news, thanks for your efforts. Based on step 3 from your blog post it seems as there still is a circular dependency between some of the modules/projects. Just out of interest, could you give some more details why this kind of setup is required? --Gunnar 2013/4/15 Brett Meyer There's been several complaints about ORM's use of Gradle not generating Eclipse projects correctly.  This was recently cleaned up in HHH-7617 [1]. FYI, there's a quick blog post [2] about how to quickly get up-and-running.  Please let me know if there are any further ways we could streamline the IDE setup. [1] [2] Brett Meyer Red Hat Software Engineer, Hibernate ___________________________________________________ hibernate-dev mailing list ___________________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] breaking compatibility issues found in	4.3.0.Beta3</header>
    <date>Fri May 03 14:23:05 CEST 2013</date>
    <body>suppose there is a WAR project that uses hibernate, and it has a compile scope dependency of h-em before this 4.3.0.Beta2, the HEM will brings all required dependencies in ( for example, h-core ) but after upgrade to 4.3.0.Beta2, the build WAR will only contains HEM and no H-Core since HEM now has a runtime scope dependency of h-core then the WAR will fail when being deployed I'm aware of this , just pointed out that this 4.3.0.Beta2 will fail on JDK 6, and others who run into this issue will know the reason ------------------------- Best Regards, _______________________________________________ hibernate-dev mailing list ------------------------- Best Regards,</body>
  </mail>
  <mail>
    <header>[hibernate-dev] breaking compatibility issues found in	4.3.0.Beta3</header>
    <date>Fri May 03 15:00:46 CEST 2013</date>
    <body>Have you tried this?  Runtimr and compile scopes are both transitive, so the situation you describe should work just as before I dont understand what you mean with HHH-8220.  OK its a change, but how is that breaking any builds? And for JDK 7 we have discussed that on this list already.  Gunnar will work on integrating some checks into the build to make sure we ------------------------- Best Regards, _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] breaking compatibility issues found in	4.3.0.Beta3</header>
    <date>Fri May 03 15:05:37 CEST 2013</date>
    <body>sorry, I missed the provided scope and runtime scope the problem is : now hibernate-core is a runtime scope dependency of h-em so, suppose a project depends on h-em ( compile scope ) and the project uses h-core classes, then the project won't be compiled. since runtime scope dependencies are not available on compile time classpath a simple maven project would approve this ( attached ) I dont understand what you mean with HHH-8220.  OK its a change, but how is that breaking any builds? ------------------------- Best Regards, _______________________________________________ hibernate-dev mailing list ------------------------- Best Regards,</body>
  </mail>
  <mail>
    <header>[hibernate-dev] breaking compatibility issues found in	4.3.0.Beta3</header>
    <date>Fri May 03 15:12:40 CEST 2013</date>
    <body>Well purists would argue that relying on transitivity for dependencies that you need for *compilation* is a baaaaaaaaaad idea. In fact Maven's own primer to dependency management discusses this very thing: specifically &amp;quot;it is intended that this should be runtime scope instead, so that all compile dependencies must be explicitly listed - however, there is the case where the library you depend on extends a class from another library, forcing you to have available at compile time. For this reason, compile time dependencies remain as compile scope even when they These are some of the exact reasons why so many folks dislike Maven's limited notion of dependency groupings (scopes). Have you tried this? Runtimr and compile scopes are both transitive, so the situation you describe should work just as before On May 3, 2013, at 8:13 PM, Steve Ebersole I dont understand what you mean with HHH-8220. OK its a change, but how is that breaking any builds? suppose there is a WAR project that uses hibernate, and it has a compile scope dependency of h-em before this 4.3.0.Beta2, the HEM will brings all required dependencies in ( for example, h-core ) but after upgrade to 4.3.0.Beta2, the build WAR will only contains HEM and no H-Core since HEM now has a runtime scope dependency of h-core then the WAR will fail when being deployed And for JDK 7 we have discussed that on this list already. Gunnar will work on integrating some checks into the build to I'm aware of this , just pointed out that this 4.3.0.Beta2 will fail on JDK 6, and others who run into this issue will know the reason ------------------------- Best Regards, _______________________________________________ hibernate-dev mailing list ------------------------- Best Regards,</body>
  </mail>
  <mail>
    <header>[hibernate-dev] breaking compatibility issues found in	4.3.0.Beta3</header>
    <date>Fri May 03 15:32:33 CEST 2013</date>
    <body>I asked about this on the gradle-dev list.  Seems likely this is a change stemming from the new publishing dsl which i just switched Hibernate to use. sorry, I missed the provided scope and runtime scope the problem is : now hibernate-core is a runtime scope dependency of h-em so, suppose a project depends on h-em ( compile scope ) and the project uses h-core classes, then the project won't be compiled. since runtime scope dependencies are not available on compile time classpath a simple maven project would approve this ( attached ) Have you tried this? Runtimr and compile scopes are both transitive, so the situation you describe should work just as before On May 3, 2013, at 8:13 PM, Steve Ebersole I dont understand what you mean with HHH-8220. OK its a change, but how is that breaking any builds? suppose there is a WAR project that uses hibernate, and it has a compile scope dependency of h-em before this 4.3.0.Beta2, the HEM will brings all required dependencies in ( for example, h-core ) but after upgrade to 4.3.0.Beta2, the build WAR will only contains HEM and no H-Core since HEM now has a runtime scope dependency of h-core then the WAR will fail when being deployed And for JDK 7 we have discussed that on this list already. Gunnar will work on integrating some checks into the build to I'm aware of this , just pointed out that this 4.3.0.Beta2 will fail on JDK 6, and others who run into this issue will know the reason ------------------------- Best Regards, _______________________________________________ hibernate-dev mailing list ------------------------- Best Regards, ------------------------- Best Regards,</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Scripting releases - SourceForge</header>
    <date>Fri May 03 18:41:35 CEST 2013</date>
    <body>I am working on scripting more of the release steps into the Gradle build scripts.  When it comes to uploading the release bundles to SourceForge we have a choice to make.  I will use rsync since we already require people doing a release to have it installed because docs.jboss.org uploads require it. I can either account for the various SourceForge users in the script, or we could define a single user in the SourceForge Hibernate project that is there for uploading release bundles from the build.  That upload user would have just the permissions necessary to upload.  We would need, however, to manage getting keys uploaded to that user.  Whereas if we used our own SourceForge users we'd simply use our own keys. Preferences? Personally I'd rather just use our own users and account for the different usernames in the script (read from ~/.gradle/gradle.settings maybe).</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Scripting releases - SourceForge</header>
    <date>Fri May 03 18:54:15 CEST 2013</date>
    <body>Maybe you could reuse the scripts Hardy built for HV (to be found in the HV project under distribution/src/scripts)? This release script expects the SF user to be specified as argument when invoking the script. --Gunnar - sent from my mobile phone - Am 03.05.2013 18:42 schrieb &amp;quot;Steve Ebersole&amp;quot; &amp;lt;&amp;gt;:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Scripting releases - SourceForge</header>
    <date>Fri May 03 18:54:34 CEST 2013</date>
    <body>+1 for listing the users Brett Meyer Red Hat Software Engineer, Hibernate ----- Original Message ----- Sent: Friday, May 3, 2013 12:41:35 PM Subject: [hibernate-dev] Scripting releases - SourceForge I am working on scripting more of the release steps into the Gradle build scripts.  When it comes to uploading the release bundles to SourceForge we have a choice to make.  I will use rsync since we already require people doing a release to have it installed because docs.jboss.org uploads require it. I can either account for the various SourceForge users in the script, or we could define a single user in the SourceForge Hibernate project that is there for uploading release bundles from the build.  That upload user would have just the permissions necessary to upload.  We would need, however, to manage getting keys uploaded to that user.  Whereas if we used our own SourceForge users we'd simply use our own keys. Preferences? Personally I'd rather just use our own users and account for the different usernames in the script (read from ~/.gradle/gradle.settings maybe). _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Scripting releases - SourceForge</header>
    <date>Fri May 03 19:04:47 CEST 2013</date>
    <body>can't you just omit the users? I would assume that it's going to use rsync over SSH, so it should pick the user I've defined for this server in my own ~/.ssh/config</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Scripting releases - SourceForge</header>
    <date>Fri May 03 19:16:07 CEST 2013</date>
    <body>To clarify, this is the &amp;quot;interesting&amp;quot; part of my ~/.ssh/config : As you can see, I specify the user it's going to use in the file on a per-server basis. Very convenient, so I don't have to remember these details, and also you can specify the correct key. +1 for listing the users Brett Meyer Red Hat Software Engineer, Hibernate ----- Original Message ----- Sent: Friday, May 3, 2013 12:41:35 PM Subject: [hibernate-dev] Scripting releases - SourceForge I am working on scripting more of the release steps into the Gradle build scripts.  When it comes to uploading the release bundles to SourceForge we have a choice to make.  I will use rsync since we already require people doing a release to have it installed because docs.jboss.org uploads require it. I can either account for the various SourceForge users in the script, or we could define a single user in the SourceForge Hibernate project that is there for uploading release bundles from the build.  That upload user would have just the permissions necessary to upload.  We would need, however, to manage getting keys uploaded to that user.  Whereas if we used our own SourceForge users we'd simply use our own keys. Preferences? Personally I'd rather just use our own users and account for the different usernames in the script (read from ~/.gradle/gradle.settings maybe). _______________________________________________ hibernate-dev mailing list _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Scripting releases - SourceForge</header>
    <date>Fri May 03 21:05:58 CEST 2013</date>
    <body>We *could*.  But that obviously requires a different level of system-level assumptions.  If we all agree to that then fine. I am going to leave the doc upload as is for now, mainly because that one is less in our control. can't you just omit the users? I would assume that it's going to use rsync over SSH, so it should pick the user I've defined for this server in my own ~/.ssh/config +1 for listing the users Brett Meyer Red Hat Software Engineer, Hibernate ----- Original Message ----- Sent: Friday, May 3, 2013 12:41:35 PM Subject: [hibernate-dev] Scripting releases - SourceForge I am working on scripting more of the release steps into the Gradle build scripts.  When it comes to uploading the release bundles to SourceForge we have a choice to make.  I will use rsync since we already require people doing a release to have it installed because docs.jboss.org uploads require it. I can either account for the various SourceForge users in the script, or we could define a single user in the SourceForge Hibernate project that is there for uploading release bundles from the build.  That upload user would have just the permissions necessary to upload.  We would need, however, to manage getting keys uploaded to that user.  Whereas if we used our own SourceForge users we'd simply use our own keys. Preferences? Personally I'd rather just use our own users and account for the different usernames in the script (read from ~/.gradle/gradle.settings maybe). _______________________________________________ hibernate-dev mailing list _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Scripting releases - SourceForge</header>
    <date>Fri May 03 22:44:09 CEST 2013</date>
    <body>+1, I think the best way is to use the users own account. Everyone can upload their own key and the script could take the the user name as a parameter (that's what the HV script is doing). I guess you still want to have a dedicated user for the release via ci server approach (if this is what you are after). --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Gradle 1.6</header>
    <date>Tue May 07 20:22:32 CEST 2013</date>
    <body>I am running into some difficulties with writing the release task in the Gradle build, specifically with the ordering between the various tasks (e.g., sometimes a jar is built and then clean is run and then Gradle tries to upload it). The suggested way around this is to use the mustRunAfter hook (kind of similar to a dependsOn).  But mustRunAfter was only added in 1.6. Anyone have a problem with upgrading the build to use Gradle 1.6?</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Gradle 1.6</header>
    <date>Wed May 08 08:54:23 CEST 2013</date>
    <body>I think this is cool esp the JUnit @Category support, we may add a metamodel category and then exclude those metamodel tests from master build</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Gradle 1.6</header>
    <date>Wed May 08 10:04:28 CEST 2013</date>
    <body>+1 for Gradle 1.6</body>
  </mail>
  <mail>
    <header>[hibernate-dev] ORM and animal sniffer</header>
    <date>Wed May 08 10:58:32 CEST 2013</date>
    <body>Hi, it seems the animal sniffer plugin made it now into the ORM build. Unfortunately, I am seeing this when trying a 'gradlew clean build': FAILURE: Build failed with an exception. * Where: Build file '/Users/hardy/work/hibernate/git/core/orm-4.0/build.gradle' line: 329 * What went wrong: Execution failed for task ':hibernate-c3p0:checkJavaApiSignature'. &amp;gt; Could not resolve org.codehaus.mojo:animal-sniffer-ant-tasks:1.8. Required by: org.hibernate:hibernate-c3p0:4.3.0-SNAPSHOT &amp;gt; Could not resolve org.codehaus.mojo:animal-sniffer-parent:1.8. &amp;gt; Could not HEAD ' &amp;gt; Connection reset Anything I need to do to get this to work? AFAICS there is no jar in so I am not sure why the build tries to download one. --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] ORM and animal sniffer</header>
    <date>Wed May 08 11:52:50 CEST 2013</date>
    <body>Hmm, that's odd. So far this didn't occur on my machine. I'll try to reproduce it. --Gunnar</body>
  </mail>
  <mail>
    <header>[hibernate-dev] ORM and animal sniffer</header>
    <date>Wed May 08 12:21:03 CEST 2013</date>
    <body>Hi Hardy, I can't reproduce this issue. I removed anything named animal-sniffer* from my local Gradle artifact cache (file store and module meta-data), and when doing an ORM build it downloads the expected things (i.e., the POM for the parent module): ... hibernate-c3p0:checkJavaApiSignature Download Download Download Download Download ... It also works on the CI server, the job for with the change is at [1]. Maybe you try to remove the artifacts from your local cache as well? --Gunnar [1] Hi, it seems the animal sniffer plugin made it now into the ORM build. Unfortunately, I am seeing this when trying a 'gradlew clean build': FAILURE: Build failed with an exception. * Where: Build file '/Users/hardy/work/hibernate/git/core/orm-4.0/build.gradle' line: 329 * What went wrong: Execution failed for task ':hibernate-c3p0:checkJavaApiSignature'. &amp;gt; Could not resolve all dependencies for configuration ':hibernate-c3p0:animalSniffer'. &amp;gt; Could not resolve org.codehaus.mojo:animal-sniffer-ant-tasks:1.8. Required by: org.hibernate:hibernate-c3p0:4.3.0-SNAPSHOT &amp;gt; Could not resolve org.codehaus.mojo:animal-sniffer-parent:1.8. &amp;gt; Could not HEAD ' '. &amp;gt; Connection reset Anything I need to do to get this to work? AFAICS there is no jar in , so I am not sure why the build tries to download one. --Hardy _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Actions by anonymous JIRA user</header>
    <date>Wed May 08 16:04:07 CEST 2013</date>
    <body>Hi all, Every once in while I'm noticing actions of JIRA user &amp;quot;Anonymous&amp;quot;, e.g. here: (Anonymous made the transition from &amp;quot;Open&amp;quot; to &amp;quot;Pull request sent&amp;quot;). Until now I assumed one needs to be logged into JIRA to perform any changes to an issue. So I'm wondering whether that assumption was just wrong or whether the possibility for anonymous actions is actually not intended. In case of the latter, maybe its caused by the recent migration? --Gunnar</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Actions by anonymous JIRA user</header>
    <date>Wed May 08 16:09:46 CEST 2013</date>
    <body>I had reported the same in the past, and I think that was before the migration. I've only ever seen it on Hibernate Search so I'm suspecting there is something wrong in the custom scheme I applied but I could never figure out what's wrong with it. If you remember, that was the reason I made you admin of HSEARCH as you seemed interested in having a look ;-) Sanne</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Actions by anonymous JIRA user</header>
    <date>Wed May 08 17:52:16 CEST 2013</date>
    <body>Fixed! my fault, thanks to Gunnar for finding the missing permission check. Hi all, Every once in while I'm noticing actions of JIRA user &amp;quot;Anonymous&amp;quot;, e.g. here: (Anonymous made the transition from &amp;quot;Open&amp;quot; to &amp;quot;Pull request sent&amp;quot;). Until now I assumed one needs to be logged into JIRA to perform any changes to an issue. So I'm wondering whether that assumption was just wrong or whether the possibility for anonymous actions is actually not intended. In case of the latter, maybe its caused by the recent migration? --Gunnar _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] IRC Developer Meeting - 5/9</header>
    <date>Thu May 09 17:52:18 CEST 2013</date>
    <body>Discussed progress of JPA 2.1 implementation, progress of Hibernate Spatial integration, Gradle 1.6, pull request for HANA database support, etc.  Details: [10:49] &amp;lt;jbott&amp;gt; Minutes: [10:49] &amp;lt;jbott&amp;gt; Minutes (text): [10:49] &amp;lt;jbott&amp;gt; Log:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] CI - keeping jobs</header>
    <date>Fri May 10 02:17:33 CEST 2013</date>
    <body>Is there a reason to not &amp;quot;Discard Old Builds&amp;quot;, keeping just the last 10, 15, 20 jobs?</body>
  </mail>
  <mail>
    <header>[hibernate-dev] CI - keeping jobs</header>
    <date>Fri May 10 09:35:45 CEST 2013</date>
    <body>Discarding old builds makes sense; But I'd keep some more, maybe 30 or even 50 unless disk space is an issue.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] CI - keeping jobs</header>
    <date>Fri May 10 13:38:18 CEST 2013</date>
    <body>Thanks for starting this; I didn't limit the builds yet as wanted to bring it up here first.. was about time. We're using just 4% of the available space, and that includes the operating system essentials and the Maven repository.. so you're free to suggest high values if you think that can be useful. Also how important are these reports in the long term? Is it ok in case of &amp;quot;disaster&amp;quot; that we don't recover previous build reports? There is no backup job in place currently: all what I do is take occasional create snapshots of the VM when I feel we reached a good milestone in progress, but these snaphosts include the whole OS and their goal is to backup the infrastructure more than to keep up with build logs. I'd suggest to have each project limit its own build as wished; you can even leave it unbounded if you wish so: in case of disk space need I'll reach out and ask; in such a situation we also have the option to rise the disk space dynamically, practically you can think of it as unlimited. I'm setting a time limit for Search and OGM of 90 days. Sanne Is there a reason to not &amp;quot;Discard Old Builds&amp;quot;, keeping just the last 10, 15, 20 jobs? _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] CI - keeping jobs</header>
    <date>Fri May 10 13:55:34 CEST 2013</date>
    <body>I'm setting a time limit for Search and OGM of 90 days. +1 Davide</body>
  </mail>
  <mail>
    <header>[hibernate-dev] CI - keeping jobs</header>
    <date>Fri May 10 14:58:59 CEST 2013</date>
    <body>+1, for all I care 30 would even be enough --Hardy Thanks for starting this; I didn't limit the builds yet as wanted to bring it up here first.. was about time. We're using just 4% of the available space, and that includes the operating system essentials and the Maven repository.. so you're free to suggest high values if you think that can be useful. Also how important are these reports in the long term? Is it ok in case of &amp;quot;disaster&amp;quot; that we don't recover previous build reports? There is no backup job in place currently: all what I do is take occasional create snapshots of the VM when I feel we reached a good milestone in progress, but these snaphosts include the whole OS and their goal is to backup the infrastructure more than to keep up with build logs. I'd suggest to have each project limit its own build as wished; you can even leave it unbounded if you wish so: in case of disk space need I'll reach out and ask; in such a situation we also have the option to rise the disk space dynamically, practically you can think of it as unlimited. I'm setting a time limit for Search and OGM of 90 days. Sanne Discarding old builds makes sense; But I'd keep some more, maybe 30 or even 50 unless disk space is an issue. Is there a reason to not &amp;quot;Discard Old Builds&amp;quot;, keeping just the last 10, 15, 20 jobs? _______________________________________________ hibernate-dev mailing list _______________________________________________ hibernate-dev mailing list _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] hibernate-commons-annotations 4.0.2.Final released (OSGi improvement)</header>
    <date>Fri May 10 20:58:00 CEST 2013</date>
    <body>The manifest was improved to support usage in OSGi environments. And that's it!  Exciting, eh? Brett Meyer Red Hat Software Engineer, Hibernate</body>
  </mail>
  <mail>
    <header>[hibernate-dev] JBoss Community Recognition Awards</header>
    <date>Mon May 13 17:50:52 CEST 2013</date>
    <body>Its time for the JBoss Community Recognition Awards[1].  I have started getting together a list of nominations and wanted ask the Hibernate community for any feedback.  So, if there is anyone you would like to see nominated please send the details, either to me or to the list. [1]</body>
  </mail>
  <mail>
    <header>[hibernate-dev] metamodel SessionFactory building</header>
    <date>Tue May 14 20:45:14 CEST 2013</date>
    <body>Personally I had never seen this as a defined pattern before, but its actually quite similar to the design for building a SessionFactory in metamodel that we scoped out in Stockholm meeting.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] metamodel SessionFactory building</header>
    <date>Wed May 15 11:45:30 CEST 2013</date>
    <body>Right, I never heard step builder pattern before either, but it is indeed very similar to what we do. So maybe we don't have it so wrong after all ;-) --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Welcome Nicolas to the Search committers</header>
    <date>Thu May 16 01:01:37 CEST 2013</date>
    <body>Dear All, since Nicolas didn't &amp;quot;just&amp;quot; contribute an awesome new feature for Hibernate Search but is also actively maintaining it, I've added him to the Hibernate Search committers team. I find myself asking for his opinion on my own patches and find it was about time that he could apply our proposals directly. Congratulations Nicolas, and please continue the great work! If you need some tutoring on your first pull requests, I'm happy to assist you on IRC. Sanne</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Welcome Nicolas to the Search committers</header>
    <date>Thu May 16 09:02:45 CEST 2013</date>
    <body>Nice :)</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Welcome Nicolas to the Search committers</header>
    <date>Thu May 16 10:27:14 CEST 2013</date>
    <body>Welcome :-) --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Welcome Nicolas to the Search committers</header>
    <date>Thu May 16 10:38:00 CEST 2013</date>
    <body>Congrats</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Welcome Nicolas to the Search committers</header>
    <date>Thu May 16 10:39:16 CEST 2013</date>
    <body>Congrats, Nicolas!</body>
  </mail>
  <mail>
    <header>[hibernate-dev] How to build Hibernate Search</header>
    <date>Thu Mar 26 14:43:36 CET 2009</date>
    <body>Hi, I updated the guide on how to build Hibernate Search - I hope this will help resolve the problems of the last couple of days. --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Backward compatibilty latest snapshot</header>
    <date>Thu Mar 26 20:27:36 CET 2009</date>
    <body>Hi, I tried to play with the latest 3.5.0-SNAPSHOT within my Grails 1.1 project to integrate Hibernate Search. Grails 1.1 is bases on Hibernate 3.3.1. The problem I'm facing now is that 3.5.0-snapshot does not seem to be backward compatible with 3.3.1 org.hibernate.dialect.DialectFactory was moved to org.hibernate.dialect.* resolver*.DialectFactory (part of ). Grails is using this factory class internally. Sure thing is I can check out Grails source code change the package and build Grails. I'm just wondering now if the above change is just bad luck, or that I will face a lot of other refactorings? Cheers, Marcel -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Backward compatibilty latest snapshot</header>
    <date>Fri Mar 27 00:33:41 CET 2009</date>
    <body>DialectFactory is not a public API AFAIK but I know Grails had to use a bunch of non public API esp on the mapping side. So two solutions here: - it makes sense to move back DialectFactory to the dialect package, Steve's call (note that the interface might have changed anyway - get the grails engine adapt to the new DialectFactory Note that this change has been back ported to Hibernate 3.3.x so that will be a problem for Grails when they upgrade. You will have to reach Graeme and the team to coordinate a bit. -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Backward compatibilty latest snapshot</header>
    <date>Fri Mar 27 01:58:59 CET 2009</date>
    <body>DialectFactory constituted a circular package dependency between o.h.dialect and o.h.dialect.resolver.  It was moved to the o.h.dialect.resolver package to alleviate that circularity (yes we have tons of such circularity in Hibernate, but we have to start cleaning up somewhere). Sadly, even that move really did not address the underlying public/internal issue because o.h.dialect and its sub-packages still contain a mix of public stuff and internal stuff.  I expect this to get addresses again later but certainly not for 3.3 or 3.5.  Probably not until 4.0 -- Hibernate.org</body>
  </mail>
  <mail>
    <header>[hibernate-dev] how can i start contributing to hibernate</header>
    <date>Fri Mar 27 16:19:33 CET 2009</date>
    <body>jboss seam has a nice page about coding standards and where to being in general: but i have much more experience in hibernate, and i've been developing in java for 3 years. i would like to start going over small problems in jira, maybe to fix them, but i wonder if there are some architecture documentations about clases, packages, where to put what and when, and such matters. where do i begin? (never participated in open source projects before) -- View this message in context: Sent from the Hibernate Dev mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] how can i start contributing to hibernate</header>
    <date>Fri Mar 27 16:32:22 CET 2009</date>
    <body>is the best place to start. Generally we need you to work on issues and attach the patches to the corresponding jira issues as a means of code review and confidence building. Probably a good idea to discuss things here or on the #hibernate-dev channel on the FreeNode IRC network. -- Hibernate.org</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate EntityManager reusing MC facilities</header>
    <date>Fri Mar 27 22:49:19 CET 2009</date>
    <body>I have been chatting with Ales and here is the contract that HEM could rely on to scan entities and DD files. Context: An EntityManagerFactory (EMF) is bootstrapped by the container by passing a PersistenceUnitInfo class Which gives: - the root URL of the PU - the mapping files - the URLs of the jars to scan The container will also pass the MC discovery contract implementation in the contextual Map. If this impl is available in the Map, HEM will go use the MC facilities, if not, it will rely on it's own legacy infrastructure. Here is a proposal for the contract /** * return all packages in the jar matching one of these annotations * if annotationsToLookFor is empty, return all packages */ /** * return all classes in the jar matching one of these annotations * if annotationsToLookFor is empty, return all classes */ /** * return all files in the jar matching one of these file names * if filePatterns is empty, return all files * eg **/*.hbm.xml, META-INF/orm.xml */ Set&amp;lt;[structure containing file name + InputStream]&amp;gt; getFilesInJar(URL Optional contract but would be nice to have: /** * return all files in the classpath (ie PU visibility) matching one of these file names * if filePatterns is empty, return all files * the use case is really exact file name. */ /** return the unqualified JAR name ie customer-model.jar or store.war */</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate EntityManager reusing MC facilities</header>
    <date>Fri Mar 27 23:28:21 CET 2009</date>
    <body>The URL does change from one call to another so the constructor taking a URL won't work here. Set instead of List, yes that makes sense. /** * return all packages in the jar matching one of these annotations * if annotationsToLookFor is empty, return all packages */ /** * return all classes in the jar matching one of these annotations * if annotationsToLookFor is empty, return all classes */ /** * return all files in the jar matching one of these file names * if filePatterns is empty, return all files * eg **/*.hbm.xml, META-INF/orm.xml */ Set&amp;lt;[structure containing file name + InputStream]&amp;gt; getFilesInJar(URL Optional contract but would be nice to have: /** * return all files in the classpath (ie PU visibility) matching one of these file names * if filePatterns is empty, return all files * the use case is really exact file name. */ /** return the unqualified JAR name ie customer-model.jar or store.war */ I have been chatting with Ales and here is the contract that HEM could rely on to scan entities and DD files. Here is a proposal for the contract /** * return all packages in the jar matching one of these annotations * if annotationsToLookFor is empty, return all packages */ /** * return all classes in the jar matching one of these annotations * if annotationsToLookFor is empty, return all classes */ /** * return all files in the jar matching one of these file names * if filePatterns is empty, return all files * eg **/*.hbm.xml, META-INF/orm.xml */ Set&amp;lt;[structure containing file name + InputStream]&amp;gt; getFilesInJar(URL Optional contract but would be nice to have: /** * return all files in the classpath (ie PU visibility) matching one of these file names * if filePatterns is empty, return all files * the use case is really exact file name. */ getFilesInClasspath(URL /** return the unqualified JAR name ie customer-model.jar or store.war */ _______________________________________________ hibernate-dev mailing list -- This message has been scanned for viruses and dangerous content by MailScanner, and is believed to be clean.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [BVAL-RI] Implementing built in constraint	validators</header>
    <date>Mon Feb 02 12:09:30 CET 2009</date>
    <body>Hello Guys, I implemented most constraint validators yesterday and added a patch on JIRA. There was a small bug in the AssertFalse validator, and I fixed it, and added another patch to be used in place of the one attached yesterday. Wasn't able to delete the old attachemnt, since I don't have this authority on the JIRA Regards Alaa Nassef -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [BVAL-RI] Implementing built in constraint	validators</header>
    <date>Mon Feb 02 14:46:44 CET 2009</date>
    <body>Hi, no worries. I applied your patch and also fixed the big. Thanks for the patch. --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [BVAL-RI] Regarding BVAL-90</header>
    <date>Mon Feb 02 12:22:29 CET 2009</date>
    <body>Hello All, What's the status of BVAL-90 (Stop using a properties file for built-in constraints and move to a list in Java)? I'm thinking of implementing it using a static map that's get filled on class loading. I wanted to have a clean implementation using reflection, but can't find a clean solution to get the classes within a package. I'm also thinking of using an enum instead of a map. What do you think? Regards, Alaa Nassef -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [BVAL-RI] Regarding BVAL-90</header>
    <date>Mon Feb 02 12:28:47 CET 2009</date>
    <body>I don't see the need for reflection. Just add them to the map, period. You might want to store the map in the ValidatorFactory instead of a static, not sure.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [BVAL-RI] Regarding BVAL-90</header>
    <date>Mon Feb 02 12:31:06 CET 2009</date>
    <body>Actually I am sure now, you have to store the list in a Map at the ValidatorFactory level because the list of validators can be overridden in XML. Hello All, What's the status of BVAL-90 (Stop using a properties file for built-in constraints and move to a list in Java)? I'm thinking of implementing it using a static map that's get filled on class loading. I wanted to have a clean implementation using reflection, but can't find a clean solution to get the classes within a package. I'm also thinking of using an enum instead of a map. What do you think? Regards, Alaa Nassef _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [BVAL-RI] Regarding BVAL-90</header>
    <date>Mon Feb 02 13:01:23 CET 2009</date>
    <body>OK You might want to store the map in the ValidatorFactory instead of a static, not sure. Hello All, What's the status of BVAL-90 (Stop using a properties file for built-in constraints and move to a list in Java)? I'm thinking of implementing it using a static map that's get filled on class loading. I wanted to have a clean implementation using reflection, but can't find a clean solution to get the classes within a package. I'm also thinking of using an enum instead of a map. What do you think? Regards, Alaa Nassef _______________________________________________ hibernate-dev mailing list _______________________________________________ hibernate-dev mailing list -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [BVAL-RI] Regarding BVAL-90</header>
    <date>Mon Feb 02 14:32:05 CET 2009</date>
    <body>I have a question. When you said to add the map at the ValidatorFactory level, did you mean to add it to ValidatorFactoryImpl? As I can see, getting the validators of built in constraints happens in ConstraintDescriptorImpl, which is used only by the BeanMetaDataImpl. Do I put the map in ConstraintDescriptorImpl, or shall I put it somewhere else? Regards, Alaa Nassef You might want to store the map in the ValidatorFactory instead of a static, not sure. Hello All, What's the status of BVAL-90 (Stop using a properties file for built-in constraints and move to a list in Java)? I'm thinking of implementing it using a static map that's get filled on class loading. I wanted to have a clean implementation using reflection, but can't find a clean solution to get the classes within a package. I'm also thinking of using an enum instead of a map. What do you think? Regards, Alaa Nassef _______________________________________________ hibernate-dev mailing list _______________________________________________ hibernate-dev mailing list -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [BVAL-RI] Regarding BVAL-90</header>
    <date>Mon Feb 02 14:50:50 CET 2009</date>
    <body>Hi, I am actually implementing this as we speak. I need it in order to implement BVAL-99. And yes, it ends up to be a static map. --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [BVAL-RI] Regarding BVAL-90</header>
    <date>Mon Feb 02 15:05:11 CET 2009</date>
    <body>OK. So no need for me to implement it then. Got a couple of meetings, then I'll look at what I can do in the RI Regards, Alaa Nassef On Mon, Feb 2, 2009 at 3:50 PM, Hardy Ferentschik built-in constraints and move to a list in Java)? I'm thinking of implementing it using a static map that's get filled on class loading. I wanted to have a clean implementation using reflection, but can't find a clean solution to get the classes within a package. I'm also thinking of using an enum instead of a map. What do you think? Regards, Alaa Nassef -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [BVAL-RI] Regarding BVAL-90</header>
    <date>Mon Feb 02 15:13:05 CET 2009</date>
    <body>Great. Just to make sure that we don't work on the same things - could you contact the asignee in case you want to work on on an already assigned task? In many cases the person is more than happy to drop a task, but just has to know ;-) In case you start working on an unassinged task make sure to assign it to yourself so that the others know that you are working on it. --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [BVAL-RI] Renamed several constraints</header>
    <date>Mon Feb 02 15:08:16 CET 2009</date>
    <body>Hi all, To follow the naming convention, I renamed the constraint validators for Past, Null and NotNull. I created a JIRA issue for that BVAL-105, and attached the patches -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Do you know of any ASL 2 implementation of...</header>
    <date>Mon Feb 02 23:40:05 CET 2009</date>
    <body>Okay, I've created the project here: The method you're after is TypeUtils.isAssignable.  I'm interested in fleshing out this library in future, keeping the focus on pure type operations.  I'd like to implement full type inference and type capturing in line with the JLS as I've had a requirement for this in the past.  Do let me know if you have any comments or suggestions. Cheers, Mark 2009/1/30 Emmanuel Bernard &amp;lt;&amp;gt;: Cool, I'll aim to create the project as soon as I get a free moment. Extra hands would be appreciated so I can't see a problem with giving you commit access.  Copyright isn't an issue as I work for my own company :) I'll post the URL once it's up there.  Likely to be after the weekend if that's alright? Cheers, Mark &amp;gt;: That's fine, you can go host it on google-code under the ASL 2. That way we can use it as a source level or jar level dependency. It would be nice to get commit access so we can participate in enhancing the support coverage. Jboss.org might have some benefits as a forge but the .org team is very busy at the moment, so creating a new project would be a bit low in priority. Google code is quite nice and clean. BTW before dropping the code, make sure you have the copyright rights (if you developed that for a company, you might have to ask them). Thanks! Emmanuel ASL 2.0 is fine with me.  I was thinking about hosting it somewhere like Google Code since there's a few open-source projects that I've seen which could benefit from it.  Let me know, I can create a project and you can give it a spin. Cheers, Mark &amp;gt;: Cool, that's already a nice start. Let me see if I find something. Would you be OK to contribute it under the ASL 2.0 license to us? I haven't gone into supporting type variables, hence I don't perform type capturing or inference yet, although I would be interested in adding this.  For an example of what is currently implemented, the following are from the tests: Number &amp;lt;: Integer Object &amp;lt;: Integer List&amp;lt;Integer&amp;gt; &amp;lt;: IntegerArrayList Let me know if you find any existing libraries since I use this in my other projects.  If there's nothing out there then open-sourcing this would stop people from having to reinvent the wheel. Cheers, Mark &amp;gt;: If I can't find an other alternative that would surely be of help yes :) Do you know how much of the subtype rules you have implemented? The one that sounded non trivial to me were around detecting that generic are supertypes of others: - containment and equivalence - capture conversion - intersection types - management of bounds (using the language of the JSL) I've written a small utility library that provides methods to work with Types, specifically it contains such a method isAssignable(Type supertype, Type type) that should satisfy your requirements. I've been considering open-sourcing it so would be happy to do so if you were interested? Cheers, Mark &amp;gt;: Specifically a routine like Subtyping I am looking for an ASL 2 / BSD implementation of the subtyping resolution algorithm in Java. I am thinking Harmony might have one. Anybody knows? _______________________________________________ hibernate-dev mailing list _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Do you know of any ASL 2 implementation of...</header>
    <date>Tue Feb 03 21:03:38 CET 2009</date>
    <body>Cool :) We will add jType to the Bean Validation RI Alpha2 (one release after the first). all good. Cool, I'll aim to create the project as soon as I get a free moment. Extra hands would be appreciated so I can't see a problem with giving you commit access.  Copyright isn't an issue as I work for my own company :) I'll post the URL once it's up there.  Likely to be after the weekend if that's alright? Cheers, Mark &amp;gt;: That's fine, you can go host it on google-code under the ASL 2. That way we can use it as a source level or jar level dependency. It would be nice to get commit access so we can participate in enhancing the support coverage. Jboss.org might have some benefits as a forge but the .org team is very busy at the moment, so creating a new project would be a bit low in priority. Google code is quite nice and clean. BTW before dropping the code, make sure you have the copyright rights (if you developed that for a company, you might have to ask them). Thanks! Emmanuel ASL 2.0 is fine with me.  I was thinking about hosting it somewhere like Google Code since there's a few open-source projects that I've seen which could benefit from it.  Let me know, I can create a project and you can give it a spin. Cheers, Mark &amp;gt;: Cool, that's already a nice start. Let me see if I find something. Would you be OK to contribute it under the ASL 2.0 license to us? I haven't gone into supporting type variables, hence I don't perform type capturing or inference yet, although I would be interested in adding this.  For an example of what is currently implemented, the following are from the tests: Number &amp;lt;: Integer Object &amp;lt;: Integer List&amp;lt;Integer&amp;gt; &amp;lt;: IntegerArrayList Let me know if you find any existing libraries since I use this in my other projects.  If there's nothing out there then open- sourcing this would stop people from having to reinvent the wheel. Cheers, Mark &amp;gt;: If I can't find an other alternative that would surely be of help yes :) Do you know how much of the subtype rules you have implemented? The one that sounded non trivial to me were around detecting that generic are supertypes of others: - containment and equivalence - capture conversion - intersection types - management of bounds (using the language of the JSL) I've written a small utility library that provides methods to work with Types, specifically it contains such a method isAssignable(Type supertype, Type type) that should satisfy your requirements. I've been considering open-sourcing it so would be happy to do so if you were interested? Cheers, Mark &amp;gt;: Specifically a routine like Subtyping I am looking for an ASL 2 / BSD implementation of the subtyping resolution algorithm in Java. I am thinking Harmony might have one. Anybody knows? _______________________________________________ hibernate-dev mailing list _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Do you know of any ASL 2 implementation of...</header>
    <date>Tue Feb 03 22:04:26 CET 2009</date>
    <body>Excellent, let me know how you get on. Mark 2009/2/3 Emmanuel Bernard &amp;lt;&amp;gt;: Okay, I've created the project here: The method you're after is TypeUtils.isAssignable.  I'm interested in fleshing out this library in future, keeping the focus on pure type operations.  I'd like to implement full type inference and type capturing in line with the JLS as I've had a requirement for this in the past.  Do let me know if you have any comments or suggestions. Cheers, Mark &amp;gt;: all good. Cool, I'll aim to create the project as soon as I get a free moment. Extra hands would be appreciated so I can't see a problem with giving you commit access.  Copyright isn't an issue as I work for my own company :) I'll post the URL once it's up there.  Likely to be after the weekend if that's alright? Cheers, Mark &amp;gt;: That's fine, you can go host it on google-code under the ASL 2. That way we can use it as a source level or jar level dependency. It would be nice to get commit access so we can participate in enhancing the support coverage. Jboss.org might have some benefits as a forge but the .org team is very busy at the moment, so creating a new project would be a bit low in priority. Google code is quite nice and clean. BTW before dropping the code, make sure you have the copyright rights (if you developed that for a company, you might have to ask them). Thanks! Emmanuel ASL 2.0 is fine with me.  I was thinking about hosting it somewhere like Google Code since there's a few open-source projects that I've seen which could benefit from it.  Let me know, I can create a project and you can give it a spin. Cheers, Mark &amp;gt;: Cool, that's already a nice start. Let me see if I find something. Would you be OK to contribute it under the ASL 2.0 license to us? I haven't gone into supporting type variables, hence I don't perform type capturing or inference yet, although I would be interested in adding this.  For an example of what is currently implemented, the following are from the tests: Number &amp;lt;: Integer Object &amp;lt;: Integer List&amp;lt;Integer&amp;gt; &amp;lt;: IntegerArrayList Let me know if you find any existing libraries since I use this in my other projects.  If there's nothing out there then open-sourcing this would stop people from having to reinvent the wheel. Cheers, Mark &amp;gt;: If I can't find an other alternative that would surely be of help yes :) Do you know how much of the subtype rules you have implemented? The one that sounded non trivial to me were around detecting that generic are supertypes of others: - containment and equivalence - capture conversion - intersection types - management of bounds (using the language of the JSL) I've written a small utility library that provides methods to work with Types, specifically it contains such a method isAssignable(Type supertype, Type type) that should satisfy your requirements. I've been considering open-sourcing it so would be happy to do so if you were interested? Cheers, Mark &amp;gt;: Specifically a routine like Subtyping I am looking for an ASL 2 / BSD implementation of the subtyping resolution algorithm in Java. I am thinking Harmony might have one. Anybody knows? _______________________________________________ hibernate-dev mailing list _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [Bean Validation] Relax property names in	ConstraintValidatorContext</header>
    <date>Mon Feb 09 18:07:12 CET 2009</date>
    <body>Property names passed to used to be limited to existing properties and could only be used if the constraint declaration was on the class-level. Otherwise, an exception was raised. I relaxed this rule as some people came with use cases involving validating property values by navigating properties hosted on the property value. @SafeZipCodeAndCity Here is the new wording Example 2.13. ConstraintValidatorContext interface passed to ConstraintValidator.isValid() /** * Provide contextual data and operation when applying a given constraint validator implementation * * @author Emmanuel Bernard */ /** * Disable default error message and default ConstraintViolation object generation. * Useful to set a different error message or generate an ConstraintViolation based on * a different property * * @see #addError(String) * @see #addError(String, String) */ /** * @return the current unexpanded default message */ /** * Add a new error message. This error message will be interpolated. * If isValid returns false, a ConstraintViolation object will be built per error message * including the default one unless #disableDefaultError() has been called. * Aside from the error message, ConstraintViolation objects generated from such a call * contains the same contextual information (root bean, path and so on) * This method can be called multiple time. One ConstraintViolation instance per * call is created. * * @param message new unexpanded error message */ /** * Add a new error message to a given sub property &amp;lt;code&amp;gt;property&amp;lt;/ code&amp;gt;. * This error message will be interpolated. * If isValid returns false, a ConstraintViolation object will be built * per error message including the default one unless #disableDefaultError() * has been called. * * @param message new unexpanded error message * @param property property name the ConstraintViolation is targeting */ The ConstraintValidatorContext interface allows to redefine the default message error generated when a constraint is not valid. By default, each invalid constraint leads to the generation of one error object represented by a ConstraintViolation object. This object is build from the default error message as defined by the constraint declaration and the context in which the constraint declaration is placed on (bean, property, attribute). The ConstraintValidatorContext methods let the constraint implementation disable the default error object generation and create one or more custom ones. The unexpanded message passed as a parameter is used to build the ConstraintViolation object (the message interpolation operation is applied to it). The property on which the error object is applied is defined as following: if property is not overridden, the current context the constraint is declared on is used (bean or property) if the property is overridden, the current context the constraint is declared on the property passed as a parameter relative to the constraint declaration being evaluated The property can be overridden by calling ConstraintValidatorContext.addError(String, String). -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Maven plugin</header>
    <date>Tue Feb 10 14:57:54 CET 2009</date>
    <body>Hello guys, My IDE is whining about maven-jdocbook-plugin since the beginning of the week now. I added the JBoss repository to my local POM file, but I suggest that it should be added to the SVN. What do you think? -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Maven plugin</header>
    <date>Tue Feb 10 15:06:14 CET 2009</date>
    <body>I think the idea is that you actually add the repository list in your local settings.xml See --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate styled maven site</header>
    <date>Tue Feb 10 15:21:58 CET 2009</date>
    <body>Hi, Now that more and more projects switched to maven, are there any plans to deploy the maven generated site as publicly available documentation? And if so, has anyone worked on a Hibernate style for such a site? --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate styled maven site</header>
    <date>Tue Feb 10 16:42:08 CET 2009</date>
    <body>I've always found the Maven generated sites quite unintuitive. Not as unintuitive as Maven itself though.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate styled maven site</header>
    <date>Tue Feb 10 18:27:12 CET 2009</date>
    <body>I have thought about it some. There are difficulties though in what I actually want to see versus what the maven site plugin actually generates.  I was suggested on #maven that the older site generator (forget the name atm) might be a better fit. Really I wanted to have the generated site be useful as the infrastructure for the distribution bundle... - Steve Ebersole Project Lead Principal Software Engineer JBoss, a division of Red Hat</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate styled maven site</header>
    <date>Tue Feb 10 19:32:42 CET 2009</date>
    <body>What is it you don't like and you couldn't configurate? Would it be possible to use the 'old' site generator? How? I actually like some of the default reports and could imagine that with some custom site structure including for example the generated docbook documentation the maven site could actually work. At least for a simple project as Hibernate Validator. For the multi module Core things might look differently. --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate styled maven site</header>
    <date>Tue Feb 10 23:22:44 CET 2009</date>
    <body>Its been a while since I looked at it.  But from what I recall it was all stuff related to having multiple modules and combining some outputs and not others and where things resided and the links on the combined &amp;quot;landing page&amp;quot;. The reports are independent of the site plugin.  The site plugin simply aggregates outputs from various &amp;quot;reporting&amp;quot; plugins.  You can still run those reporting plugins regardless of whether you then aggregate them with 'site'. - Steve Ebersole Project Lead Principal Software Engineer JBoss, a division of Red Hat</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [Bean Validation] Groups and Group sequence</header>
    <date>Wed Feb 11 14:52:44 CET 2009</date>
    <body>=&amp;gt; my guess is, this is a group of GroupA,GroupB,GroupC,GroupD where GroupA and GroupB must be validated first. I wonder if it would make sence to change this to something like this: In this case the aggregation of groups is always done via inheritance and only the ordering is done via an annotation. The constraint would be that the group must inherit directly or indirectly the classes listed in the sequence parameter. Any thoughts? hum I will need to think harder about that one. not in the mood right now. Give me time. So that's a complex topic :) And it unveiled some underdefined parts in the spec. It also raised more questions than answers. so anyway here we go. Please comment on each case. 1. Can an annotation declaration use a group sequence name? Initially I thought that a sequence was here for the sole purpose of: - redefinining the Default group of a class - a group defined and used at validation time ie validator.validate(object, groupSequenceName) Should we allow a GS to be used in a declaration @GroupSequence(sequence=LightBillable.class, HeavyBillable.class) @NotNull(groups=LightBillable.class) @NotNull(groups=Billable.class) And in this case, should the GS name group be validated in parallel to the actual group sequence constraint. While I don't think it's a great practice to use group sequence names in a constraint declaration, I haven't found a compelling argument against it. WDYT? Likewise 2. Should we allow superinterfaces on GroupSequence definitions? same question, same arguments as 1. 3. When defining sequence between two groups, should their supergroups be naturally ordered? * I can find cases where &amp;quot;inherited&amp;quot; ordering make sense @GroupSequence(sequence=LightBillable.class, HeavyBillable.class) We want Default to be validated before HeavyBillable. * I can find cases where &amp;quot;inherited&amp;quot; ordering is annoying @GroupSequence(Billable.class, Shippable.class) Billable, SafeUser, Default must be before  Shippable, SafeUser, Default which is impossible ( SafeUser befire Default and Default before SafeUser). But realistically, such a constraint would better off be modeled as @GroupSequence(Billable.class, Shippable.class) or @GroupSequence(ValidAndBillable.class, Shippable.class) 4. Should we consider group sequence as orthogonal to inheritance as described by Sebastian @GroupSequence(ValidAndBillable.class, Shippable.class) Pro side: Any circular dependency between group sequences / inheritance is caught by the compiler (though, a sequence incompatibility is not). Con side: @GroupSequence used by classes to override the default sequence will not follow this rule @GroupSequence(Default.class, HeavyUserValidation.class) Comments welcome. Once we answer the question, I will adjust the group formal definition (should be easy) and clarify what group sequence means.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [Bean Validation] Groups and Group sequence</header>
    <date>Fri Feb 13 12:02:44 CET 2009</date>
    <body>On Wed, 11 Feb 2009 14:52:44 +0100, Emmanuel Bernard That was my understanding as well. No. As you say, it's not really a good practise. It just adds complexity which is not really needed. No. I would expect a natural order. I am not sure what you really mean here. Was this discussed on the forum somewhere? --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [Bean Validation] Groups and Group sequence</header>
    <date>Fri Feb 13 12:36:03 CET 2009</date>
    <body>4. Should we consider group sequence as orthogonal to inheritance as described by Sebastian This was discussed in the EG. Essentially the examples I shows ie a group defining a group sequence must also inherit (extends) the groups of the sequence (as a way to homogeneity sequence and inheritance).</body>
  </mail>
  <mail>
    <header>[hibernate-dev] SessionImpl.list(CriteriaImpl criteria) returns an empty list when no implementors exist</header>
    <date>Sat Feb 14 18:29:20 CET 2009</date>
    <body>Hi all, in using hibernate v31final SessionImpl.list(CriteriaImpl criteria), I had an issue where hibernate would return an empty list when no implementors existed for the entity name(I had mistaken deleted the entity from the hibernation configuration file). The confusion arose in that this was be mistaken for a query that would return no rows. In looking at the code, it appears that the results list is always initialized to an empty list rather than null. Likewise, no exception is thrown if the entity does not exists, whereas when using HQL an org.hibernate.hql.ast.QuerySyntaxException exception would be thrown. Opinions on initializing the results list to null or throwing an exception if the implementators exist for the desired entity? Thanks Kevin</body>
  </mail>
  <mail>
    <header>[hibernate-dev] SessionImpl.list(CriteriaImpl criteria) returns	an empty list when no implementors exist</header>
    <date>Mon Feb 16 12:48:34 CET 2009</date>
    <body>you need to explain more specifically what you mean by &amp;quot;if the implementators exists&amp;quot; ? i.e. an example. /max</body>
  </mail>
  <mail>
    <header>[hibernate-dev] SessionImpl.list(CriteriaImpl criteria)	returns an empty list when no implementors exist</header>
    <date>Mon Feb 16 16:18:23 CET 2009</date>
    <body>We could perhaps log.warn like we do for HQL, but throwing an exception is not a good idea imo. - Steve Ebersole Project Lead Principal Software Engineer JBoss, a division of Red Hat</body>
  </mail>
  <mail>
    <header>[hibernate-dev] SessionImpl.list(CriteriaImpl criteria) returns	an empty list when no implementors exist</header>
    <date>Tue Feb 17 19:57:11 CET 2009</date>
    <body>Hi Steve, thanks for the idea. Thoughts on returning null instead of an empty list to differentiate an unsuccessful query versus a successful query that returns no items. Kevin ----- Original Message ----- Cc: Sent: Monday, February 16, 2009 7:18:23 AM GMT -08:00 US/Canada Pacific Subject: Re: [hibernate-dev] SessionImpl.list(CriteriaImpl criteria) returns an empty list when no implementors exist We could perhaps log.warn like we do for HQL, but throwing an exception is not a good idea imo. - Steve Ebersole Project Lead Principal Software Engineer JBoss, a division of Red Hat</body>
  </mail>
  <mail>
    <header>[hibernate-dev] SessionImpl.list(CriteriaImpl criteria)	returns an empty list when no implementors exist</header>
    <date>Tue Feb 17 20:54:36 CET 2009</date>
    <body>first, I want you to understand that hql and criteria both support polymorphic querying.  In other words the thing from which you query does not have to be mapped, and we will instead query from all entity class which implement the named interface or extend from the named class ('from java.lang.Object' and 'from java.lang.Comparable' are both valid queries). So consider this just another restriction on the result set, find all implementers of said interface/class. Now, like I said I am fine with logging a warning in the case where you try to query from a interface/class for which there are no entities which are implementers.  But treating this any differently than a query which returns zero results for other reasons is not valid imo. Note that if this is important enough of a distinction to you you can always perform the checking yourself using org.hibernate.engine.SessionFactoryImplementor#getImplementors So that if I were to try 'from java.lang.Comparable', but ( ( SessionFactoryImplementor ) factory ).getImplementors( java.lang.Comparable.class ) returned an empty array you'd have this situation about whcih you are concerned. - Steve Ebersole Project Lead Principal Software Engineer JBoss, a division of Red Hat</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate Search: configure the LockingFactory</header>
    <date>Mon Feb 16 15:06:27 CET 2009</date>
    <body>Hi all, to solve HSEARCH-284 (Lucene locks left around in application restart/crash) some of them are interesting and I would like to add a configuration option to replace the default one in Hibernate Search. 1) property name: I'm naming the property key &amp;quot;locking_strategy&amp;quot;, scoped for each DirectoryProvider. 2) values: At first I was planning to use the usual design to be able to specify any implementation by specifying the qualified class name, but actually only 4 implementations make sense and if someone really needed the flexibility to implement their own they can define their own DirectoryProvider and use whatever they want. Also 2 of the base Lucene implementations are missing a public no-args constructor, so I would use only simple names: simple -&amp;gt; org.apache.lucene.store.SimpleFSLockFactory native  -&amp;gt; org.apache.lucene.store.NativeFSLockFactory single  -&amp;gt; org.apache.lucene.store.SingleInstanceLockFactory none   -&amp;gt; org.apache.lucene.store.NoLockFactory 3) support for &amp;quot;none&amp;quot;: I don't think we should let the user select something which is not compatible with H.Searche's design, so I am still trying to figure out if the NoLockFactory could be an option in case Search is the only process accessing the index. Currently inside search the IndexReaders/Searchers are read-only, and at most one IndexWriter is using the DP, so the locking strategy could be set to &amp;quot;none&amp;quot; IMHO. opinions? 4) default: The current default is &amp;quot;simple&amp;quot;, which has the problem as reported in HSEARCH-284, so I was puzzled by the idea to define the &amp;quot;native&amp;quot; as the default one to have Search beginners avoid the locking problem, but I am hitting some problems under load testing, so I think the default should stay to &amp;quot;simple&amp;quot; at least for now. Sanne</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate Search: configure the LockingFactory</header>
    <date>Tue Feb 17 10:01:09 CET 2009</date>
    <body>On Mon, 16 Feb 2009 15:06:27 +0100, Sanne Grinovero Is it really useful to be able to configure it per DirectoryProvider? How useful is it to mix the locking strategies between providers? I understand that from a consistency point of view it is the way to go. On the other hand by providing all these options you bet that people will start using &amp;quot;stupid&amp;quot; combinations. What's about a approach similar to &amp;quot;Reader strategy configuration&amp;quot;, where shared and not-shared are basically alias names for the underlying class names. This gives you names for the most common lock factories and you can plug your own strategy. And of course there is the consistency argument ;-) If there is only one single Hibernate Search process running on the machine AND no other process using Lucene natively it should be ok. What are the problems? --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate Search: configure the LockingFactory</header>
    <date>Tue Feb 17 10:23:28 CET 2009</date>
    <body>&amp;gt;: 1) property name: I'm naming the property key &amp;quot;locking_strategy&amp;quot;, scoped for each DirectoryProvider. I'm not really worried about &amp;quot;stupid&amp;quot; combinations as different DPs somebody could use a RAM-DP for something and a FS-DP for something else, and maybe have one favourite on a NFS share.. for each one there are more suitable locking strategies. If you wanted to use only one strategy, then no code change is required as Lucene is reading a system property to define the implementation as you don't define one (and Search is not defining, so you could experiment with it without code changes); so this feature is really to provide the flexibility to have different ones per DP (and make is easy). At first I was planning to use the usual design to be able to specify any implementation by specifying the qualified class name, but actually only 4 implementations make sense and if someone really needed the flexibility to implement their own they can define their own DirectoryProvider and use whatever they want. Also 2 of the base Lucene implementations are missing a public no-args constructor, so I would use only simple names: simple -&amp;gt; org.apache.lucene.store.SimpleFSLockFactory native  -&amp;gt; org.apache.lucene.store.NativeFSLockFactory single  -&amp;gt; org.apache.lucene.store.SingleInstanceLockFactory none   -&amp;gt; org.apache.lucene.store.NoLockFactory Yes that's what I am proposing, the four names above is my proposal of &amp;quot; simple name mapping to factories&amp;quot;, to the implementations listed. 3) support for &amp;quot;none&amp;quot;: I don't think we should let the user select something which is not compatible with H.Searche's design, so I am still trying to figure out if the NoLockFactory could be an option in case Search is the only process accessing the index. Currently inside search the IndexReaders/Searchers are read-only, and at most one IndexWriter is using the DP, so the locking strategy could be set to &amp;quot;none&amp;quot; IMHO. opinions? 4) default: Search beginners avoid the locking problem, but I am hitting some problems under load testing, so I think the default should stay to &amp;quot;simple&amp;quot; at least for now. basically it looks like (IMHO) a bug in Lucene's implementation: it is trying to acquire the lock, if it's locked it tries again - only once - after a second, and then it raises a timeout exception if it fails again; even if the lock has been available most of the time between the two checks. I'll ask on lucene's forums if we could change that; anyway the current 2.4 implementation is I'm still investigating if my stress test was actually a situation that's not occurring normally, we should have only one thread (the writer one) accessing the index, but only in the &amp;quot;one search instance per index&amp;quot; scenario. Sanne</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate Search: configure the LockingFactory</header>
    <date>Tue Feb 17 10:50:17 CET 2009</date>
    <body>On Tue, 17 Feb 2009 10:23:28 +0100, Sanne Grinovero Fair enough. In this case we should definitely stay with 'simple' for now. --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate Search: configure the LockingFactory</header>
    <date>Wed Feb 18 11:21:31 CET 2009</date>
    <body>sounds good hum, does that makes our codebase more complex to support custom LockFactories? I would like this flexibility/ yes, simple names for those that make sense and fqcn for the others. We might also support a &amp;quot;factory&amp;quot; so that impl wo no-arg constructor can be used, but that's an enhancement we can do later if needed. that sounds reasonable but how does that differ from SingleInstanceLockFactory? OK</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate Search: configure the LockingFactory</header>
    <date>Wed Feb 18 11:49:27 CET 2009</date>
    <body>The issue is closed already: I'll add support to create LockFactories by fqcn later, I didn't consider that important at first. answers inline: 2009/2/18 Emmanuel Bernard &amp;lt;&amp;gt;: Hi all, to solve HSEARCH-284 (Lucene locks left around in application restart/crash) I am investigating the differences in all Lucene's LockFactory some of them are interesting and I would like to add a configuration option to replace the default one in Hibernate Search. 1) property name: I'm naming the property key &amp;quot;locking_strategy&amp;quot;, scoped for each DirectoryProvider. 2) values: At first I was planning to use the usual design to be able to specify any implementation by specifying the qualified class name, but actually only 4 implementations make sense and if someone really needed the flexibility to implement their own they can define their own DirectoryProvider and use whatever they want. Also 2 of the base Lucene implementations are missing a public no-args constructor, so I would use only simple names: simple -&amp;gt; org.apache.lucene.store.SimpleFSLockFactory native  -&amp;gt; org.apache.lucene.store.NativeFSLockFactory single  -&amp;gt; org.apache.lucene.store.SingleInstanceLockFactory none   -&amp;gt; org.apache.lucene.store.NoLockFactory I'll add support for both for consistency and because you seem to like them. 3) support for &amp;quot;none&amp;quot;: I don't think we should let the user select something which is not compatible with H.Searche's design, so I am still trying to figure out if the NoLockFactory could be an option in case Search is the only process accessing the index. Currently inside search the IndexReaders/Searchers are read-only, and at most one IndexWriter is using the DP, so the locking strategy could be set to &amp;quot;none&amp;quot; IMHO. opinions? the single instance locking has a java in memory lock, so to protect yourself in case of using several indexwriter/readers on the same index making changes when all running in the same JVM. The &amp;quot;none&amp;quot; doesn't protect at all, so you have to make sure to never open a second indexwriter or use any indexwriter when you are using an indexreader to make changes. Sounds a bit dangerous IMHO but I don't think we should stop people shooting at their own feet. As we are enforcing a single indexwriter and all our indexreaders are readonly since last release, you may want to use it: I think the current design of H.Search doesn't stop us from offering this option. I've added a note in the docs to use it only if you really understand it. 4) default: The current default is &amp;quot;simple&amp;quot;, which has the problem as reported in HSEARCH-284, so I was puzzled by the idea to define the &amp;quot;native&amp;quot; as the default one to have Search beginners avoid the locking problem, but I am hitting some problems under load testing, so I think the default should stay to &amp;quot;simple&amp;quot; at least for now.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate Search: configure the LockingFactory</header>
    <date>Wed Feb 18 15:19:32 CET 2009</date>
    <body>Also 2 of the base Lucene implementations are missing a public no- args constructor, so I would use only simple names: simple -&amp;gt; org.apache.lucene.store.SimpleFSLockFactory native  -&amp;gt; org.apache.lucene.store.NativeFSLockFactory single  -&amp;gt; org.apache.lucene.store.SingleInstanceLockFactory none   -&amp;gt; org.apache.lucene.store.NoLockFactory yes, simple names for those that make sense and fqcn for the others. We might also support a &amp;quot;factory&amp;quot; so that impl wo no-arg constructor can be used, but that's an enhancement we can do later if needed. The Hibernate Search mantra is Keep It Simple, Keep it Extensible. So there is an answer for everyone.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate Search: configure the LockingFactory</header>
    <date>Wed Feb 18 15:24:39 CET 2009</date>
    <body>Well, if you are only using Hibernate Search to access indexes (90% of our user base) and you deploy on one server (80% of our user base), none is a compelling solution right? (that's 70% of deployments :))</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [Bean Validation] @Pattern</header>
    <date>Tue Feb 17 13:26:01 CET 2009</date>
    <body>I had a lot of demands for regexp support and since there is a need for string matching in the built-in constraints... I replaced the bitwise guru flags approach with an enum /** * The annotated String must match the following regular expression. * The regular expression follows the Java regular expression conventions * * Accepts String. * * @author Emmanuel Bernard * */ @Retention(RUNTIME) @Documented /** * regular expression to match */ /** * Flags considered when resolving the regular expression */ /** * error message template */ /** * groups the constraint belongs to */ /** * Possible Regexp flags */ /** * Enables Unix lines mode * @see java.util.regex.Pattern#UNIX_LINES */ UNIX_LINES, /** * Enables case-insensitive matching * @see java.util.regex.Pattern#CASE_INSENSITIVE */ CASE_INSENSITIVE, /** * Permits whitespace and comments in pattern * @see java.util.regex.Pattern#COMMENTS */ COMMENTS, /** * Enables multiline mode * @see java.util.regex.Pattern#MULTILINE */ MULTILINE, /** * Enables dotall mode * @see java.util.regex.Pattern#DOTALL */ DOTALL, /** * Enables Unicode-aware case folding * @see java.util.regex.Pattern#UNICODE_CASE */ UNICODE_CASE, /** * Enables canonical equivalence * @see java.util.regex.Pattern#CANON_EQ */ CANON_EQ,</body>
  </mail>
  <mail>
    <header>[hibernate-dev] hibernate-tools JUnit template</header>
    <date>Wed Feb 18 01:14:15 CET 2009</date>
    <body>Good evening Lords &amp;amp; Ladies: This is a simple .ftl template to generate a trivial JUnit test code. improvements are welcome ;) -------------- next part -------------- An HTML attachment was scrubbed... URL: -------------- next part -------------- A non-text attachment was scrubbed... Name: junit-tool.ftl Type: application/octet-stream Size: 2509 bytes Desc: not available Url :</body>
  </mail>
  <mail>
    <header>[hibernate-dev] hibernate-tools JUnit template</header>
    <date>Wed Feb 18 09:58:09 CET 2009</date>
    <body>Hi, thanks for the template, but it looks *very* system specific so not sure what you want me to comment on ? /max</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Exception model</header>
    <date>Wed Feb 18 10:45:50 CET 2009</date>
    <body>I spent a long time scrutinizing the spec for exception cases. This email list exceptional cases and propose to associate specific exceptions to them or not. Please review and tell me: - if you think I forgot cases that needs additional consideration. - which model you favor (see B) A. EXCEPTION CASES I described the error cases and a fine grained Exception model (see B) and have a few questions see ??? 1. Error report Use for other frameworks to report violation reports ** * Report the result of constraint violations * * @author Emmanuel Bernard */ /** * Creates a constraint violation report * * @param message error message * @param constraintViolations Set of ConstraintViolation */ public ConstraintViolationException(String message, /** * Creates a constraint violation report * * @param constraintViolations Set of ConstraintViolation */ /** * Set of constraint violations reported during a validation * * @return Set of CosntraintViolation */ 2. Execution exceptions Constraint Declaration These can be found a compilation time with an annotation processor or an IDE ???    UnsupportedTypeException or should it be AmbiguousConstraintUsageException More than one ConstraintValidator targeting the same type declared property type property has too many matches UnsupportedTypeException declared property type property has no match ConstraintDefinitionException composition parameter overriding (name, composing constraint or incompatible parameter types) constraint composed of itself Constraint implementation ConstraintInitializationException ???        initialize() must raise a RTE will be wrapped OR should we not wrap UnsupportedTypeException isValid incompatible type (detected by impl) =&amp;gt; same as ConstraintExcecutionException isValid throws a RTE will be wrapped into ConstraintValidatorExecutionException ConstraintCreationException ConstraintValidatorFactory fails with RTE. Wraps it. ???  should we collapse that into a ConstraintExecutionException or even ValidationException Groups Can be checked at built time by an IDE or an AnnotationProcessor GroupDefinitionException cyclic dependency between groups sequences and group inheritance missing group X on a Default group overriding Group sequence name used in a constraint declaration group is not an interface Various IllegalArgumentException if object to validate is null, or empty set? ???    Calls to SPi like MessageInterpolator / TraversableResolver should be wrapped? 3. Bootstrap ProviderNotFoundException cannot find matching provider cannot find any provider ConfigurationException cannot read XML cong more than one XML conf no no-arg constructor on classes described by XML MappingException cannot read XML mapping entity described more than once field/getter described more than once Wrong class / field  / getter name Wrong constraint declaration Wrong constraint definition B. EXCEPTION MODEL We have three approaches: 1. specialize an exception when the application can do something about it In this case all exceptions are ValidationException except ConstraintViolationException 2. specialize exceptions to provide informations to the user ValidationException (root) ConstraintViolationException AmbiguousConstraintUsageException UnsupportedTypeException ConstraintDefinitionException ConstraintInitializationException ConstraintExcecutionException ConstraintCreationException GroupDefinitionException ProviderNotFoundException ConfigurationException MappingException 3. a man in the middle approach with some exception collapsing ValidationException (root) ConstraintViolationException ConstraintDeclarationException (instead of UnsupportedTypeException and AmbiguousConstraintUsageException) ConstraintDefinitionException ConstraintExcecutionException GroupDefinitionException ConfigurationException -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Github not feeling to well today</header>
    <date>Thu May 23 09:54:29 CEST 2013</date>
    <body>careful, we just noticed today that github is not showing the same consistent list of open pull requests to all users. Specifically on Hibernate Search there are two pulls open but Hardy doesn't see them in his UI (and it's not a browser problem). If Hardy tries to to reach the URL directly he gets a 404 on both Search pulls. If Gunnar tries, he can reach one of them but gets a 404 on the other. Both URLs work for me. Hardy merged the second pull from command line as usual, and I could confirm the state of the pull progressed correctly, and received the usual notifications. So nothing seems to be lost, just don't trust the web ui too much. Sanne</body>
  </mail>
  <mail>
    <header>[hibernate-dev] IRC Developer Meeting - 5/23</header>
    <date>Thu May 23 18:08:37 CEST 2013</date>
    <body>Discussed metamodel (5.0) progress, JPA 2.1 testing, Jenkins builds and the Mysterious Case of the Disappearing Sanne... [10:50] &amp;lt;jbott&amp;gt; Meeting ended Thu May 23 15:48:18 2013 UTC. Information about MeetBot at  . (v 0.1.4) [10:50] &amp;lt;jbott&amp;gt; Minutes: [10:50] &amp;lt;jbott&amp;gt; Minutes (text): [10:50] &amp;lt;jbott&amp;gt; Log:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Deprecate org.hibernate.annotations.MapKeyType?</header>
    <date>Fri May 24 01:27:33 CEST 2013</date>
    <body>Can Hibernate-specific MapKeyType be deprecated in 4.x and removed in 5.0? IIUC, JPA MapKeyClass should be used instead. Thanks, Gail</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Deprecate org.hibernate.annotations.MapKeyType?</header>
    <date>Fri May 24 04:04:37 CEST 2013</date>
    <body>MapKeyClass defines the Java type of the map key.  MapKeyType defines the Hibernate type of the map key.  The two are related but not direct replacements.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Deprecate org.hibernate.annotations.MapKeyType?</header>
    <date>Fri May 24 20:08:02 CEST 2013</date>
    <body>Oh, OK. Thanks for clarifying. ----- Original Message -----</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate Search 4.3.0.Beta1 released</header>
    <date>Sat May 25 16:00:51 CEST 2013</date>
    <body>Hi all, it's released and very hot, see all details here: Sanne</body>
  </mail>
  <mail>
    <header>[hibernate-dev] OGM Roadmap</header>
    <date>Mon May 27 08:13:27 CEST 2013</date>
    <body>Hello everyone, Since Hibernate OGM is back with Davide and Gunnar working actively on it, I put in the wiki a roadmap for Hibernate OGM with things we or or less formally discussed in the past. That's (always) a draft and we can discuss priorities. Have a look and let's discuss what you think. Emmanuel</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Release: Hibernate Search 4.3.0.CR1</header>
    <date>Tue May 28 21:36:52 CEST 2013</date>
    <body>We decided to release Hibernate Search 4.3.0.CR1 already: Regards, Sanne</body>
  </mail>
  <mail>
    <header>[hibernate-dev] HSEARCH FacetManager.getFacetingNames()</header>
    <date>Wed May 29 13:10:43 CEST 2013</date>
    <body>Trying to write a slightly generic code listing the facets and exposing them in a UI. I cannot find a way to list the faceting requests applied. Am I missing something? What do you think of adding ... I'd love a less stringy API but I am out of idea. Emmanuel</body>
  </mail>
  <mail>
    <header>[hibernate-dev] HSEARCH FacetManager.getFacetingNames()</header>
    <date>Wed May 29 14:33:36 CEST 2013</date>
    <body>Actually a List might make sense if the order you define faceting is the order you want to expose it. But that's a tiny bit far fetched. I would love for our API to be easily consumed by UIs but it's a tiny bit impractical at the moment. I've identified the name list issue, serializability is a concern (JSON) and Facet.getValue() for range facets is crap to expose. Emmanuel</body>
  </mail>
  <mail>
    <header>[hibernate-dev] HSEARCH FacetManager.getFacetingNames()</header>
    <date>Wed May 29 14:44:26 CEST 2013</date>
    <body>A proposal to get Facet.getValue more usable.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] DocumentBuilder refactoring in Hibernate Search: how to deal (internally) with metadata</header>
    <date>Wed May 29 18:39:49 CEST 2013</date>
    <body>We're starting a series of refactorings in Hibernate Search to improve how we handle the entity mapping to the index; to summarize goals: 1# Expose the Metadata as API We need to expose it because: a - OGM needs to be able to read this metadata to produce appropriate queries b - Advanced users have expressed the need to for things like listing all indexed entities to integrate external tools, code generation, etc.. c - All users (advanced and not) have interest in -at least- logging the field structure to help creating Queries; today people need a debugger or Luke. Personally I think we end up needing this just as an SPI: that might described below. However we expose it, I think we agree this should be a read-only structure built as a second phase after the model is consumed from (annotations / programmatic API / jandex / auto-generated by OGM). It would also be good to keep it &amp;quot;minimal&amp;quot; in terms of memory cost, so to either: - drop references to the source structure - not holding on it at all, building the Metadata on demand (!) (Assuming we can build it from a more obscure internal representation I'll describe next). Whatever the final implementation will actually do to store this metadata, for now the priority is to define the contract for the sake of OGM so I'm not too concerned on the two phase buildup and how references are handled internally - but let's discuss the options already. 2# Better fit Lucene 4 / High performance There are some small performance oriented optimizations that we could for example reusing Field instances and pre-intern all field names. These considerations however are practically mandatory with Lucene 4, as: - the cost of *not* doing as Lucene wants is higher (runtime field creation is more expensive now) - the performance benefit of following the Lucene expectations are significantly higher (takes advantage of several new features) - code is much more complex if we don't do it 3# MutableSearchFactory Let's not forget we also have a MutableSearchFactory to maintain: new entities could be added at any time so if we drop the original metadata we need to be able to build a new (read-only) one from the current state. 4# Finally some cleanups in AbstractDocumentBuilder This class served us well, but has grown too much over time. Things we wanted but where too hard to do so far: - Separate annotation reading from Document building. Separate validity checks too. - It checks for JPA @Id using reflection as it might not be available -&amp;gt; pluggable? reuse them, coupling them to their field DocumentBuilderIndexedEntity specific: - A ConversionContext tracks progress on each field by push/pop a navigation stack to eventually thrown an exception with the correct description. If instead we used a recursive function, there would be no need to track anything. - We had issues with &amp;quot;forgetting&amp;quot; to initialize a collection before trying to index it (HSEARCH-1245, HSEARCH-1240, ..) - We need a reliable way to track which field names are created, and from which bridge they are originating (including custom bridges: HSEARCH-904) - If we could know in advance which properties of the entities need to be initialized for a complete Document to be created we could generate more efficient queries at entity initialization time, or at MassIndexing select time. I think users really would expect such a clever integration with ORM (HSEARCH-1235) == Solution ? == Now let's assume that we can build this as a recursive structure which accepts a generic visitor. One could &amp;quot;visit&amp;quot; the structure with a static collector to: - discover which fields are written - and at the same time collect information about specific options used on them -&amp;gt; query validation -&amp;gt; logging the mapping -&amp;gt; connect to some tooling - split the needed properties graph into optimised loading SQL or auto-generated fetch profiles; ideally taking into account 2nd level cache options from ORM (which means this visitor resides in the hibernate-search-orm module, not engine! so note the dependency inversion). - visit it with a non-static collector to initialize all needed properties of an input Entity - visit it to build a Document of an initialized input Entity - visit it to build something which gets feeded into a non-Lucene output !! (ElasticSearch or Solr client value objects: HSEARCH-1188) .. define the Analyzer mapping,  generate the dynamic boosting values, etc.. each one could be a separate, clean, concern. This would also make it easier to implement a whole crop of feature requests we have about improving the @IndexedEmbedded(includePaths) feature, and the ones I like most: # easy tool integration for inspection # better testability of how we create this metadata # could make a &amp;quot;visualizing&amp;quot; visitor to actually show how a test entity is transformed and make it easier to understand why it's matching a query (or not). Quite related, what does everybody think of this : Support runtime polymorphism on associations (instead of defining the indexed properties based on the returned type) ? Personally I think the we should support that, but it's a significant change. I'm bringing that up again as I suspect it would affect the design of the changes proposed above. This might sound a big change; in fact I agree it's a significant style change but it is rewriting what is defined today in just 3 classes; no doubt we'll get more than a dozen ouf of it, but I think it would be better to handle in the long run, more flexible and potentially more efficient too. Do we all agree on this? In practical terms we'd also need to define how far Hardy wants to go with this, if he wants to deal only with the Metadata API/SPI aspect and then I could apply the rest, or if he wants to try doing it all in one go. I don't think we can start working in parallel on this ;-) [sorry I tried to keep it short.. then I run out of time] Sanne</body>
  </mail>
  <mail>
    <header>[hibernate-dev] DocumentBuilder refactoring in Hibernate Search: how to deal (internally) with metadata</header>
    <date>Thu May 30 10:53:11 CEST 2013</date>
    <body>To me since we have an internal representation for DocumentBuilder to do its runtime job, the user visible model could end up being a flyweight object in front of it exposing thigns the way we want. Whether you create this flyweight structure each time is another question. I am not sure how that requirement fits witht he solution you describe later. We know only one use case for this pluggable mechanism, do we really need it? Do you think it would yield performance improvement? It does not look like an expensive object to create compared to keeping a reference around. What's your reasoning? I'm not entirely following how the recursive method could help you to track the context. Upon failure, You would catch inner call exceptions and add your context information each time and rethrow? Does that mean the entity graph (data) is really traversed twice, once to init the boundaries and a second time to build the document? This one is a really interesting idea. What's your argument for efficiency? I have always been a skeptic of the visitor pattern. I know you have been drinking it over and over for the parser but to me it's a pattern that: - makes the big picture harder to grasp - extremely difficult to debug if some generic behavior is different that what you expect - tend to create visitors with state (machines) because contextual information ends up being needed anyways In our case, there might be correlation between booting and the specific structure, or analyzer and bridges (making that up). AFAIU from the visitor pattern, you need to merge those correlated works in a single structure. I like the idea of a visitor to make non Lucene backend easier but the fact that I don't grok code using the visitor pattern is of concern to me. I can be convinced I imagine but I'll need arguments.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] DocumentBuilder refactoring in Hibernate Search: how to deal (internally) with metadata</header>
    <date>Thu May 30 14:00:48 CEST 2013</date>
    <body>I'm wondering how many node types there will be and how deep the hierarchy actually is. If it is basically only something like BeanDescriptor and PropertyDescriptor, is it really worth a visitor pattern? In which situation would one get a collection of mixed descriptor types where one needs to dispatch type-specific logic? On a more general note, would it make sense to have a joint meta model for the different projects such as OGM and Search? This might help avoiding to write and maintain redundant code (e.g. merging meta data from different sources) and also might be beneficial for the sake of memory. Such a common model might have generic node types, to which the different clients could attach specific payload. Note that I'm not sure whether that's a sound idea, just throwing it out :) --Gunnar</body>
  </mail>
  <mail>
    <header>[hibernate-dev] DocumentBuilder refactoring in Hibernate	Search: how to deal (internally) with metadata</header>
    <date>Thu May 30 14:55:10 CEST 2013</date>
    <body>Right, my thinking as well. No idea what model OGM needs, but I have a hard time seeing project specific meta data being shared. The information it provides it per definition very specific to the given project. That sounds a little over engineered to me. Maybe if I would see some prototype code. But I am skeptical about this. Sure. np --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] DocumentBuilder refactoring in Hibernate Search: how to deal (internally) with metadata</header>
    <date>Thu May 30 15:13:38 CEST 2013</date>
    <body>Right the metadata itself is project specific (that's what I meant by &amp;quot;payload&amp;quot;), but the structure of the descriptor tree might be the same, possibly allowing for re-use of code for model merges, model traversal (if there is such thing) etc.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] DocumentBuilder refactoring in Hibernate	Search: how to deal (internally) with metadata</header>
    <date>Thu May 30 14:51:04 CEST 2013</date>
    <body>Right. That's my thinking as well. - Separate annotation reading from Document building. Separate validity checks too. - It checks for JPA @Id using reflection as it might not be available -&amp;gt; pluggable? Which is? how far Hardy wants to go with this, if he wants to deal only with the Metadata API/SPI aspect and then I could apply the rest, or if he wants to try doing it all in one go. I don't think we can start working in parallel on this ;-) I aslo don't think anyone should work on the DocumentBuilders while I am doing work on them. I would just be a merging hell. Other than that I was planning to tackle tow things. First the metadata API and then the idea of decoupling the parsing of annotations from the rest of the DocumentBuilder code. --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] DocumentBuilder refactoring in Hibernate Search: how to deal (internally) with metadata</header>
    <date>Thu May 30 15:02:58 CEST 2013</date>
    <body>Consider properties marked with JPA's @Id as @DocumentId. I mean JPA is the only current use case.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] DocumentBuilder refactoring in Hibernate	Search: how to deal (internally) with metadata</header>
    <date>Thu May 30 14:32:02 CEST 2013</date>
    <body>Gee, that's an email ;-) Before getting too much into it I think it would be useful to talk about what I am actually doing. I am trying to expose a meta data API for Search which allows users to determine which entities are indexed and which fields are available for each entity. I am trying to do a similar approach to Bean Validation where all metadata is exposed via descriptors. The entry point into the API is the SearchFactory. I am basically thinking about something like this (feedback welcome): /** * Top level descriptor of the metadata API. Giving access to the indexing information for a single entity. * * @author Hardy Ferentschik */ /** */ /** * @return Returns the class boost value, 1 being the default. */ /** * @return Returns the names of the indexes instances of the entity are indexed into. Generally this will *         be just one index, however, when sharding is applied multiple indexes per entity can be used. */ /** */ // TODO does this include the id field descriptor or should that be a separate descriptor? // TODO should OBJECT_CLASS be considered? /** * Metadata related to a single indexed field. * * @author Hardy Ferentschik */ /** * * @return Returns the field name for this index property */ /** *         this field. */ /** */ /** *         field */ /** *         field */ /** * @return Returns the boost value for this field. 1 being the default value. */ /** */ /** * @return Returns the field bridge instance used to convert the property value into a string based field value */ /** */ On top of this I am planning to add (addressing HSEARCH-903): The latter I need to allow custom bridges to report which fields they add. Most of the information I need to implement all this is in AbstractDocumentBuilder.PropertiesMetadata. The plan so far was to extract the information from there and while working in this making PropertiesMetadata a proper object (instead of the parallel arrays thingy). Maybe some other minor refactorings along the way. I was not going to touch the processing of annotations for now. As discussed that, there we would need yet another level of abstraction (similar to EntitySource in ORM or BeanConfiguration in HV). Something which can be populated by either annotation processing (be it Jandex or reflection) or by the the programmatic API. Different story though. For what I can tell I don't need a Visitor pattern for what I have planned to do so far. If you think I am on the wrong track let me know and let me see the light. One thing I was wondering about after your email, however, was whether the API needs to provide information which field/getter/class is responsible for creating a given Lucene Document Field. Do we have a use case for that? @gunnar, does the API above address your needs? -1 why SPI. I think this is a very general purpose API useful for any users. For example, you could image to build auto field suggesting query field which makes suggestions on which fields you can search on (a little like the Jira queries). In this case you could get the available fields via this API. Just to mention one use case. +1 Given that I am going to build it from required runtime information it could for sure be lazily loaded. However, right now I think I will just go for the straight forward approach. Good point +1 See above. I want to address this in another issue. We will need another intermediate model for that. With this in place we can remove commons-annotaiotns and easily consume a Jandex index as well Not sure what you mean here. That's just a very specific JPA/ORM based use case. +1 See above and the FieldNameReportingBridge I am suggesting that's where you loose me. I think I am a little like Emmanuel here. Where does a Visitor pattern help here? --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] DocumentBuilder refactoring in Hibernate Search: how to deal (internally) with metadata</header>
    <date>Fri May 31 10:51:15 CEST 2013</date>
    <body>Hi Hardy, great proposal for the meta-data API. I've added some comments inline. --Gunnar I find the name &amp;quot;IndexedEntityDescriptor&amp;quot; in conjunction with isIndexed() potentially returning &amp;quot;false&amp;quot; a bit irritating. Maybe just EntityDescriptor? Or SearchableEntityDescriptor? Maybe return an enum if this can potentially be more than a simple yes/no? I don't know how likely that is, but an enum would allow for evolvement. Would something like Set&amp;lt;IndexDescriptor&amp;gt; getIndexes() make sense? At least for my case I think it would be easier if this contained all field descriptors so I can handle them uniformly. Maybe FieldDescriptor#isId() or if there are more id specific things something like this could be added: I'd call it just &amp;quot;getName()&amp;quot;, not repeating the type's name. Not better a Set? Returning Iterable makes it harder for users (e.g. no contains()) and also hides set vs. list semantics. +1 Yes, from what I'm aware of atm. I think so.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] DocumentBuilder refactoring in Hibernate	Search: how to deal (internally) with metadata</header>
    <date>Fri May 31 11:13:23 CEST 2013</date>
    <body>I thought about EntityDescriptor, but found it to generic. Somehow I wanted to have the connection to Search/Lucene. SearchableEntityDescriptor implies that I can search something in the descriptor. I am not 100% happy about IndexedEntityDescriptor either, but for now I still think it is the best. Not sure this is needed. I don't foresee that this would change. That's an interesting thought. In fact I was wondering whether more index specific information is needed. On the other hand, I was thinking thinking that as long as you have the index name you can always get more information via accessing the IndexManager directly - SearchFactoryImplementor.getAllIndexesManager.getIndexManager(String indexName) Now that you bring it up, I am wondering, however, if we could expose thinks like directory type via a IndexDescriptor. sounds good sure ok +1 thanks for the great feedback :-) --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] DocumentBuilder refactoring in Hibernate	Search: how to deal (internally) with metadata</header>
    <date>Fri May 31 11:17:00 CEST 2013</date>
    <body>Would something like Set&amp;lt;IndexDescriptor&amp;gt; getIndexes() make sense? Forgot to mention that I really dislike getAllIndexesManager(). I would love to rename it to getIndexManagers() or getIndexManagerHolder(). Might be something for Search 5!? --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] DocumentBuilder refactoring in Hibernate Search: how to deal (internally) with metadata</header>
    <date>Fri May 31 13:23:23 CEST 2013</date>
    <body>I'd say deprecate the existing one and create getIndexManagerHolder() right now. No need to wait for 5.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] DocumentBuilder refactoring in Hibernate	Search: how to deal (internally) with metadata</header>
    <date>Fri May 31 13:50:33 CEST 2013</date>
    <body>Might be something for Search 5!? Sounds good to me --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] DocumentBuilder refactoring in Hibernate Search: how to deal (internally) with metadata</header>
    <date>Fri May 31 14:14:19 CEST 2013</date>
    <body>Ah, I meant it as in &amp;quot;descriptor for a searchable entity&amp;quot; but I see that this can be mistaken. Maybe a value such as HAS_INDEXED_SUBTYPES might make sense at some point? I'm not sure whether that's needed either, but in contrast to a boolean an enum (with initially just two values) would allow for future additions, should that be required.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] IRC Developer Meeting - 5/30</header>
    <date>Thu May 30 17:52:06 CEST 2013</date>
    <body>Today we discussed the work to update and redesign the query parser and progress on metamodel (5.0) work... [10:49] &amp;lt;jbott&amp;gt; Meeting ended Thu May 30 15:46:47 2013 UTC. Information about MeetBot at  . (v 0.1.4) [10:49] &amp;lt;jbott&amp;gt; Minutes: [10:49] &amp;lt;jbott&amp;gt; Minutes (text): [10:49] &amp;lt;jbott&amp;gt; Log:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] HSEARCH Faceting and facet counts</header>
    <date>Fri May 31 23:32:38 CEST 2013</date>
    <body>I know we had a debate but I can't seem to find any detail in the documentation about how facet selection influences the facet counts. In my demo, the facet count is applied after the selection. ie if I do a $100', the count displayed on '&amp;gt; $100' = 0 which is very weird from a use point of view. That seems to be the expected behavior according to but my first reaction was that it was a bug. Should we clarify that in the documentation? And implement the more natural way? Emmanuel</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate Validator 4.0.0 Alpha 2</header>
    <date>Tue Mar 03 16:53:45 CET 2009</date>
    <body>Hi, Hibernate Validator 4.0.0 Alpha 2 is out. More info on in.relation.to - --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Optimization of db queries for many-to-one	associtation by unique key</header>
    <date>Wed Mar 04 09:56:34 CET 2009</date>
    <body>Hello, I want to suggest one optimization that significantly reduces number of DB queries in certain cases. First about the problem: We have two entities: EMany, EOne (mapped to tables TMANY, TONE). These entities are associated using @ManyToOne on two columns (not the primary key). When we select EMany, hibernate generates left outer join, similar to: select TMANY.ID, TMANY.a, TMANY.b, TONE.ID, TONE.x, TONE.y from TMANY left otuer TONE on TMANY.a = TONE.x, TMANY.b = TONE.y In case if TONE record is present in DB, the outer join returns its columns and hibernate creates both EMany and EOne objects from the same result set. But in case if TONE record is absent in DB, outer joint returns NULLs for TONE columns, and hibernate tries to resolve EOne entities by additional queries: This query is performed as many times as EMany records were selected, and always return nothing. The proposal is to not perform this additional query in case if result set have primary key column TONE.ID = NULL; we can be sure there is no DB record if primary key column is NULL. I've tried to fix this in the EntytyType.java, seems working. My code is in the attach (the diff is against the latest release hibernate-3.3.1.ga) Best regards, - Anton -------------- next part -------------- A non-text attachment was scrubbed... Name: EntytyType.java.diff Type: application/octet-stream Size: 1613 bytes Desc: not available Url :</body>
  </mail>
  <mail>
    <header>[hibernate-dev] How do we map one to one relationship</header>
    <date>Wed Mar 04 11:00:03 CET 2009</date>
    <body>Hi, It is only some conceptual problem: can we use two many-to-one mapping on both side of the two classes in an one-to-one relationship? -Revv -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [Bean Validation] @Max / @Min as double instead	of long</header>
    <date>Thu Mar 05 00:49:23 CET 2009</date>
    <body>[Follow up with Sebastian] Well good point and frankly I do not know :) 1. do we support float and double for @Min / @Max? 2. if 1 is yes, I'd be inclined to say the value should be double but that's not fully automatic. PS: I don't think the issue is addressable per se, it has to be understood by users. Not sure what the correct word is, might be fractional part vs integer part. We are doing comparison so say @Max(2.3d) applied on 2.2999999999999997d Also I am comparing a long with it's double equivalent System.out.println(new BigDecimal(&amp;quot;&amp;quot;+2.2999999999999997d).compareTo( System.out.println( new BigDecimal(9223372036854775807l).compareTo(new Result false false false Not a pleasant surprise Yepp, I am aware of these rounding errors, however I think this is mainly a problem if you are doing float/double based mathematical operations. We are &amp;quot;only&amp;quot; using the value as a reference. The alternative would be to have a separate long/int attribute to specify the value after the decimal point (what's the correct Engl. word for this btw.?). This article scares me That would make comparison just unreliable. Still thinking it's a good idea? Sounds good, in OVal we are also using double. values are of type long. Someone asked to move to double. What do you think? values are of type long. Someone asked to move to double. What do you think? Kind of makes sense, since we allow to put @Min and @max onto decimal fields. Are there any disadvantages or problems with moving to double?</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [Bean Validation] @Max / @Min as double instead 	of long</header>
    <date>Thu Mar 05 01:14:48 CET 2009</date>
    <body>How would you go about supporting @Max / @Min for java.math.BigDecimal ? These would be more useful, since think a lot of this sort of validation is intended to fulfill business rules and business math requires exact (not floating point) math. And even in situations you use floating point math, the input and state should be probably a BigDecimal value but internally calculations could be done (for sake of expedience) using a double conversion. I would probably create a separate @MaxDouble and @MinDouble annotation, if at all, but I wouldn't feel easy suggesting users build constraints using floating point comparisons.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [Bean Validation] @Max / @Min as double instead	of long</header>
    <date>Thu Mar 05 01:17:22 CET 2009</date>
    <body>Unfortunately, you can't support Big* as they are not expressible in annotations does not compile. [Follow up with Sebastian] Well good point and frankly I do not know :) 1. do we support float and double for @Min / @Max? 2. if 1 is yes, I'd be inclined to say the value should be double but that's not fully automatic.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [Bean Validation] @Max / @Min as double instead	of long</header>
    <date>Thu Mar 05 01:20:14 CET 2009</date>
    <body>I mean we could but we would need to rely on the string representation String value() @Max(&amp;quot;12.5&amp;quot;) [Follow up with Sebastian] Well good point and frankly I do not know :) 1. do we support float and double for @Min / @Max? 2. if 1 is yes, I'd be inclined to say the value should be double but that's not fully automatic. How would you go about supporting @Max / @Min for java.math.BigDecimal ? These would be more useful, since think a lot of this sort of validation is intended to fulfill business rules and business math requires exact (not floating point) math. And even in situations you use floating point math, the input and state should be probably a BigDecimal value but internally calculations could be done (for sake of expedience) using a double conversion. I would probably create a separate @MaxDouble and @MinDouble annotation, if at all, but I wouldn't feel easy suggesting users build constraints using floating point comparisons.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [Bean Validation] @Max / @Min as double instead 	of long</header>
    <date>Thu Mar 05 09:06:51 CET 2009</date>
    <body>Using the String value could be a good idea also for double, not very clean but safe. 2009/3/5 Emmanuel Bernard &amp;lt;&amp;gt;: Unfortunately, you can't support Big* as they are not expressible in annotations does not compile. [Follow up with Sebastian] Well good point and frankly I do not know :) 1. do we support float and double for @Min / @Max? 2. if 1 is yes, I'd be inclined to say the value should be double but that's not fully automatic. How would you go about supporting @Max / @Min for java.math.BigDecimal ? These would be more useful, since think a lot of this sort of validation is intended to fulfill business rules and business math requires exact (not floating point) math. And even in situations you use floating point math, the input and state should be probably a BigDecimal value but internally calculations could be done (for sake of expedience) using a double conversion. I would probably create a separate @MaxDouble and @MinDouble annotation, if at all, but I wouldn't feel easy suggesting users build constraints using floating point comparisons.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [Bean Validation] @Max / @Min as double instead 	of long</header>
    <date>Thu Mar 05 10:30:49 CET 2009</date>
    <body>There's very few domains where you want to be validating user input and storing it as a double. For reasons you talked about and also just for returning back what the user typed in a form, for instance, doubles aren't user friendly. Thus, I don't see why validating a double should be necessarily supported. Most developers people don't understand floating point very well, and your average user is unlikely to know about rounding errors and inexact representation, etc. In my original question, I was considering validation cases when you are using a BigDecimal. The common use case is validating a column from a database. Databases columns most often use exact representations of decimal numbers, for obvious reasons when working with money. There, you don't want to be storing data in doubles! In any case, I would assume you'd want to indicate something similar to: @Max(&amp;quot;12.5&amp;quot;) Since the BigDecimal and BigInteger have String constructors that are well defined, a String representation seems fine. There's other restrictions you may want to make as well. For instance, you may want to restrict values to at most N decimal places or significant digits, i.e. precision. This is useful in scientific applications. How might you represent that?</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [Bean Validation] @Max / @Min as double instead	of long</header>
    <date>Thu Mar 05 11:20:43 CET 2009</date>
    <body>The string representation is probably less intuative though, especially for int/Integer/long/Long. And of course it is prone typos. Is this not covererd by @Digits? --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] HHH-3225 is hitting Hibernate Search</header>
    <date>Fri Mar 06 01:14:12 CET 2009</date>
    <body>Steve, any chance you could look at this one, it seems to hit HSearch users on a regular basis.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] HHH-3225 is hitting Hibernate Search</header>
    <date>Fri Mar 06 04:54:08 CET 2009</date>
    <body>Is this somehow different than the &amp;quot;attempt to load stuff into the PC during flush&amp;quot; scenarios I see in any of these related issues? - Steve Ebersole Project Lead Principal Software Engineer JBoss, a division of Red Hat</body>
  </mail>
  <mail>
    <header>[hibernate-dev] HHH-3225 is hitting Hibernate Search</header>
    <date>Fri Mar 06 15:07:52 CET 2009</date>
    <body>Ahhh In theory it should not as Hibernate Search reads data in the beforeCompletion phase. Unless people do not apply changes in a transaction in which case we need to execute the read in the post* event. We will check whether or not people use surrounding transactions (Hibernate aware Tx either through JTA or via the direct Hibernate Transaction API). Alternatively, is it possible to move the post* event after the flush? Or create noew events for that? That would solve everybody's issue. Emmanuel Steve, any chance you could look at this one, it seems to hit HSearch users on a regular basis. _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] HHH-3225 is hitting Hibernate Search</header>
    <date>Fri Mar 06 16:15:41 CET 2009</date>
    <body>Not sure what you mean by your &amp;quot;In theory it should not&amp;quot;...  The very nature of @PostUpdate is that it is going to be getting called during a flush cycle... ---- wrt &amp;quot;is it possible to move the post* event after the flush?&amp;quot;... There are really 2 answers. 1) According to the JPA spec, can we do this?  The quote from the current spec says: The PreUpdate and PostUpdate callbacks occur before and after the database update operations to entity data respectively. These database operations may occur at the time the entity state is updated or they may occur at the time state is flushed to the database (which may be at the end of the transaction). I don't really see anything there that discusses the time-relationship between the SQL UPDATE execution and the @PostUpdate callback other than the fact that (obviously) @PostUpdate callback should come after the SQL UPDATE is issued; but it does not seem to limit *how long after*.  So I think this is OK from the perspective of the spec. 2) Can Hibernate be changed to do this?  Well AnythingIsPossible in programming, so I guess the question really is *should* we change Hibernate to do this.  My main concern with this change is the extra queueing it would require and the corollary memory requirements.  What happens right now is that those callbacks are executed during the action (org.hibernate.action.Executable) execution.  Flush puts them into a queue of actions (org.hibernate.engine.ActionQueue), from which they are removed as they are executed.  We decided to put the post callbacks in the actions themselves for assurance-of-execution as well as encapsulation purposes, which I think are both still worthwhile.  What I could see as a potential solution would be to do something like we do for Actions which have &amp;quot;after transaction&amp;quot; tasks to perform: The &amp;quot;executions&amp;quot; list here is a queue of actions which we need to keep around for later.  I can see something like that in conjunction with a method on ActionQueue to process that internal 'callbacks' queue after the entire flush is complete.  Note that this does not address @PreUpdate. We can investigate that though and see what we are talking about in specific. - Steve Ebersole Project Lead Principal Software Engineer JBoss, a division of Red Hat</body>
  </mail>
  <mail>
    <header>[hibernate-dev] HHH-3225 is hitting Hibernate Search</header>
    <date>Sat Mar 07 13:14:30 CET 2009</date>
    <body>Hi, I've built a testcase for HSEARCH-178 (the loading collections in flush issue). It succeeds when using a transaction, and fails with AssertionFailure when not using one. I've noticed that people reporting this problem (among others ) actually do have spring and the stacktrace is showing explicit calls to flush(). (I don't remember if I've seen somebody with this problem without spring) Generally speaking, should failing testcases be committed? regards, Sanne 2009/3/6 Steve Ebersole &amp;lt;&amp;gt;: Ahhh In theory it should not as Hibernate Search reads data in the beforeCompletion phase. Unless people do not apply changes in a transaction in which case we need to execute the read in the post* event. We will check whether or not people use surrounding transactions (Hibernate aware Tx either through JTA or via the direct Hibernate Transaction API). Alternatively, is it possible to move the post* event after the flush? Or create noew events for that? That would solve everybody's issue. Emmanuel &amp;gt; Is this somehow different than the &amp;quot;attempt to load stuff into the PC &amp;gt; during flush&amp;quot; scenarios I see in any of these related issues? &amp;gt; - &amp;gt; Steve Ebersole &amp;gt; Project Lead &amp;gt; Principal Software Engineer &amp;gt; JBoss, a division of Red Hat &amp;gt;&amp;gt; Steve, any chance you could look at this one, it seems to hit HSearch &amp;gt;&amp;gt; users on a regular basis. &amp;gt;&amp;gt; _______________________________________________ &amp;gt;&amp;gt; hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] HHH-3225 is hitting Hibernate Search</header>
    <date>Sat Mar 07 16:00:49 CET 2009</date>
    <body>We discussed the issue with Sanne and for Hibernate Search we have a workaround solution that does not penalize Hibernate Core. This solution can be applied by everybody but it's not the easiest thing on Earth. The idea is to queue as you said but inside custom event listeners. In our case some Post* event listeners. This queue is &amp;quot;flushed&amp;quot; in a FlushEventListener. This new flush event listener must be registered *after* the default FlushEventListener. All this does not require Hibernate Core change and requires minimal change to the Hibernate Search code and architecture. Ahhh In theory it should not as Hibernate Search reads data in the beforeCompletion phase. Unless people do not apply changes in a transaction in which case we need to execute the read in the post* event. We will check whether or not people use surrounding transactions (Hibernate aware Tx either through JTA or via the direct Hibernate Transaction API). Alternatively, is it possible to move the post* event after the flush? Or create noew events for that? That would solve everybody's issue. Emmanuel Is this somehow different than the &amp;quot;attempt to load stuff into the PC during flush&amp;quot; scenarios I see in any of these related issues? - Steve Ebersole Project Lead Principal Software Engineer JBoss, a division of Red Hat Steve, any chance you could look at this one, it seems to hit HSearch users on a regular basis. _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] HHH-3225 is hitting Hibernate Search</header>
    <date>Fri Mar 13 22:54:15 CET 2009</date>
    <body>Hi, about this issue (HSEARCH-178) I've implemented a patch following your directions and your idea is working very well, but I'm having some trouble about the configuration of listeners. An additional flush listener is needed; I've patched the autoregistration but people not using annotations will have to specify both DefaultFlushEventListener and the new IndexWorkFlushEventListener in their configuration. I've been able to specify the pair of listeners using programmatic configuration and using hibernate.cfg.xml but is this also possible with hibernate.properties and persistence.xml ? I couldn't find any docs or examples to register two event listeners for the same event in JPA, I'm wondering if instead of adding a listener I should not extend or wrap the DefaultFlushEventListener so to have only one listener? Would this work for JPA also or should I have to extend the EJB3FlushEventListener instead? I see it's different. In case the JPA listener should be different than the hibernate version, how can I detect the listener I should register in the EventListenerRegister autoregistration routine? To be backwards-compatible with our own configuration I've slightly modified the patch to work as the old way (loading collections in flush) when the listener is not found; a warning is logged saying the listener should be registered. hope we can fix this, Sanne 2009/3/7 Emmanuel Bernard &amp;lt;&amp;gt;: Not sure what you mean by your &amp;quot;In theory it should not&amp;quot;... &amp;#160;The very nature of @PostUpdate is that it is going to be getting called during a flush cycle... ---- wrt &amp;quot;is it possible to move the post* event after the flush?&amp;quot;... There are really 2 answers. 1) According to the JPA spec, can we do this? &amp;#160;The quote from the current spec says: The PreUpdate and PostUpdate callbacks occur before and after the database update operations to entity data respectively. These database operations may occur at the time the entity state is updated or they may occur at the time state is flushed to the database (which may be at the end of the transaction). I don't really see anything there that discusses the time-relationship between the SQL UPDATE execution and the @PostUpdate callback other than the fact that (obviously) @PostUpdate callback should come after the SQL UPDATE is issued; but it does not seem to limit *how long after*. &amp;#160;So I think this is OK from the perspective of the spec. 2) Can Hibernate be changed to do this? &amp;#160;Well AnythingIsPossible in programming, so I guess the question really is *should* we change Hibernate to do this. &amp;#160;My main concern with this change is the extra queueing it would require and the corollary memory requirements. &amp;#160;What happens right now is that those callbacks are executed during the action (org.hibernate.action.Executable) execution. &amp;#160;Flush puts them into a queue of actions (org.hibernate.engine.ActionQueue), from which they are removed as they are executed. &amp;#160;We decided to put the post callbacks in the actions themselves for assurance-of-execution as well as encapsulation purposes, which I think are both still worthwhile. &amp;#160;What I could see as a potential solution would be to do something like we do for Actions which have &amp;quot;after transaction&amp;quot; tasks to perform: The &amp;quot;executions&amp;quot; list here is a queue of actions which we need to keep around for later. &amp;#160;I can see something like that in conjunction with a method on ActionQueue to process that internal 'callbacks' queue after the entire flush is complete. &amp;#160;Note that this does not address @PreUpdate. We can investigate that though and see what we are talking about in specific. - Steve Ebersole Project Lead Principal Software Engineer JBoss, a division of Red Hat Ahhh In theory it should not as Hibernate Search reads data in the beforeCompletion phase. Unless people do not apply changes in a transaction in which case we need to execute the read in the post* event. We will check whether or not people use surrounding transactions (Hibernate aware Tx either through JTA or via the direct Hibernate Transaction API). Alternatively, is it possible to move the post* event after the flush? Or create noew events for that? That would solve everybody's issue. Emmanuel Is this somehow different than the &amp;quot;attempt to load stuff into the PC during flush&amp;quot; scenarios I see in any of these related issues? - Steve Ebersole Project Lead Principal Software Engineer JBoss, a division of Red Hat Steve, any chance you could look at this one, it seems to hit HSearch users on a regular basis. _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] HHH-3225 is hitting Hibernate Search</header>
    <date>Fri Mar 13 23:18:32 CET 2009</date>
    <body>hello Cool yes. Actually you might have to listen to both flush and auto-flush. no yes add the property hibernate.ejb.event.flush = org.hibernate.ejb.event.EJB3FlushEventListener, o.h.s.e. IndexWorkFlushEventListener I don't like the idea, we introduce arrays of event listeners for that purpose. Yes you would need a different one or different two because of (EJB3AutoFlushEventListener). so not a good idea :) Another good reason why it's a bad idea. I don't quite understand why, the new EventListenerREgister will be bundled with the IndexWork Listener always right? What backward compatible mode do you have? BTW, you should put a warning in the log when this event listener is used. &amp;quot;Applying change to the full-text index before transaction completion. Please use a Hibernate aware transaction (eg org.hibernate.Transaction, javax.persistence.EntityTransaction, JTA We discussed the issue with Sanne and for Hibernate Search we have a workaround solution that does not penalize Hibernate Core. This solution can be applied by everybody but it's not the easiest thing on Earth. The idea is to queue as you said but inside custom event listeners. In our case some Post* event listeners. This queue is &amp;quot;flushed&amp;quot; in a FlushEventListener. This new flush event listener must be registered *after* the default FlushEventListener. All this does not require Hibernate Core change and requires minimal change to the Hibernate Search code and architecture. Not sure what you mean by your &amp;quot;In theory it should not&amp;quot;...  The very nature of @PostUpdate is that it is going to be getting called during a flush cycle... ---- wrt &amp;quot;is it possible to move the post* event after the flush?&amp;quot;... There are really 2 answers. 1) According to the JPA spec, can we do this?  The quote from the current spec says: The PreUpdate and PostUpdate callbacks occur before and after the database update operations to entity data respectively. These database operations may occur at the time the entity state is updated or they may occur at the time state is flushed to the database (which may be at the end of the transaction). I don't really see anything there that discusses the time- relationship between the SQL UPDATE execution and the @PostUpdate callback other than the fact that (obviously) @PostUpdate callback should come after the SQL UPDATE is issued; but it does not seem to limit *how long after*. So I think this is OK from the perspective of the spec. 2) Can Hibernate be changed to do this?  Well AnythingIsPossible in programming, so I guess the question really is *should* we change Hibernate to do this.  My main concern with this change is the extra queueing it would require and the corollary memory requirements. What happens right now is that those callbacks are executed during the action (org.hibernate.action.Executable) execution.  Flush puts them into a queue of actions (org.hibernate.engine.ActionQueue), from which they are removed as they are executed.  We decided to put the post callbacks in the actions themselves for assurance-of-execution as well as encapsulation purposes, which I think are both still worthwhile. What I could see as a potential solution would be to do something like we do for Actions which have &amp;quot;after transaction&amp;quot; tasks to perform: The &amp;quot;executions&amp;quot; list here is a queue of actions which we need to keep around for later.  I can see something like that in conjunction with a method on ActionQueue to process that internal 'callbacks' queue after the entire flush is complete.  Note that this does not address @PreUpdate. We can investigate that though and see what we are talking about in specific. - Steve Ebersole Project Lead Principal Software Engineer JBoss, a division of Red Hat Ahhh In theory it should not as Hibernate Search reads data in the beforeCompletion phase. Unless people do not apply changes in a transaction in which case we need to execute the read in the post* event. We will check whether or not people use surrounding transactions (Hibernate aware Tx either through JTA or via the direct Hibernate Transaction API). Alternatively, is it possible to move the post* event after the flush? Or create noew events for that? That would solve everybody's issue. Emmanuel Is this somehow different than the &amp;quot;attempt to load stuff into the PC during flush&amp;quot; scenarios I see in any of these related issues? - Steve Ebersole Project Lead Principal Software Engineer JBoss, a division of Red Hat HHH-3225 Steve, any chance you could look at this one, it seems to hit HSearch users on a regular basis. _______________________________________________ hibernate-dev mailing list _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] HHH-3225 is hitting Hibernate Search</header>
    <date>Fri Mar 13 23:45:46 CET 2009</date>
    <body>&amp;gt;: Hi, about this issue (HSEARCH-178) I've implemented a patch following your directions and your idea is working very well, but I'm having some trouble about the configuration of listeners. An additional flush listener is needed; I've patched the autoregistration but people not using annotations will have to specify both DefaultFlushEventListener and the new IndexWorkFlushEventListener in their configuration. mm thanks, some more tests to make. I've been able to specify the pair of listeners using programmatic configuration and using hibernate.cfg.xml but is this also possible with hibernate.properties and persistence.xml ? thanks, I didn't notice the double listener. I couldn't find any docs or examples to register two event listeners for the same event in JPA, I'm wondering if instead of adding a listener I should not extend or wrap the DefaultFlushEventListener so to have only one listener? Would this work for JPA also or should I have to extend the EJB3FlushEventListener instead? I see it's different. In case the JPA listener should be different than the hibernate version, how can I detect the listener I should register in the EventListenerRegister autoregistration routine? 100% agree To be backwards-compatible with our own configuration I've slightly modified the patch to work as the old way (loading collections in flush) when the listener is not found; a warning is logged saying the listener should be registered. So I'll discard compatibility with old configurations of Search? this means somebody just replacing the jar but &amp;quot;forgetting&amp;quot; to read the new docs and failing to update the configuration will have lots of new problems... was just worried about this, but as you say they shouldn't be using it out of transaction anyway. What I have is just &amp;quot;do it immediately&amp;quot; as the current code in trunk does, if we are out of transaction and I can't find the event listener to register the sync for later. I have to find it anyway, so it's not a big change. so we're going to log that all usecases out of TX are evil? In this case wouldn't you prefer to avoid fixing it and just log the message? Sanne hope we can fix this, Sanne &amp;gt;: We discussed the issue with Sanne and for Hibernate Search we have a workaround solution that does not penalize Hibernate Core. This solution can be applied by everybody but it's not the easiest thing on Earth. The idea is to queue as you said but inside custom event listeners. In our case some Post* event listeners. This queue is &amp;quot;flushed&amp;quot; in a FlushEventListener. This new flush event listener must be registered *after* the default FlushEventListener. All this does not require Hibernate Core change and requires minimal change to the Hibernate Search code and architecture. Not sure what you mean by your &amp;quot;In theory it should not&amp;quot;... &amp;#160;The very nature of @PostUpdate is that it is going to be getting called during a flush cycle... ---- wrt &amp;quot;is it possible to move the post* event after the flush?&amp;quot;... There are really 2 answers. 1) According to the JPA spec, can we do this? &amp;#160;The quote from the current spec says: The PreUpdate and PostUpdate callbacks occur before and after the database update operations to entity data respectively. These database operations may occur at the time the entity state is updated or they may occur at the time state is flushed to the database (which may be at the end of the transaction). I don't really see anything there that discusses the time-relationship between the SQL UPDATE execution and the @PostUpdate callback other than the fact that (obviously) @PostUpdate callback should come after the SQL UPDATE is issued; but it does not seem to limit *how long after*. &amp;#160;So I think this is OK from the perspective of the spec. 2) Can Hibernate be changed to do this? &amp;#160;Well AnythingIsPossible in programming, so I guess the question really is *should* we change Hibernate to do this. &amp;#160;My main concern with this change is the extra queueing it would require and the corollary memory requirements. &amp;#160;What happens right now is that those callbacks are executed during the action (org.hibernate.action.Executable) execution. &amp;#160;Flush puts them into a queue of actions (org.hibernate.engine.ActionQueue), from which they are removed as they are executed. &amp;#160;We decided to put the post callbacks in the actions themselves for assurance-of-execution as well as encapsulation purposes, which I think are both still worthwhile. &amp;#160;What I could see as a potential solution would be to do something like we do for Actions which have &amp;quot;after transaction&amp;quot; tasks to perform: The &amp;quot;executions&amp;quot; list here is a queue of actions which we need to keep around for later. &amp;#160;I can see something like that in conjunction with a method on ActionQueue to process that internal 'callbacks' queue after the entire flush is complete. &amp;#160;Note that this does not address @PreUpdate. We can investigate that though and see what we are talking about in specific. - Steve Ebersole Project Lead Principal Software Engineer JBoss, a division of Red Hat Ahhh In theory it should not as Hibernate Search reads data in the beforeCompletion phase. Unless people do not apply changes in a transaction in which case we need to execute the read in the post* event. We will check whether or not people use surrounding transactions (Hibernate aware Tx either through JTA or via the direct Hibernate Transaction API). Alternatively, is it possible to move the post* event after the flush? Or create noew events for that? That would solve everybody's issue. Emmanuel Is this somehow different than the &amp;quot;attempt to load stuff into the PC during flush&amp;quot; scenarios I see in any of these related issues? - Steve Ebersole Project Lead Principal Software Engineer JBoss, a division of Red Hat Steve, any chance you could look at this one, it seems to hit HSearch users on a regular basis. _______________________________________________ hibernate-dev mailing list _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] HHH-3225 is hitting Hibernate Search</header>
    <date>Fri Mar 13 23:59:03 CET 2009</date>
    <body>bundled with the IndexWork Listener always right? What backward compatible mode do you have? ah I understand now, then you're right, if the listener is not registered raise a warning log BTW, you should put a warning in the log when this event listener is used. &amp;quot;Applying change to the full-text index before transaction completion. Please use a Hibernate aware transaction (eg org.hibernate.Transaction, javax.persistence.EntityTransaction, JTA transaction with the proper hum, here is my dilemma. Some people use it out of transaction and that's their problem. Some people believe they do it within transaction but either they don't configure Spring properly or Spring does not work properly and that's what I am more concerned about and want the warning for. I guess we can reduce it to INFO. I am almost thinking we should have a flag in the configuration to explicitly allow out of tx indexing but I hate configurations, so we're not going to do that.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate Search road map</header>
    <date>Fri Mar 06 01:23:31 CET 2009</date>
    <body>Sorry for the delay Sanne and thanks for the constant work. Feel free to bug me I will say no if I can't. I added some notes in JIRA. Feel free to tell me if you update this jira (I might miss it). forget it. what makes you think it's a duplicate? ping me tomorrow or this week end, or detail that point, I don't understand what you are proposing. Yes it should work on any backend. Is it because it's &amp;quot;hard to do&amp;quot; or is a conceptual problem. I am happy to not support that for the first release. looks good but try and make it a fluent API (ie method chaining returning si and remove set in set*. Is there any non optional setter? Couldn't you use the same thing that we did for FullTextQuery with setCriteria? I am happy to delay that for later. Especially since JPA2 is coming with a criteria API. I updated the road map Mass indexing Dictionary / spellchecker support Work on easier query building More like this? Built-in clustering with JBoss cache Statistics custom LockFactory feel free to propose other new features. _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate Search road map</header>
    <date>Fri Mar 06 01:24:37 CET 2009</date>
    <body>See my other email on the Core issue. It's not entirely in my hands, more on Steve's</body>
  </mail>
  <mail>
    <header>[hibernate-dev] HSEARCH Faceting and facet counts</header>
    <date>Mon Jun 03 10:59:06 CEST 2013</date>
    <body>+1 Since you already raised several questions regarding the docs, I think we should revisit the whole chapter. So far it is quite short and imo not detailed enough. Not sure about the &amp;quot;more natural&amp;quot; part, but maybe we can have both. --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] HSEARCH Faceting and facet counts</header>
    <date>Mon Jun 03 11:28:49 CEST 2013</date>
    <body>I know we had a debate but I can't seem to find any detail in the documentation about how facet selection influences the facet counts. In my demo, the facet count is applied after the selection. ie if I do a $100', the count displayed on '&amp;gt; $100' = 0 which is very weird from a use point of view. Right that looks weird, but shouldn't you be hiding the other facets after having selected one? I would expect a UI to potentially show new sub-facets only, to allow a user to drill into more details. That seems to be the expected behavior according to but my first reaction was that it was a bug. Should we clarify that in the documentation? And implement the more natural way?</body>
  </mail>
  <mail>
    <header>[hibernate-dev] HSEARCH Faceting and facet counts</header>
    <date>Mon Jun 03 15:10:20 CEST 2013</date>
    <body>The thing is, if you select a price range, you want to be able to select the other price range, so you can't &amp;quot;hide it&amp;quot;. Play a bit with Amazon's version</body>
  </mail>
  <mail>
    <header>[hibernate-dev] HSEARCH Faceting and facet counts</header>
    <date>Mon Jun 03 17:27:06 CEST 2013</date>
    <body>oh, I actually played with the Amazon site before replying to you and the quick (too brief) experiments I had done seemed to endorse my theory. After a better look now, it seems they apply a different strategy depending on the selection; I think the way they do it makes sense but it's impressive that the user is fooled into a non-consistent API, and it still &amp;quot;feels&amp;quot; like all is consistent. &amp;gt;&amp;gt; I know we had a debate but I can't seem to find any detail in the &amp;gt;&amp;gt; documentation about how facet selection influences the facet counts. &amp;gt;&amp;gt; In my demo, the facet count is applied after the selection. ie if I do a &amp;gt;&amp;gt; $100', the count displayed on '&amp;gt; $100' = 0 which is very weird from a &amp;gt;&amp;gt; use point of view. Right that looks weird, but shouldn't you be hiding the other facets after having selected one? I would expect a UI to potentially show new sub-facets only, to allow a user to drill into more details.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] HSEARCH Faceting and facet counts</header>
    <date>Mon Jun 03 17:50:08 CEST 2013</date>
    <body>From what I understand, they do the following: - each facet group offer the list of facets and the number of elements in each facet as if none of the facet for that group is selected. - if a given facet group A has some facets selected, then the other facet groups and their facet list and numbers are filtered by the facet group A. That's consistent to me and what I would expect intuitively before thinking about implementation details. They also allow to select multiple facets for a given facet group but that's an orthogonal story. Emmanuel</body>
  </mail>
  <mail>
    <header>[hibernate-dev] OGM-270 Expose the WriteConcern settings to the	configuration</header>
    <date>Tue Jun 04 19:20:21 CEST 2013</date>
    <body>Hello guys, I have sumited a new pull request about OGM-270: The pull request is: Cheers, Guillaume</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Running Jenkins on personal branches</header>
    <date>Wed Jun 05 00:34:17 CEST 2013</date>
    <body>With the CI slowly getting in place. Would there be a way to test a branch of mine without having to push it as a pull-request? When I push a branch on emmanuelbernard/hibernate-search.git without creating a PR, it would still be nice to be able to have it run. Thoughts?</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Running Jenkins on personal branches</header>
    <date>Wed Jun 05 00:36:32 CEST 2013</date>
    <body>If you just want an ad-hoc solution, you could create a copy of the HSEARCH job and change it to let it build your branch. I'm doing it like that every once in a while. --Gunnar</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Running Jenkins on personal branches</header>
    <date>Wed Jun 05 00:39:15 CEST 2013</date>
    <body>Lol, was just going to say this ;) You can clone the Jenkins job and point it at your branch.   Not so sure I want this to happen automatically for all my branches. With the CI slowly getting in place. Would there be a way to test a branch of mine without having to push it as a pull-request? When I push a branch on emmanuelbernard/hibernate-search.git without creating a PR, it would still be nice to be able to have it run. Thoughts? _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Running Jenkins on personal branches</header>
    <date>Wed Jun 05 10:38:07 CEST 2013</date>
    <body>I also was thinking of creating a personal job there which would monitor a specific branch name on my personal github fork, maybe &amp;quot;toTest&amp;quot; or &amp;quot;forJenkins&amp;quot;. Another option is to use parametric jobs: you have to trigger them from the UI and the wizard will ask you to fill in a couple of parameters which are applied to the build configuration; these could be for example 1- repository 2- commitId ideally this could be started by REST too, so making some script possible to trigger it from your local box commandline.. it would be trivial to have such a script auto-detect the needed parameters. I'm not sure how such a script would deal with authentication: we require authenticated users to trigger jobs manually. I think you could obtain an OAuth token from the github server to use on Jenkins, using the Github feature of creating application specific passwords (which you would then set as a constant in your script). If we get the REST variant to work it would be great to provide it as a service of the build tool (not thinking of Maven here): we could have, on top of traditional tasks such as &amp;quot;install&amp;quot;, &amp;quot;release&amp;quot;, &amp;quot;test&amp;quot;, also &amp;quot;remote-test&amp;quot;. This would be especially cool for ORM and OGM developers as you could get feedback from the full range of databases without installing them locally. Sanne If you just want an ad-hoc solution, you could create a copy of the HSEARCH job and change it to let it build your branch. I'm doing it like that every once in a while. --Gunnar With the CI slowly getting in place. Would there be a way to test a branch of mine without having to push it as a pull-request? When I push a branch on emmanuelbernard/hibernate-search.git without creating a PR, it would still be nice to be able to have it run. Thoughts? _______________________________________________ hibernate-dev mailing list _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Running Jenkins on personal branches</header>
    <date>Wed Jun 05 13:27:50 CEST 2013</date>
    <body>For now I cloned a search job, created a Personal runs view, added a GitHub notification from my personal fork and pushed results as IRC private messages. Not too bad so far after the initial phase where Jenkins decided to run build on all my already existing branches :) Question, is this config going to survive a ci.hibernate.org VM crash? Emmanuel</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Running Jenkins on personal branches</header>
    <date>Wed Jun 05 14:07:15 CEST 2013</date>
    <body>+1 Depends on the kind of crash; the kind of disk storage we're using survives a crash or restart of the VM, but could still be lost depending on how bad AWS is doing. The ultimate backup is adding this to the generation scripts we maintain on github - but that's requiring some puppet expertise - A good practical solution is to make snapshots of the AWS running disk. I've just made one, so your new job is being stored now. To make snapshots you can use the AWS console via your browser and navigate to Volumes or Snapshots. These snapshot features are super practical as you can use them to start new VMs. Sanne I also was thinking of creating a personal job there which would monitor a specific branch name on my personal github fork, maybe &amp;quot;toTest&amp;quot; or &amp;quot;forJenkins&amp;quot;. Another option is to use parametric jobs: you have to trigger them from the UI and the wizard will ask you to fill in a couple of parameters which are applied to the build configuration; these could be for example 1- repository 2- commitId ideally this could be started by REST too, so making some script possible to trigger it from your local box commandline.. it would be trivial to have such a script auto-detect the needed parameters. I'm not sure how such a script would deal with authentication: we require authenticated users to trigger jobs manually. I think you could obtain an OAuth token from the github server to use on Jenkins, using the Github feature of creating application specific passwords (which you would then set as a constant in your script). If we get the REST variant to work it would be great to provide it as a service of the build tool (not thinking of Maven here): we could have, on top of traditional tasks such as &amp;quot;install&amp;quot;, &amp;quot;release&amp;quot;, &amp;quot;test&amp;quot;, also &amp;quot;remote-test&amp;quot;. This would be especially cool for ORM and OGM developers as you could get feedback from the full range of databases without installing them locally. Sanne &amp;gt; Lol, was just going to say this ;) &amp;gt; You can clone the Jenkins job and point it at your branch.   Not so sure &amp;gt; I want this to happen automatically for all my branches. &amp;gt;&amp;gt; If you just want an ad-hoc solution, you could create a copy of the HSEARCH &amp;gt;&amp;gt; job and change it to let it build your branch. I'm doing it like that every &amp;gt;&amp;gt; once in a while. &amp;gt;&amp;gt; --Gunnar &amp;gt;&amp;gt;&amp;gt; With the CI slowly getting in place. Would there be a way to test a &amp;gt;&amp;gt;&amp;gt; branch of mine without having to push it as a pull-request? &amp;gt;&amp;gt;&amp;gt; When I push a branch on emmanuelbernard/hibernate-search.git without &amp;gt;&amp;gt;&amp;gt; creating a PR, it would still be nice to be able to have it run. &amp;gt;&amp;gt;&amp;gt; Thoughts? &amp;gt;&amp;gt;&amp;gt; _______________________________________________ &amp;gt;&amp;gt;&amp;gt; hibernate-dev mailing list &amp;gt;&amp;gt; _______________________________________________ &amp;gt;&amp;gt; hibernate-dev mailing list &amp;gt; _______________________________________________ &amp;gt; hibernate-dev mailing list _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [Blog] Hibernate OGM with Jboss AS 7</header>
    <date>Wed Jun 05 17:32:57 CEST 2013</date>
    <body>Hi guys, Just wanted to let you know I have published a post on how to use OGM with AS 7. Feedback and comments are more than welcome (hope I didn't say too much craps). Thanks Guillaume</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [Blog] Hibernate OGM with Jboss AS 7</header>
    <date>Thu Jun 06 10:03:06 CEST 2013</date>
    <body>Nice :) Do you really mean &amp;quot; OGM definitely is a panacea&amp;quot;. From your sentence it I suspect that won't work since the other maven modules are not built at that point. You'd better run mvn clena install from the root (possibly excluding tests). Emmanuel</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [Blog] Hibernate OGM with Jboss AS 7</header>
    <date>Thu Jun 06 10:19:48 CEST 2013</date>
    <body>Thanks for your comments. You are right, &amp;quot;not a panacea&amp;quot; is what I meant. For the &amp;quot;mvn clean install&amp;quot; it worth to be tried, I'll keep you up to date on that. Next step, how to write a new datastore provider. Guillaume</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [Blog] Hibernate OGM with Jboss AS 7</header>
    <date>Thu Jun 06 10:42:32 CEST 2013</date>
    <body>Well make sure to clean your maven repo cache before you test. Or else your local cache will contain the snapshot. Likewise, the remote repo might contain an old snapshot and I dont' think you can guard against that.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [Blog] Hibernate OGM with Jboss AS 7</header>
    <date>Thu Jun 06 10:44:13 CEST 2013</date>
    <body>I'll do better, I'll try with another machine which doesn't know OGM at all.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [Blog] Hibernate OGM with Jboss AS 7</header>
    <date>Thu Jun 06 11:10:16 CEST 2013</date>
    <body>It still has to know about JBoss's nexus or use -s setting-example.xml which will go and look for the snapshot online. And thus be unpredictable.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [Blog] Hibernate OGM with Jboss AS 7</header>
    <date>Thu Jun 06 11:12:55 CEST 2013</date>
    <body>Nice post! People don't necessarily have to build the modules from sources, you could put a download link or explain how to unpack them via Maven.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [Blog] Hibernate OGM with Jboss AS 7</header>
    <date>Thu Jun 06 11:17:37 CEST 2013</date>
    <body>I didn't find a direct link to download them (btw, the link to download ogm from sourceforge is pointing to hsearch 4.3 files). May be we could propose (don't know where, ogm download page on hibernate.org or download page of AS 7) the zip file WDYT ? I'll do better, I'll try with another machine which doesn't know OGM at all. &amp;gt; Well make sure to clean your maven repo cache before you test. Or else &amp;gt; your local cache will contain the snapshot. Likewise, the remote repo &amp;gt; might contain an old snapshot and I dont' think you can guard against &amp;gt; that. &amp;gt; &amp;gt; Thanks for your comments. You are right, &amp;quot;not a panacea&amp;quot; is what I meant. &amp;gt; &amp;gt; For the &amp;quot;mvn clean install&amp;quot; it worth to be tried, I'll keep you up to &amp;gt; date &amp;gt; &amp;gt; on that. &amp;gt; &amp;gt; Next step, how to write a new datastore provider. &amp;gt; &amp;gt; Guillaume &amp;gt; &amp;gt; &amp;gt; Nice :) &amp;gt; &amp;gt; &amp;gt; Do you really mean &amp;quot; OGM definitely is a panacea&amp;quot;. From your sentence &amp;gt; it &amp;gt; &amp;gt; &amp;gt; &amp;gt; Then just go under %HIBERNATE_OGM_HOME% /hibernate-ogm-modules and &amp;gt; &amp;gt; &amp;gt; &amp;gt; perform a mvn clean install. &amp;gt; &amp;gt; &amp;gt; I suspect that won't work since the other maven modules are not built &amp;gt; at &amp;gt; &amp;gt; &amp;gt; that point. You'd better run mvn clena install from the root (possibly &amp;gt; &amp;gt; &amp;gt; excluding tests). &amp;gt; &amp;gt; &amp;gt; Emmanuel &amp;gt; &amp;gt; &amp;gt; &amp;gt; Hi guys, &amp;gt; &amp;gt; &amp;gt; &amp;gt; Just wanted to let you know I have published a post on how to use OGM &amp;gt; &amp;gt; &amp;gt; with &amp;gt; &amp;gt; &amp;gt; &amp;gt; AS 7. &amp;gt; &amp;gt; &amp;gt; &amp;gt; Feedback and comments are more than welcome (hope I didn't say too &amp;gt; much &amp;gt; &amp;gt; &amp;gt; &amp;gt; craps). &amp;gt; &amp;gt; &amp;gt; &amp;gt; Thanks &amp;gt; &amp;gt; &amp;gt; &amp;gt; Guillaume &amp;gt; &amp;gt; &amp;gt; &amp;gt; _______________________________________________ &amp;gt; &amp;gt; &amp;gt; &amp;gt; hibernate-dev mailing list _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [Blog] Hibernate OGM with Jboss AS 7</header>
    <date>Thu Jun 06 12:10:15 CEST 2013</date>
    <body>Ah right I might be confused with the Search modules as we release those regularly, and upload to sourceforge as well. For OGM I think we should do a release, as in the last one the modules where not available yet. (AFAIR as I can't check now) Nice post! People don't necessarily have to build the modules from sources, you could put a download link or explain how to unpack them via Maven. I'll do better, I'll try with another machine which doesn't know OGM at all. &amp;gt; Well make sure to clean your maven repo cache before you test. Or else &amp;gt; your local cache will contain the snapshot. Likewise, the remote repo &amp;gt; might contain an old snapshot and I dont' think you can guard against &amp;gt; that. &amp;gt; &amp;gt; Thanks for your comments. You are right, &amp;quot;not a panacea&amp;quot; is what I &amp;gt; &amp;gt; meant. &amp;gt; &amp;gt; For the &amp;quot;mvn clean install&amp;quot; it worth to be tried, I'll keep you up to &amp;gt; date &amp;gt; &amp;gt; on that. &amp;gt; &amp;gt; Next step, how to write a new datastore provider. &amp;gt; &amp;gt; Guillaume &amp;gt; &amp;gt; &amp;gt; Nice :) &amp;gt; &amp;gt; &amp;gt; Do you really mean &amp;quot; OGM definitely is a panacea&amp;quot;. From your &amp;gt; &amp;gt; &amp;gt; sentence &amp;gt; it &amp;gt; &amp;gt; &amp;gt; &amp;gt; Then just go under %HIBERNATE_OGM_HOME% /hibernate-ogm-modules &amp;gt; &amp;gt; &amp;gt; &amp;gt; and &amp;gt; &amp;gt; &amp;gt; &amp;gt; perform a mvn clean install. &amp;gt; &amp;gt; &amp;gt; I suspect that won't work since the other maven modules are not &amp;gt; &amp;gt; &amp;gt; built &amp;gt; at &amp;gt; &amp;gt; &amp;gt; that point. You'd better run mvn clena install from the root &amp;gt; &amp;gt; &amp;gt; (possibly &amp;gt; &amp;gt; &amp;gt; excluding tests). &amp;gt; &amp;gt; &amp;gt; Emmanuel &amp;gt; &amp;gt; &amp;gt; &amp;gt; Hi guys, &amp;gt; &amp;gt; &amp;gt; &amp;gt; Just wanted to let you know I have published a post on how to use &amp;gt; &amp;gt; &amp;gt; &amp;gt; OGM &amp;gt; &amp;gt; &amp;gt; with &amp;gt; &amp;gt; &amp;gt; &amp;gt; AS 7. &amp;gt; &amp;gt; &amp;gt; &amp;gt; Feedback and comments are more than welcome (hope I didn't say &amp;gt; &amp;gt; &amp;gt; &amp;gt; too &amp;gt; much &amp;gt; &amp;gt; &amp;gt; &amp;gt; craps). &amp;gt; &amp;gt; &amp;gt; &amp;gt; Thanks &amp;gt; &amp;gt; &amp;gt; &amp;gt; Guillaume &amp;gt; &amp;gt; &amp;gt; &amp;gt; _______________________________________________ &amp;gt; &amp;gt; &amp;gt; &amp;gt; hibernate-dev mailing list _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [Blog] Hibernate OGM with Jboss AS 7</header>
    <date>Thu Jun 06 13:56:03 CEST 2013</date>
    <body>I've created a JIRA to publish the modules distro</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Fwd: [jdf-dev] JBoss Modules dependency vs pain POM	dependency + exclusions</header>
    <date>Thu Jun 06 13:37:39 CEST 2013</date>
    <body>Below is an email describing the issues i had to get Hibernate Search run in WildFly / EAP. A possibility to make life easier for Hibernate Search users in WildFly is as described by Pete to create a hibernate-search-orm-wildfly which marks Hibernate ORM as provided. What do you think? Emmanuel Begin forwarded message: The Hibernate Search enabled version of TicketMonster relies on Hibernate Search 4.3 which itself has a dependency on Hibernate ORM included in WildFly and JBoss EAP. My first approach was to ask the user to add the Hibernate Search JBoss Module manually into their EAP / WildFly distribution and have it referenced in jboss-deployment-structure.xml. I also had to put Hibernate Search in my POM as provided because the BOM references an older version of Hibernate Search. To avoid the manual step, I tried to list Hibernate Search explicitly in the POM as regular scope and no longer use jboss-deployment-structure.xml. But then I have to play with exclusions which is not too nice either. Which approach is better suited for TicketMonster? And is there a better way? Here is the commit that moves from a module dependency to plain pom.xml Emmanuel _______________________________________________ jdf-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [jdf-dev] JBoss Modules dependency vs pain POM	dependency + exclusions</header>
    <date>Thu Jun 06 13:46:55 CEST 2013</date>
    <body>Next time ping me for any issues, as I've done this ages ago for CapeDwarf. :-) Date: 6 juin 2013 11:21:13 UTC+02:00 Subject: Re: [jdf-dev] JBoss Modules dependency vs pain POM dependency + exclusions Hey Emmanuel, The Hibernate Search enabled version of TicketMonster relies on Hibernate Search 4.3 which itself has a dependency on Hibernate ORM included in WildFly and JBoss EAP. My first approach was to ask the user to add the Hibernate Search JBoss Module manually into their EAP / WildFly distribution and have it referenced in jboss-deployment-structure.xml. I also had to put Hibernate Search in my POM as provided because the BOM references an older version of Hibernate Search. We should be targeting the version of HSearch that is in WFK. If the BOM is out of date (highly possible), then please either send a pull to update it or ask Rafael to do so. He or I can do a you a release very quickly once the change is in. To avoid the manual step, I tried to list Hibernate Search explicitly in the POM as regular scope and no longer use jboss-deployment-structure.xml. But then I have to play with exclusions which is not too nice either. Which approach is better suited for TicketMonster? And is there a better way? Fix the HSearch POM so that it marks as optional or provided stuff that you are excluding would be one way. If you don't want to do this, then another option would be to produce a HSearch-for-WF pom as part of HSearch that does it. In general, it's better to not make the user fiddle with exclusions, and instead do it in the framework itself. Here is the commit that moves from a module dependency to plain pom.xml Emmanuel _______________________________________________ jdf-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [jdf-dev] JBoss Modules dependency vs pain POM dependency + exclusions</header>
    <date>Thu Jun 06 16:55:58 CEST 2013</date>
    <body>are you proposing to remove Hibernate as a Maven dependency? I don't think that's correct. I like the modules approach much better because it has several other benefits, not least that it doesn't push all our dependencies to the application classpath, and also makes the deployment smaller. Did you not try the modules? Ultimately I think it should be the encouraged deployment mode, possibly the only supported one for wildfly.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [jdf-dev] JBoss Modules dependency vs pain POM dependency + exclusions</header>
    <date>Thu Jun 06 17:41:26 CEST 2013</date>
    <body>As I explain in the email I forwarded, modules are good on paper but suffer from a few practical problems: I need to manually install them on my deployed server instead of just handing over the JAR. If there was a way to declare a dep from jboss-deployment-structure.xml and get it downloaded from somewhere (including from my WAR as a local copy), then some of my problems would be solved. In particular the fact that I might forget to install a module in one of my runtimes. Of course modules are JBoss specific so it's a pain to make my application portable across several app servers. And finally JBoss modules dependencies are not seen by Maven / Eclipse. So I have to artificially add Hibernate Search into my pom as provided even if I have already declared this dependency else where. I don't call this experience significantly better. It's just different. Emmanuel</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [jdf-dev] JBoss Modules dependency vs pain POM	dependency + exclusions</header>
    <date>Fri Jun 07 17:12:27 CEST 2013</date>
    <body>Again, late to the party, but I agree with Emmanuel. Modules is imo to AS specific in order to encourage it as a default/referred configuration approach. I see it more as an expert mode to configure your app server. And is not also dangerous to fiddle too much with the modules? Adding new modules might be ok, but often you end up updating others as well (talking EL and Bean Validation) and there you don't know whether you break another subsystem. Also it adds additional constrains when deploying the app server and app. It is not just about dropping in a ear/war anymore, suddenly I have to &amp;quot;patch&amp;quot; my app server first. Exactly +1 IMO we should be able to deploy an Search application with Search, ORM et al all bundled up and it should just work. --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [jdf-dev] JBoss Modules dependency vs pain POM dependency + exclusions</header>
    <date>Fri Jun 07 17:44:03 CEST 2013</date>
    <body>Right we should make it easier and with clear documentation. But &amp;quot;dropping something in your /modules&amp;quot; isn't sooo different than dropping an EAR in your /deploy both are easily scripted, we have a not-too-nice solution which works with Maven, and if it becomes a mainstream strategy for other JBoss modules then we could certainly make a better looking Maven plugin. What fiddling? we don't update EL nor Bean Validation modules, but we provide solid modules which are tested by our CI and consumed by other projects (getting more tests done to benefit all). We can even provide multiple versions and layer them all on the same server instance without conflict, or multiple variants for the same the classpath is controlled and we can test these automatically, while there is no way we can test documented exclusion lists / configurations for bundled jars. Getting more pratical: explain me how I should configure the classpath for an &amp;quot;embedded lib style&amp;quot; deployment which takes advantage of 2nd level caching via Infinispan, uses Hibernate Search to store indexes, and opens a JGroups backend. The dump solution is to include both Infinispan and JGroups; you'll have to add all dependencies like JBLogging, JBMarshaller, a provided JTA manager.. you'll get an app-server class of services but all management extensions will not be wired up to the AS core, nor Infinispan will be connected to internals like mod_cluster &amp;amp; al. I'm not even sure if the logger will bind correctly for dynamic configuration or if it's going to work via a Log4J bridge which gets intercepted and re-routed to the AS proper logger .. lots of problems I'd not prepared to face, I bet big time Tomcat would sound more appealing: no metrics (either can we), no admin (wouldn't work either), but at least these services don't fight against each other's resources. For example, your *really* don't want to start an Infinispan grid in the scope of Hibernate Search's deployed app and forget to isolate its clustering channels from the ones in the AS. Lib deployment could get made to work on some of this but I don't think all, and even so you would still need to hack on your deployment descriptor, with very advanced AS knowledge. I'd rather &amp;quot;prepack&amp;quot; the easy solution, and test it. Right I see your point on this: if it feels like patching it doesn't look good. But it feels much better if you look at it as &amp;quot;dependency resolution&amp;quot;. I can totally see how a wildfly instance could download these on-demand from the dependency definition; by having these in Maven, corporate environments might not dislike it too much as they could have their own repository managers. BTW this problem is only for JBoss / Wildfly as other app servers don't bundle Hibernate, so the solution is special purpose as well. Sanne As I explain in the email I forwarded, modules are good on paper but suffer from a few practical problems: I need to manually install them on my deployed server instead of just handing over the JAR. Of course modules are JBoss specific so it's a pain to make my application portable across several app servers.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [jdf-dev] JBoss Modules dependency vs pain POM dependency + exclusions</header>
    <date>Fri Jun 07 18:06:20 CEST 2013</date>
    <body>I just want to add a point from my perspective of being until recently on the &amp;quot;user side&amp;quot;. In many shops it's much more difficult (if even possible at all) to change anything on the app server (installation) itself than putting a new EAR to it. This is mainly due to political reasons and I (or developers in general) know the outcome can be the same. I also understand the advantages of integration etc. you describe, I just think the requirement of changing the app server itself can be much harder to meet in many cases than changing the libs of a deployed application; So if a library requires this kind of set up, it may reduce its attractiveness. --Gunnar</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [jdf-dev] JBoss Modules dependency vs pain POM	dependency + exclusions</header>
    <date>Fri Jun 07 19:25:34 CEST 2013</date>
    <body>Again, late to the party, but I agree with Emmanuel. Modules is imo to AS specific in order to encourage it as a default/referred configuration approach. I see it more as an expert mode to configure your app server. Yes it is and as Gunnar pointed out there might also be more resistance from the ops people to to something like this See, now we start talking. If we have the right tools we can start talking about this. The current scripts are more of a hack than anything and I would not like people to do the same thing. Also, what is this maven plugin supposed to do? Patch your local AS instance. That's fine for your local build, but how does this help production? What are you going to deliver to the guys running the actual production app? An ear file and a zip with the instructions to please unzip this first here? you end up updating others as well (talking EL and Bean Validation) and there you don't know whether you break another subsystem. I am not talking Search in this case. It was a general comment against modifying modules directories. Sure, there might be situations where the module approach is better. I was just saying it should not be the &amp;quot;default way of doing things&amp;quot;. I trust you that the scenarios you describe are best solved the way you say, but I still think it is a little unfortunate. anymore, suddenly I have to &amp;quot;patch&amp;quot; my app server first. How can it feels better by just naming it something else. What counts is that I have to install a default AS instance and then modify/patch its inner configuration. Now that is different imo. Now we provide some proper tooling around this. When are you having this ready to go? So basically we are saying on our app server it is actually harder to get this to work than on others. Interesting. Maybe we should target Glassfish then. --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [jdf-dev] JBoss Modules dependency vs pain POM dependency + exclusions</header>
    <date>Fri Jun 07 23:14:02 CEST 2013</date>
    <body>Great points. Let me try attack some inline :-) I'm also adding Brian and Jason in CC in hope they have better thoughts and are willing to correct me. Again, late to the party, but I agree with Emmanuel. Modules is imo to AS specific in order to encourage it as a default/referred configuration approach. I see it more as an expert mode to configure your app server. Right we should make it easier and with clear documentation. But &amp;quot;dropping something in your /modules&amp;quot; isn't sooo different than dropping an EAR in your /deploy Those are very valid concerns. I've personally seen a variety of policies, ranging from &amp;quot;let's replace the JBoss jars with latest Hibernate snapshot&amp;quot; (done that myself in production) to &amp;quot;there's a testing process of 6 months for each configuration change you want on the AS; the overall cost of the tests is 2 million, so the first step is to file a business case to justify that&amp;quot; (at which point I've quit the employer - true story). But generally it used to boil down to &amp;quot;who is responsible&amp;quot; and &amp;quot;what does the documentation recommend&amp;quot;. Which in turn boils down to what we can test, and what we write in the documentation. jars are bundled in a directory starting with: /modules/system/layers/base/ There is an explanation about this structure here: I couldn't find a full explanation of what we're expected to see in /modules other than &amp;quot;system&amp;quot;, or in layers other than &amp;quot;base&amp;quot; but it looks like quite self-explanatory that at least power users are expected to drop in additional modules. If you get our libraries via a package manager, that might get very easy and especially if we bless the process by testing for this configuration and recommend it in the documentation, I think ops people could be willing to accept it - I guess there is some kind of parallelism historically with the *-DS.xml datasource files to be deployed? I think it's clear that layers are expected to provide such modules, and the Hibernate Search project specifically should provide these for other projects to consume. You're right that this doesn't need to be &amp;quot;the&amp;quot; recommended way for Hibernate Search / ORM users but there are at least some benefits, mostly of monitoring and administration capabilities, which could make ops people specifically less resistant about the new approach. with Maven, and if it becomes a mainstream strategy for other JBoss modules then we could certainly make a better looking Maven plugin. automatically provided because it's actived on their subscription account, so the RPM automatically includes it in the application server; this has no downsides besides some disk space as it would only get activated by deployments specifying the need. Fedora users could &amp;quot;yum install&amp;quot; it, while developer workstations could get it bundled with other tooling such as Developer Studio. Some might need to unzip it, and while I agree that's annoying it's not different than unzipping WildFly in the first place, and trivial to specify in any build tool, even more as we deploy the zip as Maven modules. Maybe we could even have a light WildFly download, and a &amp;quot;WildFly with extensions&amp;quot;. you end up updating others as well (talking EL and Bean Validation) and there you don't know whether you break another subsystem. What fiddling? we don't update EL nor Bean Validation modules, but we provide solid modules which are tested by our CI and consumed by other projects (getting more tests done to benefit all). Right, modifying the provided modules dir doesn't feel good. I hope the new WildFly modules directory structure addresses this concern? for an &amp;quot;embedded lib style&amp;quot; deployment which takes advantage of 2nd level caching via Infinispan, uses Hibernate Search to store indexes, and opens a JGroups backend. The dump solution is to include both Infinispan and JGroups; you'll have to add all dependencies like JBLogging, JBMarshaller, a provided JTA manager.. you'll get an app-server class of services but all management extensions will not be wired up to the AS core, nor Infinispan will be connected to internals like mod_cluster &amp;amp; al. I'm not even sure if the logger will bind correctly for dynamic configuration or if it's going to work via a Log4J bridge which gets intercepted and re-routed to the AS proper logger .. lots of problems I'd not prepared to face, I bet big time Tomcat would sound more appealing: no metrics (either can we), no admin (wouldn't work either), but at least these services don't fight against each other's resources. I'm not sure it is the best way. It seems it would solve a lot of problems so I hope we could go to the bottom of this and verify: the ideal solution still needs some changes, for example how the app server can share a partial JGroups stack so that we can actually reuse it and stay independent (I'll be exploring this with Bela and Paul next week). Most other benefits however seem to be reachable for Search users by using modules today. BTW I just figured out the example I made up above was seriously evil, as Hibernate would need to interact both with the internal application server provided Infinispan and the one included in the application libs for index clustering &amp;quot;via&amp;quot; the Search bridge which deals . So it's not even about &amp;quot;which approach is better&amp;quot;: I don't think it's at all possible without deploying custom modules, or without fully deactivating the JPA deployer. anymore, suddenly I have to &amp;quot;patch&amp;quot; my app server first. Right I see your point on this: if it feels like patching it doesn't look good. But it feels much better if you look at it as &amp;quot;dependency resolution&amp;quot;. We always do modify the AS server when deploying an app or configuring it in any form, still I never tell the top manager we're going to initiate an open hearth surgery on their IT system :D Such a terminology would only appropriate in some quite specific contexts right? So let's not pick the wrong name: I don't think that adding a jar to the place it is designed to be, in an appropriate extensions directory, is &amp;quot;patching&amp;quot; nor has much to do with inner configuration. these on-demand from the dependency definition; by having these in Maven, corporate environments might not dislike it too much as they could have their own repository managers. I think we could ask for help to make better tooling, if we have a case. We won't get tooling to deploy modules if we don't make the modules and verify this is a good plan. Ideally I'd like WildFly to automatically download extensions, so we can blame the app server for &amp;quot;downloading the internet&amp;quot; :) don't bundle Hibernate, so the solution is special purpose as well. We should target them all, including WildFly even if it needs an additional zip :-) BTW only WildFly would be able to address the monitoring, Infinispan and mod_cluster integrations appropriately, at least until others won't expose similar capabilities and modularity. -- Sanne</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [jdf-dev] JBoss Modules dependency vs pain POM dependency + exclusions</header>
    <date>Fri Jun 14 14:52:39 CEST 2013</date>
    <body>Thanks for pointing this out yesterday, Sanne. I didn't see this last Friday. Again, late to the party, but I agree with Emmanuel. Modules is imo to AS specific in order to encourage it as a default/referred configuration approach. I see it more as an expert mode to configure your app server. Right we should make it easier and with clear documentation. But &amp;quot;dropping something in your /modules&amp;quot; isn't sooo different than dropping an EAR in your /deploy Yes it is and as Gunnar pointed out there might also be more resistance from the ops people to to something like this subdirs are for people who are providing formal distributions that install on top of the AS or repackage AS with added stuff. Sure. For example, users often install JDBC drivers that way. If you get our libraries via a both are easily scripted, we have a not-too-nice solution which works with Maven, and if it becomes a mainstream strategy for other JBoss modules then we could certainly make a better looking Maven plugin. See, now we start talking. If we have the right tools we can start talking about this. The current scripts are more of a hack than anything and I would not like people to do the same thing. Also, what is this maven plugin supposed to do? Patch your local AS instance. That's fine for your local build, but how does this help production? What are you going to deliver to the guys running the actual production app? An ear file and a zip with the instructions to please unzip this first here? Over the long term we want to evolve WildFly along these lines. There will be some engineering meetings in a couple weeks where this will be a topic. But it's not a WildFly 8 thing. you end up updating others as well (talking EL and Bean Validation) and there you don't know whether you break another subsystem. What fiddling? we don't update EL nor Bean Validation modules, but we provide solid modules which are tested by our CI and consumed by other projects (getting more tests done to benefit all). I am not talking Search in this case. It was a general comment against modifying modules directories. It's intended to formalize how organizations who add on top of the base appserver deal with these concerns. &amp;quot;Organizations&amp;quot; in practice meaning Red Hat products like SOA-P that layer on top of EAP, or their upstream projects. &amp;quot;Layers&amp;quot; can actually override the default WF modules. Doing you're not really WF any more, you're something else. The installation has a new &amp;quot;identity&amp;quot; as discussed on that wiki. An &amp;quot;add-on&amp;quot; cannot override anything and is what we want people to gravitate toward. An add-on provides new features, but the underlying installation is still WildFly. for an &amp;quot;embedded lib style&amp;quot; deployment which takes advantage of 2nd level caching via Infinispan, uses Hibernate Search to store indexes, and opens a JGroups backend. The dump solution is to include both Infinispan and JGroups; you'll have to add all dependencies like JBLogging, JBMarshaller, a provided JTA manager.. you'll get an app-server class of services but all management extensions will not be wired up to the AS core, nor Infinispan will be connected to internals like mod_cluster &amp;amp; al. I'm not even sure if the logger will bind correctly for dynamic configuration or if it's going to work via a Log4J bridge which gets intercepted and re-routed to the AS proper logger .. lots of problems I'd not prepared to face, I bet big time Tomcat would sound more appealing: no metrics (either can we), no admin (wouldn't work either), but at least these services don't fight against each other's resources. Sure, there might be situations where the module approach is better. I was just saying it should not be the &amp;quot;default way of doing things&amp;quot;. I trust you that the scenarios you describe are best solved the way you say, but I still think it is a little unfortunate. If this is the case, something is likely incorrectly done in terms of the modules in WF. Hibernate core shouldn't need to see Infinispan and JGroups in order to provide 2nd level caching. Those modules should be dependencies of some other module that provides an impl of the Hibernate 2LC SPI. That module shouldn't export Infinispan, etc. Same pattern should apply to any of the standard uses of Infinispan in WF. anymore, suddenly I have to &amp;quot;patch&amp;quot; my app server first. Right I see your point on this: if it feels like patching it doesn't look good. But it feels much better if you look at it as &amp;quot;dependency resolution&amp;quot;. How can it feels better by just naming it something else. What counts is that I have to install a default AS instance and then modify/patch its inner configuration. I can totally see how a wildfly instance could download these on-demand from the dependency definition; by having these in Maven, corporate environments might not dislike it too much as they could have their own repository managers. Now that is different imo. Now we provide some proper tooling around this. When are you having this ready to go? &amp;lt;vague-hand-waving&amp;gt;As mentioned above, this kind of thing is under don't bundle Hibernate, so the solution is special purpose as well. So basically we are saying on our app server it is actually harder to get this to work than on others. Interesting. Maybe we should target Glassfish then. --Hardy -- Brian Stansberry Principal Software Engineer JBoss by Red Hat</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Fwd: [jdf-dev] JBoss Modules dependency vs pain POM dependency + exclusions</header>
    <date>Thu Jun 06 17:31:52 CEST 2013</date>
    <body>One change that I submitted a WildFly 8 pull request for (), is to combine the Hibernate ORM/envers and JipiJapa integration jars into the same module. This eliminates the 1-1 bi-directional dependency between ORM/JipiJapa integration code that existed in AS 7 and makes it easier for application deployments to include the Hibernate ORM jars and JipiJapa integration code. I'm keeping static no-op modules around for the JipiJapa integration code that I moved into the Hibernate ORM module, in case applications have dependencies on the older static module (org.jboss.as.jpa.hibernate:4). If the static Hibernate Search module, depends on a static Hibernate ORM module in WildFly 8, I think that is fine, but applications wouldn't be able to include their own Hibernate Search jars (since the static Hibernate ORM module only sees services in the static Hibernate Search module). For WildFly 8, do we want to allow applications to bundle its own version of Hibernate Search that could work with bundled Hibernate ORM jars? Scott Date: 6 juin 2013 11:21:13 UTC+02:00 Subject: Re: [jdf-dev] JBoss Modules dependency vs pain POM dependency + exclusions Hey Emmanuel, The Hibernate Search enabled version of TicketMonster relies on Hibernate Search 4.3 which itself has a dependency on Hibernate ORM included in WildFly and JBoss EAP. My first approach was to ask the user to add the Hibernate Search JBoss Module manually into their EAP / WildFly distribution and have it referenced in jboss-deployment-structure.xml. I also had to put Hibernate Search in my POM as provided because the BOM references an older version of Hibernate Search. We should be targeting the version of HSearch that is in WFK. If the BOM is out of date (highly possible), then please either send a pull to update it or ask Rafael to do so. He or I can do a you a release very quickly once the change is in. To avoid the manual step, I tried to list Hibernate Search explicitly in the POM as regular scope and no longer use jboss-deployment-structure.xml. But then I have to play with exclusions which is not too nice either. Which approach is better suited for TicketMonster? And is there a better way? Fix the HSearch POM so that it marks as optional or provided stuff that you are excluding would be one way. If you don't want to do this, then another option would be to produce a HSearch-for-WF pom as part of HSearch that does it. In general, it's better to not make the user fiddle with exclusions, and instead do it in the framework itself. Here is the commit that moves from a module dependency to plain pom.xml Emmanuel _______________________________________________ jdf-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Fwd: [jdf-dev] JBoss Modules dependency vs pain POM dependency + exclusions</header>
    <date>Thu Jun 06 17:49:37 CEST 2013</date>
    <body>That's one deployment and the one I did first (see my other email). It's a bit confusing to me this whole business but AFAIU but if we could, yes that would be good.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Fwd: [jdf-dev] JBoss Modules dependency vs pain POM dependency + exclusions</header>
    <date>Thu Jun 06 19:42:00 CEST 2013</date>
    <body>If the static Hibernate Search module, depends on a static Hibernate ORM module in WildFly 8, I think that is fine, but applications wouldn't be able to include their own Hibernate Search jars (since the static Hibernate ORM module only sees services in the static Hibernate Search module). For WildFly 8, do we want to allow applications to bundle its own version of Hibernate Search that could work with bundled Hibernate ORM jars? To handle application deployments that contain their own Hibernate Search jars, we would need to make an adjustment.  Instead of having the Hibernate ORM module depend on the Hibernate Search module (this is what we currently do in AS7 via 1-1 bidirectional dependencies), we would need to include the Hibernate Search jars in the Hibernate ORM module. This is specific to WildFly 8 (assuming my WF8 patch is merged in). If we don't put Hibernate Search into the ORM module, we will face the same blocking issue that I saw very late on AS7, which is the JipiJapa integration code module (used to be in AS7 codebase) depends on the static Hibernate ORM module which conflicts with the Hibernate ORM jars loaded by the application classloader. Also, keep in mind that In AS7, there was no JipiJapa project, so applications couldn't easily include the JipiJapa integration classes (point being that there were several blocking issues that prevented Hibernate 4.x jars from being in the deployment).  Of course, Hibernate 3 jars were different as there is no Hibernate 3 static module in AS8 (so applications could include Hibernate 3 jars). There were some other ways of dealing with service loading mentioned on the &amp;quot;stinking donkey&amp;quot; thread [1] last year, but I'm not sure if any of the alternatives would help application deployments to include Hibernate ORM/Search/other jars. [1]</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Fwd: [jdf-dev] JBoss Modules dependency vs pain POM dependency + exclusions</header>
    <date>Thu Jun 06 23:26:20 CEST 2013</date>
    <body>Hibernate Search has many additional dependencies on top of just ORM.. would the WildFly team be happy with that? I always assumed that would not be considered acceptable. Also with such a solution people won't have flexibility on the version; I know people don't have it with ORM either - unless they bring their own - but to make upgrades possible in existing projects it is extremely useful to be able to update one dependency at a time, which I suspect would not be possible anymore: upgrade ORM first, run the tests, upgrade Search, run the tests. Nailing down one version - by using the ORM provided by an application server - makes this harder, but nailing down both versions forces people to upgrade both at the same time: if there's an issue it will be much harder to figure out the area. Sanne If the static Hibernate Search module, depends on a static Hibernate ORM module in WildFly 8, I think that is fine, but applications wouldn't be able to include their own Hibernate Search jars (since the static Hibernate ORM module only sees services in the static Hibernate Search module). That's one deployment and the one I did first (see my other email). For WildFly 8, do we want to allow applications to bundle its own version of Hibernate Search that could work with bundled Hibernate ORM jars? It's a bit confusing to me this whole business but AFAIU but if we could, yes that would be good.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Fwd: [jdf-dev] JBoss Modules dependency vs pain POM dependency + exclusions</header>
    <date>Fri Jun 07 20:10:07 CEST 2013</date>
    <body>Its not every dependency that needs to be put into the Hibernate ORM static module, just the ones that the ORM service loader needs to see. Are the additional dependencies also loaded as ORM services? I'm not against saying no to including Hibernate Search jars in application deployments.  That would be the easiest. The best reason that I have heard for including Hibernate ORM jars with the application, is that they want to stay with that version of Hibernate while moving forward to a newer application server version that may be bundling a newer Hibernate version.  If found it problematic to support deployments having their own Hibernate ORM jars, when there are bidirectional 1-1 dependencies on the static Hibernate ORM module referencing code that we use with Hibernate ORM. We could look again at some of the suggestions on for changing how we do service loading in Hibernate.  I don't think any of the suggestions helped the last time we tried to improve service loading (modular classloading doesn't have inverse dependencies and we can't pass classloaders into the Hibernate ORM service loading code). But, maybe I'm wrong and we could make a change somewhere for improvement. If the static Hibernate Search module, depends on a static Hibernate ORM module in WildFly 8, I think that is fine, but applications wouldn't be able to include their own Hibernate Search jars (since the static Hibernate ORM module only sees services in the static Hibernate Search module). That's one deployment and the one I did first (see my other email). For WildFly 8, do we want to allow applications to bundle its own version of Hibernate Search that could work with bundled Hibernate ORM jars? It's a bit confusing to me this whole business but AFAIU but if we could, yes that would be good. To handle application deployments that contain their own Hibernate Search jars, we would need to make an adjustment.  Instead of having the Hibernate ORM module depend on the Hibernate Search module (this is what we currently do in AS7 via 1-1 bidirectional dependencies), we would need to include the Hibernate Search jars in the Hibernate ORM module. This is specific to WildFly 8 (assuming my WF8 patch is merged in). If we don't put Hibernate Search into the ORM module, we will face the same blocking issue that I saw very late on AS7, which is the JipiJapa integration code module (used to be in AS7 codebase) depends on the static Hibernate ORM module which conflicts with the Hibernate ORM jars loaded by the application classloader. Also, keep in mind that In AS7, there was no JipiJapa project, so applications couldn't easily include the JipiJapa integration classes (point being that there were several blocking issues that prevented Hibernate 4.x jars from being in the deployment).  Of course, Hibernate 3 jars were different as there is no Hibernate 3 static module in AS8 (so applications could include Hibernate 3 jars). There were some other ways of dealing with service loading mentioned on the &amp;quot;stinking donkey&amp;quot; thread [1] last year, but I'm not sure if any of the alternatives would help application deployments to include Hibernate ORM/Search/other jars. [1] _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Fwd: [jdf-dev] JBoss Modules dependency vs pain POM dependency + exclusions</header>
    <date>Fri Jun 14 13:48:32 CEST 2013</date>
    <body>My bad.  Sanne and I talked yesterday and he reminded me that Hibernate ORM integrators can load (Hibernate Search) services from the application classpath. In my testing of deploying an application that uses a clustered second level cache, I hit a NPE in Infinispan, since it didn't know about the hibenate-infinispan configuration (Infnispan service loading didn't occur for the application embedded Hibernate ORM jar). Oh the shame for getting these two cases (Search + 2lc) mixed up :( Below is an email describing the issues i had to get Hibernate Search run in WildFly / EAP. A possibility to make life easier for Hibernate Search users in WildFly is as described by Pete to create a hibernate-search-orm-wildfly which marks Hibernate ORM as provided. What do you think? Emmanuel Begin forwarded message: Date: 6 juin 2013 11:21:13 UTC+02:00 Subject: Re: [jdf-dev] JBoss Modules dependency vs pain POM dependency + exclusions Hey Emmanuel, The Hibernate Search enabled version of TicketMonster relies on Hibernate Search 4.3 which itself has a dependency on Hibernate ORM included in WildFly and JBoss EAP. My first approach was to ask the user to add the Hibernate Search JBoss Module manually into their EAP / WildFly distribution and have it referenced in jboss-deployment-structure.xml. I also had to put Hibernate Search in my POM as provided because the BOM references an older version of Hibernate Search. We should be targeting the version of HSearch that is in WFK. If the BOM is out of date (highly possible), then please either send a pull to update it or ask Rafael to do so. He or I can do a you a release very quickly once the change is in. To avoid the manual step, I tried to list Hibernate Search explicitly in the POM as regular scope and no longer use jboss-deployment-structure.xml. But then I have to play with exclusions which is not too nice either. Which approach is better suited for TicketMonster? And is there a better way? Fix the HSearch POM so that it marks as optional or provided stuff that you are excluding would be one way. If you don't want to do this, then another option would be to produce a HSearch-for-WF pom as part of HSearch that does it. In general, it's better to not make the user fiddle with exclusions, and instead do it in the framework itself. Here is the commit that moves from a module dependency to plain pom.xml Emmanuel _______________________________________________ jdf-dev mailing list _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] problem running local matrix tests</header>
    <date>Thu Jun 06 21:48:29 CEST 2013</date>
    <body>Hi, I have local database configurations for matrix testing against spatial databases. With HHH-8235 support for matrix testing has been moved into  a separate project. Unfortunately, this change broke my matrix tests. I now get this error: Execution failed for task ':hibernate-spatial:matrix_postgis'. Anyone an idea what I'm doing wrong? Btw, I did update my Gradle file to include: apply plugin: 'hibernate-matrix-testing'. Regards, Karel Maesen</body>
  </mail>
  <mail>
    <header>[hibernate-dev] problem running local matrix tests</header>
    <date>Tue Jun 11 18:35:50 CEST 2013</date>
    <body>You might be seeing I merged that pull request, but I have not built a new release and pulled that into hibernate-orm yet. Could you try building it locally and integrating it into your local hibernate-orm checkout?  If that works, I'll do that upstream. Really just been looking for some validation that that fix really was a fix... No such property: project for class: org.hibernate.build.gradle.testing.database.alloc.DatabaseAllocator</body>
  </mail>
  <mail>
    <header>[hibernate-dev] problem running local matrix tests</header>
    <date>Tue Jun 11 21:47:04 CEST 2013</date>
    <body>I compiled it locally and the exception is no longer thrown. But now I have another problem. The generated matrix tasks have on their class path only the jdbcDepency from matrix.gradle and the hibernate-core classes and resources. The databases/&amp;lt;database&amp;gt;/resources directory is not added so the db-specific hibernate.properties is not picked up. The result is that all my matrix tests now run with the hibernate config of the unit tests. Hi, I have local database configurations for matrix testing against spatial databases. With HHH-8235 support for matrix testing has been moved into  a separate project. Unfortunately, this change broke my matrix tests. I now get this error: Execution failed for task ':hibernate-spatial:matrix_postgis'. No such property: project for class: org.hibernate.build.gradle.testing.database.alloc.DatabaseAllocator Anyone an idea what I'm doing wrong? Btw, I did update my Gradle file to include: apply plugin: 'hibernate-matrix-testing'. Regards, Karel Maesen _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] problem running local matrix tests</header>
    <date>Wed Jun 12 15:22:01 CEST 2013</date>
    <body>Hmm, not sure about that one.  I'll have to look.  Did that work before?  I see the code loading resources/hibernate.properties, but not generally loading all stuff from resources.  And even then, I am not seeing the loaded hibernate.properties being used atm. I merged that pull request, but I have not built a new release and pulled that into hibernate-orm yet. Could you try building it locally and integrating it into your local hibernate-orm checkout?  If that works, I'll do that upstream. Really just been looking for some validation that that fix really was a fix... Hi, I have local database configurations for matrix testing against spatial databases. With HHH-8235 support for matrix testing has been moved into  a separate project. Unfortunately, this change broke my matrix tests. I now get this error: Execution failed for task ':hibernate-spatial:matrix_postgis'. No such property: project for class: org.hibernate.build.gradle.testing.database.alloc.DatabaseAllocator Anyone an idea what I'm doing wrong? Btw, I did update my Gradle file to include: apply plugin: 'hibernate-matrix-testing'. Regards, Karel Maesen _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] problem running local matrix tests</header>
    <date>Wed Jun 12 23:44:50 CEST 2013</date>
    <body>It used to work fine until the matrix-testing support was moved to a separate project. I compiled it locally and the exception is no longer thrown. But now I have another problem. The generated matrix tasks have on their class path only the jdbcDepency from matrix.gradle and the hibernate-core classes and resources. The databases/&amp;lt;database&amp;gt;/resources directory is not added so the db-specific hibernate.properties is not picked up. The result is that all my matrix tests now run with the hibernate config of the unit tests. I merged that pull request, but I have not built a new release and pulled that into hibernate-orm yet. Could you try building it locally and integrating it into your local hibernate-orm checkout?  If that works, I'll do that upstream. Really just been looking for some validation that that fix really was a fix... Hi, I have local database configurations for matrix testing against spatial databases. With HHH-8235 support for matrix testing has been moved into  a separate project. Unfortunately, this change broke my matrix tests. I now get this error: Execution failed for task ':hibernate-spatial:matrix_postgis'. No such property: project for class: org.hibernate.build.gradle.testing.database.alloc.DatabaseAllocator Anyone an idea what I'm doing wrong? Btw, I did update my Gradle file to include: apply plugin: 'hibernate-matrix-testing'. Regards, Karel Maesen _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Git history of Hibernate Search 4.3.0.Final</header>
    <date>Sat Jun 08 01:04:26 CEST 2013</date>
    <body>To create the 4.3.0.Final release we're branching off from the very stable 4.3.0.CR1 tag and applying a subset of the patches we applied to master since them, as some are more appropriate for the next iteration 4.4. I'll push the produced branch as &amp;quot;4.3&amp;quot; and mvn release:prepare is going to set the next version for this branch as 4.3.1-SNAPSHOT (however there is no expectation for an actual 4.3.1 release). I don't think this affects any ongoing work, just don't be too surprised if you won't see the 4.3.0.Final among the ancestors of 4.4 work in your git logs. Sanne</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate Search 4.3.0.Final released</header>
    <date>Tue Jun 11 17:22:00 CEST 2013</date>
    <body>I've posted a summary of highlights at --Sanne</body>
  </mail>
  <mail>
    <header>[hibernate-dev] JSON version of Hibernate Search query</header>
    <date>Tue Jun 11 23:18:15 CEST 2013</date>
    <body>Hey everyone, Sanne and I discussed Hibernate Search queries and serialization in general. I did play around that to represent Hibernate Search DSL queries into JSON. It is a very first draft (not reviewed). What is really nice is that I did not have to do much adaptation, the Query DSL is expressive enough to have a one to one port thanks to its context nature. I did not work on some of the quirk cases nor tried to optimize the &amp;quot;80%&amp;quot; use case. A nice effect is that I manage to unify the FullTextQuery (including the types filtering), the lucene query part, the faceting definitions and the faceting selection. Let me know what you think.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] JSON version of Hibernate Search query</header>
    <date>Wed Jun 12 15:03:53 CEST 2013</date>
    <body>Hi, Just out of interest, what are the use cases for such a serialized form? Is this intended to be written by humans or other applications? --Gunnar</body>
  </mail>
  <mail>
    <header>[hibernate-dev] JSON version of Hibernate Search query</header>
    <date>Wed Jun 12 22:39:07 CEST 2013</date>
    <body>I think you could intend it like the SQL traditionally did for relational databases: it's primarily intended to be consumed by other applications as a stable interface, but is easy to be understood, debugged or even forged by humans on a console in case of need. Hey everyone, Sanne and I discussed Hibernate Search queries and serialization in general. I did play around that to represent Hibernate Search DSL queries into JSON. It is a very first draft (not reviewed). What is really nice is that I did not have to do much adaptation, the Query DSL is expressive enough to have a one to one port thanks to its context nature. I did not work on some of the quirk cases nor tried to optimize the &amp;quot;80%&amp;quot; use case. A nice effect is that I manage to unify the FullTextQuery (including the types filtering), the lucene query part, the faceting definitions and the faceting selection. Let me know what you think. _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] JSON version of Hibernate Search query</header>
    <date>Wed Jun 12 23:48:23 CEST 2013</date>
    <body>In the end there is always a human (so far) but think of it as used in the same way SQL is. SQL is sued by both humans and programs (ORMs). Emmanuel</body>
  </mail>
  <mail>
    <header>[hibernate-dev] JSON version of Hibernate Search query</header>
    <date>Thu Jun 13 08:47:05 CEST 2013</date>
    <body>Would creating a &amp;quot;real&amp;quot; query language instead of a serialized object representation make sense then? This would allow for a conciser syntax, making it easier to write (that's why I asked who would be writing such queries), but probably it'd be more work to create such a language. I guess a sub-set of JPQL would work for some parts, but additional elements would be needed for facets etc. For other applications (at least Java ones) which are creating queries programmatically it could also be an option to extend the DSL to allow for specifying the output format: String query = buildQueryBuilder() .forEntity( Hypothesis.class ) .get() .all() //submit query... The DSL implementation would create an actual Lucene query, a JSON string etc., depending on the given format. Not sure what makes sense, just throwing out some ideas. --Gunnar</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Antlr3 / JDK 1.5</header>
    <date>Mon Apr 20 15:54:17 CEST 2009</date>
    <body>I am working wth Alexandre Porcelli on some major changes to the HQL translators.  Since the changes are drastic we decided to move from Antlr2 to Antlr3 in the process as Antlr3 offers many benefits over Antlr2. The only concern I have with the move to Antlr3 is the fact that Antlr3 only works with JDK 1.5+.  I had planned on incorporating this work into Hibernate 3.5.  The obvious question being the corresponding JDK move for Hibernate users migrating to 3.5. Anyone have strong reasons to not do this move in the 3.5 timeframe? -- Hibernate.org</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Antlr3 / JDK 1.5</header>
    <date>Mon Apr 20 16:14:07 CEST 2009</date>
    <body>No issues here. -CB</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Antlr3 / JDK 1.5</header>
    <date>Wed Apr 22 14:22:50 CEST 2009</date>
    <body>Is antrl3 capable to coexist with antrl2 in the same classloader/app/vm ? /max I am working wth Alexandre Porcelli on some major changes to the HQL translators.  Since the changes are drastic we decided to move from Antlr2 to Antlr3 in the process as Antlr3 offers many benefits over Antlr2. The only concern I have with the move to Antlr3 is the fact that Antlr3 only works with JDK 1.5+.  I had planned on incorporating this work into Hibernate 3.5.  The obvious question being the corresponding JDK move for Hibernate users migrating to 3.5. Anyone have strong reasons to not do this move in the 3.5 timeframe?</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Re: Antlr3 / JDK 1.5</header>
    <date>Wed Apr 29 17:00:25 CEST 2009</date>
    <body>OK, my email (hibernate.org) is finally back.  Perhaps just heard no responses because it was down? Any objections? -- Hibernate.org</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Re: Antlr3 / JDK 1.5</header>
    <date>Thu Apr 30 14:40:49 CEST 2009</date>
    <body>I asked: Is antrl3 capable to coexist with antrl2 in the same classloader/app/vm ? /max I am working wth Alexandre Porcelli on some major changes to the HQL translators.  Since the changes are drastic we decided to move from Antlr2 to Antlr3 in the process as Antlr3 offers many benefits over Antlr2. The only concern I have with the move to Antlr3 is the fact that Antlr3 only works with JDK 1.5+.  I had planned on incorporating this work into Hibernate 3.5.  The obvious question being the corresponding JDK move for Hibernate users migrating to 3.5. Anyone have strong reasons to not do this move in the 3.5 timeframe?</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Re: Antlr3 / JDK 1.5</header>
    <date>Thu Apr 30 14:49:54 CEST 2009</date>
    <body>Hi Steve, I asked: Is antrl3 capable to coexist with antrl2 in the same classloader/app/vm ? p.s. your email  bounces with errors. /max I am working wth Alexandre Porcelli on some major changes to the HQL translators.  Since the changes are drastic we decided to move from Antlr2 to Antlr3 in the process as Antlr3 offers many benefits over Antlr2. The only concern I have with the move to Antlr3 is the fact that Antlr3 only works with JDK 1.5+.  I had planned on incorporating this work into Hibernate 3.5.  The obvious question being the corresponding JDK move for Hibernate users migrating to 3.5. Anyone have strong reasons to not do this move in the 3.5 timeframe?</body>
  </mail>
  <mail>
    <header>[hibernate-dev] what's going on jboss.org???</header>
    <date>Thu Apr 23 13:37:56 CEST 2009</date>
    <body>this is getting absurd, it's a been a week now, and the site is down compeletly , i'm searching for a problem we've been having about opening multiple XA Data sources for oracle, (opening the second hands jboss and throws an meta-aware exception, this happens in jboss 4.2) all the issues that relate to this problem found in google are in jboss.orgwhich i cannot enter. -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] what's going on jboss.org???</header>
    <date>Thu Apr 23 13:51:32 CEST 2009</date>
    <body>Agreed. Even though I work for a company with paid support for JBoss EAP jboss.orgis a crucial resource. -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] what's going on jboss.org???</header>
    <date>Thu Apr 23 14:50:07 CEST 2009</date>
    <body>i'm searching for a problem we've been having about opening multiple XA Data sources for oracle, This might help :-)</body>
  </mail>
  <mail>
    <header>[hibernate-dev] what's going on jboss.org???</header>
    <date>Thu Apr 23 22:47:27 CEST 2009</date>
    <body>thanks, i've read only half of it and i'll explain why. we had not gotten to actually recovering from a transaction for simple reason that we are unable to actually create one. as soon as we begin a transaction, we get 2 different  jdbc data sources to oracle under a stateless session ejb, when we use the 2nd getConnection jboss hangs for a half a minute, and then bombs with unable to enlist data source exception. we tried to walk though the debugger and it seems somethings during the lock of a transaction, (we used jboss 4.2.0 which uses jbossjta 4.2.3 sp3 which we didn't have the source code for, so now we are trying jboss 4.2.3 which uses jbossjta 4.2.3 sp7 which we do have sources for) before the exception occurs we see 2 warnings from arjuna i18logger about multiple threads, it seems the transaction is aborting (but never got to the code that actually aborted it). the same code worked btw on websphere 6.1 i've seen somewhere that you could use a property called something like allowMultipleResources in jbossjta.properties file , but that didn't work as well. this reminded me of the case in jboss 3.2.5, we used spring 1.2.8 to get jta transaction, but each time we actually got a transaction it was already &amp;quot;dead&amp;quot; because of a time out,even though we just got it from begin transaction method. -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] what's going on jboss.org???</header>
    <date>Thu Apr 23 22:59:05 CEST 2009</date>
    <body>If you're getting the multiple last resources message, then you're not using XA resources.  The allowMultipleLastResources setting is a very dangerous thing to use and I would not recommend enabling it. All that said, I don't understand why there'd be any long timeouts with all of this.... -Chris</body>
  </mail>
  <mail>
    <header>[hibernate-dev] what's going on jboss.org???</header>
    <date>Fri Apr 24 07:54:03 CEST 2009</date>
    <body>no getting multiple resource message, but exactly the warnings he was getting, (&amp;quot;invoked while multiple threads active within..&amp;quot;) but i have no idea why it's aborting the transaction, maybe because the 2nd getConnection takes somewhat longer (don't know why, this could be the real problem,) thanks, i've read only half of it and i'll explain why. we had not gotten to actually recovering from a transaction for simple reason that we are unable to actually create one. as soon as we begin a transaction, we get 2 different  jdbc data sources to oracle under a stateless session ejb, when we use the 2nd getConnection jboss hangs for a half a minute, and then bombs with unable to enlist data source exception. we tried to walk though the debugger and it seems somethings during the lock of a transaction, (we used jboss 4.2.0 which uses jbossjta 4.2.3 sp3 which we didn't have the source code for, so now we are trying jboss 4.2.3 which uses jbossjta 4.2.3 sp7 which we do have sources for) before the exception occurs we see 2 warnings from arjuna i18logger about multiple threads, it seems the transaction is aborting (but never got to the code that actually aborted it). the same code worked btw on websphere 6.1 i've seen somewhere that you could use a property called something like allowMultipleResources in jbossjta.properties file , but that didn't work as well. this reminded me of the case in jboss 3.2.5, we used spring 1.2.8 to get jta transaction, but each time we actually got a transaction it was already &amp;quot;dead&amp;quot; because of a time out,even though we just got it from begin transaction method. &amp;lt;mailto: &amp;gt; i'm searching for a problem we've been having about opening multiple XA Data sources for oracle, &amp;gt; (opening the second hands jboss and throws an meta-aware exception, this happens in jboss 4.2) This might help :-) ------------------------------------------------------------------------ _______________________________________________ hibernate-dev mailing list -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate Validator 4.0.0 Beta1</header>
    <date>Mon Apr 27 17:57:10 CEST 2009</date>
    <body>Hi, Just released Hibernate Validator 4.0.0 Beta1. As always you find more information on in.relation.to - Enjoy!</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Search: Dynamic Document boosting</header>
    <date>Wed Apr 29 16:47:56 CEST 2009</date>
    <body>Hello, I'm currently needing to be able to define a per-entity INSTANCE different Boost, not just the type. Currently I could obtain this functionality by using a custom classbridge, but the entity is quite complex and building my own classbridge I will have to map all fields myself loosing the flexibility of annotations for the current type and all @IndexedEmbedded. I'd like to add a new parameter to @Boost; currently it has a float mandatory value, I'd like to add a new parameter: where BoostScorer is an interface having something like The annotation would default to an implementation returning constant 1.0f. This would have an interaction with the existing &amp;quot;value&amp;quot; parameter: IMHO they should multiply each other, so I'd change the existing value to also have a default of 1.0f and people might want to change one or both values. Setting both values might be useful to reuse the same impl on different types/fields and still be able to statically scale the result from the score(Object) function, without having to rewrite a new implementation. What do you think? Sanne</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Search: Dynamic Document boosting</header>
    <date>Thu Apr 30 11:32:44 CEST 2009</date>
    <body>What's your use case? I am not against that feature but I don't think it covers all use cases: - I want a higher boost for more recent documents - I change priority in my categories depending on the marketing mood Said otherwise, can have a true dynamic boost defined at query time, not at indexing time. I think Solr has something named FunctionQuery that can do that.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Search: Dynamic Document boosting</header>
    <date>Thu Apr 30 13:01:58 CEST 2009</date>
    <body>Basically I need a function to convert a user-proposed term to a series of proposals of &amp;quot;similar&amp;quot; terms but giving a higher rank to the terms I'd prefer him to choose as they are the correct names used in my domain. You can think of it as a spellchecker/dictionary (using synonyms toos), but giving priority to a selected form of each term, known as the &amp;quot;root&amp;quot;, or the standard form in the domain. actually I'm also going to use it for the 2 reasons you are listing, and it's not a problem for me as I rebuild the index regularly and prefer for several reasons to pre-compute the boosts needed for &amp;quot;categories in and &amp;quot;fade by age&amp;quot; effects. 2009/4/30 Emmanuel Bernard &amp;lt;&amp;gt;: Hello, I'm currently needing to be able to define a per-entity INSTANCE different Boost, not just the type. Currently I could obtain this functionality by using a custom classbridge, but the entity is quite complex and building my own classbridge I will have to map all fields myself loosing the flexibility of annotations for the current type and all @IndexedEmbedded. I'd like to add a new parameter to @Boost; currently it has a float mandatory value, I'd like to add a new parameter: where BoostScorer is an interface having something like The annotation would default to an implementation returning constant 1.0f. This would have an interaction with the existing &amp;quot;value&amp;quot; parameter: IMHO they should multiply each other, so I'd change the existing value to also have a default of 1.0f and people might want to change one or both values. Setting both values might be useful to reuse the same impl on different types/fields and still be able to statically scale the result from the score(Object) function, without having to rewrite a new implementation. What do you think? Sanne _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Search: Dynamic Document boosting</header>
    <date>Thu Apr 30 13:29:01 CEST 2009</date>
    <body>Have you considered indexing the same property twice: - once unaltered and giving it a high boost - once with synonyms and giving it a low boost That's how I would sove your use case personally. What's your use case? I am not against that feature but I don't think it covers all use cases: - I want a higher boost for more recent documents - I change priority in my categories depending on the marketing mood Said otherwise, can have a true dynamic boost defined at query time, not at indexing time. I think Solr has something named FunctionQuery that can do that. Hello, I'm currently needing to be able to define a per-entity INSTANCE different Boost, not just the type. Currently I could obtain this functionality by using a custom classbridge, but the entity is quite complex and building my own classbridge I will have to map all fields myself loosing the flexibility of annotations for the current type and all @IndexedEmbedded. I'd like to add a new parameter to @Boost; currently it has a float mandatory value, I'd like to add a new parameter: where BoostScorer is an interface having something like The annotation would default to an implementation returning constant 1.0f. This would have an interaction with the existing &amp;quot;value&amp;quot; parameter: IMHO they should multiply each other, so I'd change the existing value to also have a default of 1.0f and people might want to change one or both values. Setting both values might be useful to reuse the same impl on different types/fields and still be able to statically scale the result from the score(Object) function, without having to rewrite a new implementation. What do you think? Sanne _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Search: Dynamic Document boosting</header>
    <date>Thu Apr 30 14:11:15 CEST 2009</date>
    <body>&amp;gt;: Basically I need a function to convert a user-proposed term to a series of proposals of &amp;quot;similar&amp;quot; terms but giving a higher rank to the terms I'd prefer him to choose as they are the correct names used in my domain. You can think of it as a spellchecker/dictionary (using synonyms toos), but giving priority to a selected form of each term, known as the &amp;quot;root&amp;quot;, or the standard form in the domain. That would be clever if I had only two levels of boost, but it's not the case. Also most properties are being indexed already in 5+n different fields, being n the number of supported languages for snowball (currently 15, so the next step will be to try the programmatic configuration to remove all this annotations). So adding more fields will drammatically increase the number of them (number of boost levels * (5 + number of enabled stemmers)) and make the index size unnecessarily large, and I'm not solving the time-fading requirement. My BI suite is returning some nice float which I'm storing in the entity itself as a property, it would make my life a lot easier if I could just use this float value as the document boost. This is the simple explanation which I believe is useful in all indexing actually I'm also going to use it for the 2 reasons you are listing, and it's not a problem for me as I rebuild the index regularly and prefer for several reasons to pre-compute the boosts needed for &amp;quot;categories in and &amp;quot;fade by age&amp;quot; effects. &amp;gt;: What's your use case? I am not against that feature but I don't think it covers all use cases: &amp;#160;- I want a higher boost for more recent documents &amp;#160;- I change priority in my categories depending on the marketing mood Said otherwise, can have a true dynamic boost defined at query time, not at indexing time. I think Solr has something named FunctionQuery that can do that. Hello, I'm currently needing to be able to define a per-entity INSTANCE different Boost, not just the type. Currently I could obtain this functionality by using a custom classbridge, but the entity is quite complex and building my own classbridge I will have to map all fields myself loosing the flexibility of annotations for the current type and all @IndexedEmbedded. I'd like to add a new parameter to @Boost; currently it has a float mandatory value, I'd like to add a new parameter: where BoostScorer is an interface having something like The annotation would default to an implementation returning constant 1.0f. This would have an interaction with the existing &amp;quot;value&amp;quot; parameter: IMHO they should multiply each other, so I'd change the existing value to also have a default of 1.0f and people might want to change one or both values. Setting both values might be useful to reuse the same impl on different types/fields and still be able to statically scale the result from the score(Object) function, without having to rewrite a new implementation. What do you think? Sanne _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Search: Dynamic Document boosting</header>
    <date>Thu Apr 30 18:27:34 CEST 2009</date>
    <body>Basically I need a function to convert a user-proposed term to a series of proposals of &amp;quot;similar&amp;quot; terms but giving a higher rank to the terms I'd prefer him to choose as they are the correct names used in my domain. You can think of it as a spellchecker/dictionary (using synonyms toos), but giving priority to a selected form of each term, known as the &amp;quot;root&amp;quot;, or the standard form in the domain. Have you considered indexing the same property twice: - once unaltered and giving it a high boost - once with synonyms and giving it a low boost That's how I would sove your use case personally. number of boost? the level of boost is defined at query time so I guess there would be the clean data and the synonym data ie 2 * (5 + languages) right? Well yes but dynamic boosting as defined by you does not solve the time fading requirement either right? FunctionQuery does (or can) I'd rather see something more generic like the @AnalyzerDiscriminator approach we've used if really really you want to set that at indexing time.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Search: Dynamic Document boosting</header>
    <date>Thu Apr 30 19:36:01 CEST 2009</date>
    <body>Thank you very much for the suggestions, maybe what I was trying is wrong. I'll try to use the FunctionQuery; remember I had the patch in Search more or less working if one day you might need it. BTW I've just realized the Discriminator interface is having a nasty typo in the public api method name : &amp;quot;getAnanyzerDefinitionName&amp;quot; instead of getAnalyzerDefinitionName and the bug is repeated in all documentation. fixing for 3.2? 2009/4/30 Emmanuel Bernard &amp;lt;&amp;gt;: &amp;gt;: Basically I need a function to convert a user-proposed term to a series of proposals of &amp;quot;similar&amp;quot; terms but giving a higher rank to the terms I'd prefer him to choose as they are the correct names used in my domain. You can think of it as a spellchecker/dictionary (using synonyms toos), but giving priority to a selected form of each term, known as the &amp;quot;root&amp;quot;, or the standard form in the domain. Have you considered indexing the same property twice: &amp;#160;- once unaltered and giving it a high boost &amp;#160;- once with synonyms and giving it a low boost That's how I would sove your use case personally. That would be clever if I had only two levels of boost, but it's not the case. Also most properties are being indexed already in 5+n different fields, being n the number of supported languages for snowball (currently 15, so the next step will be to try the programmatic configuration to remove all this annotations). So adding more fields will drammatically increase the number of them (number of boost levels * (5 + number of enabled stemmers)) and make the index size unnecessarily large, and I'm not solving the time-fading requirement. My BI suite is returning some nice float which I'm storing in the entity itself as a property, it would make my life a lot easier if I could just use this float value as the document boost.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [BV] Latest version of the spec</header>
    <date>Thu Apr 30 22:07:30 CEST 2009</date>
    <body>I had to move to the latest version of the spec to</body>
  </mail>
  <mail>
    <header>[hibernate-dev] New parameter for @Boost</header>
    <date>Fri May 01 04:29:59 CEST 2009</date>
    <body>Would'nt it be better to leave this annotation as is and add a new one for this new requirement?  How much would this complicate things? -- John Griffin Senior Software Engineer Overstock.com Hibernate Search in Action () __________________________________ Refactoring is NOT a substitute for design. -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [OGM] Metamodel</header>
    <date>Wed May 01 10:41:57 CEST 2013</date>
    <body>Hi, I've started to work on the metamodel. I've look at the branch that emmanuel created and I've rebased it to the latest master fixing all checkstyle violations: The problem is that I don't have a clear idea how the metamodel is supposed to work, what could be a good test case to start with? Thanks, Davide</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [OGM] Metamodel</header>
    <date>Fri May 03 15:13:15 CEST 2013</date>
    <body>Hello Davide, Technically most of the knowledge is in but it's definitely quite blurry for a new comer ;) Let me try and summarize it for you. With that you'll be able to better grasp the comments in OGM-208 ## Goals We want a metadata facility as a way to pass mapping and configuration from the developer to the grid dialect / datastore provider. I will call these options. The facility should: - be expressible via annotations - be expressible via a programmatic API - be as type-safe as possible but not too hard to add configuration options This project is essentially smart plumbing so the &amp;quot;clients&amp;quot; of this API are the developers on one hand and the Datastore providers on the other hand. ## What to reuse We will most likely use Jandex to read annotations to benefit from the ORM and WildFly work esp wrt indexing. ## Scopes: overriding and refining options Each option might be: - global, per entity, per property (with optional overridability from one to the other) - global, specific to a session, specific to an operation (e.g. query) On top of that options can be polled together by functional affinities like key/value generic options, Infinispan specific options, document store options etc. ## Programmatic API The programmatic API can be used to define mapping options as well as session or even operation options. It should be type-safe and will likely look like Hibernate Search's approach more or less. This is more or less what is in the branch. Check out the package-info.java for some more information. ## Annotation We need a way to convert an annotation into calls to the programmatic API (semantically speaking at least). Something like an (meta)annotation based conversion: @ToInternalModel(UnsafeConverter.class) This is todo ## Reading API Datastore providers and GridDialect implementations should be able to read back these options. This is more or less what you can see in the last few code lines of my OGM-207 comment of 27/Jul/12 6:33 PM. The seed of it is the MappingService API on the branch but it looks all untypesafe and wrong :) Let's call it unfinished. ## Expressing options in a type-safe way If you look at OGM-207's comment of 27/Jul/12 6:33 PM, you will wee an example of NamedQuery and Quorum options and the infrastructure needed. It shows how to uniquely identify an option and how to model options like quorum that are identified by their name and options like named queries that are identified by their name + a key (the query name in this case). It's available in options.Iteration2's class. ## Tests Tests are available in org.hibernate.ogm.test.mapping. ## Examples of options You can imagine the following examples of options: - quorum: express the R/W quorum (globally, per entity, per collection, per session) ; useful for dynamo based systems - WriteConcern: express the write concern options for MongoDB (globally, per entity, per collection) - Whether or not store association information in the main document or in a separate document (see MongoDB IN_ENTITY etc. We could have this option on a per collection basis and not a global setting. - all datastore specific options whether they are global or relate to one entity or one property I hope I have been clearer, fire the questions away. Emmanuel PS: JIRA no longer has a way to link to comments?</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [OGM] Metamodel</header>
    <date>Tue May 07 11:05:13 CEST 2013</date>
    <body>Thanks for all the information, I think I have a clearer idea now. I'll start to write some code and see what happens :) Davide</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [OGM] Metamodel</header>
    <date>Tue May 21 15:00:11 CEST 2013</date>
    <body>An initial prototype of the Metamodel (branch 208 on my repository: I've added the Option class that can be extended into more specific specific Option (example WriteConcern for MongoDB or Quorum). Options can be grouped into an OptionContainer. An annotation that represent an Option can be converte using an AnnotationConverte that will be able to convert the annotation into an Option and add it to an OptionContainer. An example: WriteConcernOption: WriteConcernAnnotation: Mapping: MappingAndAnnotation: At the moment is possible to pass a MappingContext setting a property: Cheers, Davide Hello Davide, Technically most of the knowledge is in but it's definitely quite blurry for a new comer ;) Let me try and summarize it for you. With that you'll be able to better grasp the comments in OGM-208 ## Goals We want a metadata facility as a way to pass mapping and configuration from the developer to the grid dialect / datastore provider. I will call these options. The facility should: - be expressible via annotations - be expressible via a programmatic API - be as type-safe as possible but not too hard to add configuration options This project is essentially smart plumbing so the &amp;quot;clients&amp;quot; of this API are the developers on one hand and the Datastore providers on the other hand. ## What to reuse We will most likely use Jandex to read annotations to benefit from the ORM and WildFly work esp wrt indexing. ## Scopes: overriding and refining options Each option might be: - global, per entity, per property (with optional overridability from one to the other) - global, specific to a session, specific to an operation (e.g. query) On top of that options can be polled together by functional affinities like key/value generic options, Infinispan specific options, document store options etc. ## Programmatic API The programmatic API can be used to define mapping options as well as session or even operation options. It should be type-safe and will likely look like Hibernate Search's approach more or less. This is more or less what is in the branch. Check out the package-info.java for some more information. ## Annotation We need a way to convert an annotation into calls to the programmatic API (semantically speaking at least). Something like an (meta)annotation based conversion: @ToInternalModel(UnsafeConverter.class) static class UnsafeConverter implements void call(Unsafe annotation, This is todo ## Reading API Datastore providers and GridDialect implementations should be able to read back these options. This is more or less what you can see in the last few code lines of my OGM-207 comment of 27/Jul/12 6:33 PM. The seed of it is the MappingService API on the branch but it looks all untypesafe and wrong :) Let's call it unfinished. ## Expressing options in a type-safe way If you look at OGM-207's comment of 27/Jul/12 6:33 PM, you will wee an example of NamedQuery and Quorum options and the infrastructure needed. It shows how to uniquely identify an option and how to model options like quorum that are identified by their name and options like named queries that are identified by their name + a key (the query name in this case). It's available in options.Iteration2's class. ## Tests Tests are available in org.hibernate.ogm.test.mapping. ## Examples of options You can imagine the following examples of options: - quorum: express the R/W quorum (globally, per entity, per collection, per session) ; useful for dynamo based systems - WriteConcern: express the write concern options for MongoDB (globally, per entity, per collection) - Whether or not store association information in the main document or in a separate document (see MongoDB IN_ENTITY etc. We could have this option on a per collection basis and not a global setting. - all datastore specific options whether they are global or relate to one entity or one property I hope I have been clearer, fire the questions away. Emmanuel PS: JIRA no longer has a way to link to comments? &amp;gt; Hi, &amp;gt; I've started to work on the metamodel. I've look at the branch that &amp;gt; emmanuel created and I've rebased it to the latest master fixing all &amp;gt; checkstyle violations: &amp;gt; The problem is that I don't have a clear idea how the metamodel is supposed &amp;gt; to work, what could be a good test case to start with? &amp;gt; Thanks, &amp;gt; Davide &amp;gt; _______________________________________________ &amp;gt; hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Checkstyle woos</header>
    <date>Wed May 01 12:46:16 CEST 2013</date>
    <body>Hi, Yesterday Steve suggested installing Checkstyle IDEA plugin, since Hibernate now adds checks for that. However, I can't seem to disable the errors it shows in projects where I don't use Checkstyle. Uninstalling the plugin for the time being. If anyone knows how to avoid Checkstyle interfering in projects where there's no particular Checkstyle guidelines, let me know. Cheers, -- Galder Zamarre&amp;#241;o twitter.com/galderz Project Lead, Escalante Engineer, Infinispan</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Checkstyle woos</header>
    <date>Wed May 01 13:15:24 CEST 2013</date>
    <body>I don't know. In Eclipse I don't have such problems, integration is great actually. Workaround: why should you work on projects not having it? ;-) I certainly would like to propose it to Infinispan too, at least on the Query / Lucene area as it's a pain for me to switch between different styles, tooling helps me avoid the pitfalls.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Checkstyle woos</header>
    <date>Thu May 02 14:27:04 CEST 2013</date>
    <body>Eventually found a way to get around this. If you go to Inspections on IDEA, you can disable &amp;quot;Checkstyle/Real-time Scan&amp;quot;, which is what shows the errors. You can enable selectively in each project. So, all good now :) Cheers, Hi, Yesterday Steve suggested installing Checkstyle IDEA plugin, since Hibernate now adds checks for that. However, I can't seem to disable the errors it shows in projects where I don't use Checkstyle. Uninstalling the plugin for the time being. If anyone knows how to avoid Checkstyle interfering in projects where there's no particular Checkstyle guidelines, let me know. Cheers, -- Galder Zamarre&amp;#241;o twitter.com/galderz Project Lead, Escalante Engineer, Infinispan _______________________________________________ hibernate-dev mailing list -- Galder Zamarre&amp;#241;o twitter.com/galderz Project Lead, Escalante Engineer, Infinispan</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Fwd: Hibernate field with custom type changes, but object not marked as 'dirty' for update</header>
    <date>Wed May 01 13:47:13 CEST 2013</date>
    <body>Hello, Currently I am facing issue with hibernate. I have a Entity class as given below. @Entity @Table(name = TABLE_NAME) @Access(AccessType.FIELD) //some fields //*@Access(AccessType.PROPERTY)* *@Column(name = &amp;quot;WA_DEFINED_TAB_INDEXES&amp;quot;)* *    @Type(type = SetToArrayUserType.CLASS_NAME)* @Version @Column(name = &amp;quot;versionCol&amp;quot; , nullable = false) //some getters/setters In case of AccessType.FIELD mapping, Hibernate doesn't mark object as dirty and doesn't update row when we only have changes in the fields that is mapped for custom type. If we have AccessType.PROPERTY mapping, Hibernate do mark object dirty and make update into database. is it bug in hibernate? I there is an open question also For the solution, either I will be forced use AccessType.PROPERTY or I have to mix FIELD and PROPERTY approach. Please let me know your thoughts about this. -- *With Best Regards,* * **       Mohd Adnan* *       Software Developer* *Mobile               +91-7498194516 * -- *With Best Regards,* * **       Mohd Adnan* *       Software Developer* *Mobile               +91-7498194516 * *       Office id             ***</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Relaxing the pull request review requirement</header>
    <date>Wed May 01 18:12:47 CEST 2013</date>
    <body>We have been generally very strict in requiring any code change to be I still believe this has many benefits, but also it brings occasionally to painfully slow integrations for trivial fixed. Since we have a bot now automatically verifying changes, I think this rule should be relaxed a bit; still highly recommended to wait for someone else to merge it, but I'd propose that if you're confident it is simple enough, the review done by the bot should be considered good enough. I just self-merged : hope you all agree that waiting for feedback was unnecessary? Of course this should be used very sparingly, also considering that even if you think it's correct and simple enough someone might not agree with the change, and rises the committer's responsibility to the highest level. Sanne</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Relaxing the pull request review requirement</header>
    <date>Wed May 01 19:49:34 CEST 2013</date>
    <body>At least in HV we've been doing this effectively already, e.g. fixed typos without creating a PR. In particular when doing a review of a PR, merging this and adding another commit with this sort of tiny fixes, without creating a new PR for this. So I think this makes sense in some situtations, but IMO it really should be a very rarely used exception. Otherwise there might be the danger that the limit of what is considered small enough to self-merge slowly rises of time. I think the root question really is why do peer reviews lead to &amp;quot;painfully slow integrations&amp;quot;. Are you regularly waiting for your PRs to be integrated? Then maybe the possible reviewers should make it a higher prio to do the reviews? Personally, I try to do any PR reviews with a very high prio, i.e. bring my current task to a state where I can do a task change and do the review. is simple enough, the review done by the bot should be considered good enough. What kind of &amp;quot;review&amp;quot; is the bot doing in addition to running the build? --Gunnar</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Relaxing the pull request review requirement</header>
    <date>Thu May 02 10:43:52 CEST 2013</date>
    <body>I am not certain everyone follows all pull request notifications so that might explain the lack. At least in the &amp;quot;NoORM&amp;quot; subteam (search, OGM, Validator) we should handle pull requests for all of these projects even if its not &amp;quot;our&amp;quot; project du jour. but I'd propose that if you're confident it We have been generally very strict in requiring any code change to be I still believe this has many benefits, but also it brings occasionally to painfully slow integrations for trivial fixed. Since we have a bot now automatically verifying changes, I think this rule should be relaxed a bit; still highly recommended to wait for someone else to merge it, but I'd propose that if you're confident it is simple enough, the review done by the bot should be considered good enough. I just self-merged : hope you all agree that waiting for feedback was unnecessary? Of course this should be used very sparingly, also considering that even if you think it's correct and simple enough someone might not agree with the change, and rises the committer's responsibility to the highest level. Sanne _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Relaxing the pull request review requirement</header>
    <date>Thu May 02 16:10:33 CEST 2013</date>
    <body>The downside of waiting for a pull request to be merged by someone else is that it can take away some of the fun of contributing. Sometimes, I think sequentially and having to wait for a pull request to be merged can hurt my flow.  I'm speaking from my experience with non-Hibernate Search projects since I haven't submitted any patches to Search. ;) With Hibernate ORM, I am happy being able to decide myself, whether to push a change or create a pull request for someone else to look at first.  I like the ORM model better.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] hibernate dialect for hana</header>
    <date>Wed May 01 21:41:55 CEST 2013</date>
    <body>I'd like to follow up on the discussion started here[1]. I was asked to port an existing application to Hana, so my first task was to write a hibernate dialect for it. I've completed this and so far it is working nicely in the integration tests for the application. My app is still using Hibernate 3.3, so that was my starting point, but with a few small changes it also compiles against the current git master. Is there still interest in such a dialect? Should I open a jira ticket and submit a pull request? Thanks, Andrew [1]</body>
  </mail>
  <mail>
    <header>[hibernate-dev] hibernate dialect for hana</header>
    <date>Fri May 03 05:01:52 CEST 2013</date>
    <body>IIRC there was an agreement that we'd not accept new dialect anymore ------------------------- Best Regards,</body>
  </mail>
  <mail>
    <header>[hibernate-dev] hibernate dialect for hana</header>
    <date>Fri May 03 10:47:49 CEST 2013</date>
    <body>Why not? Especially as Hana looks extremely interesting. I recall some discussion about having the database vendors maintain them, but to go that route we could at least document how it works and make sure it's easy enough for end users. I think I'd prefer to see if database vendors are willing to donate hosting of a public instance of their db for test purposes.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] hibernate dialect for hana</header>
    <date>Fri May 03 11:17:28 CEST 2013</date>
    <body>I think the main reason is the lack of dev resource, if someone is willing to promise that long time contribution / maintains, I'm fine with that, or it will just become some dead code that we don't have knowledge nor time to maintains. ------------------------- Best Regards,</body>
  </mail>
  <mail>
    <header>[hibernate-dev] hibernate dialect for hana</header>
    <date>Fri May 03 11:29:57 CEST 2013</date>
    <body>But we can definitely have a wiki page or even better a table in the documentation for third party dialects and where they are hosted. That' cheap for us and keep the ecosystem thriving. Emmanuel</body>
  </mail>
  <mail>
    <header>[hibernate-dev] hibernate dialect for hana</header>
    <date>Fri May 03 12:07:36 CEST 2013</date>
    <body>+1 But I'd really like to see - for example - Oracle providing free to use (and hosted) RDBMS instance, 10gen a MongoDB instance, etc.. so they can update it as they see fit and deal with the maintenance aspects of it (and licencing + execution costs). Ideally if someone - like Andrew in this case - would be willing to be notified from continuous integration failures and make sure someone will help, then I think it would be more effective to keep the code in Hibernate. I think the main reason is the lack of dev resource, if someone is willing to promise that long time contribution / maintains, I'm fine with that, or it will just become some dead code that we don't have knowledge nor time to maintains. &amp;gt; Why not? Especially as Hana looks extremely interesting. &amp;gt; I recall some discussion about having the database vendors maintain them, but to go that route we could at least document how it works and make sure it's easy enough for end users. &amp;gt; I think I'd prefer to see if database vendors are willing to donate hosting of a public instance of their db for test purposes. &amp;gt; IIRC there was an agreement that we'd not accept new dialect anymore &amp;gt; &amp;gt; I'd like to follow up on the discussion started here[1]. I was asked to &amp;gt; &amp;gt; port an existing application to Hana, so my first task was to write a &amp;gt; &amp;gt; hibernate dialect for it. I've completed this and so far it is working &amp;gt; &amp;gt; nicely in the integration tests for the application. My app is still &amp;gt; &amp;gt; using Hibernate 3.3, so that was my starting point, but with a few small &amp;gt; &amp;gt; changes it also compiles against the current git master. Is there still &amp;gt; &amp;gt; interest in such a dialect? Should I open a jira ticket and submit a &amp;gt; &amp;gt; pull request? &amp;gt; &amp;gt; Thanks, &amp;gt; &amp;gt; Andrew &amp;gt; &amp;gt; _______________________________________________ &amp;gt; &amp;gt; hibernate-dev mailing list &amp;gt; ------------------------- &amp;gt; Best Regards, &amp;gt; _______________________________________________ &amp;gt; hibernate-dev mailing list ------------------------- Best Regards, _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] hibernate dialect for hana</header>
    <date>Fri May 03 12:37:20 CEST 2013</date>
    <body>Hi, I probably should have mentioned this in my first email, but I work for SAP (through an acquisition). I am not involved in HANA development, but was told it might be interesting to port the app I work on to HANA, so that's how I got started working on the dialect on my own time. I asked around internally at SAP and was told there was a lot of interest in having Hibernate support for HANA and that quite a few external inquiries had been made about it. I was encouraged to submit this (which I was planning anyway) and that SAP are also willing to maintain it. SAP have also already submitted code for HANA to EclipseLink. Andrew</body>
  </mail>
  <mail>
    <header>[hibernate-dev] hibernate dialect for hana</header>
    <date>Fri May 03 14:16:29 CEST 2013</date>
    <body>We've never said we were not accepting new dialects.  What was said is that there needs to be some accountability for new dialects. Sounds like we have that here... I think the main reason is the lack of dev resource, if someone is willing to promise that long time contribution / maintains, I'm fine with that, or it will just become some dead code that we don't have knowledge nor time to maintains.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] hibernate dialect for hana</header>
    <date>Fri May 03 19:18:45 CEST 2013</date>
    <body>Andrew, could you create a pull request against our master branch and add your dialect to hibernate-core/src/main/java/org/hibernate/dialect?  We'll take a look.  Email me if you need help creating the PR. Brett Meyer Red Hat Software Engineer, Hibernate ----- Original Message ----- Sent: Friday, May 3, 2013 8:16:29 AM Subject: Re: [hibernate-dev] hibernate dialect for hana We've never said we were not accepting new dialects.  What was said is that there needs to be some accountability for new dialects. Sounds like we have that here... I think the main reason is the lack of dev resource, if someone is willing to promise that long time contribution / maintains, I'm fine with that, or it will just become some dead code that we don't have knowledge nor time to maintains. _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] hibernate dialect for hana</header>
    <date>Sat May 04 12:11:30 CEST 2013</date>
    <body>Ok, sounds good. I am finishing up the test matrix iterations (takes a while to run the complete suite) and will try to have the pull request ready early next week. Thanks, Andrew</body>
  </mail>
  <mail>
    <header>[hibernate-dev] 4.3.0.Beta2 release tomorrow</header>
    <date>Wed May 01 23:48:53 CEST 2013</date>
    <body>Just a heads up that because of the instability with the CI job today and with many of the team off today I decided to put this release off until tomorrow.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] 4.3.0.Beta2 release tomorrow</header>
    <date>Thu May 02 17:10:00 CEST 2013</date>
    <body>I am hoping to have a pull request ready by Monday to bring JipiJapa (first alpha), Hibernate 4.3.0.Beta2 (or Beta1) into the expected WildFly alpha1 build next Tuesday. I'm currently working on JIPI-4 (need to wrap how we add AS dependencies on Infinispan caches) which is currently hacked to depend directly on AS internals (clustering/MSC layers) from AS7. I'm mentioning this because people have asked when Hibernate 4.3.x will be included with WildFly. Scott</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate Validator 5.0.1 and the story behind the	&amp;quot;missing&amp;quot; 5.0.0.Final</header>
    <date>Thu May 02 11:01:37 CEST 2013</date>
    <body>--Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Developer IRC Meeting - 5/2</header>
    <date>Thu May 02 18:48:38 CEST 2013</date>
    <body>Unfortunately my internet connection was spotty today... [11:14] &amp;lt;jbott&amp;gt; Minutes: [11:14] &amp;lt;jbott&amp;gt; Minutes (text): [11:14] &amp;lt;jbott&amp;gt; Log:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate ORM 4.3.0.Beta2 released</header>
    <date>Thu May 02 22:46:27 CEST 2013</date>
    <body>Hibernate ORM 4.3.0.Beta2 was just released!  There's a fairly long list of notable changes.  Rather than reproduce here, please see the above blog post.  Thanks! Brett Meyer Red Hat Software Engineer, Hibernate</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Checkstyle breaking the OGM build</header>
    <date>Fri May 03 00:18:11 CEST 2013</date>
    <body>Taking OGM master, I get a checkstyle failure on one of the test file. But what is surprising is that I don't see new lines at the end of the described file. Can you guys reproduce? Emmanuel [INFO] --- maven-resources-plugin:2.5:resources (default-resources) @ hibernate-ogm-core --- [debug] execute contextualize [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] Copying 2 resources [INFO] [INFO] --- maven-compiler-plugin:2.3.2:compile (default-compile) @ hibernate-ogm-core --- [INFO] Compiling 150 source files to /Users/emmanuel/Code/ogm/hibernate-ogm-core/target/classes [INFO] [INFO] --- maven-checkstyle-plugin:2.10:checkstyle (check-style) @ hibernate-ogm-core --- [INFO] Starting audit... /Users/emmanuel/Code/ogm/hibernate-ogm-core/src/test/java/org/hibernate/ogm/test/id/Label.java:64: Only one new line is allowed at the end of a file Audit done. [INFO] ------------------------------------------------------------------------ [INFO] Reactor Summary: [INFO] [INFO] Hibernate OGM Aggregator .......................... SUCCESS [3.493s] [INFO] Hibernate Object Grid Mapper ...................... FAILURE [28.596s] [INFO] Hibernate OGM Ehcache integration ................. SKIPPED [INFO] Hibernate OGM Infinispan integration .............. SKIPPED [INFO] Hibernate OGM Module .............................. SKIPPED [INFO] Hibernate OGM Integration and performance Tests ... SKIPPED [INFO] Hibernate OGM Integration Test case ............... SKIPPED [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 33.217s [INFO] Finished at: Fri May 03 00:14:08 CEST 2013 [INFO] Final Memory: 36M/335M [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:2.10:checkstyle (check-style) on project hibernate-ogm-core: An error has occurred in Checkstyle report generation. Failed during checkstyle execution: There are 1 checkstyle errors. -&amp;gt; [Help 1] [ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] [ERROR] [ERROR] After correcting the problems, you can resume the build with the command [ERROR]   mvn &amp;lt;goals&amp;gt; -rf :hibernate-ogm-core</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate Search road map</header>
    <date>Fri Mar 06 08:54:58 CET 2009</date>
    <body>Thanks; I guess you are referring to HSEARCH-178 instead, not the listener registration ;-) I'm linking the issue to HHH-2763 too, as it seems related and Steve is having interesting comments about this there. 2009/3/6 Emmanuel Bernard &amp;lt;&amp;gt;: any direction from someone? It would be nice if the solution could be reused also by other listeners (a topic for JPA2 spec?)</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Regarding HSEARCH-248</header>
    <date>Fri Mar 06 17:09:22 CET 2009</date>
    <body>Good evening Lords and Ladys: I'm using SQLServer 2000 and Hibernate Search 3.1.0, when I'm following Hibernate Search In Action, I found this bug (HSEARCH-248). I'm asking for a hint on where to debug and for any ideas&amp;#160; to fix the generated query. Since I'm not an SQLServer 2000 expert, I think that this bug may be solved with this recipe: 1. Convert to varchar&amp;#160; and concatenate&amp;#160; all tuples involved in the where as well as its corresponding values. 2. Timestamp tuples must be considered to be converted, whit SQLServer 21 conversion type. Example of resulting query: select this_.CV_CURP as CV2_47_0_ from EC.dbo.TEXTO_PACIENTE this_ where this_.id_tipo_texto='23' and (CONVERT(VARCHAR,this_.CV_CURP)+CONVERT(VARCHAR,this_.TM_EVENTO,21)+ CONVERT(VARCHAR,this_.ID_TIPO_TEXTO)) in ( (CONVERT(VARCHAR,?)+CONVERT(VARCHAR,?,21)+CONVERT(VARCHAR,?))) Cheers, Arturo -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Regarding HSEARCH-248</header>
    <date>Fri Mar 06 18:38:45 CET 2009</date>
    <body>Hi, you are right HSEARCH-248 re-appeared. Thanks for the tip. I added some comments on the issue and created HSEARCH-346. The fix is quite easy. We will have to add a proper test i order to make sure that this won't happen again. --Hardy On Fri, 06 Mar 2009 17:09:22 +0100, Ing. Arturo Frapp&amp;#233; Mu&amp;#241;oz</body>
  </mail>
  <mail>
    <header>[hibernate-dev] HSearch : new feature &amp;quot;blackhole&amp;quot; backend</header>
    <date>Sat Mar 07 14:15:00 CET 2009</date>
    <body>Hi, I've implemented a really trivial new backend (can be configured to replace the jms or lucene backends) called &amp;quot;blackhole&amp;quot; as the same named MySQL engine (). It doesn't to anything :-P , and that's why it's useful! When replacing the default backend with it I can do some performance measures and profiling in hibernate search disabling the actual this was initially not meant to become a &amp;quot;feature&amp;quot; but was only a tool of mine to figure out some stats. I was thinking now that other people may find it useful to test settings and fine tune configurations, mostly to answer the question &amp;quot;why is it slow?&amp;quot;. This way you can tell them &amp;quot;not because of indexing...&amp;quot; (writing at least). Do you think it could be useful to have this committed to trunk? I'll give it a short name &amp;quot;blakhole&amp;quot;. Sanne</body>
  </mail>
  <mail>
    <header>[hibernate-dev] HSearch : new feature &amp;quot;blackhole&amp;quot; backend</header>
    <date>Sat Mar 07 17:06:35 CET 2009</date>
    <body>+ 1 from me for a blackhole ;-) On Sat, 07 Mar 2009 14:15:00 +0100, Sanne Grinovero</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Re: HSearch : new feature &amp;quot;blackhole&amp;quot; backend</header>
    <date>Sat Mar 07 17:10:14 CET 2009</date>
    <body>ok Not sure if perf testing is relevant though :)</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [Bean Validation] Adding interpolation facilities</header>
    <date>Sun Mar 08 00:52:49 CET 2009</date>
    <body>What do you think of public class SyntaxValidator implements ConstraintValidator&amp;lt;Syntax, public boolean isValid(String value, ConstraintValidatorContext context.addInterpolatedParameter(&amp;quot;detectedSyntax&amp;quot;, ValidatorMessage_en.properties -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [Bean Validation] Adding interpolation facilities</header>
    <date>Mon Mar 09 11:36:24 CET 2009</date>
    <body>Wouldn't this also mean that you have to change the MessageResolver interface from constraintDescriptor, Object value) to interpolatedParameters) I can see the potential use case, but I am not sure whether it is worth the added complexity in the API. --Hardy On Sun, 08 Mar 2009 00:52:49 +0100, Emmanuel Bernard</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [Bean Validation] Adding interpolation facilities</header>
    <date>Mon Mar 09 21:44:16 CET 2009</date>
    <body>Yes that's a valid argument. BTW I plan to introduce some kind of context object (another one) in interpolate to allow future extension wo breaking everybody's code. What do you think of public class SyntaxValidator implements ConstraintValidator&amp;lt;Syntax, public boolean isValid(String value, ConstraintValidatorContext context.addInterpolatedParameter(&amp;quot;detectedSyntax&amp;quot;, ValidatorMessage_en.properties</body>
  </mail>
  <mail>
    <header>[hibernate-dev] New to Dev List - Have a Patch</header>
    <date>Wed Mar 11 21:02:09 CET 2009</date>
    <body>Hi Everyone, I'm working on a project using the Hibernate ant tools to generate DAO objects for use inside a Spring context. The existing DAO exporter with suffix &amp;quot;Home&amp;quot; uses JNDI to get the SessionFactory. However, Spring has its own HibernateDaoSupport class which use dependency injection rather than JNDI to determine the Sessionfactory. I could see that the classes I needed were similar to the existing ones, but with modifications to extend the HibernateDaoSupport and the dependency injection approach. Bottom line is that I have downloaded the source and written a patch for Hibernate Tools to actually create the Spring DAO objects. I essentially copied the existing DAO export code, writing another exporter. The xml is &amp;lt;hbm2springdao&amp;gt;. This addition does not introduce a hibernate dependency on Spring. Although the generated code obviously will depend on Spring there are no compile time dependencies on it introduced into the exporter itself. Is this something you want to include in the main distribution? Who should I submit the patch to? -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] New to Dev List - Have a Patch</header>
    <date>Wed Mar 11 23:30:52 CET 2009</date>
    <body>Lets move this to the HBX jira. /max -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [Bean Validation] @Max / @Min as double instead	of long</header>
    <date>Wed Mar 11 22:37:30 CET 2009</date>
    <body>I have gathered feedback from various places and as expected everyone has his favorite best solution. I am on the fence to support this: - @Max with long not supporting double and float - @MaxDecimal with String (BigDecimal style) not supporting double and float - same for min WDTY? Better names encouraged. /** * The annotated element must be a number whose value must be lower or * equal than the specificed maximum. * Supported types are: * &amp;lt;li&amp;gt;&amp;lt;code&amp;gt;byte&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;short&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;int&amp;lt;/code&amp;gt;, * Note that double and float are not supported due to rounding errors (some providers * might provide approximative support) * &amp;lt;code&amp;gt;null&amp;lt;/code&amp;gt; elements are considered valid * * @author Emmanuel Bernard */ @Retention(RUNTIME) @Documented /** * @return Value the element must be lower or equal to */ /** * Defines several @Max annotations on the same element * @see Max * * @author Emmanuel Bernard */ @Retention(RUNTIME) @Documented /** * The annotated element must be a number whose value must be lower or * equal than the specificed maximum. * Supported types are: * &amp;lt;li&amp;gt;&amp;lt;code&amp;gt;byte&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;short&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;int&amp;lt;/code&amp;gt;, * Note that double and float are not supported due to rounding errors (some providers * might provide approximative support) * &amp;lt;code&amp;gt;null&amp;lt;/code&amp;gt; elements are considered valid * * @author Emmanuel Bernard */ @Retention(RUNTIME) @Documented /** * The string representation of the max value according to the BigDecimal representation * @return Value the element must be lower or equal to */ /** * Defines several @Max annotations on the same element * @see Max * * @author Emmanuel Bernard */ @Retention(RUNTIME) @Documented -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hudson jobs - cleanup and matrix X trigger</header>
    <date>Fri Mar 13 15:39:29 CET 2009</date>
    <body>-----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1 Hi, I was looking into our current Hudson jobs, and would like to suggest some changes: - - We currently have two views: Hibernate and Hibernate trunk. I propose to remove Hibernate trunk and create a Hibernate EAP. &amp;quot;Hibernate&amp;quot; would contain all community projects and all relevant branches. Including the ones we don't have today. &amp;quot;Hibernate EAP&amp;quot; would contain all EAP jobs, for binary testing and branch testing. Hibernate Standalone would be here too, even though it is not &amp;quot;EAP&amp;quot;. Feel free to suggest a name which includes &amp;quot;EAP&amp;quot; and &amp;quot;Standalone&amp;quot; :-) - - All non-matrix jobs would be changed to matrix jobs. Non-matrix jobs[1] are real jobs. As such, we can run a specific configuration at any time we want. The problem is that we almost never run a specific configuration (specially in community). Most of the jobs, AFAIK, runs based on &amp;quot;scm pooling&amp;quot;, so, keeping the view clean seems more important than the ability to run specific configurations. Matrix jobs are job containers which runs the same build for N configurations, but the configuration itself is not a &amp;quot;real&amp;quot; job, in the sense that we don't have a &amp;quot;Configure&amp;quot; option, nor &amp;quot;Build now&amp;quot;. So, they can only run as a whole (officially). But we are still able to create temporary jobs if we need to run a specific configuration (like the recent work with Sybase/MSSQL new dialects). Also, currently we have some jobs which runs only on hsqldb. As you can imagine, those jobs will be removed as part of this item, in favor of matrix jobs. Regarding some maven builds we have in Hudson: I'll remove them too. They are not deploying artifacts to any public repository. They are going only up to &amp;quot;install&amp;quot;, which installs it on local hudson repository. In the next step, I can setup a maven build which deploys to some external public repository, but for now, I'd remove them to avoid confusion. The proposed changes, if nobody is against it, will take place in some steps: 3) Move the jobs we'll keep to the proper view (like, Branch_3_3 to &amp;quot;Hibernate&amp;quot;) 5) Create the missing jobs 6) One month after step 5, I'll permanently delete the jobs in Hibernate Trash (as well as the view itself). So, if you need some job, it will still be there for a month in Hibernate Trash, but disabled. You'll need to enable it. But please, just before you mark it as &amp;quot;enabled&amp;quot;, do let me know. I can point you to some appropriate job, or move it to the proper view if needed. - - Juca. -----BEGIN PGP SIGNATURE----- Version: GnuPG v1.4.9 (GNU/Linux) Comment: Using GnuPG with Fedora - iEYEARECAAYFAkm6cCEACgkQPHUa7A/NqbogbACfV6DRORo5CFKnvpsi0V0Fvx/0 S5wAn2dzT0uD2Qx88tuUMMSSmqWWQZCT =PSkq -----END PGP SIGNATURE-----</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Re: Hudson jobs - cleanup and matrix X trigger</header>
    <date>Fri Mar 13 15:41:36 CET 2009</date>
    <body>-----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1 Juraci Paixao Krohling escreveu: Example of non-matrix job: Example of matrix job: - - Juca. -----BEGIN PGP SIGNATURE----- Version: GnuPG v1.4.9 (GNU/Linux) Comment: Using GnuPG with Fedora - iEYEARECAAYFAkm6cKAACgkQPHUa7A/Nqbpl9wCgnz+q+HYqbCQWzUbl+aNZMKYB etEAoJQrzS5gMMaRxnWiK/A3kYUKeYiW =LBFW -----END PGP SIGNATURE-----</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [BVAL] POM Versions</header>
    <date>Sun Mar 15 09:46:54 CET 2009</date>
    <body>Hello guys, I'm facing a problem right now, and the problem is that we currently have Hibernate Validator Alpha 2 as a dependency in our project, which has the Validation API Beta 4 as a dependency. The problem is that the latest changes in the API (including those in the Message Interpolator) were committed to Validation API Beta 4, and hence it made HV Alpha 2 unusable, since it calls metheods that were changed in the API. I guess that the current version should have been Beta 5 SNAPSHOT or something so that not to break the older builds that depend on Beta 4. Regards Alaa Nassef -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [BVAL] POM Versions</header>
    <date>Mon Mar 16 14:30:15 CET 2009</date>
    <body>Ah year that's my fault. But Isn't beta4 up in the maven cloud? I don't understand why what I commit in trunk does affect released versions?</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [BVAL] POM Versions</header>
    <date>Mon Mar 16 15:27:06 CET 2009</date>
    <body>Well, we have our own integration server which installs the new builds to our local repository. I uninstalled the new artifacts with the wrong version, and got the ones from the older ones and we fixed our builds. What I meant by affecting the released version is for the people with cases like ours, where they rely on a CI server to be able to use/test different snapshots. I'm facing a problem right now, and the problem is that we currently have Hibernate Validator Alpha 2 as a dependency in our project, which has the Validation API Beta 4 as a dependency. The problem is that the latest changes in the API (including those in the Message Interpolator) were committed to Validation API Beta 4, and hence it made HV Alpha 2 unusable, since it calls metheods that were changed in the API. I guess that the current version should have been Beta 5 SNAPSHOT or something so that not to break the older builds that depend on Beta 4. Regards Alaa Nassef _______________________________________________ hibernate-dev mailing list -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [BVAL] POM Versions</header>
    <date>Mon Mar 16 16:59:51 CET 2009</date>
    <body>I guess the best practise is to up the version number right after a release. I am trying to do that in the reference implementation, but we should do the same for the spec. However, there is no guarantee that something like this happens again or some other temporary problem. Maybe instead of installing all builds from your ci server into your local repository you should consider to switch to an explicit install. Of course it is great for us that you are pretty much testing all our changes immediately ;-) --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [BVAL] POM Versions</header>
    <date>Mon Mar 16 17:06:26 CET 2009</date>
    <body>Are y'all using SNAPSHOT versioning in your development poms? By the same logic below y'all should be using SNAPSHOT in your poms and explicitly setting a version during release. - Steve Ebersole Project Lead Principal Software Engineer JBoss, a division of Red Hat</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [BVAL] POM Versions</header>
    <date>Tue Mar 17 11:20:42 CET 2009</date>
    <body>Actually, the case was that we installed the artifacts on the local repository of the CI virtual machine and not on our corporate repository. The reason we did that was so that the builds for the reference implementation won't break when the API changes. Since we used the same CI server for other projects that depends on the Beta 4 version of the API, when the API changed without changing the version number, the builds for our projects failed. Anyway, I know that the best practice for a case like ours is to either have a vendor branch of your SVN repository, to have a mirror of it, or to have our own version of your SVN repository and to sync the two whenever we want. The problem with a vendor branch was that if files are renamed on you branch (your SVN), we (EDC) might lose the version history of those files. The problem with mirroring was that we wouldn't be able to commit to the repository, since a mirror is read only. Syncing was the best idea, but the problem with SVN prior to version 1.5 was that we had to sync the whole repositor, and we can't sync parts of it, and since the version of your SVN server is 1.4.2, we weren't able to sync the bean validator project alone, and we had to sync the whole JBOSS repository. Since we didn't want to do that, we accepted the easier scenario, and that was to get the changes directly from your SVN. Anyway, our (not so good) decision helped in finding such a problem, which is a good thing. Currently we stopped the install goal on the CI server until the version of the POM changes, and until we solve another unrelated problem in our CI server. Regards, Alaa Nassef our local repository. I uninstalled the new artifacts with the wrong version, and got the ones from the older ones and we fixed our builds. What I meant by affecting the released version is for the people with cases like ours, where they rely on a CI server to be able to use/test different snapshots. -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate Validator 4.0.0 Alpha3</header>
    <date>Fri Mar 20 16:07:40 CET 2009</date>
    <body>Hi, Hibernate Validator 4.0.0 Alpha3 is out. More info here: --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate Search next version will target the	latest Hibernate Core</header>
    <date>Sun Mar 22 06:07:38 CET 2009</date>
    <body>We should target the upcoming version of Hibernate Core and Annotations for Hibernate Search 3.2 New methods have been added to the Session so HSearch 3.2 will not work on older Core versions and vice versa I think we still should release a 3.1.1 with the work from Sanne on out of transaction flushing. Sanne, is the patch easy to apply on a different branch (a branch forking off the 3.1.0 tag)? Steve, do you have a timeline for 3.5?</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate Search next version will target the 	latest Hibernate Core</header>
    <date>Sun Mar 22 19:39:08 CET 2009</date>
    <body>It shouldn't be hard, I was missing only some JPA tests before you so now I have to re-think it a bit (the context has to be shared in the two listeners) but I don't foresee a complex patch. Regarding a 3.1.1 release more work has been done, like the memory leak in scrollable resultsets: I'd appreciate if someone could check that before a release. 2009/3/22 Emmanuel Bernard &amp;lt;&amp;gt;:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate Search next version will target the	latest Hibernate Core</header>
    <date>Mon Mar 23 00:21:15 CET 2009</date>
    <body>So those where the only two changes we will push to the .1 release right? I will review it, do you ahve the JIRA number? We should target the upcoming version of Hibernate Core and Annotations for Hibernate Search 3.2 New methods have been added to the Session so HSearch 3.2 will not work on older Core versions and vice versa I think we still should release a 3.1.1 with the work from Sanne on out of transaction flushing. Sanne, is the patch easy to apply on a different branch (a branch forking off the 3.1.0 tag)? Steve, do you have a timeline for 3.5? _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] HSearch programmatic mapping API</header>
    <date>Mon Mar 23 03:37:46 CET 2009</date>
    <body>I have started working on that in the plane back home. It's available upstream and requires the upstream commons-annotations and annotations projects. mapping.analyzerDef( &amp;quot;stem&amp;quot;, StandardTokenizerFactory.class ) .tokenizerParam( &amp;quot;name&amp;quot;, &amp;quot;value&amp;quot; ) .tokenizerParam(  &amp;quot;name2&amp;quot;, &amp;quot;value2&amp;quot; ) .filter( LowerCaseFilterFactory.class ) .filter( SnowballPorterFilterFactory.class) .param(&amp;quot;language&amp;quot;, &amp;quot;English&amp;quot;) .analyzerDef( &amp;quot;ngram&amp;quot;, StandardTokenizerFactory.class ) .tokenizerParam( &amp;quot;name&amp;quot;, &amp;quot;value&amp;quot; ) .tokenizerParam(  &amp;quot;name2&amp;quot;, &amp;quot;value2&amp;quot; ) .filter( LowerCaseFilterFactory.class ) .filter( NGramFilterFactory.class) .param(&amp;quot;minGramSize&amp;quot;, &amp;quot;3&amp;quot;) .param(&amp;quot;maxGramSize&amp;quot;, &amp;quot;3&amp;quot;) .indexedClass(Address.class, &amp;quot;Address_Index&amp;quot;) .property(&amp;quot;street1&amp;quot;, ElementType.FIELD) .field() .field() .name(&amp;quot;street1_iso&amp;quot;) .store( Store.YES ) .index( Index.TOKENIZED ) .analyzer( ISOLatin1Analyzer.class) .field() .name(&amp;quot;street1_ngram&amp;quot;) .analyzer(&amp;quot;ngram&amp;quot;) .indexedClass(User.class) .property(&amp;quot;name&amp;quot;, ElementType.METHOD) .field() configuration.getProperties().put( &amp;quot;hibernate.search.mapping_model&amp;quot;, It works nicely (analyzerDef is not wired yet) and the mapping API needs to be completed. A benefit is that it solves the problem encountered by people willing to get XML mapping support in a much nicer way. It would benefit from a few additional pairs of eye before completing the work. -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate Planning</header>
    <date>Mon Mar 23 11:10:55 CET 2009</date>
    <body>Hi there, I would like to start a discussion around a few 'management' questions. 1. What shall we do with commons-annotations? commons-annotations became a module of Core (core/trunk/commons-annotations) when we moved Annotations and EntityManager into Core. Emmanuel, raised the question whether it should be really in Core or whether we should keep it seperate as independed library. I could also imagine to just move it back into Annotations itself. I don't think any other project really denpends on it (any project using commons-annotations uses also annotations). This would mean one less module/project to manage. 2. Some changes to Hibernate Search require also changes to Annotations/EntityManager. This raises the question on how we handle releases now that these modules are part of the Core. Will we still do separate releases for these modules or are we from now on just doing 'full' Hibernate releases (meaning we always release Core with all its modules)? This question is especially interesting since we soon will start with JPA 2 development. 3. Who is handling releases? So far Steve was basically driving the Core releases, whereas Emmanuel and I where looking after EntityManager, Annotations and Search. How shall we do it now? 4. What is the current status on Hibernate 3.5? Is there already a (interim) release planned? It would be great to get some feedback and maybe we should at some stage have a chat. --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate Planning</header>
    <date>Mon Mar 23 14:31:53 CET 2009</date>
    <body>1) If commons-annotations *does not* rely on hibernate-core in any way then I'm fine to break it it back out if that makes sense.  However y'all need to be *extremely* careful about this and making sure about compatibility.  The whole idea about moving these things back together was to make the compatibility &amp;quot;matrix&amp;quot; more manageable.  Making incompatible changes in dependency common to core/annotations/em and search effectively makes those things incompatible as well.  Same for integrating it into annotations. 2) From now on we will be doing &amp;quot;full&amp;quot; releases.  Starting with 3.5, that &amp;quot;major release&amp;quot; moniker will apply across all of the modules now bundled into core (annotations, em, envers) meaning that there will be no API incompatibilities introduced *within* a major rev across all those modules.  JPA2 development will be 3.5.  The initial 3.5 releases (alphas, betas, crs) will revolve around JPA2 support. 3) Depends what you mean by &amp;quot;handling&amp;quot;.  If you mean deciding what features, when and such (aka planning) then that's something we will all need to do together.  If you mean actually performing releases I totally understand that you want to do them and will graciously step aside for you to fulfill that dream :)  For real, we will probably all be doing some. 4) Yes, the basic planning is done from the core side of things, minus a few minor features. I am always on IRC, so we can chat whenever y'all want; y'all are the ones that seem IRC-averse ;) - Steve Ebersole Project Lead Principal Software Engineer JBoss, a division of Red Hat</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate Planning</header>
    <date>Tue Mar 24 00:20:36 CET 2009</date>
    <body>Right but commons annotations should really be considered at the same level as slf4j. All Hibernate projects do share slf4j but Search and Validator are independent of core (release wise and even to a certain extends at runtime).</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate Planning</header>
    <date>Tue Mar 24 21:31:37 CET 2009</date>
    <body>Sure, but by the same token I would not upgrade from sl4fj 1.5.x to 1.6.x (on the assumption that that introduces an incompatibility) between hibernate 3.3.1 and 3.3.2. The same needs to apply here.  commons-annotations needs to maintain a level of compatibility within a release series. - Steve Ebersole Project Lead Principal Software Engineer JBoss, a division of Red Hat</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate Planning</header>
    <date>Wed Mar 25 02:51:53 CET 2009</date>
    <body>By release series you mean 3.x or 3.1.x In any case so far it has maintain such compatibility. The trickiness here is that one particular feature of HSearch does rely on a new feature of commons annotations and require that annotations and entitymanager embrace this new feature to function properly. 1) If commons-annotations *does not* rely on hibernate-core in any way then I'm fine to break it it back out if that makes sense.  However y'all need to be *extremely* careful about this and making sure about compatibility.  The whole idea about moving these things back together was to make the compatibility &amp;quot;matrix&amp;quot; more manageable.  Making incompatible changes in dependency common to core/annotations/em and search effectively makes those things incompatible as well.  Same for integrating it into annotations. Right but commons annotations should really be considered at the same level as slf4j. All Hibernate projects do share slf4j but Search and Validator are independent of core (release wise and even to a certain extends at runtime).</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate Planning</header>
    <date>Wed Mar 25 20:55:20 CET 2009</date>
    <body>I think Steve has a point and I am not sure whether commons-annotations is worth breaking out again. Personally I would merge it into Annotations. One less module to manage. --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate Planning</header>
    <date>Wed Mar 25 22:28:02 CET 2009</date>
    <body>1) If commons-annotations *does not* rely on hibernate-core in any way then I'm fine to break it it back out if that makes sense. However y'all need to be *extremely* careful about this and making sure about compatibility.  The whole idea about moving these things back together was to make the compatibility &amp;quot;matrix&amp;quot; more manageable.  Making incompatible changes in dependency common to core/annotations/em and search effectively makes those things incompatible as well.  Same for integrating it into annotations. I do not want to create a dependency between Search and Annotations. That's why I spinned off commons-annotations in the first place.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] hibernate search + indexing with transaction issue</header>
    <date>Mon Mar 23 14:00:50 CET 2009</date>
    <body>Hi, I have the following problem with indexing in transaction with hibernate search: in case the transaction is opened and I want to perform multiple work types - only one type is actually performed after the commit and the others are ignored; example: only DELETE is performed - ADD is ignored log: 2009-03-23 13:45:02,195 TRACE                 main|       MaskedProperty| found a match for key: [hibernate.search.default.indexBase] value: /tmp/c1idx 2009-03-23 13:45:02,195 TRACE                 main|       MaskedProperty| found a match for key: [default.indexBase] value: /tmp/c1idx 2009-03-23 13:45:02,341 DEBUG                 main| BuilderIndexedEntity| Field selection in projections is set to false for entity problems.SEntity. 2009-03-23 13:45:02,502 DEBUG      pool-1-thread-1|  PerDPQueueProcessor| Skipping usage of an IndexWriter for updates 2009-03-23 13:45:02,503 TRACE      pool-1-thread-1|  PerDPQueueProcessor| Locking Workspace (or waiting to...) 2009-03-23 13:45:02,503 TRACE      pool-1-thread-1|  PerDPQueueProcessor| Workspace lock aquired. // opened 2009-03-23 13:45:02,503 DEBUG      pool-1-thread-1|  PerDPQueueProcessor| Opening an IndexReader for update 2009-03-23 13:45:02,503 TRACE      pool-1-thread-1|            Workspace| IndexReader opened // only remove 2009-03-23 13:45:02,503 TRACE      pool-1-thread-1| eleteExtWorkDelegate| Removing class problems.SEntity#100 by id using an IndexReader. 2009-03-23 13:45:02,539 TRACE      pool-1-thread-1|            Workspace| IndexReader closed 2009-03-23 13:45:02,539 TRACE      pool-1-thread-1|  PerDPQueueProcessor| Unlocking Workspace I digged into the code a little bit and there is class method: org.hibernate.search.engine.DocumentBuilderIndexedEntity.addWorkToQueue() which is in it's beginning iterating the existing queue to avoid unecessary duplicated works //DELETE should have precedence over any update before (HSEARCH-257) //if an Add work is here, remove it //if an other delete is here remember but still search for Add //we can safely say we are out, the other work is an ADD I believe that return should be changed to continue. I did several tests and after the change it can handle ADD/DELETE works in one queue. Could you confirm this and tell me in case it's correct how fix should be raised? Please ignore this email if its design limitation and the multiple WTs cannot be fixed easily. Thanks YF</body>
  </mail>
  <mail>
    <header>[hibernate-dev] hibernate search + indexing with transaction issue</header>
    <date>Mon Mar 23 15:09:14 CET 2009</date>
    <body>ok - I think it should support multiple works as there is no way to control clients to do just one operation type - and I think therefore it can be considered as a bug ... please can someone from HS team look at it and clarify ASAP? thanks YF</body>
  </mail>
  <mail>
    <header>[hibernate-dev] hibernate search + indexing with transaction issue</header>
    <date>Mon Mar 23 15:19:16 CET 2009</date>
    <body>This list is not for support, it's for the development of Hibernate. You can take your question to the forums or raise a JIRA if you think you've found a bug. Best, Chris Hi, I have the following problem with indexing in transaction with hibernate search: in case the transaction is opened and I want to perform multiple work types - only one type is actually performed after the commit and the others are ignored; example: only DELETE is performed - ADD is ignored log: 2009-03-23 13:45:02,195 TRACE                 main|       MaskedProperty| found a match for key: [hibernate.search.default.indexBase] value: /tmp/c1idx 2009-03-23 13:45:02,195 TRACE                 main|       MaskedProperty| found a match for key: [default.indexBase] value: /tmp/c1idx 2009-03-23 13:45:02,341 DEBUG                 main| BuilderIndexedEntity| Field selection in projections is set to false for entity problems.SEntity. 2009-03-23 13:45:02,502 DEBUG      pool-1-thread-1|  PerDPQueueProcessor| Skipping usage of an IndexWriter for updates 2009-03-23 13:45:02,503 TRACE      pool-1-thread-1|  PerDPQueueProcessor| Locking Workspace (or waiting to...) 2009-03-23 13:45:02,503 TRACE      pool-1-thread-1|  PerDPQueueProcessor| Workspace lock aquired. // opened 2009-03-23 13:45:02,503 DEBUG      pool-1-thread-1|  PerDPQueueProcessor| Opening an IndexReader for update 2009-03-23 13:45:02,503 TRACE      pool-1-thread-1|            Workspace| IndexReader opened // only remove 2009-03-23 13:45:02,503 TRACE      pool-1-thread-1| eleteExtWorkDelegate| Removing class problems.SEntity#100 by id using an IndexReader. 2009-03-23 13:45:02,539 TRACE      pool-1-thread-1|            Workspace| IndexReader closed 2009-03-23 13:45:02,539 TRACE      pool-1-thread-1|  PerDPQueueProcessor| Unlocking Workspace I digged into the code a little bit and there is class method: org.hibernate.search.engine.DocumentBuilderIndexedEntity.addWorkToQueue() which is in it's beginning iterating the existing queue to avoid unecessary duplicated works //DELETE should have precedence over any update before (HSEARCH-257) //if an Add work is here, remove it //if an other delete is here remember but still search for Add //we can safely say we are out, the other work is an ADD I believe that return should be changed to continue. I did several tests and after the change it can handle ADD/DELETE works in one queue. Could you confirm this and tell me in case it's correct how fix should be raised? Please ignore this email if its design limitation and the multiple WTs cannot be fixed easily. Thanks YF _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] hibernate search + indexing with transaction issue</header>
    <date>Wed Mar 25 18:48:11 CET 2009</date>
    <body>Good question. return;  is what is expected (see HSEARCH-257). The scenario you are describing (delete + add in the same transaction) cannot happen in Hibernate unless you use assigned ids and don't have any kind of association in your object. Even in this case you are cheating the system. Allowing delete + add kinda reopens HSEARCH-257. Next time use the forum, it's easier for everyone. And of course, if you need &amp;quot;ASAP&amp;quot; answers, we have a for pay support. Hibernate Search in part of our supported platform.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Compiling latest hibernate search</header>
    <date>Wed Mar 25 15:38:45 CET 2009</date>
    <body>I've checked out the latest Hibernate Search from trunk and I'm trying to build it. I know I need the latest annotations code also. As described on  Local latest version I changed the commons-annotations rev to &amp;quot;latest&amp;quot; in ivy.xml but it's not working either. How can I set up my local env to build the latest Hibernate Search? Cheers, Marcel -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Compiling latest hibernate search</header>
    <date>Wed Mar 25 15:58:43 CET 2009</date>
    <body>On Wed, 25 Mar 2009 15:38:45 +0100, Marcel Overdijk You might want to update your source again. I finally completed HSEARCH-82 today and converted Hibernate Search to a maven only build. All obsolete ant files are now removed. Really  is obsolete. I am in the process of updating it. --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Compiling latest hibernate search</header>
    <date>Wed Mar 25 18:36:26 CET 2009</date>
    <body>Long story short, it's all in Maven now. &amp;gt; svn co  core &amp;gt; svn co  search &amp;gt; cd core &amp;gt; mvn install   (1) &amp;gt; cd ../search mvn install (1) might fail on some doc generation but as long as the snapshot are published to your local repo you're good. Also make sure to use the proper maven settings I use maven 2.0.9 and it works. I've checked out the latest Hibernate Search from trunk and I'm trying to build it. I know I need the latest annotations code also. Local latest version I changed the commons-annotations rev to &amp;quot;latest&amp;quot; in ivy.xml but it's not working either.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Compiling latest hibernate search</header>
    <date>Wed Mar 25 20:54:14 CET 2009</date>
    <body>OK I managed to compile Core successfully (after disabling the tests). However compiling Hibernate Search gives some errors. It's complaining about: D:\Grails\hibernate\search\src\main\java\org\hibernate\search\filter\FilterOptimizationHelper.java:[63,34] name clash: mergeByBitAnds(java.util.List&amp;lt;org.apache.lucene.util.DocIdBitSet&amp;gt;) and mergeByBitAnds(java.util.List&amp;lt;org.apache.lucene.search.DocIdSet&amp;gt;) have the same erasure Full build trace: D:\Grails\hibernate\search&amp;gt;mvn install -Dmaven.test.skip=true [INFO] Scanning for projects... [INFO] ------------------------------------------------------------------------ [INFO] Building Hibernate Search [INFO]    task-segment: [install] [INFO] ------------------------------------------------------------------------ [INFO] [resources:resources] [WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent! [INFO] Copying 0 resource Downloading: -3.2.7.pom [INFO] Unable to find resource 'woodstox:wstx-asl:pom:3.2.7' in repository jboss () Downloading: 3.2.7.pom [INFO] Unable to find resource 'woodstox:wstx-asl:pom:3.2.7' in repository jboss -snapshot () Downloading: 7.pom [INFO] Unable to find resource 'woodstox:wstx-asl:pom:3.2.7' in repository centr al () [INFO] [compiler:compile] [INFO] Compiling 188 source files to D:\Grails\hibernate\search\target\classes [INFO] ------------------------------------------------------------------------ [ERROR] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Compilation failure D:\Grails\hibernate\search\src\main\java\org\hibernate\search\filter\FilterOptim izationHelper.java:[63,34] name clash: mergeByBitAnds(java.util.List&amp;lt;org.apache. org.apache.lucene.se arch.DocIdSet&amp;gt;) have the same erasure D:\Grails\hibernate\search\src\main\java\org\hibernate\search\filter\FilterOptim izationHelper.java:[85,33] name clash: mergeByBitAnds(java.util.List&amp;lt;org.apache. lucene.util.OpenBitSet&amp;gt;) and mergeByBitAnds(java.util.List&amp;lt;org.apache.lucene.sea rch.DocIdSet&amp;gt;) have the same erasure D:\Grails\hibernate\search\src\main\java\org\hibernate\search\filter\FilterOptim izationHelper.java:[47,42] mergeByBitAnds(java.util.List&amp;lt;org.apache.lucene.searc h.DocIdSet&amp;gt;) in org.hibernate.search.filter.FilterOptimizationHelper cannot be a pplied to (java.util.List&amp;lt;org.apache.lucene.util.OpenBitSet&amp;gt;) D:\Grails\hibernate\search\src\main\java\org\hibernate\search\filter\FilterOptim izationHelper.java:[50,42] mergeByBitAnds(java.util.List&amp;lt;org.apache.lucene.searc h.DocIdSet&amp;gt;) in org.hibernate.search.filter.FilterOptimizationHelper cannot be a pplied to (java.util.List&amp;lt;org.apache.lucene.util.DocIdBitSet&amp;gt;) I've checked out the latest Hibernate Search from trunk and I'm trying to build it. I know I need the latest annotations code also. You might want to update your source again. I finally completed HSEARCH-82 today and converted Hibernate Search to a maven only build. All obsolete ant files are now removed. Local latest version I changed the commons-annotations rev to &amp;quot;latest&amp;quot; in ivy.xml but it's not working either. is obsolete. I am in the process of updating it. --Hardy _______________________________________________ hibernate-dev mailing list -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Compiling latest hibernate search</header>
    <date>Wed Mar 25 22:52:04 CET 2009</date>
    <body>Interesting, which compiler are you using? I can compile fine both on Java 5 and 6 using Apple JDK There seems to be a bunch of bugs related to method overloading and generics in Sun's bug database. I am inclined to believe that method overloading is evil like the FAN guys think. I have just committed a fix for it, try it out. -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Compiling latest hibernate search</header>
    <date>Wed Mar 25 23:09:28 CET 2009</date>
    <body>I was using jdk1.5.0_18 on Windows Vista. I downloaded the fix and I can build successfully now. Thanks! Time to go to bed now. Hope to experiment with the programmatic mapping tomorrow evening. Cheers, Marcel On Wed, Mar 25, 2009 at 10:52 PM, Emmanuel Bernard Long story short, it's all in Maven now. core search &amp;gt; cd core &amp;gt; mvn install   (1) &amp;gt; cd ../search mvn install (1) might fail on some doc generation but as long as the snapshot are published to your local repo you're good. Also make sure to use the proper maven settings I use maven 2.0.9 and it works. I've checked out the latest Hibernate Search from trunk and I'm trying to build it. I know I need the latest annotations code also. You might want to update your source again. I finally completed HSEARCH-82 today and converted Hibernate Search to a maven only build. All obsolete ant files are now removed. Local latest version I changed the commons-annotations rev to &amp;quot;latest&amp;quot; in ivy.xml but it's not working either. is obsolete. I am in the process of updating it. --Hardy _______________________________________________ hibernate-dev mailing list -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Is there any specific reason for not removing any	successful action 	from the action list in ActionQueue executeActions</header>
    <date>Thu Mar 26 09:04:44 CET 2009</date>
    <body>Hi Is there any specific reason for not removing any successful action from the action list. In Method of class org.hibernate.engine.ActionQueue Why is list being cleared in one go rather then removing after every action. something like this Reasons i am facing issues due to this is following: For Example in ActionQueue i have three  EntityUpdateAction and my Entity is versioned and my 3rd EntityUpdateAction Fails and say i can recover from this failure programmatically and i try to flush again. This time even my first Action will fail as it would have already updated Version No. And even theoretically why will i want to retry a Successful Action. I think after action is successfully executed it should be removed from the list. Regards Pavitar -- Pavitar Singh Blog: -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Is there any specific reason for not removing any	successful action from the action list in ActionQueue executeActions</header>
    <date>Tue Mar 31 11:53:01 CEST 2009</date>
    <body>Hello, In fact, I think that this doesn't cover all cases yet. It is possible that a new event will be enqueued while processing other events (through custom event listeners). So the action queue can grow. But this can be solved easily with a FIFO queue: This would work both when events add new actions to the queue, and when the executeActions() is called twice. Adam</body>
  </mail>
  <mail>
    <header>[hibernate-dev] problem with pdf generated by maven-jdocbook-plugin and hibernate-jdocbook-style?</header>
    <date>Thu Mar 26 11:36:40 CET 2009</date>
    <body>Hi, I switched Hibernate Search to maven the other day and as part of this migration the docbook documnetation is now built with maven-jdocbook-plugin and hibernate-jdocbook-style. Prior to this Hibernate Search was using ant and some checked in docbook styles to build the documentation. The resulting pdf was just fine. After switching to the maven plugin I noticed that tables which span more than one page are totally screwed up (content missing, overlapping text, ...). First I thought the problem is on the Hibernate Search side, but when I then looked at the latest Hibernate Core pdf I noticed that it has the same problems (eg &amp;quot;Table 3.4. Hibernate JDBC and Connection Properties&amp;quot; in the latest pdf downloaded from hibernate.org). Given that the pdf was ok prior to the switch to maven-jdocbook-plugin I am assuming that there are some problems with the styles. Do we have a Jira for these maven plugins? --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] problem with pdf generated by	maven-jdocbook-plugin and hibernate-jdocbook-style?</header>
    <date>Thu Mar 26 14:33:32 CET 2009</date>
    <body>I'll play sherlock holmes with you ;) So I see: Ok, sort of a smartass answer, but I generally try to be very detailed in creating these poms so that they contain all this necessary info... -- Hibernate.org</body>
  </mail>
  <mail>
    <header>[hibernate-dev] problem with pdf generated by	maven-jdocbook-plugin and hibernate-jdocbook-style?</header>
    <date>Thu Mar 26 14:41:48 CET 2009</date>
    <body>DOH! ;-) I will create an issue there then.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] problem with pdf generated by 	maven-jdocbook-plugin and hibernate-jdocbook-style?</header>
    <date>Thu Mar 26 14:50:59 CET 2009</date>
    <body>I don't know how bad it is after the maven switch, but there were some layout issues before too, especially with long lines. 2009/3/26 Hardy Ferentschik &amp;lt;&amp;gt;: I'll play sherlock holmes with you ;) So I see: Ok, sort of a smartass answer, but I generally try to be very detailed in creating these poms so that they contain all this necessary info...</body>
  </mail>
  <mail>
    <header>[hibernate-dev] problem with pdf generated by	maven-jdocbook-plugin and hibernate-jdocbook-style?</header>
    <date>Thu Mar 26 14:35:55 CET 2009</date>
    <body>OTOH, this is not an issue with the jDocBook maven plugin.  This is a stylistic issue, probably the XSLT I would guess. -- Hibernate.org</body>
  </mail>
  <mail>
    <header>[hibernate-dev] hi</header>
    <date>Thu Mar 26 13:21:50 CET 2009</date>
    <body>, We have detected that your e-mail account has been used to send a huge amount of spam messages during this week. Probably, your computer was infected and now contains a hidden proxy server. We recommend that you follow our instruction in order to keep your computer safe. Have a nice day, The lists.jboss.org support team. -------------- next part -------------- A non-text attachment was scrubbed... Name: instruction.zip Type: application/octet-stream Size: 28992 bytes Desc: not available Url :</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [hsearch] JSON version of Hibernate Search query</header>
    <date>Thu Jun 13 10:54:27 CEST 2013</date>
    <body>You mean the Lucene query language -   ;-) In the end it comes down to that. What would the purpose of a new query language be? I guess it would be more object centric, but is this relevant for a user? I just don't see users of a finished app being exposed to such query functionality. I see the JSON representation just as a way to serialise the query. To which means I am not sure at the moment. --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [hsearch] JSON version of Hibernate Search query</header>
    <date>Thu Jun 13 14:11:31 CEST 2013</date>
    <body>Maybe, if that has everything needed, why not? Or is a goal to hide the fact that Lucene is used underneath? What's the purpose of the JSON notation? I think for a user its nicer to express a query in a dedicated query language instead of a general-purpose object serialization format. As it is nicer for a human to express queries in say HQL or SQL instead of describing e.g. a &amp;quot;HQL object&amp;quot; in JSON or XML. If this is going to be used by application code, it probably doesn't make a big difference. I guess I just don't yet really understand what's the use case behind.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [hsearch] JSON version of Hibernate Search query</header>
    <date>Thu Jun 13 16:10:59 CEST 2013</date>
    <body>Right, that's what I am also trying to see/find. --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [hsearch] JSON version of Hibernate Search query</header>
    <date>Thu Jun 13 21:20:12 CEST 2013</date>
    <body>Sorry, I got confused by your question initially. The query language is not for an end-user, it is for developers or machines. JSON here was used as an example of serializable format. The problem I was trying to address is to serialize the query in a platform agnostic way. We could try and design an ad-hoc query language for Hibernate Search queries or try and see if HQL could fit all the features but that's certainly more work (incl to later bind it back to actual calls to the query API. I don't think reusing Lucene's query language is the right thing. For once it does not handle faceting, spatial, etc and it maps more to each Lucene *Query object which is at a lower and more plumbing level that HSearch query DSL API offers. Emmanuel</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [hsearch] JSON version of Hibernate Search query</header>
    <date>Thu Jun 13 21:33:59 CEST 2013</date>
    <body>So why would a developer use it? One point of the DSL was to have type safe queries and now we want him to write JSON strings? Also, what is the result of the query? Entities in JSON format? I just don't see when a developer would like to use this query format. Maybe for prototyping or ad hoc experimenting with some queries. How much easier is that, however, compared to a simple unit test? Why not use Avro again? That's how we serialise the Work instances. Why now introduce JSON? --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [hsearch] JSON version of Hibernate Search query</header>
    <date>Fri Jun 14 08:41:28 CEST 2013</date>
    <body>In this case, that would be an alternative query language supported by Infinispan over HotRod. Sure it could be Avro. Though that makes it harder to open up a console and write an ad-hoc query is Avro's binary format ;) I did pick JSON as an example of an object representation serializable as string and because I've worked on REST + JSON services recently. Emmanuel</body>
  </mail>
  <mail>
    <header>[hibernate-dev] ServiceRegistries and OSGi</header>
    <date>Wed Jun 12 21:44:08 CEST 2013</date>
    <body>Alright, 3 week late response ;) In hibernate-osgi, SF/EMF initialization simply uses the #with methods on BootstrapServiceRegistryBuilder, then builds a StandardServiceRegistry through the StandardServiceRegistryBuilder.  Originally, I was implementing a custom ServiceRegistry that hooked directly into the OSGi registry.  However, the consulting with Tim Ward changed that.  To prevent versioning conflicts, etc. hibernate-osgi only registers its own set of services and the services within the client persistence bundle (discovered when an SF/EMF is requested).  Because of that, I simply stuck with with the BootstrapServiceRegistryBuilder and StandardServiceRegistryBuilder. It seems that the ServiceRegistry is a bit of an all-or-nothing concept.  For instance, it would be useful to provide a custom ServiceRegistry, but still kick off the StandardServiceInitiators.  Maybe that means tying StandardServiceInitiators into something more like an AbstractServiceRegistry, rather than solely within StandardServiceRegistryBuilder?  Otherwise, *all* standard services would need to be in the OSGi registry for hibernate-osgi to discover them.  That's fairly straightforward, but could cause problems if an OSGi environment had more than one version/instance of Hibernate running (it happens). The one other improvement that I can think of is an easier way to provide a custom ServiceRegistry in JPA (Bootstrap -&amp;gt; EntityManagerFactoryBuilder).  Unless I missed something, I think it assumes the standard registry is always used. Brett Meyer Red Hat Software Engineer, Hibernate ----- Original Message ----- Sent: Wednesday, May 22, 2013 3:51:39 PM Subject: [hibernate-dev] ServiceRegistries and OSGi Now that OSGi support is in place and we know it is being used, I am curious whether the concept of ServiceRegistry helped or hindered in that process? One of the major reasons to define such a ServiceRegistry was the idea that it would help porting Hibernate into other containers and other runtimes, not just traditonal JSE/JEE environments. Specifically OSGi was one of the things considered, although in a very generic sense back then.  So part  of the reason I ask is that I wonder how successful we were in that, first; and then, in areas we can get better, how? Now is a great time to review that as we get ready to start making a push towards 5.0 after 4.3 (JPA 2.1 support) gets stabilized... _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] IRC Developer Meeting - 6/13</header>
    <date>Thu Jun 13 18:05:57 CEST 2013</date>
    <body>Mostly we discussed about developing then maven and gradle plugins, from packaging to initial features.  Very excited! [11:03] &amp;lt;jbott&amp;gt; Meeting ended Thu Jun 13 15:59:59 2013 UTC. Information about MeetBot at  . (v 0.1.4) [11:03] &amp;lt;jbott&amp;gt; Minutes: [11:03] &amp;lt;jbott&amp;gt; Minutes (text): [11:03] &amp;lt;jbott&amp;gt; Log:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [Bean Validation] Cleaner package scheme</header>
    <date>Fri Apr 03 19:07:11 CEST 2009</date>
    <body>I always had in mind to do some class moving and create a cleaner packaging structure. I don't care about circular references between package but I do care about: - non overcrowded packages - functional/feature focused packages If you want to see some classes moved around and have some ideas on the subject, please speak up. I will collect all proposals and see what I can come up with them. I have published the APIs here: Emmanuel</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Fwd: Hibernate Search 3.1.0GA Bugs after HSEARCH-160</header>
    <date>Mon Apr 06 10:40:24 CEST 2009</date>
    <body>Begin forwarded message: -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Fwd: Hibernate Search 3.1.0GA Bugs after 	HSEARCH-160</header>
    <date>Mon Apr 06 11:16:52 CEST 2009</date>
    <body>should this be fixed for 3.1.1? Is there a reason to not accept @Indexed on an abstract class? FYI the forum reference : Sanne 2009/4/6 Emmanuel Bernard &amp;lt;&amp;gt;:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Fwd: Hibernate Search 3.1.0GA Bugs after	HSEARCH-160</header>
    <date>Mon Apr 06 11:33:31 CEST 2009</date>
    <body>On Mon, 06 Apr 2009 11:16:52 +0200, Sanne Grinovero An abstract class can never insert a document. I think there might be more going on in this case () For example, the error message seems strange: &amp;quot;Cannot mix criteria and I think we need to see the full mapping files + stack trace. I'll add another comment to the thread. BTW, is there a release data for 3.1.1 - ? --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [Bean Validation] Fwd: ignore-annotations in super	classes</header>
    <date>Mon Apr 06 22:44:09 CEST 2009</date>
    <body>WDYT? Begin forwarded message: Hi, If I set ignore-annotations to true on bean, class, field or getter level, do I then also ignore the annotations placed on the appropriate level in the super classes (or other implemented interfaces in the case of class level)? I would assume thought, right? --Hardy -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] hibernate-tessuite testing errors:</header>
    <date>Tue Apr 07 00:20:34 CEST 2009</date>
    <body>downloaded hibernate source from trunk , am i doing something wrong? Failed tests: testDuplicateImplicitJoinInSelect(*org.hibernate.test.hql.HQLTest*) Tests run: 169, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 3.297 sec &amp;lt;&amp;lt;&amp;lt; FAILURE! testDuplicateImplicitJoinInSelect(org.hibernate.test.hql.HQLTest) Time elapsed: 0.016 sec &amp;lt;&amp;lt;&amp;lt; FAILURE! junit.framework.ComparisonFailure: SQL is not the same as the old SQL (scalar=true) expected:&amp;lt;...1_.body_weight as col_0_0_ from Animal animal0_ inner join Animal animal1_ on animal0_.mother_id=animal1_.id where (animal1_.body_weight&amp;gt;10 )&amp;gt; but was:&amp;lt;...2_.body_weight as col_0_0_ from Animal animal0_ inner join Animal animal1_ on animal0_.mother_id=animal1_.id, Animal animal2_ where at junit.framework.Assert.assertEquals(Assert.java:81) at org.hibernate.test.hql.QueryTranslatorTestCase.assertSQLEquals(QueryTranslatorTestCase.java:315) at org.hibernate.test.hql.QueryTranslatorTestCase.checkSql(QueryTranslatorTestCase.java:304) at org.hibernate.test.hql.QueryTranslatorTestCase.assertTranslation(QueryTranslatorTestCase.java:194) at org.hibernate.test.hql.QueryTranslatorTestCase.assertTranslation(QueryTranslatorTestCase.java:120) at org.hibernate.test.hql.QueryTranslatorTestCase.assertTranslation(QueryTranslatorTestCase.java:102) at org.hibernate.test.hql.HQLTest.testDuplicateImplicitJoinInSelect(HQLTest.java:1133) Tests in error: testLoadingAndSerializationOfConfiguration(* org.hibernate.test.cfg.ConfigurationPerformanceTest*) ------------------------------------------------------------------------------- Test set: org.hibernate.test.cfg.ConfigurationPerformanceTest ------------------------------------------------------------------------------- Tests run: 2, Failures: 0, Errors: 2, Skipped: 0, Time elapsed: 1.157 sec &amp;lt;&amp;lt;&amp;lt; FAILURE! testLoadingAndSerializationOfConfiguration(org.hibernate.test.cfg.ConfigurationPerformanceTest) Time elapsed: 0.844 sec &amp;lt;&amp;lt;&amp;lt; ERROR! java.io.NotSerializableException: org.hibernate.id.factory.DefaultIdentifierGeneratorFactory at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1081) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1375) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1347) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1290) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1079) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:302) at org.hibernate.test.cfg.ConfigurationPerformanceTest.saveAndLoad(ConfigurationPerformanceTest.java:208) at org.hibernate.test.cfg.ConfigurationPerformanceTest.testLoadingAndSerializationOfConfiguration(ConfigurationPerformanceTest.java:127) testSessionFactoryCreationTime(org.hibernate.test.cfg.ConfigurationPerformanceTest) Time elapsed: 0.297 sec &amp;lt;&amp;lt;&amp;lt; ERROR! java.io.IOException: CreateProcess: javac -version -d C:\eclipse342\workspace\hibernate\testsuite\target\test-classes C:\eclipse342\workspace\hibernate\testsuite\target\test-classes\org\hibernate\test\cfg\work\Test0.java C:\eclipse342\workspace\hibernate\testsuite\target\test-classes\org\hibernate\test\cfg\work\Test1.java C:\eclipse342\workspace\hibernate\testsuite\target\test-classes\org\hibernate\test\cfg\work\Test2.java C:\eclipse342\workspace\hibernate\testsuite\target\test-classes\org\hibernate\test\cfg\work\Test3.java C:\eclipse342\workspace\hibernate\testsuite\target\test-classes\org\hibernate\test\cfg\work\Test4.java C:\eclipse342\workspace\hibernate\testsuite\target\test-classes\org\hibernate\test\cfg\work\Test5.java C:\eclipse342\workspace\hibernate\testsuite\target\test-classes\org\hibernate\test\cfg\work\Test6.java C:\eclipse342\workspace\hibernate\testsuite\target\test-classes\org\hibernate\test\cfg\work\Test7.java C:\eclipse342\workspace\hibernate\testsuite\target\test-classes\org\hibernate\test\cfg\work\Test8.java at java.lang.ProcessImpl.create(Native Method) at java.lang.ProcessImpl.&amp;lt;init&amp;gt;(ProcessImpl.java:81) at java.lang.ProcessImpl.start(ProcessImpl.java:30) at java.lang.ProcessBuilder.start(ProcessBuilder.java:451) at java.lang.Runtime.exec(Runtime.java:591) at java.lang.Runtime.exec(Runtime.java:429) at java.lang.Runtime.exec(Runtime.java:326) at org.hibernate.test.cfg.ConfigurationPerformanceTest.generateTestFiles(ConfigurationPerformanceTest.java:287) at org.hibernate.test.cfg.ConfigurationPerformanceTest.testSessionFactoryCreationTime(ConfigurationPerformanceTest.java:160) testSessionFactoryCreationTime(* org.hibernate.test.cfg.ConfigurationPerformanceTest*) ------------------------------------------------------------------------------- Test set: org.hibernate.test.cfg.ConfigurationPerformanceTest ------------------------------------------------------------------------------- Tests run: 2, Failures: 0, Errors: 2, Skipped: 0, Time elapsed: 1.157 sec &amp;lt;&amp;lt;&amp;lt; FAILURE! testLoadingAndSerializationOfConfiguration(org.hibernate.test.cfg.ConfigurationPerformanceTest) Time elapsed: 0.844 sec &amp;lt;&amp;lt;&amp;lt; ERROR! java.io.NotSerializableException: org.hibernate.id.factory.DefaultIdentifierGeneratorFactory at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1081) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1375) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1347) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1290) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1079) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:302) at org.hibernate.test.cfg.ConfigurationPerformanceTest.saveAndLoad(ConfigurationPerformanceTest.java:208) at org.hibernate.test.cfg.ConfigurationPerformanceTest.testLoadingAndSerializationOfConfiguration(ConfigurationPerformanceTest.java:127) testSessionFactoryCreationTime(org.hibernate.test.cfg.ConfigurationPerformanceTest) Time elapsed: 0.297 sec &amp;lt;&amp;lt;&amp;lt; ERROR! java.io.IOException: CreateProcess: javac -version -d C:\eclipse342\workspace\hibernate\testsuite\target\test-classes C:\eclipse342\workspace\hibernate\testsuite\target\test-classes\org\hibernate\test\cfg\work\Test0.java C:\eclipse342\workspace\hibernate\testsuite\target\test-classes\org\hibernate\test\cfg\work\Test1.java C:\eclipse342\workspace\hibernate\testsuite\target\test-classes\org\hibernate\test\cfg\work\Test2.java C:\eclipse342\workspace\hibernate\testsuite\target\test-classes\org\hibernate\test\cfg\work\Test3.java C:\eclipse342\workspace\hibernate\testsuite\target\test-classes\org\hibernate\test\cfg\work\Test4.java C:\eclipse342\workspace\hibernate\testsuite\target\test-classes\org\hibernate\test\cfg\work\Test5.java C:\eclipse342\workspace\hibernate\testsuite\target\test-classes\org\hibernate\test\cfg\work\Test6.java C:\eclipse342\workspace\hibernate\testsuite\target\test-classes\org\hibernate\test\cfg\work\Test7.java C:\eclipse342\workspace\hibernate\testsuite\target\test-classes\org\hibernate\test\cfg\work\Test8.java at java.lang.ProcessImpl.create(Native Method) at java.lang.ProcessImpl.&amp;lt;init&amp;gt;(ProcessImpl.java:81) at java.lang.ProcessImpl.start(ProcessImpl.java:30) at java.lang.ProcessBuilder.start(ProcessBuilder.java:451) at java.lang.Runtime.exec(Runtime.java:591) at java.lang.Runtime.exec(Runtime.java:429) at java.lang.Runtime.exec(Runtime.java:326) at org.hibernate.test.cfg.ConfigurationPerformanceTest.generateTestFiles(ConfigurationPerformanceTest.java:287) at org.hibernate.test.cfg.ConfigurationPerformanceTest.testSessionFactoryCreationTime(ConfigurationPerformanceTest.java:160) ------------------------------------------------------------------------------- Test set: org.hibernate.test.legacy.ParentChildTest ------------------------------------------------------------------------------- Tests run: 18, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 1.25 sec &amp;lt;&amp;lt;&amp;lt; FAILURE! testComplexCriteria(org.hibernate.test.legacy.ParentChildTest) Time elapsed: 0.453 sec &amp;lt;&amp;lt;&amp;lt; ERROR! org.hibernate.exception.SQLGrammarException: could not execute query at org.hibernate.exception.SQLStateConverter.convert(SQLStateConverter.java:90) at org.hibernate.exception.JDBCExceptionHelper.convert(JDBCExceptionHelper.java:66) at org.hibernate.loader.Loader.doList(Loader.java:2235) at org.hibernate.loader.Loader.listIgnoreQueryCache(Loader.java:2129) at org.hibernate.loader.Loader.list(Loader.java:2124) at org.hibernate.loader.criteria.CriteriaLoader.list(CriteriaLoader.java:117) at org.hibernate.impl.SessionImpl.list(SessionImpl.java:1531) at org.hibernate.impl.CriteriaImpl.list(CriteriaImpl.java:306) at org.hibernate.test.legacy.ParentChildTest.testComplexCriteria(ParentChildTest.java:248) Caused by: java.sql.SQLException: Column not found: FOO4_.STRING_ in statement [select this_.baz_id_column_ as baz1_1219_11_, this_.count_count as count2_1219_11_, this_.name_b as name3_1219_11_, this_.foo as foo1219_11_, this_.superBaz as superBaz1219_11_, this_.str as str1219_11_, foo6_.&amp;quot;foo_idcolumnname123&amp;quot; as foo1_1211_0_, foo6_.version as version1211_0_, foo6_.foo as foo1211_0_, foo6_.long_ as long5_1211_0_, foo6_.&amp;quot;integer__&amp;quot; as integer6_1211_0_, foo6_.float_ as float7_1211_0_, foo6_.x as x1211_0_, foo6_.double_ as double9_1211_0_, foo6_.date_ as date10_1211_0_, foo6_.timestamp_ as timestamp11_1211_0_, foo6_.boolean_ as boolean12_1211_0_, foo6_.bool_ as bool13_1211_0_, foo6_.null_ as null14_1211_0_, foo6_.short_ as short15_1211_0_, foo6_.char_ as char16_1211_0_, foo6_.zero_ as zero17_1211_0_, foo6_.int_ as int18_1211_0_, foo6_.string_ as string19_1211_0_, foo6_.byte_ as byte20_1211_0_, foo6_.yesno as yesno1211_0_, foo6_.blobb_ as blobb22_1211_0_, foo6_.nullBlob as nullBlob1211_0_, foo6_.bin_ as bin24_1211_0_, foo6_.&amp;quot;localeayzabc123&amp;quot; as localea25_1211_0_, foo6_.first_name as first26_1211_0_, foo6_.surname as surname1211_0_, foo6_.count_ as count28_1211_0_, foo6_.name_ as name29_1211_0_, foo6_.g__ as g30_1211_0_, foo6_.cmpnt_null_ as cmpnt31_1211_0_, foo6_.subname as subname1211_0_, foo6_.fee_sub as fee33_1211_0_, foo6_.null_cmpnt_ as null34_1211_0_, foo6_1_.joinedProp as joinedProp1215_0_, foo6_2_.dependent as dependent1216_0_, foo6_.the_time as the35_1211_0_, foo6_.baz as baz1211_0_, foo6_.bar_string as bar37_1211_0_, foo6_.bar_count as bar38_1211_0_, foo6_.name as name1211_0_, foo6_.clazz as clazz1211_0_, foo6_.gen_id as gen41_1211_0_, foo6_3_.name_name as name2_1218_0_, foo6_.int_/2 as formula34_0_, foo6_.&amp;quot;foo_subclass_1234&amp;quot; as foo2_1211_0_, glarch7_.tha_key as tha1_1246_1_, glarch7_.version as version1246_1_, glarch7_.namecvbnmasdf as namecvbn3_1246_1_, glarch7_.next_ as next4_1246_1_, glarch7_.order_ as order5_1246_1_, glarch7_.foo as foo1246_1_, glarch7_.bar as bar1246_1_, glarch7_.x as x1246_1_, glarch7_.immutable as immutable1246_1_, glarch7_.&amp;quot;any_id_of_object&amp;quot; as any10_1246_1_, glarch7_.&amp;quot;any_class_of_object&amp;quot; as any11_1246_1_, glarch7_.count_ as count12_1246_1_, glarch7_.glarch_ as glarch13_1246_1_, fee8_.id_ as id1_1256_2_, fee8_.fi as fi1256_2_, fee8_.fee as fee1256_2_, fee8_.anotherFee as anotherFee1256_2_, fee8_.qux as qux1256_2_, fee8_.count_ as count6_1256_2_, fee8_.name as name1256_2_, fee8_.null_prop as null8_1256_2_, fee9_.id_ as id1_1256_3_, fee9_.fi as fi1256_3_, fee9_.fee as fee1256_3_, fee9_.anotherFee as anotherFee1256_3_, fee9_.qux as qux1256_3_, fee9_.count_ as count6_1256_3_, fee9_.name as name1256_3_, fee9_.null_prop as null8_1256_3_, fee10_.id_ as id1_1256_4_, fee10_.fi as fi1256_4_, fee10_.fee as fee1256_4_, fee10_.anotherFee as anotherFee1256_4_, fee10_.qux as qux1256_4_, fee10_.count_ as count6_1256_4_, fee10_.name as name1256_4_, fee10_.null_prop as null8_1256_4_, baz11_.baz_id_column_ as baz1_1219_5_, baz11_.count_count as count2_1219_5_, baz11_.name_b as name3_1219_5_, baz11_.foo as foo1219_5_, baz11_.superBaz as superBaz1219_5_, baz11_.str as str1219_5_, topglarche12_.idtopglarch as idtopgl16_13_, topglarche12_.tha_key as tha1_13_, topglarche12_.mapkey as mapkey13_, topglarche12_.tha_key as tha1_1246_6_, topglarche12_.version as version1246_6_, topglarche12_.namecvbnmasdf as namecvbn3_1246_6_, topglarche12_.next_ as next4_1246_6_, topglarche12_.order_ as order5_1246_6_, topglarche12_.foo as foo1246_6_, topglarche12_.bar as bar1246_6_, topglarche12_.x as x1246_6_, topglarche12_.immutable as immutable1246_6_, topglarche12_.&amp;quot;any_id_of_object&amp;quot; as any10_1246_6_, topglarche12_.&amp;quot;any_class_of_object&amp;quot; as any11_1246_6_, topglarche12_.count_ as count12_1246_6_, topglarche12_.glarch_ as glarch13_1246_6_, baz13_.baz_id_column_ as baz1_1219_7_, baz13_.count_count as count2_1219_7_, baz13_.name_b as name3_1219_7_, baz13_.foo as foo1219_7_, baz13_.superBaz as superBaz1219_7_, baz13_.str as str1219_7_, foo3_.&amp;quot;foo_idcolumnname123&amp;quot; as foo1_1211_8_, foo3_.version as version1211_8_, foo3_.foo as foo1211_8_, foo3_.long_ as long5_1211_8_, foo3_.&amp;quot;integer__&amp;quot; as integer6_1211_8_, foo3_.float_ as float7_1211_8_, foo3_.x as x1211_8_, foo3_.double_ as double9_1211_8_, foo3_.date_ as date10_1211_8_, foo3_.timestamp_ as timestamp11_1211_8_, foo3_.boolean_ as boolean12_1211_8_, foo3_.bool_ as bool13_1211_8_, foo3_.null_ as null14_1211_8_, foo3_.short_ as short15_1211_8_, foo3_.char_ as char16_1211_8_, foo3_.zero_ as zero17_1211_8_, foo3_.int_ as int18_1211_8_, foo3_.string_ as string19_1211_8_, foo3_.byte_ as byte20_1211_8_, foo3_.yesno as yesno1211_8_, foo3_.blobb_ as blobb22_1211_8_, foo3_.nullBlob as nullBlob1211_8_, foo3_.bin_ as bin24_1211_8_, foo3_.&amp;quot;localeayzabc123&amp;quot; as localea25_1211_8_, foo3_.first_name as first26_1211_8_, foo3_.surname as surname1211_8_, foo3_.count_ as count28_1211_8_, foo3_.name_ as name29_1211_8_, foo3_.g__ as g30_1211_8_, foo3_.cmpnt_null_ as cmpnt31_1211_8_, foo3_.subname as subname1211_8_, foo3_.fee_sub as fee33_1211_8_, foo3_.null_cmpnt_ as null34_1211_8_, foo3_1_.joinedProp as joinedProp1215_8_, foo3_2_.dependent as dependent1216_8_, foo3_.the_time as the35_1211_8_, foo3_.baz as baz1211_8_, foo3_.bar_string as bar37_1211_8_, foo3_.bar_count as bar38_1211_8_, foo3_.name as name1211_8_, foo3_.clazz as clazz1211_8_, foo3_.gen_id as gen41_1211_8_, foo3_3_.name_name as name2_1218_8_, foo3_.int_/2 as formula34_8_, foo3_.&amp;quot;foo_subclass_1234&amp;quot; as foo2_1211_8_, glarch1_.tha_key as tha1_1246_9_, glarch1_.version as version1246_9_, glarch1_.namecvbnmasdf as namecvbn3_1246_9_, glarch1_.next_ as next4_1246_9_, glarch1_.order_ as order5_1246_9_, glarch1_.foo as foo1246_9_, glarch1_.bar as bar1246_9_, glarch1_.x as x1246_9_, glarch1_.immutable as immutable1246_9_, glarch1_.&amp;quot;any_id_of_object&amp;quot; as any10_1246_9_, glarch1_.&amp;quot;any_class_of_object&amp;quot; as any11_1246_9_, glarch1_.count_ as count12_1246_9_, glarch1_.glarch_ as glarch13_1246_9_, glarch2_.tha_key as tha1_1246_10_, glarch2_.version as version1246_10_, glarch2_.namecvbnmasdf as namecvbn3_1246_10_, glarch2_.next_ as next4_1246_10_, glarch2_.order_ as order5_1246_10_, glarch2_.foo as foo1246_10_, glarch2_.bar as bar1246_10_, glarch2_.x as x1246_10_, glarch2_.immutable as immutable1246_10_, glarch2_.&amp;quot;any_id_of_object&amp;quot; as any10_1246_10_, glarch2_.&amp;quot;any_class_of_object&amp;quot; as any11_1246_10_, glarch2_.count_ as count12_1246_10_, glarch2_.glarch_ as glarch13_1246_10_ from baz this_ left outer join &amp;quot;foos&amp;quot; foo6_ on this_.foo=foo6_.&amp;quot;foo_idcolumnname123&amp;quot; left outer join jointable foo6_1_ on foo6_.&amp;quot;foo_idcolumnname123&amp;quot;=foo6_1_.fooid left outer join foo_dep_table foo6_2_ on foo6_.&amp;quot;foo_idcolumnname123&amp;quot;=foo6_2_.fooid left outer join bar_join_table foo6_3_ on foo6_.&amp;quot;foo_idcolumnname123&amp;quot;=foo6_3_.bar_id left outer join &amp;quot;glarchez&amp;quot; glarch7_ on foo6_.g__=glarch7_.tha_key left outer join fee9_ on fee8_.fee=fee9_.id_ left outer join &amp;quot;the fees&amp;quot; fee10_ on fee9_.anotherFee=fee10_.id_ left outer join baz baz11_ on foo6_.baz=baz11_.baz_id_column_ left outer join &amp;quot;glarchez&amp;quot; topglarche12_ on baz11_.baz_id_column_=topglarche12_.idtopglarch left outer join baz baz13_ on baz11_.superBaz=baz13_.baz_id_column_ inner join &amp;quot;foos&amp;quot; foo3_ on this_.baz_id_column_=foo3_.baz_id and foo3_.&amp;quot;foo_subclass_1234&amp;quot; in ('F', 'B', 'T') left outer join jointable foo3_1_ on foo3_.&amp;quot;foo_idcolumnname123&amp;quot;=foo3_1_.fooid left outer join foo_dep_table foo3_2_ on foo3_.&amp;quot;foo_idcolumnname123&amp;quot;=foo3_2_.fooid left outer join bar_join_table foo3_3_ on foo3_.&amp;quot;foo_idcolumnname123&amp;quot;=foo3_3_.bar_id inner join fooArray fooarray15_ on this_.baz_id_column_=fooarray15_.id_ and ( fooarray15_.i&amp;lt;8) inner join &amp;quot;glarchez&amp;quot; glarch1_ on this_.baz_id_column_=glarch1_.idtopglarch inner join &amp;quot;glarchez&amp;quot; glarch2_ on glarch1_.tha_key=glarch2_.array_key where glarch1_.namecvbnmasdf is not null and glarch2_.namecvbnmasdf=glarch2_.namecvbnmasdf and glarch2_.namecvbnmasdf=? and glarch2_.x&amp;gt;? and foo3_.null_ is null and foo3_.string_=? and foo3_.&amp;quot;integer__&amp;quot;&amp;lt;? and foo4_.string_=?] at org.hsqldb.jdbc.Util.throwError(Unknown Source) at org.hsqldb.jdbc.jdbcPreparedStatement.&amp;lt;init&amp;gt;(Unknown Source) at org.hsqldb.jdbc.jdbcConnection.prepareStatement(Unknown Source) at org.hibernate.jdbc.AbstractBatcher.getPreparedStatement(AbstractBatcher.java:534) at org.hibernate.jdbc.AbstractBatcher.getPreparedStatement(AbstractBatcher.java:452) at org.hibernate.jdbc.AbstractBatcher.prepareQueryStatement(AbstractBatcher.java:161) at org.hibernate.loader.Loader.prepareQueryStatement(Loader.java:1578) at org.hibernate.loader.Loader.doQuery(Loader.java:696) at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:259) at org.hibernate.loader.Loader.doList(Loader.java:2232) ... 35 more testComplexCriteria(*org.hibernate.test.legacy.ParentChildTest*) Tests run: 1417, Failures: 1, Errors: 3, Skipped: 0 -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [HSearch] @ClassBridge</header>
    <date>Thu Apr 09 10:56:40 CEST 2009</date>
    <body>somebody remembers why @Class Bridge.impl is defaulted. This looks wrong to me and I can't find an explanation.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [HSearch] @ClassBridge</header>
    <date>Thu Apr 09 11:20:28 CEST 2009</date>
    <body>On Thu, 09 Apr 2009 10:56:40 +0200, Emmanuel Bernard Seems indeed wrong. Seems it was defaulted since the beginning. I think we should remove it. --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [HSearch] @ClassBridge</header>
    <date>Thu Apr 09 12:28:07 CEST 2009</date>
    <body>yes, will do that. somebody remembers why @Class Bridge.impl is defaulted. This looks wrong to me and I can't find an explanation.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] i think i found a bug in sql generation from	criteria api..</header>
    <date>Fri Apr 10 17:36:02 CEST 2009</date>
    <body>i see no reference to it previously, and i would like to try analyze it, however i don't know much about the portion of code in hibernate, any pointers on where to start looking? it's connected to issue -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] programmatic configuration of Hibernate Search</header>
    <date>Sat Apr 11 19:43:58 CEST 2009</date>
    <body>Hello, I was wondering if the new programmatic configuration of Hibernate Search you're working on is going to be a complete alternative (either-or) to the configure-by-annotations way or if they could be complimentary. Will it be possible to make some changes to the configuration created by annotation scanning in a programmatic way? Got to this train of thought after readin this forum post: Sanne</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Re: programmatic configuration of Hibernate Search</header>
    <date>Sun Apr 12 20:10:43 CEST 2009</date>
    <body>This can be mixed as in one entity is defined in annotation and an other programmatically. As far as mixing configuration in the same entity, it's theoretically possible but usually very painful to code (and rules are hard to make intuitive). If anyone is interested after my initial work, we can add support for this.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Re: programmatic configuration of Hibernate Search</header>
    <date>Sun Apr 12 20:17:29 CEST 2009</date>
    <body>That's good news, at the moment I can't imagine a need for the second case. 2009/4/12 Emmanuel Bernard &amp;lt;&amp;gt;: Hello, I was wondering if the new programmatic configuration of Hibernate Search you're working on is going to be a complete alternative (either-or) to the configure-by-annotations way or if they could be complimentary. Will it be possible to make some changes to the configuration created by annotation scanning in a programmatic way? Got to this train of thought after readin this forum post: Sanne</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Can Stored procedure be called from EJB3 annotations</header>
    <date>Sun Apr 12 08:00:14 CEST 2009</date>
    <body>Hi All, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; I am working in a project where my persistence framework is Hibernate 3.2 , we are using the JPA standard wich Hibernate implements, but I was not able to find a way how to call stored procedures using JPA annotations.Any help in this regard will be appreciated. Thanks and Regards   Joydeep Bhattacharjee Add more friends to your messenger and enjoy! Go to -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] want to join hibernate development community</header>
    <date>Sun Apr 12 08:19:22 CEST 2009</date>
    <body>Hi All, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; I am new to hibernate development community though I have been using the the product for some time now , I would like to be a part of this wonderful product how can I get on with it . Any help in this regard will be highly appreciated. Thanks and Regards   Joydeep Bhattacharjee Add more friends to your messenger and enjoy! Go to -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] want to join</header>
    <date>Mon Apr 13 07:12:53 CEST 2009</date>
    <body>-------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Re: HSEARCH-178</header>
    <date>Mon Apr 13 17:22:37 CEST 2009</date>
    <body>After our chat about the topic I thought that I only needed some minor changes, was quite wrong. I moved the flush listener to the usual FullTextIndexEventListener, using delegation at first as we had agreed. This got me into troubles with the Serialization test of the FullTextEntityManager, I had to adapt EventSourceTransactionContext changing a field to transient and having the code manage the case in which the values are lost by deserialization. After this I removed the delegation moving the code to the FullTextIndexEventListener which resulted in simpler code. You made me think about what was happening in case of an error during the flush processing in the default listener, so I've replaced the Map with a combination of non-static ThreadLocal with a weak reference to the flushing Session, which is checked for == identity to make sure the synch is relevant to the same session, in case of a previously not cleaned-up flush by the same Thread (as in a Map, but I only need the last stored value for the current session, and only for the same thread). I avoided &amp;quot;static&amp;quot; for this ThreadLocal to have it cleanup at SessionFactory close, and needed to be both &amp;quot;final&amp;quot; and &amp;quot;transient&amp;quot; for respectively concurrency and serializability. I've had to add a customized readObject to recreate the ThreadLocal after a deserialization, using Reflection to set the final field. A bit messy, I'm not very satisfied, but it's working fine. I'm committing it to trunk, but would be glad if someone could get an idea to make it a bit cleaner/simpler. Also I'll wait for a &amp;quot;go&amp;quot; before merging it to 3.1 branch Sanne 2009/4/8 Emmanuel Bernard &amp;lt;&amp;gt;: yes ideally trunk is better suited for experiments</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Re: HSEARCH-178</header>
    <date>Tue Apr 14 10:44:59 CEST 2009</date>
    <body>Read inline I think I don't like the ThreadLocal approach. What is your reasoning for using a thread local variable? What would make it less compelling if we were not using a TL? makes sense. The map should be scoped to the event listener. That is weird. I thought readObject had the same rights than constructors wrt to final assignment. Just port it also to trunk and we will see if it's stable. We will probably carve a 3.1.1 soon and a 3.1.2 if something bad is happening I guess yes ideally trunk is better suited for experiments</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Re: HSEARCH-178</header>
    <date>Tue Apr 14 13:03:27 CEST 2009</date>
    <body>I've 2 inline answers: 2009/4/14 Emmanuel Bernard &amp;lt;&amp;gt;: After our chat about the topic I thought that I only needed some minor changes, was quite wrong. I moved the flush listener to the usual FullTextIndexEventListener, using delegation at first as we had agreed. This got me into troubles with the Serialization test of the FullTextEntityManager, I had to adapt EventSourceTransactionContext changing a field to transient and having the code manage the case in which the values are lost by deserialization. After this I removed the delegation moving the code to the FullTextIndexEventListener which resulted in simpler code. You made me think about what was happening in case of an error during the flush processing in the default listener, so I've replaced the Map with a combination of non-static ThreadLocal with a weak reference to the flushing Session, which is checked for == identity to make sure the synch is relevant to the same session, in case of a previously not cleaned-up flush by the same Thread (as in a Map, but I only need the last stored value for the current session, and only for the same thread). the two event listeners &amp;quot;on-post-somethingchanged&amp;quot; and &amp;quot;flush&amp;quot; are executed one after the other right away, atomically from a out-of-hibernate-search point of view. In the test code if I put breakpoints in both the &amp;quot;register synch&amp;quot; routing and &amp;quot;find the synch from the flushlistener&amp;quot; thay both happen only when the client code is asking to flush. This made me think the two routines are always being called by the same thread, and there is no chance to begin doing something else between the first operation and the second operation: it's not possible that, for example, the Session is passivated or suspendend (thinking about long running conversations). The only way to stop the second to happen is having an exception in the default hibernate flush listener: that's the reason for the weak reference to Session. These thoughts leaded me to think that a concurrent map is overkill, especially considering that every thread in the application is to access this map twice per flush: to put in an object, and get it back immediately after that, and no thread trying to say anything to the others or wanting to store it for a longer time. So I thought the ThreadLocal was the natural answer. Still the resulting code is ugly, I'm happy to forget my performance thoughts if we could get with a cleaner solution. I've another version ready using a WeakIdentityHashMap, it's also passing the tests, and is a bit more readable, but I'm unsure about which is better. Shall I commit the one using WeakIdentityHashMap instead of ThreadLocal? I avoided &amp;quot;static&amp;quot; for this ThreadLocal to have it cleanup at SessionFactory close, and needed to be both &amp;quot;final&amp;quot; and &amp;quot;transient&amp;quot; for respectively concurrency and serializability. I've had to add a customized readObject to recreate the ThreadLocal after a deserialization, using Reflection to set the final field. Yes it's weird; here is a good source about the topic: Short and straight to the point, I'd suggest reading it. A bit messy, I'm not very satisfied, but it's working fine. I'm committing it to trunk, but would be glad if someone could get an idea to make it a bit cleaner/simpler. Also I'll wait for a &amp;quot;go&amp;quot; before merging it to 3.1 branch Sanne &amp;gt;: Just port it also to trunk and we will see if it's stable. We will probably carve a 3.1.1 soon and a 3.1.2 if something bad is happening I guess yes ideally trunk is better suited for experiments</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Re: HSEARCH-178</header>
    <date>Tue Apr 14 13:51:43 CEST 2009</date>
    <body>Read inline After our chat about the topic I thought that I only needed some minor changes, was quite wrong. I moved the flush listener to the usual FullTextIndexEventListener, using delegation at first as we had agreed. This got me into troubles with the Serialization test of the FullTextEntityManager, I had to adapt EventSourceTransactionContext changing a field to transient and having the code manage the case in which the values are lost by deserialization. After this I removed the delegation moving the code to the FullTextIndexEventListener which resulted in simpler code. You made me think about what was happening in case of an error during the flush processing in the default listener, so I've replaced the Map with a combination of non-static ThreadLocal with a weak reference to the flushing Session, which is checked for == identity to make sure the synch is relevant to the same session, in case of a previously not cleaned-up flush by the same Thread (as in a Map, but I only need the last stored value for the current session, and only for the same thread). I think I don't like the ThreadLocal approach. What is your reasoning for using a thread local variable? What would make it less compelling if we were not using a TL? I looked that the TL impl in Java SE and they are hosted on a per Thread object basis, so I guess there is no concurrency lock here. So it all boils down to which is faster: - a concurrent map look up access - getting the current Thread object + a map lookup (internal TL variable impl) Up to you. I have the tendency to limit my TL use as it has caused issues in the past. Remember this part of the code is used only as a workaround for people misconfiguring HSearch so I am not too fussed about the perf.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Re: HSEARCH-178</header>
    <date>Tue Apr 14 16:22:32 CEST 2009</date>
    <body>I'm going for the Map approach, to favor cleaner code and because you appear to be more comfortable with it. Even so there are two more points to consider: 1)If in the future a code change of the Synchronization (stored in the WeakMap as a value) would be changed in any way to get a (hard) reference to the session, we'll get a memory leak, as in HSEARCH-314. As much as the threadlocal is dangerous, we have to be carefull with the WeakMap. 2)Performance: you are reminding this is just a workaround for people which don't like transactions, but the flushlistener is registered for everybody. So nothing will be put in the map (skipping the Synchronization registration) in a correct usage case, but still during the flushlistener I've to look into the map to verify there's nothing to do. I'm not worried about the performance impact of looking into an empty map, but felt I had to keep you informed. 2009/4/14 Emmanuel Bernard &amp;lt;&amp;gt;: I've 2 inline answers: &amp;gt;: Read inline After our chat about the topic I thought that I only needed some minor changes, was quite wrong. I moved the flush listener to the usual FullTextIndexEventListener, using delegation at first as we had agreed. This got me into troubles with the Serialization test of the FullTextEntityManager, I had to adapt EventSourceTransactionContext changing a field to transient and having the code manage the case in which the values are lost by deserialization. After this I removed the delegation moving the code to the FullTextIndexEventListener which resulted in simpler code. You made me think about what was happening in case of an error during the flush processing in the default listener, so I've replaced the Map with a combination of non-static ThreadLocal with a weak reference to the flushing Session, which is checked for == identity to make sure the synch is relevant to the same session, in case of a previously not cleaned-up flush by the same Thread (as in a Map, but I only need the last stored value for the current session, and only for the same thread). I think I don't like the ThreadLocal approach. What is your reasoning for using a thread local variable? What would make it less compelling if we were not using a TL? the two event listeners &amp;quot;on-post-somethingchanged&amp;quot; and &amp;quot;flush&amp;quot; are executed one after the other right away, atomically from a out-of-hibernate-search point of view. In the test code if I put breakpoints in both the &amp;quot;register synch&amp;quot; routing and &amp;quot;find the synch from the flushlistener&amp;quot; thay both happen only when the client code is asking to flush. This made me think the two routines are always being called by the same thread, and there is no chance to begin doing something else between the first operation and the second operation: it's not possible that, for example, the Session is passivated or suspendend (thinking about long running conversations). The only way to stop the second to happen is having an exception in the default hibernate flush listener: that's the reason for the weak reference to Session. These thoughts leaded me to think that a concurrent map is overkill, especially considering that every thread in the application is to access this map twice per flush: to put in an object, and get it back immediately after that, and no thread trying to say anything to the others or wanting to store it for a longer time. So I thought the ThreadLocal was the natural answer. Still the resulting code is ugly, I'm happy to forget my performance thoughts if we could get with a cleaner solution. I've another version ready using a WeakIdentityHashMap, it's also passing the tests, and is a bit more readable, but I'm unsure about which is better. Shall I commit the one using WeakIdentityHashMap instead of ThreadLocal?</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Re: HSEARCH-178</header>
    <date>Tue Apr 14 18:09:51 CEST 2009</date>
    <body>Yes I know. Ideally we would add that to the Synchornize JavaDoc, except we can't :) Add a warning to PostTransactionWorkQueueSynchronization and IndexWorkFlushEventListener#addSynchronization I guess we could add a volatile flag marking the activation but i don't think it is worth the effort. I've 2 inline answers: &amp;gt;: Read inline After our chat about the topic I thought that I only needed some minor changes, was quite wrong. I moved the flush listener to the usual FullTextIndexEventListener, using delegation at first as we had agreed. This got me into troubles with the Serialization test of the FullTextEntityManager, I had to adapt EventSourceTransactionContext changing a field to transient and having the code manage the case in which the values are lost by deserialization. After this I removed the delegation moving the code to the FullTextIndexEventListener which resulted in simpler code. You made me think about what was happening in case of an error during the flush processing in the default listener, so I've replaced the Map with a combination of non-static ThreadLocal with a weak reference to the flushing Session, which is checked for == identity to make sure the synch is relevant to the same session, in case of a previously not cleaned-up flush by the same Thread (as in a Map, but I only need the last stored value for the current session, and only for the same thread). I think I don't like the ThreadLocal approach. What is your reasoning for using a thread local variable? What would make it less compelling if we were not using a TL? the two event listeners &amp;quot;on-post-somethingchanged&amp;quot; and &amp;quot;flush&amp;quot; are executed one after the other right away, atomically from a out-of-hibernate- search point of view. In the test code if I put breakpoints in both the &amp;quot;register synch&amp;quot; routing and &amp;quot;find the synch from the flushlistener&amp;quot; thay both happen only when the client code is asking to flush. This made me think the two routines are always being called by the same thread, and there is no chance to begin doing something else between the first operation and the second operation: it's not possible that, for example, the Session is passivated or suspendend (thinking about long running conversations). The only way to stop the second to happen is having an exception in the default hibernate flush listener: that's the reason for the weak reference to Session. These thoughts leaded me to think that a concurrent map is overkill, especially considering that every thread in the application is to access this map twice per flush: to put in an object, and get it back immediately after that, and no thread trying to say anything to the others or wanting to store it for a longer time. So I thought the ThreadLocal was the natural answer. Still the resulting code is ugly, I'm happy to forget my performance thoughts if we could get with a cleaner solution. I've another version ready using a WeakIdentityHashMap, it's also passing the tests, and is a bit more readable, but I'm unsure about which is better. Shall I commit the one using WeakIdentityHashMap instead of ThreadLocal? I looked that the TL impl in Java SE and they are hosted on a per Thread object basis, so I guess there is no concurrency lock here. So it all boils down to which is faster: - a concurrent map look up access - getting the current Thread object + a map lookup (internal TL variable impl) Up to you. I have the tendency to limit my TL use as it has caused issues in the past. Remember this part of the code is used only as a workaround for people misconfiguring HSearch so I am not too fussed about the perf.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] want to join hibernate development community</header>
    <date>Tue Apr 14 06:05:25 CEST 2009</date>
    <body>Hi, &amp;#160;&amp;#160;&amp;#160; Is there any SVN repository from where I can download the source codes, and set up my project in eclipse .Can you also give the Bugzilla link for hibernate.I want to get my feet wet with the code soon . Thanks for replying. Thanks and Regards   Joydeep Bhattacharjee Subject: Re: [hibernate-dev] want to join hibernate development community To: Date: Tuesday, 14 April, 2009, 5:02 AM The ideal way to get involved is to download the source and get familiar with it first - if you have not already. I am here because I made some modifications to hibernate for my own project and want to contribute back. The best way to start is to look at existing bug reports, write a patch or two and attach them to the ticket. Of course, I'm in a similar boat as you, in that I'm not an active committer right now. I'm personally looking at issues which affect me - aka I don't want to be committing code for things that I am not having practical use for. Hi All, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; I am new to hibernate development community though I have been using the the product for some time now , I would like to be a part of this wonderful product how can I get on with it . Any help in this regard will be highly appreciated. Add more friends to your messenger and enjoy! Go to -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] want to join hibernate development community</header>
    <date>Tue Apr 14 12:50:12 CEST 2009</date>
    <body>-- Hibernate.org</body>
  </mail>
  <mail>
    <header>[hibernate-dev] want to join hibernate development community</header>
    <date>Tue Apr 14 15:08:47 CEST 2009</date>
    <body>about my experiences with open source, documenting my attempts. please note that you will need m2eclipse plugin to download the code, as the svn repo is not in eclipse project. you will then need to change your .settings.xml file for maven in ~/m2 direcotry  for jboss plugins also after you downloaded the code you will encounter huge amount of compiler errors  you will need to the following: 1. run mvn install on the pom parent - to generate some antlr files that were not generated during the initial load 2. change hibernate-core project compiler settings to : generated .class file compatibility to 1.4, source compatibility : 1.4 3. on hibernate-common-annotations project change the compiler error/warnings , turn the forbidden reference (access rules) to warning instead of error. good luck getting your feet, personally i feel somewhat drowning when i'm trying to figure out this bug : personally i have no idea how anyone outside jboss can even begin to start modify the code without some white papers or explanation on the internal structure of hibernate. Hi All, I am new to hibernate development community though I have been using the the product for some time now , I would like to be a part of this wonderful product how can I get on with it . Any help in this regard will be highly appreciated. -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] want to join hibernate development community</header>
    <date>Tue Apr 14 19:44:57 CEST 2009</date>
    <body>Hey Elhanan, What issue did you have in this area? Might be a problem I am not seeing. oh and, yes the Hibernate code is intimidating ORM is not a trivial field. And you have not chosen the easiest part of Hibernate when dealing with the query generation :)</body>
  </mail>
  <mail>
    <header>[hibernate-dev] want to join hibernate development community</header>
    <date>Tue Apr 14 19:54:29 CEST 2009</date>
    <body>JavaReflectionManagerTest is importing &amp;quot;import which is not legal in eclipse, as it's not in the standard JavaSE. It's actually quite bad, because in Ganymede I'm not allowed to disable this behaviour, I had to comment out the code to be able to build the package. I was wondering of we can't just replace it with &amp;quot;Number&amp;quot; or if it's testing something more oscure. 2009/4/14 Emmanuel Bernard &amp;lt;&amp;gt;: 3. on hibernate-common-annotations project change the compiler error/warnings , turn the forbidden reference (access rules) to warning instead of error.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] want to join hibernate development community</header>
    <date>Tue Apr 14 22:39:30 CEST 2009</date>
    <body>This was a mistake. fixed now. funny it stayed all these months :) 3. on hibernate-common-annotations project change the compiler error/warnings , turn the forbidden reference (access rules) to warning instead of error. Hey Elhanan, What issue did you have in this area? Might be a problem I am not seeing. oh and, yes the Hibernate code is intimidating ORM is not a trivial field. And you have not chosen the easiest part of Hibernate when dealing with the query generation :) _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] want to join hibernate development community</header>
    <date>Thu Apr 16 17:45:05 CEST 2009</date>
    <body>On Tue, 14 Apr 2009 15:08:47 +0200, Elhanan Maayan As an alternative to HHH-3856, I can recommend to start with some Annotations or EntityManager bugs. Annotation bugs might give you an easier 'entry point' into the whole code base. Take for example For this issue there seems to be a patch which according to some comments needs still some modifications. You could try to supply a patch which works against the current trunk and which includes unit tests. This way you have something to start with and get familiar with the code and the build. ANN-784 could be another good issue to start with. Again a patch and test(s) would be needed. I guess what I am trying to say is to start with a few bugs which have already a good description and expand your knowledge by exploring the code from there. I am sure Hibernate Core has similar bugs which you could start with. --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] want to join hibernate development community</header>
    <date>Tue Apr 14 14:26:59 CEST 2009</date>
    <body>Hi &amp;#160;&amp;#160;&amp;#160; The SVN repo for the hibernate requires a user name and password. I was unable to check out the code can you please give me a user name and password. Thanks and Regards   Joydeep Bhattacharjee Subject: Re: [hibernate-dev] want to join hibernate development community To: Cc: Date: Tuesday, 14 April, 2009, 4:20 PM -- Hibernate.org Bollywood news, movie reviews, film trailers and more! Go to -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] want to join hibernate development community</header>
    <date>Tue Apr 14 14:43:26 CEST 2009</date>
    <body>. Donnchadh 2009/4/14 joy deep &amp;lt;&amp;gt;:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] want to join hibernate development community</header>
    <date>Tue Apr 14 14:43:42 CEST 2009</date>
    <body>I have added the link to the anonymous SVN which is enough to create patches -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] want to join hibernate development community</header>
    <date>Tue Apr 14 15:02:58 CEST 2009</date>
    <body>Hi , &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; I was able to download from  . Its in process I will try to build the code as I am done with the check out.Thanks for a quick reply. Thanks and Regards   Joydeep Bhattacharjee Subject: Re: [hibernate-dev] want to join hibernate development community Cc: Date: Tuesday, 14 April, 2009, 6:13 PM Try  . &amp;#160; Donnchadh 2009/4/14 joy deep &amp;lt;&amp;gt;: Get perfect Email ID for your Resume. Grab now -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] want to join hibernate development community</header>
    <date>Tue Apr 14 15:18:47 CEST 2009</date>
    <body>Thanks soo much , I was by the side of the ocean no idea about depth . Are only JBoss people allowed to make changes !!! Thanks and Regards   Joydeep Bhattacharjee Subject: Re: [hibernate-dev] want to join hibernate development community Date: Tuesday, 14 April, 2009, 6:38 PM i've started a small blog  my experiences with open source, documenting my attempts. please note that you will need m2eclipse plugin to download the code, as the svn repo is not in eclipse project. you will then need to change your .settings.xml file&amp;#160;for maven in ~/m2 direcotry &amp;#160;for jboss plugins also after you downloaded the code you will encounter&amp;#160;huge amount of compiler errors &amp;#160;you will need to the following: 1. run mvn install&amp;#160;on the pom parent&amp;#160;- to generate some antlr files that were not generated during the initial load 2. change hibernate-core project compiler settings to : &amp;#160;&amp;#160; source compatibility&amp;#160;: 1.4 3. on hibernate-common-annotations project change&amp;#160;the compiler error/warnings , turn the forbidden reference (access rules) to warning instead of error. good luck getting your feet, personally i feel somewhat drowning when i'm trying to figure out this bug : personally i have no idea how anyone outside jboss can even begin to start modify the code without some white papers or explanation on the internal structure of hibernate. Hi, &amp;#160;&amp;#160;&amp;#160; Is there any SVN repository from where I can download the source codes, and set up my project in eclipse .Can you also give the Bugzilla link for hibernate.I want to get my feet wet with the code soon . Thanks for replying. Thanks and Regards Joydeep Bhattacharjee Subject: Re: [hibernate-dev] want to join hibernate development community To: Date: Tuesday, 14 April, 2009, 5:02 AM The ideal way to get involved is to download the source and get familiar with it first - if you have not already. I am here because I made some modifications to hibernate for my own project and want to contribute back. The best way to start is to look at existing bug reports, write a patch or two and attach them to the ticket. Of course, I'm in a similar boat as you, in that I'm not an active committer right now. I'm personally looking at issues which affect me - aka I don't want to be committing code for things that I am not having practical use for. Hi All, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; I am new to hibernate development community though I have been using the the product for some time now , I would like to be a part of this wonderful product how can I get on with it . Any help in this regard will be highly appreciated. Add more friends to your messenger and enjoy! Invite them now. _______________________________________________ hibernate-dev mailing list Get rid of Add-Ons in your email ID. Get -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] want to join hibernate development community</header>
    <date>Tue Apr 14 15:30:51 CEST 2009</date>
    <body>Some observations on this thread: 1. You do not need m2eclipse.  /trunk and /Branch_3_3 both use Maven 2 and will build straight away with &amp;quot;mvn compile&amp;quot;. 2. You can generate Eclipse or IDEA project files from the command line in the standard Maven way (mvn eclipse:eclipse or mvn idea:idea) and then import the projects.  I understand that IDEA reads Maven metadata natively but I cannot speak to that. 3. Only committers are allowed to ... commit.  This is what the svn.jboss.org server is for.  anonsvn.jboss.org is a replica with read-only privileges.  Use this for now.  You are free to open JIRA tickets and attach patch files which will be reviewed by Hibernate committers and possibly committed in a future release. 4. Yes, Hibernate is complicated.  It is not a trivial project to jump into head-first.  So please understand that there are many ways to contribute: * Helping on the forums * Hanging around in IRC to participate/answer questions * Improving the wiki * Filing JIRA issues for bugs or attaching test cases that are required Happy Hibernating, Chris</body>
  </mail>
  <mail>
    <header>[hibernate-dev] want to join hibernate development community</header>
    <date>Tue Apr 14 17:14:21 CEST 2009</date>
    <body>i meant to say you need m2eclipse if you want to shorten the procedure as much as possible, instead of using command line windows. personally i like consolidating all my tools as much as possible into one single IDE, so if i'll use maven, i'd wanna use it inside eclipse without much hassle. i never thought hibernate was simple, my problem is that i don't see how anyone outside jboss personal can actually create fixes (patches or commits) without internal overview of hibernate. and jumping head first is actually what a new developer in jboss would need to do, even if he did had prior usage of hibernate. so either there  are white papers kept in jboss for their use only , or the information is pass down orally by a senior developer. to give an example, we have a developer with a 7 year experience in java j2ee, working on an undocumented homegrown framework with no internal overview documentation, and only oral info passed from previous developer, and that's not nearly enough as fixes usually break something else. Thanks soo much , I was by the side of the ocean no idea about depth . Are only JBoss people allowed to make changes !!! Thanks and Regards Joydeep Bhattacharjee Subject: Re: [hibernate-dev] want to join hibernate development community &amp;gt;, Date: Tuesday, 14 April, 2009, 6:38 PM about my experiences with open source, documenting my attempts. please note that you will need m2eclipse plugin to download the code, as the svn repo is not in eclipse project. you will then need to change your .settings.xml file for maven in ~/m2 direcotry  for jboss plugins also after you downloaded the code you will encounter huge amount of compiler errors  you will need to the following: 1. run mvn install on the pom parent - to generate some antlr files that were not generated during the initial load 2. change hibernate-core project compiler settings to : generated .class file compatibility to 1.4,       source compatibility : 1.4 3. on hibernate-common-annotations project change the compiler error/warnings , turn the forbidden reference (access rules) to warning instead of error. good luck getting your feet, personally i feel somewhat drowning when i'm trying to figure out this bug : personally i have no idea how anyone outside jboss can even begin to start modify the code without some white papers or explanation on the internal structure of hibernate. Hi, Is there any SVN repository from where I can download the source codes, and set up my project in eclipse .Can you also give the Bugzilla link for hibernate.I want to get my feet wet with the code soon . Thanks for replying. Thanks and Regards Joydeep Bhattacharjee --- On *Tue, 14/4/09, Peter Harrison Subject: Re: [hibernate-dev] want to join hibernate development community Date: Tuesday, 14 April, 2009, 5:02 AM The ideal way to get involved is to download the source and get familiar with it first - if you have not already. I am here because I made some modifications to hibernate for my own project and want to contribute back. The best way to start is to look at existing bug reports, write a patch or two and attach them to the ticket. Of course, I'm in a similar boat as you, in that I'm not an active committer right now. I'm personally looking at issues which affect me - aka I don't want to be committing code for things that I am not having practical use for. Hi All, I am new to hibernate development community though I have been using the the product for some time now , I would like to be a part of this wonderful product how can I get on with it . Any help in this regard will be highly appreciated. ------------------------------------------------------------------------ Add more friends to your messenger and enjoy! Invite them now. _______________________________________________ hibernate-dev mailing list ------------------------------------------------------------------------ ------------------------------------------------------------------------ _______________________________________________ hibernate-dev mailing list -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] want to join hibernate development community</header>
    <date>Tue Apr 14 18:51:26 CEST 2009</date>
    <body>There are no internal secret jboss documents - all the information is public. Many people are creating patches to hibernate in various areas by simply reading the code that is having a problem and fix it - of course for more detailed hardcore bugs more info is needed, but no written documentation would help you there - you would still need to look at the code to learn it. btw. I did not work for JBoss when I started contribute to Hibernate, and there are non-JBoss committers today too - the right to commit is earned by showing skill and drive; not by getting hired. Look at the unittests, if you break them you know you messed up - if they pass the chance of you having messed up is less ;) /max</body>
  </mail>
  <mail>
    <header>[hibernate-dev] want to join hibernate development community</header>
    <date>Wed Apr 15 19:05:50 CEST 2009</date>
    <body>&amp;quot;looking at the code which has a problem and fix it&amp;quot; sounds so simple :), it did sound simple, until i got to working on a bug with sql generation and had huge amount of time figuring out what went wrong, even now, after i found the bug, i don't know if fixing it requires major refactoring or is it something simpler then i'm missing. yes, i know about the unitests, they scared me at first, when i first run them after the initial download and saw failures, but i guess i didn't read the results correctly because the hibernate-core project test went ok. anyone outside jboss personal can actually create fixes (patches or commits) without internal overview of hibernate. and jumping head first is actually what a new developer in jboss would need to do, even if he did had prior usage of hibernate. so either there  are white papers kept in jboss for their use only , or the information is pass down orally by a senior developer. j2ee, working on an undocumented homegrown framework with no internal overview documentation, and only oral info passed from previous developer, and that's not nearly enough as fixes usually break something else. &amp;lt;mailto: Some observations on this thread: 1. You do not need m2eclipse.  /trunk and /Branch_3_3 both use Maven 2 and will build straight away with &amp;quot;mvn compile&amp;quot;. 2. You can generate Eclipse or IDEA project files from the command line in the standard Maven way (mvn eclipse:eclipse or mvn idea:idea) and then import the projects.  I understand that IDEA reads Maven metadata natively but I cannot speak to that. 3. Only committers are allowed to ... commit.  This is what the &amp;gt; server is for. &amp;gt; is a replica with read-only privileges.  Use this for now.  You are free to open JIRA tickets and attach patch files which will be reviewed by Hibernate committers and possibly committed in a future release. 4. Yes, Hibernate is complicated.  It is not a trivial project to jump into head-first.  So please understand that there are many ways to contribute: * Helping on the forums * Hanging around in IRC to participate/answer questions * Improving the wiki * Filing JIRA issues for bugs or attaching test cases that are required Happy Hibernating, Chris Thanks soo much , I was by the side of the ocean no idea about depth . Are only JBoss people allowed to make changes !!! Thanks and Regards Joydeep Bhattacharjee Subject: Re: [hibernate-dev] want to join hibernate development community &amp;gt;&amp;gt;, Date: Tuesday, 14 April, 2009, 6:38 PM about my experiences with open source, documenting my attempts. please note that you will need m2eclipse plugin to download the code, as the svn repo is not in eclipse project. you will then need to change your .settings.xml file for maven in ~/m2 direcotry  for jboss plugins also after you downloaded the code you will encounter huge amount of compiler errors  you will need to the following: 1. run mvn install on the pom parent - to generate some antlr files that were not generated during the initial load 2. change hibernate-core project compiler settings to : generated .class file compatibility to 1.4,       source compatibility : 1.4 3. on hibernate-common-annotations project change the compiler error/warnings , turn the forbidden reference (access rules) to warning instead of error. good luck getting your feet, personally i feel somewhat drowning when i'm trying to figure out this bug : personally i have no idea how anyone outside jboss can even begin to start modify the code without some white papers or explanation on the internal structure of hibernate. On Tue, Apr 14, 2009 at 6:05 AM, joy deep Hi, Is there any SVN repository from where I can download the source codes, and set up my project in eclipse .Can you also give the Bugzilla link for hibernate.I want to get my feet wet with the code soon . Thanks for replying. Thanks and Regards Joydeep Bhattacharjee --- On *Tue, 14/4/09, Peter Harrison From: Peter Harrison Subject: Re: [hibernate-dev] want to join hibernate development community Date: Tuesday, 14 April, 2009, 5:02 AM The ideal way to get involved is to download the source and get familiar with it first - if you have not already. I am here because I made some modifications to hibernate for my own project and want to contribute back. The best way to start is to look at existing bug reports, write a patch or two and attach them to the ticket. Of course, I'm in a similar boat as you, in that I'm not an active committer right now. I'm personally looking at issues which affect me - aka I don't want to be committing code for things that I am not having practical use for. Hi All, I am new to hibernate development community though I have been using the the product for some time now , I would like to be a part of this wonderful product how can I get on with it . Any help in this regard will be highly appreciated. ------------------------------------------------------------------------ Add more friends to your messenger and enjoy! Invite them now. _______________________________________________ hibernate-dev mailing list ------------------------------------------------------------------------ Get perfect Email ID for your Resume. Get before others grab. ------------------------------------------------------------------------ _______________________________________________ hibernate-dev mailing list _______________________________________________ hibernate-dev mailing list ------------------------------------------------------------------------ _______________________________________________ hibernate-dev mailing list -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] want to join hibernate development community</header>
    <date>Wed Apr 15 21:25:11 CEST 2009</date>
    <body>Your problem is probably not the first thing I would try and grasp in Hibernate - it's probably the most complex part of hibernate; but don't let that scare you. Speak up if you got questions about them :) /max</body>
  </mail>
  <mail>
    <header>[hibernate-dev] want to join hibernate development community</header>
    <date>Wed Apr 15 22:45:12 CEST 2009</date>
    <body>ok, so do you have any areas i should avoid, or alternately, easy areas as a beginner i should filter jira to look for bugs? i did speak up regarding unit tests :) no one spoke back, but that's ok , i understand folks won't always be here to answer every question, didn't stop me from asking though. &amp;quot;looking at the code which has a problem and fix it&amp;quot; sounds so simple :), it did sound simple, until i got to working on a bug with sql generation and had huge amount of time figuring out what went wrong, even now, after i found the bug, i don't know if fixing it requires major refactoring or is it something simpler then i'm missing. Your problem is probably not the first thing I would try and grasp in yes, i know about the unitests, they scared me at first, when i first run them after the initial download and saw failures, but i guess i didn't read the results correctly because the hibernate-core project test went ok. Speak up if you got questions about them :) i never thought hibernate was simple, my problem is that i don't see how anyone outside jboss personal can actually create fixes (patches or commits) without internal overview of hibernate. and jumping head first is actually what a new developer in jboss would need to do, even if he did had prior usage of hibernate. so either there  are white papers kept in jboss for their use only , or the information is pass down orally by a senior developer. There are no internal secret jboss documents - all the information is public. Many people are creating patches to hibernate in various areas by simply reading the code that is having a problem and fix it - of course for more detailed hardcore bugs more info is needed, but no written documentation would help you there - you would still need to look at the code to learn it. btw. I did not work for JBoss when I started contribute to Hibernate, and there are non-JBoss committers today too - the right to commit is earned by showing skill and drive; not by getting hired. to give an example, we have a developer with a 7 year experience in java j2ee, working on an undocumented homegrown framework with no internal overview documentation, and only oral info passed from previous developer, and that's not nearly enough as fixes usually break something else. Look at the unittests, if you break them you know you messed up - if they pass the chance of you having messed up is less ;) /max On Tue, Apr 14, 2009 at 3:30 PM, Chris Bredesen Some observations on this thread: 1. You do not need m2eclipse.  /trunk and /Branch_3_3 both use Maven 2 and will build straight away with &amp;quot;mvn compile&amp;quot;. 2. You can generate Eclipse or IDEA project files from the command line in the standard Maven way (mvn eclipse:eclipse or mvn idea:idea) and then import the projects.  I understand that IDEA reads Maven metadata natively but I cannot speak to that. 3. Only committers are allowed to ... commit.  This is what the server is for. &amp;gt; is a replica with read-only privileges.  Use this for now.  You are free to open JIRA tickets and attach patch files which will be reviewed by Hibernate committers and possibly committed in a future release. 4. Yes, Hibernate is complicated.  It is not a trivial project to jump into head-first.  So please understand that there are many ways to contribute: * Helping on the forums * Hanging around in IRC to participate/answer questions * Improving the wiki * Filing JIRA issues for bugs or attaching test cases that are required Happy Hibernating, Chris Thanks soo much , I was by the side of the ocean no idea about depth . Are only JBoss people allowed to make changes !!! Thanks and Regards Joydeep Bhattacharjee --- On *Tue, 14/4/09, Elhanan Maayan Subject: Re: [hibernate-dev] want to join hibernate development community &amp;gt;&amp;gt;&amp;gt;, Date: Tuesday, 14 April, 2009, 6:38 PM i've started a small blog about my experiences with open source, documenting my attempts. please note that you will need m2eclipse plugin to download the code, as the svn repo is not in eclipse project. you will then need to change your .settings.xml file for maven in ~/m2 direcotry  for jboss plugins also after you downloaded the code you will encounter huge amount of compiler errors  you will need to the following: 1. run mvn install on the pom parent - to generate some antlr files that were not generated during the initial load 2. change hibernate-core project compiler settings to : generated .class file compatibility to 1.4, source compatibility : 1.4 3. on hibernate-common-annotations project change the compiler error/warnings , turn the forbidden reference (access rules) to warning instead of error. good luck getting your feet, personally i feel somewhat drowning when i'm trying to figure out this bug : personally i have no idea how anyone outside jboss can even begin to start modify the code without some white papers or explanation on the internal structure of hibernate. On Tue, Apr 14, 2009 at 6:05 AM, joy deep Hi, Is there any SVN repository from where I can download the source codes, and set up my project in eclipse .Can you also give the Bugzilla link for hibernate.I want to get my feet wet with the code soon . Thanks for replying. Thanks and Regards Joydeep Bhattacharjee --- On *Tue, 14/4/09, Peter Harrison From: Peter Harrison Subject: Re: [hibernate-dev] want to join hibernate development community Date: Tuesday, 14 April, 2009, 5:02 AM The ideal way to get involved is to download the source and get familiar with it first - if you have not already. I am here because I made some modifications to hibernate for my own project and want to contribute back. The best way to start is to look at existing bug reports, write a patch or two and attach them to the ticket. Of course, I'm in a similar boat as you, in that I'm not an active committer right now. I'm personally looking at issues which affect me - aka I don't want to be committing code for things that I am not having practical use for. Hi All, I am new to hibernate development community though I have been using the the product for some time now , I would like to be a part of this wonderful product how can I get on with it . Any help in this regard will be highly appreciated. ------------------------------------------------------------------------ Add more friends to your messenger and enjoy! Invite them now. _______________________________________________ hibernate-dev mailing list ------------------------------------------------------------------------ Get perfect Email ID for your Resume. Get before others grab. ------------------------------------------------------------------------ _______________________________________________ hibernate-dev mailing list _______________________________________________ hibernate-dev mailing list ------------------------------------------------------------------------ _______________________________________________ hibernate-dev mailing list -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Re: issue EJB-374</header>
    <date>Tue Apr 14 16:28:06 CEST 2009</date>
    <body>Hi I can't apply your patch to a micro release as it would break things. I have planned it for 3.5 but I think you are overly optimistic in your way to use File and navigate the path. This is something that will typically break in some app servers and needs more thorough testing. Emmanuel</body>
  </mail>
  <mail>
    <header>[hibernate-dev] shouldn't there be a where clause for joined	subclass?</header>
    <date>Tue Apr 14 17:20:23 CEST 2009</date>
    <body>hi.. i was trying to figure how to solve this : as it occurred to me that a user can put any column the want in the where clause, a column which may exists only in the sub class join table (not the case here). i don't know how exactly hibernate decides to place the where caluses -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] want to join hibernate development community</header>
    <date>Tue Apr 14 19:54:47 CEST 2009</date>
    <body>Hi Emmanuel , &amp;#160;&amp;#160;&amp;#160;&amp;#160; Shall I take up the issue , but I will need some time to set my the project up in eclipse and build the project with maven which I am not used to (I use ant for my office project, pretty old stuff&amp;#160; ). Thanks and Regards   Joydeep Bhattacharjee Subject: Re: [hibernate-dev] want to join hibernate development community Date: Tuesday, 14 April, 2009, 11:14 PM Hey Elhanan, What issue did you have in this area? Might be a problem I am not seeing. oh and, yes the Hibernate code is intimidating ORM is not a trivial field. And you have not chosen the easiest part of Hibernate when dealing with the query generation :) Get perfect Email ID for your Resume. Grab now -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Error in Checking out code from	http://anonsvn.jboss.org</header>
    <date>Thu Apr 16 06:35:53 CEST 2009</date>
    <body>Hi , &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; I am getting an error while checking out code from  which is as follows. Update REPORT of '/repos/hibernate/!svn/vcc/default': Could not send request body: An existing connection was forcibly closed by the remote host. &amp;#160;() Thanks and Regards   Joydeep Bhattacharjee Add more friends to your messenger and enjoy! Go to -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] want to join hibernate development community</header>
    <date>Thu Apr 16 06:38:48 CEST 2009</date>
    <body>Hi All, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; Same for me too, any easy areas to begin with so that I can get a heads up Thanks and Regards   Joydeep Bhattacharjee Subject: Re: [hibernate-dev] want to join hibernate development community Date: Thursday, 16 April, 2009, 2:15 AM ok, so do you have any areas i should avoid, or alternately, easy areas&amp;#160;as a beginner&amp;#160;i should filter jira to look for bugs? i did speak up regarding unit tests :) no one spoke back,&amp;#160;but that's ok , i understand folks won't always be here to answer every question, didn't stop me from asking though. &amp;quot;looking at the code which has a problem and fix it&amp;quot; sounds so simple :), it did sound simple, until i got to working on a bug with sql generation and had huge amount of time figuring out what went wrong, even now, after i found the bug, i don't know if fixing it requires major refactoring or is it something simpler then i'm missing. Your problem is probably not the first thing I would try and grasp in Hibernate - it's probably the most complex part of hibernate; but don't let that scare you. yes, i know about the unitests, they scared me at first, when i first run them after the initial download and saw failures, but i guess i didn't read the results correctly because the hibernate-core project test went ok. Speak up if you got questions about them :) /max &amp;#160; &amp;#160; &amp;#160; &amp;#160;i never thought hibernate was simple, my problem is that i &amp;#160; &amp;#160; &amp;#160; &amp;#160;don't see how anyone outside jboss personal can actually &amp;#160; &amp;#160; &amp;#160; &amp;#160;create fixes (patches or commits) without internal overview of &amp;#160; &amp;#160; &amp;#160; &amp;#160;hibernate. and jumping head first is actually what a new &amp;#160; &amp;#160; &amp;#160; &amp;#160;developer in jboss would need to do, even if he did had prior &amp;#160; &amp;#160; &amp;#160; &amp;#160;usage of hibernate. so either there &amp;#160;are white papers kept in &amp;#160; &amp;#160; &amp;#160; &amp;#160;jboss for their use only , or the information is pass down &amp;#160; &amp;#160; &amp;#160; &amp;#160;orally by a senior developer. &amp;#160; &amp;#160;There are no internal secret jboss documents - all the information &amp;#160; &amp;#160;is public. Many people are creating patches to hibernate in &amp;#160; &amp;#160;various areas by simply reading the code that is having a problem &amp;#160; &amp;#160;and fix it - of course for more detailed hardcore bugs more info &amp;#160; &amp;#160;is needed, but no written documentation would help you there - you &amp;#160; &amp;#160;would still need to look at the code to learn it. &amp;#160; &amp;#160;btw. I did not work for JBoss when I started contribute to &amp;#160; &amp;#160;Hibernate, and there are non-JBoss committers today too - the &amp;#160; &amp;#160;right to commit is earned by showing skill and drive; not by &amp;#160; &amp;#160;getting hired. &amp;#160; &amp;#160; &amp;#160; &amp;#160;to give an example, we have a developer with a 7 year &amp;#160; &amp;#160; &amp;#160; &amp;#160;experience in java j2ee, working on an undocumented homegrown &amp;#160; &amp;#160; &amp;#160; &amp;#160;framework with no internal overview documentation, and only &amp;#160; &amp;#160; &amp;#160; &amp;#160;oral info passed from previous developer, and that's not &amp;#160; &amp;#160; &amp;#160; &amp;#160;nearly enough as fixes usually break something else. &amp;#160; &amp;#160;Look at the unittests, if you break them you know you messed up - &amp;#160; &amp;#160;if they pass the chance of you having messed up is less ;) &amp;#160; &amp;#160;/max &amp;#160; &amp;#160; &amp;#160; &amp;#160;On Tue, Apr 14, 2009 at 3:30 PM, Chris Bredesen &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; Some observations on this thread: &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; 1. You do not need m2eclipse. &amp;#160;/trunk and /Branch_3_3 both use &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; Maven 2 and will build straight away with &amp;quot;mvn compile&amp;quot;. &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; 2. You can generate Eclipse or IDEA project files from the &amp;#160; &amp;#160; &amp;#160; &amp;#160;command &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; line in the standard Maven way (mvn eclipse:eclipse or mvn &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; idea:idea) and then import the projects. &amp;#160;I understand that &amp;#160; &amp;#160; &amp;#160; &amp;#160;IDEA &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; reads Maven metadata natively but I cannot speak to that. &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; 3. Only committers are allowed to ... commit. &amp;#160;This is what the &amp;#160; &amp;#160; &amp;#160; &amp;#160;server is for. &amp;#160; &amp;#160; &amp;#160; &amp;#160;&amp;lt;&amp;gt; is a replica with &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; read-only privileges. &amp;#160;Use this for now. &amp;#160;You are free to open &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; JIRA tickets and attach patch files which will be reviewed by &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; Hibernate committers and possibly committed in a future &amp;#160; &amp;#160; &amp;#160; &amp;#160;release. &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; 4. Yes, Hibernate is complicated. &amp;#160;It is not a trivial &amp;#160; &amp;#160; &amp;#160; &amp;#160;project to &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; jump into head-first. &amp;#160;So please understand that there are many &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; ways to contribute: &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;* Helping on the forums &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;* Hanging around in IRC to participate/answer questions &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;* Improving the wiki &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;* Filing JIRA issues for bugs or attaching test cases that are &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; required &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; Happy Hibernating, &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; Chris &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; Thanks soo much , I was by the side of the ocean no &amp;#160; &amp;#160; &amp;#160; &amp;#160;idea about &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; depth . &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; Are only JBoss people allowed to make changes !!! &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; Thanks and Regards &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; Joydeep Bhattacharjee &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; --- On *Tue, 14/4/09, Elhanan Maayan &amp;#160; &amp;#160; &amp;#160; &amp;#160;&amp;lt;mailto: &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;Subject: Re: [hibernate-dev] want to join hibernate &amp;#160; &amp;#160; &amp;#160; &amp;#160;development &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;community &amp;#160; &amp;#160; &amp;#160; &amp;#160;&amp;lt;mailto: &amp;#160; &amp;#160; &amp;#160; &amp;#160;&amp;lt;mailto:&amp;gt;&amp;gt;&amp;gt;, &amp;#160; &amp;#160; &amp;#160; &amp;#160;&amp;lt;mailto: &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;Date: Tuesday, 14 April, 2009, 6:38 PM &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;i've started a small blog &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; about my &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;experiences with open source, documenting my attempts. &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;please note that you will need m2eclipse plugin to &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; download the &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;code, as the svn repo is not in eclipse project. &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;you will then need to change your .settings.xml file for &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; maven in &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;~/m2 direcotry &amp;#160;for jboss plugins &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;also after you downloaded the code you will &amp;#160; &amp;#160; &amp;#160; &amp;#160;encounter &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; huge amount of &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;compiler errors &amp;#160;you will need to the following: &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;1. run mvn install on the pom parent - to &amp;#160; &amp;#160; &amp;#160; &amp;#160;generate some &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; antlr files &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;that were not generated during the initial load &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;2. change hibernate-core project compiler settings to : &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; generated .class file compatibility to 1.4, &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;source &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; compatibility : 1.4 &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;3. on hibernate-common-annotations project change &amp;#160; &amp;#160; &amp;#160; &amp;#160;the compiler &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;error/warnings , turn the forbidden reference &amp;#160; &amp;#160; &amp;#160; &amp;#160;(access rules) to &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;warning instead of error. &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;good luck getting your feet, personally i feel &amp;#160; &amp;#160; &amp;#160; &amp;#160;somewhat &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; drowning &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;when i'm trying to figure out this bug : &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;personally i have no idea how anyone outside &amp;#160; &amp;#160; &amp;#160; &amp;#160;jboss can &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; even begin to &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;start modify the code without some white papers or &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; explanation on &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;the internal structure of hibernate. &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;On Tue, Apr 14, 2009 at 6:05 AM, joy deep &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;Hi, &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;Is there any SVN repository from where I can &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; download the &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;source codes, and set up my project in eclipse &amp;#160; &amp;#160; &amp;#160; &amp;#160;.Can you &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; also &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;give the Bugzilla link for hibernate.I want to &amp;#160; &amp;#160; &amp;#160; &amp;#160;get my &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; feet wet &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;with the code soon . Thanks for replying. &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;Thanks and Regards &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;Joydeep Bhattacharjee &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;--- On *Tue, 14/4/09, Peter Harrison &amp;#160; &amp;#160; &amp;#160; &amp;#160;&amp;lt;mailto: &amp;#160; &amp;#160; &amp;#160; &amp;#160;&amp;lt;/mc/compose?to= &amp;#160; &amp;#160; &amp;#160; &amp;#160;&amp;lt;mailto: &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;From: Peter Harrison &amp;#160; &amp;#160; &amp;#160; &amp;#160;&amp;lt;mailto: &amp;#160; &amp;#160; &amp;#160; &amp;#160;&amp;lt;/mc/compose?to= &amp;#160; &amp;#160; &amp;#160; &amp;#160;&amp;lt;mailto: &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;Subject: Re: [hibernate-dev] want to join &amp;#160; &amp;#160; &amp;#160; &amp;#160;hibernate &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;development community &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;To: &amp;#160; &amp;#160; &amp;#160; &amp;#160;&amp;lt;/mc/compose?to= &amp;#160; &amp;#160; &amp;#160; &amp;#160;&amp;lt;mailto: &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;Date: Tuesday, 14 April, 2009, 5:02 AM &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;The ideal way to get involved is to download the &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; source and &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;get familiar with it first - if you have not &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; already. I am &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;here because I made some modifications to &amp;#160; &amp;#160; &amp;#160; &amp;#160;hibernate &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; for my &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;own project and want to contribute back. The &amp;#160; &amp;#160; &amp;#160; &amp;#160;best &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; way to &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;start is to look at existing bug reports, &amp;#160; &amp;#160; &amp;#160; &amp;#160;write a &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; patch or &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;two and attach them to the ticket. Of &amp;#160; &amp;#160; &amp;#160; &amp;#160;course, I'm in a &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;similar boat as you, in that I'm not an active &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; committer &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;right now. I'm personally looking at issues &amp;#160; &amp;#160; &amp;#160; &amp;#160;which &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; affect me &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;- aka I don't want to be committing code for &amp;#160; &amp;#160; &amp;#160; &amp;#160;things &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; that I &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;am not having practical use for. &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;Hi All, &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;I am new to hibernate development &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; community though &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;I have been using the the product for &amp;#160; &amp;#160; &amp;#160; &amp;#160;some time &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; now , I &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;would like to be a part of this wonderful &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; product how &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;can I get on with it . &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;Any help in this regard will be highly &amp;#160; &amp;#160; &amp;#160; &amp;#160;appreciated. &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;------------------------------------------------------------------------ &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;Add more friends to your messenger and enjoy! Invite &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; them now. &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;_______________________________________________ &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160;hibernate-dev mailing list &amp;#160; &amp;#160; &amp;#160; &amp;#160;&amp;lt;mailto: &amp;#160; &amp;#160; &amp;#160; &amp;#160;&amp;lt;/mc/compose?to= &amp;#160; &amp;#160; &amp;#160; &amp;#160;&amp;lt;mailto: &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; ------------------------------------------------------------------------ &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; Get perfect Email ID for your Resume. Get before others &amp;#160; &amp;#160; &amp;#160; &amp;#160;grab. &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; ------------------------------------------------------------------------ &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; _______________________________________________ &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; hibernate-dev mailing list &amp;#160; &amp;#160; &amp;#160; &amp;#160;&amp;lt;mailto: &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; _______________________________________________ &amp;#160; &amp;#160; &amp;#160; &amp;#160; &amp;#160; hibernate-dev mailing list &amp;#160; &amp;#160; &amp;#160; &amp;#160;&amp;lt;mailto: &amp;#160; &amp;#160; &amp;#160; &amp;#160;------------------------------------------------------------------------ &amp;#160; &amp;#160; &amp;#160; &amp;#160;_______________________________________________ &amp;#160; &amp;#160; &amp;#160; &amp;#160;hibernate-dev mailing list Get perfect Email ID for your Resume. Grab now -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Re: Contents of hibernate-dev digest</header>
    <date>Thu Apr 16 18:06:35 CEST 2009</date>
    <body>-------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] hibernate.org</header>
    <date>Sat Apr 18 09:23:35 CEST 2009</date>
    <body>Hi, Are there any news regarding hibernate.org? What happened? What's going on? --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] hibernate.org</header>
    <date>Mon Apr 20 13:43:35 CEST 2009</date>
    <body>Hello Hardy, did you get any information about what's going on on the forums? &amp;quot;caught us doing a little maintenance&amp;quot; is a bit silly after 3 days, my expectations are rising to expect a very cool new website? Sanne 2009/4/18 Hardy Ferentschik &amp;lt;&amp;gt;:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] hibernate.org</header>
    <date>Mon Apr 20 14:00:17 CEST 2009</date>
    <body>On Mon, 20 Apr 2009 13:43:35 +0200, Sanne Grinovero Nope. No new information. :( --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate EntityManager reusing MC facilities</header>
    <date>Sat Apr 18 16:37:07 CEST 2009</date>
    <body>I have implemented the first part of it (committed in trunk) The scanning process is now abstracted according to an interface similar to the one proposed in this email. I've retrofitted the existing model into this interface. We're just waiting for the implementation on the jboss infra side and we will use it when available (using reflection to avoid runtime dependency). PS: Set&amp;lt;Class&amp;lt;? extends Annotation&amp;gt;&amp;gt; turns out to be a bit annoying to use. Maybe we should use varargs and lose some of the type safety?</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Welcome Nicolas to the Search committers</header>
    <date>Thu May 16 10:40:56 CEST 2013</date>
    <body>Congrats, Davide</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Welcome Nicolas to the Search committers</header>
    <date>Thu May 16 10:45:19 CEST 2013</date>
    <body>/blushing Thank you all I am quite ... impressed ? ... scared ? Time to review ! =)) Sanne, you ll suffer ;-P Niko 2013/5/16 Davide D'Alto &amp;lt;&amp;gt;: Dear All, since Nicolas didn't &amp;quot;just&amp;quot; contribute an awesome new feature for Hibernate Search but is also actively maintaining it, I've added him to the Hibernate Search committers team. I find myself asking for his opinion on my own patches and find it was about time that he could apply our proposals directly. Congratulations Nicolas, and please continue the great work! If you need some tutoring on your first pull requests, I'm happy to assist you on IRC. Sanne _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Welcome Nicolas to the Search committers</header>
    <date>Thu May 16 10:51:33 CEST 2013</date>
    <body>Congrats Nicolas! Gail ----- Original Message -----</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Manual vs Developer Guide</header>
    <date>Thu May 16 15:01:55 CEST 2013</date>
    <body>Hello guys, I have a question I should have asked years ago. I don't understand the difference between the Hibernate ORM Manual and the Hibernate ORM Developer Guide. What is the fundamental difference? Emmanuel</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Manual vs Developer Guide</header>
    <date>Thu May 16 15:47:24 CEST 2013</date>
    <body>There is no difference per-se.  The one called &amp;quot;Developer Guide&amp;quot; was started as the replacement for the other. I always had the idea to split up the documentation into a few docs: 1) Usage guide - The basics, mappings, configuration options, etc. 2) SPI/extension guide - Here is where we'd discuss the ServiceRegistry, services, pluggable SPI contracts, extension points, etc. Maybe these are parts of the same physical documentation...</body>
  </mail>
  <mail>
    <header>[hibernate-dev] New 'release' task in ORM Gradle build</header>
    <date>Fri May 17 03:18:46 CEST 2013</date>
    <body>Just pushed changes[1][2] to the Hibernate ORM build script on master which introduces a new 'release' task.  This task coordinates all release related activities, across all the subprojects.  One &amp;quot;task&amp;quot; that it explicitly leaves out is any VCS related handling. Mainly this is due to the release-and-then-tag approach I use to cutting releases (see if you want the details). Other than that, it: 1) cleans all subprojects 2) tests and publishes (nexus) all subprojects 3) builds documentation (including aggregated JavaDocs and DocBook outputs) and then uploads it to the JBoss doc server using rsync (OS dependent!) 4) builds release distribution bundles and then uploads it to SourceForge FRS 5) announce the build Point (5) is still a work in progress.  Ideally, I think it would be great if we could automate announcing a release build via Twitter, Google+ and email.  We'd still have the freedom to manually write up &amp;quot;Release Notes&amp;quot; blogs. If anyone knows the Google+ API () well-ish and wants to help look at that, any and all help would be appreciated. [1] [2]</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate ORM and JDK 6</header>
    <date>Fri May 17 11:25:29 CEST 2013</date>
    <body>I tried to get ORM imported in IntelliJ IDEA and it fails with a Unsupported major.minor version 51.0.  In Mac OS IntelliJ boots with JDK 1.6 AFAIK and it seems the tools (like gradle) inherit this. Any of the Mac guys found an acceptable solution to import the Gradle project in IntelliJ? says, it's sort of messy to force JDK 7. Emmanuel</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate ORM and JDK 6</header>
    <date>Fri May 17 11:29:44 CEST 2013</date>
    <body>ORM requires JDK7 to build, while it still targets Java6 for users.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate ORM and JDK 6</header>
    <date>Fri May 17 11:59:18 CEST 2013</date>
    <body>Have you registered a JDK 7 under &amp;quot;Platform Settings&amp;quot; -&amp;gt; &amp;quot;SDKs&amp;quot;?</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate ORM and JDK 6</header>
    <date>Fri May 17 12:28:50 CEST 2013</date>
    <body>yes the projects themselves can use JDK 7.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Some OGM ideas from feedback collected in India</header>
    <date>Fri May 17 15:32:50 CEST 2013</date>
    <body>Some older notes I failed to share so far: # unlike normal JPA we have to create an instance of JBossTSStandaloneTransactionManager It's a comment from a use who seems to had been studying OGM in depth and even made a demo, I'm not entirely sure what she means exactly but apparently the JPA binding doesn't integrate nicely within a container as the &amp;quot;plain ORM&amp;quot; JPA would. # Direct &amp;quot;Datasource&amp;quot; access from multiple apps It is often needed to have multiple applications access the same storage engine, and they might not necessarily all be using OGM. This brings two design requirements: - The encoding format of OGM needs to be flexible enough to map to existing &amp;quot;schemas&amp;quot; created by different tools and well documented so that other tools can be built using the encoding scheme used by OGM. - Hibernate Search is updated by Hibernate events; this is a limitation for &amp;quot;standard&amp;quot; Hibernate Search users which is mostly interpreted as &amp;quot;avoid stored procedures &amp;amp; batch updates&amp;quot;; In the case of standard Search users however we still expect the user to be able to run reliable RDBMS queries as well, having the fulltext only for the fulltext. I'm wondering if the OGM specific usage will need us to explore better event notifications for Search, possibly integrating with events generated by the data storage layer itself. Sanne</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Jenkins notification plugin</header>
    <date>Sat May 18 23:22:16 CEST 2013</date>
    <body>Sounds pretty interesting.  Lets you &amp;quot;pair&amp;quot; an Android device with Jenkins, and then to receive notifications from Jenkins onto your device via that pairing.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Jenkins notification plugin</header>
    <date>Sun May 19 00:56:54 CEST 2013</date>
    <body>Looks very nice! are you installing it? The app they recommend - BuildWatch - however is specifically meant for an android watch from Sony (a specific product): I'd need to find some alternative app, or create one, as I don't have that watch (and don't like wearing watches, although this one looks very cool)</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Jenkins notification plugin</header>
    <date>Sun May 19 01:51:20 CEST 2013</date>
    <body>Doh.  I missed the sony watch part :)</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Jenkins notification plugin</header>
    <date>Mon May 20 17:01:09 CEST 2013</date>
    <body>Btw, have not tried this yet but I do see BuildWatch in my Play results and Google says it is installable to my phone...</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Search: Someone needing the standalone	FullTextManager ?</header>
    <date>Sat May 18 23:59:00 CEST 2013</date>
    <body>There is an experimental feature in Hibernate Search which is as well known and as well documented as an easter egg: org.hibernate.search.sandbox.standalone.FullTextManager allows to use Hibernate Search in &amp;quot;standalone&amp;quot; mode, i.e. without a database and storing all data in the Lucene index only. This doesn't even have tests, but hasn't harmed any kitten so far. However now while I'm looking at doing some refactorings in preparation of Lucene 4, this looks like something that will need a complete rewrite, and is adding some resistance already by depending on deprecated methods which I'd rather remove asap. So I'm proposing to delete it, for the time being with no replacement. If there is interest we'd need to rewrite it anyway, but I'd prefer doing that eventually after the migration. Are we all ok with this? Cheers, Sanne</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Search: Someone needing the standalone	FullTextManager ?</header>
    <date>Sun May 19 09:27:07 CEST 2013</date>
    <body>+1 I was not even aware of it. Was it one of your experiments?</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Search: Someone needing the standalone FullTextManager ?</header>
    <date>Sun May 19 13:37:11 CEST 2013</date>
    <body>HI Hardy, Just want to know is JDBC batch updates not supported with HQL queries any ways it can be achieved Regards, Sujit</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Search: Someone needing the standalone FullTextManager ?</header>
    <date>Tue May 28 13:41:39 CEST 2013</date>
    <body>Hi Sujit, sorry we can't encourage questions on usage of Hiberante on this mailing list, as it's meant for development. Please use the forums for such questions: Also, please don't reuse existing email threads for a different subject. Regards, Sanne +1 I was not even aware of it. Was it one of your experiments? &amp;gt; There is an experimental feature in Hibernate Search which is as well &amp;gt; known and as well documented as an easter egg: &amp;gt; org.hibernate.search.sandbox.standalone.FullTextManager &amp;gt; allows to use Hibernate Search in &amp;quot;standalone&amp;quot; mode, i.e. without a &amp;gt; database and storing all data in the Lucene index only. &amp;gt; This doesn't even have tests, but hasn't harmed any kitten so far. &amp;gt; However now while I'm looking at doing some refactorings in &amp;gt; preparation of Lucene 4, this looks like something that will need a &amp;gt; complete rewrite, and is adding some resistance already by depending &amp;gt; on deprecated methods which I'd rather remove asap. &amp;gt; So I'm proposing to delete it, for the time being with no replacement. &amp;gt; If there is interest we'd need to rewrite it anyway, but I'd prefer &amp;gt; doing that eventually after the migration. &amp;gt; Are we all ok with this? &amp;gt; Cheers, &amp;gt; Sanne &amp;gt; _______________________________________________ &amp;gt; hibernate-dev mailing list _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Search: Someone needing the standalone FullTextManager ?</header>
    <date>Tue May 28 13:38:11 CEST 2013</date>
    <body>No it was one of Emmanuel's experiments, so I'd like his +1 as well ;-) I don't dislike the concept, maybe this is something that could be reincarnated as an OGM dialect? Or if it was meant to be more Lucene-API centric, maybe it could become a separate module in Search (separate than hibernate-search-engine, so at the same level of hibernate-search-orm) Sanne There is an experimental feature in Hibernate Search which is as well known and as well documented as an easter egg: org.hibernate.search.sandbox.standalone.FullTextManager allows to use Hibernate Search in &amp;quot;standalone&amp;quot; mode, i.e. without a database and storing all data in the Lucene index only. This doesn't even have tests, but hasn't harmed any kitten so far. However now while I'm looking at doing some refactorings in preparation of Lucene 4, this looks like something that will need a complete rewrite, and is adding some resistance already by depending on deprecated methods which I'd rather remove asap. So I'm proposing to delete it, for the time being with no replacement. If there is interest we'd need to rewrite it anyway, but I'd prefer doing that eventually after the migration. Are we all ok with this? Cheers, Sanne _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Search: Someone needing the standalone	FullTextManager ?</header>
    <date>Wed May 29 08:59:37 CEST 2013</date>
    <body>Get rid of it. I forgot about that actually. It is still an interesting idea to lower the barrier to people adding data source integration with Hibernate Search but if it requires a complete rewrite, better remove this experiment. +1 I was not even aware of it. Was it one of your experiments? There is an experimental feature in Hibernate Search which is as well known and as well documented as an easter egg: org.hibernate.search.sandbox.standalone.FullTextManager allows to use Hibernate Search in &amp;quot;standalone&amp;quot; mode, i.e. without a database and storing all data in the Lucene index only. This doesn't even have tests, but hasn't harmed any kitten so far. However now while I'm looking at doing some refactorings in preparation of Lucene 4, this looks like something that will need a complete rewrite, and is adding some resistance already by depending on deprecated methods which I'd rather remove asap. So I'm proposing to delete it, for the time being with no replacement. If there is interest we'd need to rewrite it anyway, but I'd prefer doing that eventually after the migration. Are we all ok with this? Cheers, Sanne _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Multi-tenancy and id generators</header>
    <date>Mon May 20 16:41:13 CEST 2013</date>
    <body>brought up a question about identifier generation in separate-schema multi-tenant environments, specifically with regard to table generation.  There is a similar problem with regard to sequences as well. If anyone had any thoughts...</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [OGM] SimpleEntityMassIndexingTest using HSEARCH	TestConstants methods</header>
    <date>Mon May 20 22:25:24 CEST 2013</date>
    <body>Hello, I've noticed in SimpleEntityMassIndexingTest.getBaseIndexDir() we are using a method from HSearch:  TestConstants.getIndexDirectory(). The problem is in OGM this method is used like this: *File indexPath = new File( TestConstants.getIndexDirectory(), shortTestName );* but in Hsearch the signature is: testClass)* what should I do ? I think fixing the call is a good idea. So should rather be ?: *File indexPath = new File( TestConstants.getIndexDirectory(** SimpleEntityMassIndexingTest.class**), shortTestName );* Guillaume</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [OGM] SimpleEntityMassIndexingTest using	HSEARCH TestConstants methods</header>
    <date>Mon May 20 23:05:50 CEST 2013</date>
    <body>There is a second wrong call: AssociationMassIndexerTest.getEntities()</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [OGM] SimpleEntityMassIndexingTest using HSEARCH TestConstants methods</header>
    <date>Tue May 21 11:40:25 CEST 2013</date>
    <body>Hello, I'll take a look at it and let you know. Cheers, Davide</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [OGM] SimpleEntityMassIndexingTest using HSEARCH TestConstants methods</header>
    <date>Tue May 21 12:14:13 CEST 2013</date>
    <body>yes, we should fix the call at least for now but I would prefer to create a a similar class for OGM so that we don't depend from Search for this operations. Is it OK to copy the TestConstants class from OGM to Search? Would it make sense to have a separate project for this utility functions? Every time I write a test in Search or OGM I always end up with the needs to create a temporary folder. I'm pretty sure there are other methods that can be useful in different projects. There is a second wrong call: AssociationMassIndexerTest.getEntities() &amp;gt; Hello, &amp;gt; I've noticed in SimpleEntityMassIndexingTest.getBaseIndexDir() we are &amp;gt; using a method from HSearch:  TestConstants.getIndexDirectory(). &amp;gt; The problem is in OGM this method is used like this: &amp;gt; *File indexPath = new File( TestConstants.getIndexDirectory(), &amp;gt; shortTestName );* &amp;gt; but in Hsearch the signature is: &amp;gt; testClass)* &amp;gt; what should I do ? &amp;gt; I think fixing the call is a good idea. So should rather be ?: &amp;gt; *File indexPath = new File( TestConstants.getIndexDirectory(** &amp;gt; SimpleEntityMassIndexingTest.class**), shortTestName );* &amp;gt; Guillaume _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [OGM] SimpleEntityMassIndexingTest using	HSEARCH TestConstants methods</header>
    <date>Tue May 21 12:19:34 CEST 2013</date>
    <body>Not sure about the OGM setup, but I think OGM should have its own test utility classes. Regarding a shared project, imo there is not enough value in such a project, especially since each project will have slightly different requirements. --Hardy Hello, I'll take a look at it and let you know. Cheers, Davide There is a second wrong call: AssociationMassIndexerTest.getEntities() Hello, I've noticed in SimpleEntityMassIndexingTest.getBaseIndexDir() we are using a method from HSearch:  TestConstants.getIndexDirectory(). The problem is in OGM this method is used like this: *File indexPath = new File( TestConstants.getIndexDirectory(), shortTestName );* but in Hsearch the signature is: testClass)* what should I do ? I think fixing the call is a good idea. So should rather be ?: *File indexPath = new File( TestConstants.getIndexDirectory(** SimpleEntityMassIndexingTest.class**), shortTestName );* Guillaume _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [OGM] SimpleEntityMassIndexingTest using HSEARCH TestConstants methods</header>
    <date>Tue May 21 12:44:39 CEST 2013</date>
    <body>Ok Hardy, I will copy the class in OGM.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [OGM] SimpleEntityMassIndexingTest using HSEARCH TestConstants methods</header>
    <date>Tue May 21 13:49:35 CEST 2013</date>
    <body>Ok thanks. Could you tell me once it has been pushed on the master so I can finalize my pull request. Guillaume Not sure about the OGM setup, but I think OGM should have its own test utility classes. Regarding a shared project, imo there is not enough value in such a project, especially since each project will have slightly different requirements. --Hardy &amp;gt; yes, we should fix the call at least for now but I would prefer to create a &amp;gt; a similar class for OGM so that we don't depend from Search for this &amp;gt; operations. &amp;gt; Is it OK to copy the TestConstants class from OGM to Search? &amp;gt; Would it make sense to have a separate project for this utility functions? &amp;gt; Every time I write a test in Search or OGM I always end up with the needs &amp;gt; to create a temporary folder. I'm pretty sure there are other methods that &amp;gt; can be useful in different projects. &amp;gt;&amp;gt; Hello, &amp;gt;&amp;gt; I'll take a look at it and let you know. &amp;gt;&amp;gt; Cheers, &amp;gt;&amp;gt; Davide &amp;gt;&amp;gt;&amp;gt; There is a second wrong call: &amp;gt;&amp;gt;&amp;gt; AssociationMassIndexerTest.getEntities() &amp;gt;&amp;gt;&amp;gt;&amp;gt; Hello, &amp;gt;&amp;gt;&amp;gt;&amp;gt; I've noticed in SimpleEntityMassIndexingTest.getBaseIndexDir() we are &amp;gt;&amp;gt;&amp;gt;&amp;gt; using a method from HSearch:  TestConstants.getIndexDirectory(). &amp;gt;&amp;gt;&amp;gt;&amp;gt; The problem is in OGM this method is used like this: &amp;gt;&amp;gt;&amp;gt;&amp;gt; *File indexPath = new File( TestConstants.getIndexDirectory(), &amp;gt;&amp;gt;&amp;gt;&amp;gt; shortTestName );* &amp;gt;&amp;gt;&amp;gt;&amp;gt; but in Hsearch the signature is: &amp;gt;&amp;gt;&amp;gt;&amp;gt; testClass)* &amp;gt;&amp;gt;&amp;gt;&amp;gt; what should I do ? &amp;gt;&amp;gt;&amp;gt;&amp;gt; I think fixing the call is a good idea. So should rather be ?: &amp;gt;&amp;gt;&amp;gt;&amp;gt; *File indexPath = new File( TestConstants.getIndexDirectory(** &amp;gt;&amp;gt;&amp;gt;&amp;gt; SimpleEntityMassIndexingTest.class**), shortTestName );* &amp;gt;&amp;gt;&amp;gt;&amp;gt; Guillaume &amp;gt;&amp;gt;&amp;gt; _______________________________________________ &amp;gt;&amp;gt;&amp;gt; hibernate-dev mailing list &amp;gt; _______________________________________________ &amp;gt; hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [OGM] SimpleEntityMassIndexingTest using HSEARCH TestConstants methods</header>
    <date>Tue May 21 14:10:56 CEST 2013</date>
    <body>I've sent a pull request: Ok Hardy, I will copy the class in OGM. Not sure about the OGM setup, but I think OGM should have its own test utility classes. Regarding a shared project, imo there is not enough value in such a project, especially since each project will have slightly different requirements. --Hardy &amp;gt; yes, we should fix the call at least for now but I would prefer to create a &amp;gt; a similar class for OGM so that we don't depend from Search for this &amp;gt; operations. &amp;gt; Is it OK to copy the TestConstants class from OGM to Search? &amp;gt; Would it make sense to have a separate project for this utility functions? &amp;gt; Every time I write a test in Search or OGM I always end up with the needs &amp;gt; to create a temporary folder. I'm pretty sure there are other methods that &amp;gt; can be useful in different projects. &amp;gt;&amp;gt; Hello, &amp;gt;&amp;gt; I'll take a look at it and let you know. &amp;gt;&amp;gt; Cheers, &amp;gt;&amp;gt; Davide &amp;gt;&amp;gt;&amp;gt; There is a second wrong call: &amp;gt;&amp;gt;&amp;gt; AssociationMassIndexerTest.getEntities() &amp;gt;&amp;gt;&amp;gt;&amp;gt; Hello, &amp;gt;&amp;gt;&amp;gt;&amp;gt; I've noticed in SimpleEntityMassIndexingTest.getBaseIndexDir() we are &amp;gt;&amp;gt;&amp;gt;&amp;gt; using a method from HSearch:  TestConstants.getIndexDirectory(). &amp;gt;&amp;gt;&amp;gt;&amp;gt; The problem is in OGM this method is used like this: &amp;gt;&amp;gt;&amp;gt;&amp;gt; *File indexPath = new File( TestConstants.getIndexDirectory(), &amp;gt;&amp;gt;&amp;gt;&amp;gt; shortTestName );* &amp;gt;&amp;gt;&amp;gt;&amp;gt; but in Hsearch the signature is: &amp;gt;&amp;gt;&amp;gt;&amp;gt; testClass)* &amp;gt;&amp;gt;&amp;gt;&amp;gt; what should I do ? &amp;gt;&amp;gt;&amp;gt;&amp;gt; I think fixing the call is a good idea. So should rather be ?: &amp;gt;&amp;gt;&amp;gt;&amp;gt; *File indexPath = new File( TestConstants.getIndexDirectory(** &amp;gt;&amp;gt;&amp;gt;&amp;gt; SimpleEntityMassIndexingTest.class**), shortTestName );* &amp;gt;&amp;gt;&amp;gt;&amp;gt; Guillaume &amp;gt;&amp;gt;&amp;gt; _______________________________________________ &amp;gt;&amp;gt;&amp;gt; hibernate-dev mailing list &amp;gt; _______________________________________________ &amp;gt; hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Obtaining loggers</header>
    <date>Tue May 21 23:21:19 CEST 2013</date>
    <body>I was getting tired of statements in the source code to get logger instances that spread across sometimes 4 lines because of JBoss Logging's verbose means of acquiring a message logger.  So I created a more concise form for this for hibernate-core, hibernate-entitymanager and hibernate-envers.  I mainly limited it to these projects because they have lots of these calls, whereas the others do not.  Feel free to copy the approach to the other projects if someone wants. Essentially each of those projects define a class with 4 static methods.  Taking the hibernate-core one as an example: /** * Quite sad, really, when you need helpers for generating loggers... * * @author Steve Ebersole */ /** * Disallow instantiation */ public static CoreMessageLogger messageLogger(Class return Logger.getMessageLogger( CoreMessageLogger.class, I just plan on replacing these calls as opportunities arise, rather than all in one fell swoop.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Obtaining loggers</header>
    <date>Tue May 21 23:24:05 CEST 2013</date>
    <body>Forgot...  So really this just allows more conciseness in obtaining the logger.  So from: private static final CoreMessageLogger LOG = Logger.getMessageLogger( to: private static final CoreMessageLogger LOG = CoreLogging.messageLogger(</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Obtaining loggers</header>
    <date>Tue May 21 23:53:20 CEST 2013</date>
    <body>Have you seen how Search does it? The implementation of LoggerFactory#make is: return Logger.getMessageLogger( Log.class, We introduced this a while back after having spotted some copy/paste mistakes which had lead to have the wrong logger; however there is a catch: each class initialization triggers a stacktrace initialization. Sure it's an initialization cost only, but still I wonder how large the cost is, adding up all classes: maybe we should just replace it with a checkstyle rule to verify its correctness. Also, each module needs to have its own copy of the LoggerFactory to hardwire the correct Log.class interface, so you could still import the LoggerFactory from an alien module by mistake, but that's likely spotted by the typesafety of it as you wouldn't have the expected logger methods. Sanne I was getting tired of statements in the source code to get logger instances that spread across sometimes 4 lines because of JBoss Logging's verbose means of acquiring a message logger.  So I created a more concise form for this for hibernate-core, hibernate-entitymanager and hibernate-envers.  I mainly limited it to these projects because they have lots of these calls, whereas the others do not.  Feel free to copy the approach to the other projects if someone wants. Essentially each of those projects define a class with 4 static methods.  Taking the hibernate-core one as an example: /** * Quite sad, really, when you need helpers for generating loggers... * * @author Steve Ebersole */ /** * Disallow instantiation */ public static CoreMessageLogger messageLogger(Class return Logger.getMessageLogger( CoreMessageLogger.class, I just plan on replacing these calls as opportunities arise, rather than all in one fell swoop.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Obtaining loggers</header>
    <date>Wed May 22 09:51:03 CEST 2013</date>
    <body>An alternative implementation of LoggerFactory could be this (based on [1]): return Logger.getMessageLogger( Log.class, callerProvider.getCallerClass().getCanonicalName() SecurityManager#getClassContext() is a native method, so one doesn't know how it is implemented, but I guess it's faster than initializing a stack trace, while still allowing for the concise LoggerFactory.make(); usage. Btw. another copy-and-paste safe pattern enabled by Java 7 is this (suggested in &amp;quot;The Well-Grounded Java Developer&amp;quot;): Logger logger = Logger.getMessageLogger( Log.class, MethodHandles.lookup().lookupClass().getCanonicalName() This can't be pushed into a factory class, though, making more verbose than the factory approach. --Gunnar [1]</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Obtaining loggers</header>
    <date>Wed May 22 14:57:50 CEST 2013</date>
    <body>Y'all are trying to solve a different problem imo. The &amp;quot;problem&amp;quot; I am looking to solve is simply verbosity.  Both the problem and the solution have an equal possibility for copy-paste errors. Whereas y'all are trying to remove the possibility of these copy-paste problems.  BTW, I use IntelliJ IDEA &amp;quot;Live templates&amp;quot; to deal with that. I have a template named log; so I simply type &amp;quot;log&amp;quot;+TAB and get a proper log statement.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Obtaining loggers</header>
    <date>Wed May 22 15:05:51 CEST 2013</date>
    <body>Let's simplify my reply to address verbosity only then: Search does: Looks good? Sanne Have you seen how Search does it? The implementation of LoggerFactory#make is: return Logger.getMessageLogger( Log.class, We introduced this a while back after having spotted some copy/paste mistakes which had lead to have the wrong logger; however there is a catch: each class initialization triggers a stacktrace initialization. Sure it's an initialization cost only, but still I wonder how large the cost is, adding up all classes: maybe we should just replace it with a checkstyle rule to verify its correctness. An alternative implementation of LoggerFactory could be this (based on [1]): return Logger.getMessageLogger( Log.class, SecurityManager#getClassContext() is a native method, so one doesn't know how it is implemented, but I guess it's faster than initializing a stack trace, while still allowing for the concise LoggerFactory.make(); usage. Btw. another copy-and-paste safe pattern enabled by Java 7 is this (suggested in &amp;quot;The Well-Grounded Java Developer&amp;quot;): Logger logger = Logger.getMessageLogger( Log.class, This can't be pushed into a factory class, though, making more verbose than the factory approach. --Gunnar [1] Also, each module needs to have its own copy of the LoggerFactory to hardwire the correct Log.class interface, so you could still import the LoggerFactory from an alien module by mistake, but that's likely spotted by the typesafety of it as you wouldn't have the expected logger methods. Sanne &amp;gt; Forgot...  So really this just allows more conciseness in obtaining the &amp;gt; logger.  So from: &amp;gt; private static final CoreMessageLogger LOG = Logger.getMessageLogger( &amp;gt; to: &amp;gt; private static final CoreMessageLogger LOG = CoreLogging.messageLogger( &amp;gt;&amp;gt; I was getting tired of statements in the source code to get logger &amp;gt;&amp;gt; instances that spread across sometimes 4 lines because of JBoss &amp;gt;&amp;gt; Logging's verbose means of acquiring a message logger.  So I created a &amp;gt;&amp;gt; more concise form for this for hibernate-core, hibernate-entitymanager &amp;gt;&amp;gt; and hibernate-envers.  I mainly limited it to these projects because &amp;gt;&amp;gt; they have lots of these calls, whereas the others do not.  Feel free &amp;gt;&amp;gt; to copy the approach to the other projects if someone wants. &amp;gt;&amp;gt; Essentially each of those projects define a class with 4 static &amp;gt;&amp;gt; methods.  Taking the hibernate-core one as an example: &amp;gt;&amp;gt; /** &amp;gt;&amp;gt;  * Quite sad, really, when you need helpers for generating loggers... &amp;gt;&amp;gt;  * &amp;gt;&amp;gt;  * @author Steve Ebersole &amp;gt;&amp;gt;  */ &amp;gt;&amp;gt;     /** &amp;gt;&amp;gt;      * Disallow instantiation &amp;gt;&amp;gt;      */ &amp;gt;&amp;gt;     public static CoreMessageLogger messageLogger(Class &amp;gt;&amp;gt;     public static CoreMessageLogger messageLogger(String &amp;gt;&amp;gt;         return Logger.getMessageLogger( CoreMessageLogger.class, &amp;gt;&amp;gt; I just plan on replacing these calls as opportunities arise, rather &amp;gt;&amp;gt; than all in one fell swoop. &amp;gt; _______________________________________________ &amp;gt; hibernate-dev mailing list _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Obtaining loggers</header>
    <date>Wed May 22 15:36:43 CEST 2013</date>
    <body>I am not a fan of what goes on inside LoggerFactory.make().  That's just my opinion. Y'all are trying to solve a different problem imo. The &amp;quot;problem&amp;quot; I am looking to solve is simply verbosity.  Both the problem and the solution have an equal possibility for copy-paste errors. Whereas y'all are trying to remove the possibility of these copy-paste problems.  BTW, I use IntelliJ IDEA &amp;quot;Live templates&amp;quot; to deal with that. I have a template named log; so I simply type &amp;quot;log&amp;quot;+TAB and get a proper log statement. Have you seen how Search does it? The implementation of LoggerFactory#make is: return Logger.getMessageLogger( Log.class, We introduced this a while back after having spotted some copy/paste mistakes which had lead to have the wrong logger; however there is a catch: each class initialization triggers a stacktrace initialization. Sure it's an initialization cost only, but still I wonder how large the cost is, adding up all classes: maybe we should just replace it with a checkstyle rule to verify its correctness. An alternative implementation of LoggerFactory could be this (based on [1]): return Logger.getMessageLogger( Log.class, SecurityManager#getClassContext() is a native method, so one doesn't know how it is implemented, but I guess it's faster than initializing a stack trace, while still allowing for the concise LoggerFactory.make(); usage. Btw. another copy-and-paste safe pattern enabled by Java 7 is this (suggested in &amp;quot;The Well-Grounded Java Developer&amp;quot;): Logger logger = Logger.getMessageLogger( Log.class, This can't be pushed into a factory class, though, making more verbose than the factory approach. --Gunnar [1] Also, each module needs to have its own copy of the LoggerFactory to hardwire the correct Log.class interface, so you could still import the LoggerFactory from an alien module by mistake, but that's likely spotted by the typesafety of it as you wouldn't have the expected logger methods. Sanne &amp;gt; Forgot...  So really this just allows more conciseness in obtaining the &amp;gt; logger.  So from: &amp;gt; private static final CoreMessageLogger LOG = Logger.getMessageLogger( &amp;gt; to: &amp;gt; private static final CoreMessageLogger LOG = CoreLogging.messageLogger( &amp;gt;&amp;gt; I was getting tired of statements in the source code to get logger &amp;gt;&amp;gt; instances that spread across sometimes 4 lines because of JBoss &amp;gt;&amp;gt; Logging's verbose means of acquiring a message logger.  So I created a &amp;gt;&amp;gt; more concise form for this for hibernate-core, hibernate-entitymanager &amp;gt;&amp;gt; and hibernate-envers.  I mainly limited it to these projects because &amp;gt;&amp;gt; they have lots of these calls, whereas the others do not.  Feel free &amp;gt;&amp;gt; to copy the approach to the other projects if someone wants. &amp;gt;&amp;gt; Essentially each of those projects define a class with 4 static &amp;gt;&amp;gt; methods.  Taking the hibernate-core one as an example: &amp;gt;&amp;gt; /** &amp;gt;&amp;gt;  * Quite sad, really, when you need helpers for generating loggers... &amp;gt;&amp;gt;  * &amp;gt;&amp;gt;  * @author Steve Ebersole &amp;gt;&amp;gt;  */ &amp;gt;&amp;gt;     /** &amp;gt;&amp;gt;      * Disallow instantiation &amp;gt;&amp;gt;      */ &amp;gt;&amp;gt;     public static CoreMessageLogger messageLogger(Class &amp;gt;&amp;gt;     public static CoreMessageLogger messageLogger(String &amp;gt;&amp;gt;         return Logger.getMessageLogger( CoreMessageLogger.class, &amp;gt;&amp;gt; I just plan on replacing these calls as opportunities arise, rather &amp;gt;&amp;gt; than all in one fell swoop. &amp;gt; _______________________________________________ &amp;gt; hibernate-dev mailing list _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Obtaining loggers</header>
    <date>Wed May 22 15:42:37 CEST 2013</date>
    <body>Why is this? Which approach do you mean, the one creating a stack trace or the other one using SecurityManager#getClassContext()? Or both :) Let's simplify my reply to address verbosity only then: Search does: Looks good? Sanne Y'all are trying to solve a different problem imo. The &amp;quot;problem&amp;quot; I am looking to solve is simply verbosity.  Both the problem and the solution have an equal possibility for copy-paste errors. Whereas y'all are trying to remove the possibility of these copy-paste problems.  BTW, I use IntelliJ IDEA &amp;quot;Live templates&amp;quot; to deal with that. I have a template named log; so I simply type &amp;quot;log&amp;quot;+TAB and get a proper log statement. Have you seen how Search does it? The implementation of LoggerFactory#make is: return Logger.getMessageLogger( Log.class, We introduced this a while back after having spotted some copy/paste mistakes which had lead to have the wrong logger; however there is a catch: each class initialization triggers a stacktrace initialization. Sure it's an initialization cost only, but still I wonder how large the cost is, adding up all classes: maybe we should just replace it with a checkstyle rule to verify its correctness. An alternative implementation of LoggerFactory could be this (based on [1]): return Logger.getMessageLogger( Log.class, SecurityManager#**getClassContext() is a native method, so one doesn't know how it is implemented, but I guess it's faster than initializing a stack trace, while still allowing for the concise LoggerFactory.make(); usage. Btw. another copy-and-paste safe pattern enabled by Java 7 is this (suggested in &amp;quot;The Well-Grounded Java Developer&amp;quot;): Logger logger = Logger.getMessageLogger( Log.class, This can't be pushed into a factory class, though, making more verbose than the factory approach. --Gunnar [1] Also, each module needs to have its own copy of the LoggerFactory to hardwire the correct Log.class interface, so you could still import the LoggerFactory from an alien module by mistake, but that's likely spotted by the typesafety of it as you wouldn't have the expected logger methods. Sanne &amp;gt; Forgot...  So really this just allows more conciseness in obtaining the &amp;gt; logger.  So from: &amp;gt; private static final CoreMessageLogger LOG = Logger.getMessageLogger( &amp;gt; CoreMessageLogger.class, CollectionLoadContext.class.**getName() &amp;gt; to: &amp;gt; private static final CoreMessageLogger LOG = CoreLogging.messageLogger( &amp;gt;&amp;gt; I was getting tired of statements in the source code to get logger &amp;gt;&amp;gt; instances that spread across sometimes 4 lines because of JBoss &amp;gt;&amp;gt; Logging's verbose means of acquiring a message logger.  So I created a &amp;gt;&amp;gt; more concise form for this for hibernate-core, hibernate-entitymanager &amp;gt;&amp;gt; and hibernate-envers.  I mainly limited it to these projects because &amp;gt;&amp;gt; they have lots of these calls, whereas the others do not.  Feel free &amp;gt;&amp;gt; to copy the approach to the other projects if someone wants. &amp;gt;&amp;gt; Essentially each of those projects define a class with 4 static &amp;gt;&amp;gt; methods.  Taking the hibernate-core one as an example: &amp;gt;&amp;gt; /** &amp;gt;&amp;gt;  * Quite sad, really, when you need helpers for generating loggers... &amp;gt;&amp;gt;  * &amp;gt;&amp;gt;  * @author Steve Ebersole &amp;gt;&amp;gt;  */ &amp;gt;&amp;gt;     /** &amp;gt;&amp;gt;      * Disallow instantiation &amp;gt;&amp;gt;      */ &amp;gt;&amp;gt;     public static CoreMessageLogger messageLogger(Class &amp;gt;&amp;gt;     public static CoreMessageLogger messageLogger(String &amp;gt;&amp;gt;         return Logger.getMessageLogger( CoreMessageLogger.class, &amp;gt;&amp;gt; I just plan on replacing these calls as opportunities arise, rather &amp;gt;&amp;gt; than all in one fell swoop. &amp;gt; ______________________________**_________________ &amp;gt; hibernate-dev mailing list ** ______________________________**_________________ hibernate-dev mailing list **</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Obtaining loggers</header>
    <date>Wed May 22 15:51:36 CEST 2013</date>
    <body>Both really.  You are adding a runtime performance hit to offset a possible development-time error.  To me (if this is a real problem y'all have had to deal with), I'd rather see a build time check (checkstyle/findbugs rule maybe) that validates this by making sure that obtaining a logger is not passing a class other than the calling class.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Obtaining loggers</header>
    <date>Wed May 22 16:56:22 CEST 2013</date>
    <body>I agree in general, addressing the issue at build time is surely better. Given that the logger is obtained only once per class I'd think the difference is not huge, though. In particular I think SecurityManager#** getClassContext() should be fast since it is on the execution path of all the j.l.Class methods such as getFields() etc. (when a security manager is enabled). So I'd assume the calls from LoggerFactory shouldn't make a big difference. I haven't measured it, though. --Gunnar I am not a fan of what goes on inside LoggerFactory.make(). That's just my opinion. Why is this? Which approach do you mean, the one creating a stack trace or the other one using SecurityManager#**getClassContext()? Or both :) Let's simplify my reply to address verbosity only then: Search does: Looks good? Sanne Y'all are trying to solve a different problem imo. The &amp;quot;problem&amp;quot; I am looking to solve is simply verbosity. Both the problem and the solution have an equal possibility for copy-paste errors. Whereas y'all are trying to remove the possibility of these copy-paste problems.  BTW, I use IntelliJ IDEA &amp;quot;Live templates&amp;quot; to deal with that. I have a template named log; so I simply type &amp;quot;log&amp;quot;+TAB and get a proper log statement. Have you seen how Search does it? private static final Log log = The implementation of LoggerFactory#make is: StackTraceElement directCaller = return Logger.getMessageLogger( Log.class, We introduced this a while back after having spotted some copy/paste however there is a catch: each class initialization triggers a stacktrace initialization. Sure it's an initialization cost only, but still I wonder how large the cost is, adding up all classes: maybe we should just replace it with a checkstyle rule to verify its correctness. An alternative implementation of LoggerFactory could be this (based on [1]): private static CallerProvider callerProvider = new return Logger.getMessageLogger( Log.class, private static class CallerProvider extends SecurityManager#__**getClassContext() is a native method, so one doesn't know how it is implemented, but I guess it's faster than initializing a stack trace, while still allowing for the concise LoggerFactory.make(); usage. Btw. another copy-and-paste safe pattern enabled by Java 7 is this (suggested in &amp;quot;The Well-Grounded Java Developer&amp;quot;): Logger logger = Logger.getMessageLogger( Log.class, MethodHandles.lookup().__**lookupClass().__** getCanonicalName() This can't be pushed into a factory class, though, making more verbose than the factory approach. --Gunnar [1] Also, each module needs to have its own copy of the LoggerFactory to hardwire the correct Log.class interface, so you could still import the LoggerFactory from an alien module by mistake, but that's likely spotted by the typesafety of it as you wouldn't have the expected logger methods. Sanne On 21 May 2013 22:24, Steve Ebersole &amp;gt; Forgot...  So really this just allows more conciseness in obtaining the &amp;gt; logger.  So from: &amp;gt; private static final CoreMessageLogger LOG = Logger.getMessageLogger( &amp;gt; CoreMessageLogger.class, &amp;gt; to: &amp;gt; private static final CoreMessageLogger LOG = CoreLogging.messageLogger( &amp;gt;&amp;gt; I was getting tired of statements in the source code to get logger &amp;gt;&amp;gt; instances that spread across sometimes 4 lines because of JBoss &amp;gt;&amp;gt; Logging's verbose means of acquiring a message logger.  So I created a &amp;gt;&amp;gt; more concise form for this for hibernate-core, hibernate-entitymanager &amp;gt;&amp;gt; and hibernate-envers.  I mainly limited it to these projects because &amp;gt;&amp;gt; they have lots of these calls, whereas the others do not.  Feel free &amp;gt;&amp;gt; to copy the approach to the other projects if someone wants. &amp;gt;&amp;gt; Essentially each of those projects define a class with 4 static &amp;gt;&amp;gt; methods.  Taking the hibernate-core one as an example: &amp;gt;&amp;gt; /** &amp;gt;&amp;gt;  * Quite sad, really, when you need helpers for generating loggers... &amp;gt;&amp;gt;  * &amp;gt;&amp;gt;  * @author Steve Ebersole &amp;gt;&amp;gt;  */ &amp;gt;&amp;gt;     /** &amp;gt;&amp;gt;      * Disallow instantiation &amp;gt;&amp;gt;      */ &amp;gt;&amp;gt;     public static CoreMessageLogger messageLogger(Class &amp;gt;&amp;gt;         return messageLogger( &amp;gt;&amp;gt;     public static CoreMessageLogger messageLogger(String &amp;gt;&amp;gt;         return Logger.getMessageLogger( CoreMessageLogger.class, &amp;gt;&amp;gt;     public static Logger logger(Class &amp;gt;&amp;gt;         return Logger.getLogger( &amp;gt;&amp;gt;     public static Logger logger(String &amp;gt;&amp;gt; I just plan on replacing these calls as opportunities arise, rather &amp;gt;&amp;gt; than all in one fell swoop. &amp;gt; ______________________________** ___________________ &amp;gt; hibernate-dev mailing list ______________________________**___________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Scripted uploading of documentation</header>
    <date>Wed May 22 18:31:51 CEST 2013</date>
    <body>The Gradle build on ORM master and metamodel branches now define a uploadDocumentation task that is intended as part of the larger scripted release task.  However, for some cases, uploadDocumentation is useful in the case of SNAPSHOT builds.  As an example, currently as we work towards 4.3 we occasionally will want to upload some SNAPSHOT docs for people to validate (Brett's OSGI guide is an example). Currently I have a safety net built-in to uploadDocumentation which checks whether the version is a SNAPSHOT and disallows the upload to proceed if this is the case.  The reasoning being that we do not want to allow the SNAPSHOT upload in the case of say 4.2 which has already gone Final. Stated simply: // for example, attempting to upload docs from 4.2.3-SNAPSHOT // while we have already released 4.2.2.Final Anyone have ideas on codifying snapshotIsForVersionAlreadyGoneFinal()?</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Updated information on Hibernate.org</header>
    <date>Wed May 22 19:12:17 CEST 2013</date>
    <body>I just pushed changes related to new CI environment and (not so) new Jira url: (from what I can tell someone previously tried to update the 'issuetracker' page as well, but forgot to &amp;quot;activate&amp;quot; the changes...) Let me know if you see the out-dated info anywhere else on the website.</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Updated information on Hibernate.org</header>
    <date>Wed May 22 19:22:53 CEST 2013</date>
    <body>That was me but never could get around to finish it. It wasn't exactly rendering as I wanted, at least in the preview when I tried it. Thanks for fixing it. Sanne</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Updated information on Hibernate.org</header>
    <date>Wed May 22 19:24:36 CEST 2013</date>
    <body>Does it look better now?  Whatever didn't look right before?</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Updated information on Hibernate.org</header>
    <date>Wed May 22 20:07:28 CEST 2013</date>
    <body>If you navigate to the Search subproject, then both the top link to issue tracker and the footer link &amp;quot;JIRA&amp;quot; still point to older links. I could not understand where this is defined / overriden in the web UI; I found an option to export it all into an XML, I found the link defined in there: updated it, uploaded the XML, applied changes and refreshed the browser but it's still using the old links. &amp;gt; I just pushed changes related to new CI environment and (not so) new &amp;gt; Jira url: &amp;gt; (from what I can tell someone previously tried to update the &amp;gt; 'issuetracker' page as well, but forgot to &amp;quot;activate&amp;quot; the changes...) That was me but never could get around to finish it. It wasn't exactly rendering as I wanted, at least in the preview when I tried it. Thanks for fixing it. Sanne &amp;gt; Let me know if you see the out-dated info anywhere else on the website. &amp;gt; _______________________________________________ &amp;gt; hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Updated information on Hibernate.org</header>
    <date>Wed May 22 20:20:12 CEST 2013</date>
    <body>Its not the most intuitive ui sometimes. From the main search page, find the 'edit' button for the paragraph that holds those tabs.  In its edit box you should see a tab for each of the tabs :)  For each it allows you to edit properties of that tab, such as what url it points to, etc.  As far as I understand you can only change that stuff through their UI... Does it look better now?  Whatever didn't look right before? I just pushed changes related to new CI environment and (not so) new Jira url: (from what I can tell someone previously tried to update the 'issuetracker' page as well, but forgot to &amp;quot;activate&amp;quot; the changes...) That was me but never could get around to finish it. It wasn't exactly rendering as I wanted, at least in the preview when I tried it. Thanks for fixing it. Sanne Let me know if you see the out-dated info anywhere else on the website. _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Updated information on Hibernate.org</header>
    <date>Wed May 22 20:35:53 CEST 2013</date>
    <body>thanks that helped: the button I was needing is hidden behind an image: weird CSS. Links updated for Search as well now. If you navigate to the Search subproject, then both the top link to issue tracker and the footer link &amp;quot;JIRA&amp;quot; still point to older links. I could not understand where this is defined / overriden in the web UI; I found an option to export it all into an XML, I found the link defined in there: updated it, uploaded the XML, applied changes and refreshed the browser but it's still using the old links. Does it look better now?  Whatever didn't look right before? I just pushed changes related to new CI environment and (not so) new Jira url: (from what I can tell someone previously tried to update the 'issuetracker' page as well, but forgot to &amp;quot;activate&amp;quot; the changes...) That was me but never could get around to finish it. It wasn't exactly rendering as I wanted, at least in the preview when I tried it. Thanks for fixing it. Sanne Let me know if you see the out-dated info anywhere else on the website. _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Updated information on Hibernate.org</header>
    <date>Wed May 22 21:25:55 CEST 2013</date>
    <body>Another trick is that you could update the Search-specific 'Build' tab go to a Search specific page that shows the state of the Search builds however y'all would like to see it. Its not the most intuitive ui sometimes. From the main search page, find the 'edit' button for the paragraph that holds those tabs.  In its edit box you should see a tab for each of the tabs :)  For each it allows you to edit properties of that tab, such as what url it points to, etc.  As far as I understand you can only change that stuff through their UI... If you navigate to the Search subproject, then both the top link to issue tracker and the footer link &amp;quot;JIRA&amp;quot; still point to older links. I could not understand where this is defined / overriden in the web UI; I found an option to export it all into an XML, I found the link defined in there: updated it, uploaded the XML, applied changes and refreshed the browser but it's still using the old links. Does it look better now?  Whatever didn't look right before? I just pushed changes related to new CI environment and (not so) new Jira url: (from what I can tell someone previously tried to update the 'issuetracker' page as well, but forgot to &amp;quot;activate&amp;quot; the changes...) That was me but never could get around to finish it. It wasn't exactly rendering as I wanted, at least in the preview when I tried it. Thanks for fixing it. Sanne Let me know if you see the out-dated info anywhere else on the website. _______________________________________________ hibernate-dev mailing list</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Hibernate ORM 4.2.2.Final released!</header>
    <date>Wed May 22 20:01:42 CEST 2013</date>
    <body>Hibernate ORM 4.2.2.Final released! Brett Meyer Red Hat Software Engineer, Hibernate +1 260.349.5732</body>
  </mail>
  <mail>
    <header>[hibernate-dev] ServiceRegistries and OSGi</header>
    <date>Wed May 22 21:51:39 CEST 2013</date>
    <body>Now that OSGi support is in place and we know it is being used, I am curious whether the concept of ServiceRegistry helped or hindered in that process? One of the major reasons to define such a ServiceRegistry was the idea that it would help porting Hibernate into other containers and other runtimes, not just traditonal JSE/JEE environments. Specifically OSGi was one of the things considered, although in a very generic sense back then.  So part  of the reason I ask is that I wonder how successful we were in that, first; and then, in areas we can get better, how? Now is a great time to review that as we get ready to start making a push towards 5.0 after 4.3 (JPA 2.1 support) gets stabilized...</body>
  </mail>
  <mail>
    <header>[hibernate-dev] Exception model</header>
    <date>Thu Feb 19 11:29:51 CET 2009</date>
    <body>On Wed, 18 Feb 2009 10:45:50 +0100, Emmanuel Bernard Or just AmbiguousConstraintException? I could imagine to just use ValidationException in the case of ConstraintInitializationException, ConstraintExcecutionException, ConstraintCreationException I don't know which different type of action a developer should take in the case these exception exist. And is ConstraintExcecutionException not really just another name for ValidationException? What's about combining ConfigurationException and MappingException into just ConfigurationException? +1 for this approach. --Hardy</body>
  </mail>
  <mail>
    <header>Fwd: [hibernate-dev] Hibernate Search: configure the LockingFactory</header>
    <date>Wed Feb 18 15:50:03 CET 2009</date>
    <body>Begin forwarded message: The &amp;quot;none&amp;quot; doesn't protect at all, so you have to make sure to never open a second indexwriter or use any indexwriter when you are using an indexreader to make changes. Sounds a bit dangerous IMHO but I don't think we should stop people shooting at their own feet. As we are enforcing a single indexwriter and all our indexreaders are readonly since last release, you may want to use it: I think the current design of H.Search doesn't stop us from offering this option. I've added a note in the docs to use it only if you really understand it. Well, if you are only using Hibernate Search to access indexes (90% of our user base) and you deploy on one server (80% of our user base), none is a compelling solution right? (that's 70% of deployments :)) -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [Bean Validation] @Digits =&amp;gt; @DecimalRepresentation</header>
    <date>Wed Feb 18 16:01:24 CET 2009</date>
    <body>I am considering renaming @Digits to @DecimalRepresentation to make room for the plural form DecimalRepresentation[]  value() Any better name?</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [Bean Validation] @Digits =&amp;gt;	@DecimalRepresentation</header>
    <date>Wed Feb 18 16:43:37 CET 2009</date>
    <body>Sorry if I'm repeating information that someone else may have brought up and I hope I'm not throwing a wrench into the works. What about @Interface NumericRepresentations? This could leave room for hex and octal numbers. Just my 2 cents. John Griffin for the plural form -------------- next part -------------- An HTML attachment was scrubbed... URL:</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [Bean Validation] @Digits =&amp;gt;	@DecimalRepresentation</header>
    <date>Mon Feb 23 11:48:36 CET 2009</date>
    <body>remember the point of @Digits, limit the scale / precision of them. Scale / precision are defined based on a pre defined representation (decimal in this case).</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [Bean Validation] @Digits =&amp;gt;	@DecimalRepresentation</header>
    <date>Thu Feb 19 10:12:01 CET 2009</date>
    <body>On Wed, 18 Feb 2009 16:01:24 +0100, Emmanuel Bernard What' about @Number and @Numbers? --Hardy</body>
  </mail>
  <mail>
    <header>[hibernate-dev] [Bean Validation] @Digits =&amp;gt;	@DecimalRepresentation</header>
    <date>Thu Feb 19 10:46:59 CET 2009</date>
    <body>this is not the semantic I would naturally apply to number. Not sure. I am considering renaming @Digits to @DecimalRepresentation to make room for the plural form DecimalRepresentation[]  value() Any better name?</body>
  </mail>
</mails>

