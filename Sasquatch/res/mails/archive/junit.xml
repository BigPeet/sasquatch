<?xml version="1.0" encoding="UTF-8"?>
<mails>
  <mail>
    <header>Externally activated (global) rules</header>
    <body>Hi! I have a use-case where I need to enable rules based on external parameters. Therefore I cannot activate them in code. I have submitted a pull request:  There are some little things to fix but its an easy and functional extension. Anyone mind to fix the code to a state that will get merged? I did not get any feedback until now. Whole team in holidays? Also I am wondering when 4.12 will be released. Any plans? Regards and thank you! Henning.</body>
  </mail>
  <mail>
    <header>Re: Externally activated (global) rules</header>
    <body>Henning, Sorry for the lack of response. JUnit is maintained by volunteers, and sometimes our day jobs get busy. I was waiting for David to respond (I am a sometimes contributor) but here are my thoughts. This is an interesting idea. Note that you could get what you want with a custom runner. My concern with adding Rules via system properties that someone running the tests in their IDE would see different results compared to the test runs from Maven. Sure, you could tell your IDE to run the tests with the same system properties, but it would be unexpected for most people to have to take a special step to make the tests run the same way as they did in the continuous build. Could you find some way to define the global rules via code? Perhaps you could add a DynamicRule to all of your tests that could apply the addition rules. Alternatively, you could have a class in the same package as the tests that defined the global rules for tests in that package (though I'm not sure there is a platform-independent way to scan all of the classes in a package that works for all runtime/deployment environments) -- Kevin</body>
  </mail>
  <mail>
    <header>Re: Externally activated (global) rules</header>
    <body>Hi Kevin! Thank you very much for your feedback! First some words to the environment: In the project I need the feature we currently have 9 developers and it might be more. Even freelancers. There are something around 20k tests. What we want to achieve is to enable a global timeout rule that applies different timeouts to tests depending on their category (eg SlowTests.class may take longer than other tests). Also there are other things to take into consideration (eg is some context already loaded, otherwise the timeout will be increased). This rule already exists and is registered in some abstract base class. Its working fine. Having this amount of tests makes it very hard to make sure that every class is annotated with it. Also not all tests inherit from the abstract test class and I would like to keep it that way. It would be just some work to put the rule in every test but what about tests written in the future. I need to make sure that the rule is applied to every test especially when the developer forgets about it. Its a rule that is intended to avoid developers slowing down jenkins build by writing slow tests without annotating them as such. That said using a different runner is not an option. Also we already have a hard time mixing spring-runner, mockito-runner, junitparam-runner (btw we/you should copy some of that behaviour as it is a lot more flexible than junit parameterized test [1])) aso-behaviour (btw: we/you need to think about the runner-concept. it would be a lot better to have one runner and registering behaviour to it (eg being able to register as many "runners" as I want to). Scanning classpath is a good thing. We already use classpathsuite [2]. That enables us to create suites without having to specify all classes in it (another feature that would very well fit junit). We could for example annotate a rule with a classifier (basepacke, package or package.classname) and it would get applied to everything that matches. But this kind of behaviour would introduce a completely new way of configuration to junit (a little cdi/spring-ish). Maybe it would be a good idea to overthink the junit-concept leading this direction anyway but I get the feeling its a little too much for this concern. At last I do not think the external switch is a problem as its highly optional. If you use it, you know what you are doing. Dont you think so? [1] [2]</body>
  </mail>
  <mail>
    <header>Re: Externally activated (global) rules</header>
    <body>Hello, Are you using maven? If so, one option that you could possibly consider is using a different provider to surefire. A provider is a class which knows how to run a set of tests. There is a provider for JUnit3, JUnit pre 4.7 and JUnit post 4.7. JUnit post 4.7 uses the JUnitCore, which you could replace with your own version, which inserts the same rule everywhere. It seems (at first glance) to be a better way to get global behaviour from your jenkins server. Matthew Farwell.</body>
  </mail>
  <mail>
    <header>JUnit 4.12 issue when using theory + enum type + DataPoint that contains a null</header>
    <body>Hi, I have a Theory with a parameter list that includes a String, a boolean, and an enum. The latter 2 should be automatically assigned and should not need any explicit @DataPoint declaration (per the release note description below. When I run the test, the enum param is assigned the null value instead of being assigned each value of the enum, and I'm not sure why this is not working for me. I would appreciate any help you can offer, please. I cloned master from here: ...and looked at the JUnit 4.12 release notes: ...and scrolled-down to pull request #654 which says: "Any theory method parameters with boolean or enum types that can't be supplied with values by any other sources will be automatically supplied with default values: true and false, or every value of the given enum. If other explicitly defined values are available (e.g. from a specified ParameterSupplier or some DataPoints method in the theory class), only those explicitly defined values will be used." On that same release notes page, I also see the comment under pull request #549, which says that a @DataPoint-annotated array field can contain null values. So here's my test: @RunWith(Theories.class) ...and here's the output: windows:true:null windows:false:null linux:true:null linux:false:null null:true:null null:false:null ...which is not what I expected... I expected the 3rd value to be JDK6 or JDK7. I run a 2nd test, but this time I remove the null array element from the 'platforms' field, and the results are expected: @RunWith(Theories.class) ...which results in: windows:true:JDK6 windows:true:JDK7 windows:false:JDK6 windows:false:JDK7 linux:true:JDK6 linux:true:JDK7 linux:false:JDK6 linux:false:JDK7 Cool. But now just for fun, I remove the 'platform' param from testFoo and I restore the null array element to 'platforms' field. Since there is no longer any String param in the param list (and since String is a final class so there's no possibility of an assignable subclass), I expect that the 'platforms' DataPoint will just be silently ignored and I would get the expected output. But I actually see the unexpected output, as if a null array element that exists in a field (that's not even used in the Theory's param list) is affecting the values of a totally different type, the enum type (causing the enum param to receive only a null value): @RunWith(Theories.class) ...which results in: true:null false:null Maybe I'm missing something? Thank  you. Cheers, Will</body>
  </mail>
  <mail>
    <header>Out of Mem when using @DataPoints with Iterator type, request lazy fetch</header>
    <body>Hi, I see that in the current master branch of JUnit, the JUnit 4.12 release notes say: Fantastic. To me this means that we can now have something similar to TestNG's DataProvider that returns an 'Iterator&amp;lt;Object[]&amp;gt;' ( then ...but just one problem -- the JUnit Iterable @DataPoints doesn't seem to get the data lazily... it looks like it slurps everything into memory before passing it to the Theory test. I'd like to request that we please change the implementation of this method so that the data is ingested lazily (one element at a time, or maybe in batches) to avoid OOME. As a quick test, what I'd consider to be a desirable implementation would be one that passes a test that uses this infinite @DataPoints: import com.google.common.collect.Iterables values [Ref:  e/common/collect/Iterables.html#cycle Alternatively, here's a finite test that still results in OOME: import com.google.common.collect.Iterables Here's the OOME: java.lang.OutOfMemoryError: Java heap space at java.lang.AbstractStringBuilder.&amp;lt;init&amp;gt;(AbstractStringBuilder.java:45) at java.lang.StringBuilder.&amp;lt;init&amp;gt;(StringBuilder.java:68) at org.junit.experimental.theories.internal.AllMembersSupplier.addIterableValues(Al\ lMembersSupplier.java:147) at org.junit.experimental.theories.internal.AllMembersSupplier.addDataPointsValues(\ AllMembersSupplier.java:128) at org.junit.experimental.theories.internal.AllMembersSupplier.addMultiPointMethods\ (AllMembersSupplier.java:83) at org.junit.experimental.theories.internal.AllMembersSupplier.getValueSources(AllM\ embersSupplier.java:71) at org.junit.experimental.theories.internal.Assignments.potentialsForNextUnassigned\ (Assignments.java:78) at org.junit.experimental.theories.Theories$TheoryAnchor.runWithIncompleteAssignmen\ t(Theories.java:162) at org.junit.experimental.theories.Theories$TheoryAnchor.runWithAssignment(Theories\ .java:153) at org.junit.experimental.theories.Theories$TheoryAnchor.evaluate(Theories.java:138\ ) at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:72\ ) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:51\ ) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) at org.junit.runners.ParentRunner.run(ParentRunner.java:309) at org.junit.runner.JUnitCore.run(JUnitCore.java:160) at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunne\ r.java:77) at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter\ .java:195) at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:63) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120) Thank you for considering this request. Cheers, Will</body>
  </mail>
  <mail>
    <header>Re: JUnit 4.12 issue when using theory + enum type + DataPoint that contains a null</header>
    <body>Will, I think this is relevant to recent work on theories by @pimterry.  Can you create a bug on github, and mention @pimterry in the description?  Thanks,</body>
  </mail>
  <mail>
    <header>Re: JUnit 4.12 issue when using theory + enum type + DataPoint that contains a null</header>
    <body>Done: Thanks, David. Cheers, Will</body>
  </mail>
  <mail>
    <header>BlockJUnit4ClassRunner and @Ignore</header>
    <body>Hello. I'm writing a small program that passes a custom RunNotifier to an instance of BlockJUnit4ClassRunner and for some reason, it seems that the fireTestIgnored() method is never called. I'd expect this method to be called for a test method annotated with @Ignore. Is this expected behaviour? This is junit 4.10 on JDK7, if that's relevant. M</body>
  </mail>
  <mail>
    <header>Re: BlockJUnit4ClassRunner and @Ignore</header>
    <body>On Sun, 5 May 2013 14:21:19 +0000 Sorry, false alarm! The fireTestIgnored() method is called correctly (an exception elsewhere was being swallowed accidentally, and preventing the call from occurring). M</body>
  </mail>
  <mail>
    <header>Re: Externally activated (global) rules</header>
    <body>Hi Matthew! Sounds like a possibility. I will have a look at it. But I still think it would be good to have the possibility to enable rules globally. Regards!</body>
  </mail>
  <mail>
    <header>Re-licensing from CPL to EPL (again)</header>
    <body>Hi There are several cases (at least NetBeans and OpenJDK) where JUnit can't be used because it's CPL and EPL would be fine. To sum up: - EPL is the latest version of CPL (yes, it's a bit confusing at first) - Since EPL is a more recent version of CPL relicensing does _not_ require approval from all contributors (Section 7 of the CPL) - The difference between CPL is the removal of one sentence. It relates to the scope of patent licenses terminated should someone sue another party for patent infringement. You can find more information at [1], [2], [3] and look at a diff of the licenses at [4]. On an unrelated note after tying to set up a Yahoo Groups account I hope that Yahoo goes bust. [1] [2]  e-proliferation/ [3] [4] Cheers Philippe</body>
  </mail>
  <mail>
    <header>Re: Re-licensing from CPL to EPL (again)</header>
    <body>For context, Philippe brought this to my attention again.  I think it's time to just do it, but this is the chance for anyone who has concerns to speak up.  e-proliferation/</body>
  </mail>
  <mail>
    <header>Re: Re-licensing from CPL to EPL (again)</header>
    <body>Dne St 22. kvÄtna 2013 13:58:27, David Saff napsal(a): That would be nice... ...currently NetBeans IDE lets the end user download JUnit from Maven central when needed. This is problematic for users behind firewall or without direct Internet connection. Should JUnit switch to EPL we could distribute it together with NetBeans (as we do with TestNG) and provide smooth out-of-the- box experience. -jt</body>
  </mail>
  <mail>
    <header>Timed Tests and Thread Safety</header>
    <body>Hi All, I've been using timed tests (i.e. @Test(timeout = ...)) for years but recently came across an implementation detail of which I was unaware.  While I knew that timed tests are run in a thread other than the main test thread, I assumed that all aspects of the test (set up, test, and tear down) were run in that other thread.  I was surprised to discover that the set up and tear down methods are run on the main test thread, while the test method is run on a different thread. This jumped out at me in a recent programming session because the class under test uses thread isolation to achieve thread safety, and its methods liberally assert that they are invoked on the same thread on which the object was instantiated.  Once I realized why my timed tests were failing unexpectedly, I worked around the problem by moving the necessary portions of my set up and tear down to the test method itself. However, this got me thinking about more subtle issues related to timed tests of code that is inherently NOT thread safe.  Consider the following contrived example, where Bar is the class under test: When testSomethingOnMainThread() is run, I expect the Foo instance created in the test will have its dispose() method called in tearDown() because its assignment to the Bar.foo field occurs on the same thread that invokes tearDown(). However, when testSomethingOnDifferentThread() is run, I expect the Foo instance created in the test MAY NOT have its dispose() method called in tearDown() because its assignment to the Bar.foo field occurs on a different thread than the one that invokes tearDown().  Without some kind of memory barrier, the Bar.foo field may not be safely published from the test thread to the main thread. My concern is that there could be a significant change in the behavior of a test simply by annotating it with a timeout when the code under test is not thread safe.  I can't be the first person to ask this question (I apologize  if my search of this group's archives was not thorough enough), so I realize my entire premise may be ill-posed or that I'm missing some fundamental understanding of the Java memory model. With that said, is it reasonable to expect that, for a given @Test, all @Before and @After methods in the fixture be called on the same thread regardless of how the test is annotated?  Or is it simply up to the programmer to be aware of how timed tests are implemented, and to make it their responsibility to ensure code that is not thread safe is only ever invoked on a single thread, or to use external synchronization to ensure safe publication between threads? Cheers, Steve</body>
  </mail>
  <mail>
    <header>Re: Timed Tests and Thread Safety</header>
    <body>Steve, You raise a great question.  Unfortunately, and perhaps I'm missing something obvious, I don't think there's a way to provide timeout semantics, guarantee that @After is called, and guarantee that @After is called on the same thread as the @Test method.  Essentially, once the runner hands over control to the @Test thread, there's no guarantee that it will ever return control back--it could go into an infinite loop that catches InterruptedExceptions. It would potentially be possible to guarantee that successful tests that complete within the timeout have @After methods called on the same thread, but that would further complicate matters, with questionable (IMHO) payoff. The biggest payoff would probably be to make sure that the documentation we have makes it easy to avoid any unexpected behavior.  Can you suggest an edit to that effect?  Thanks,</body>
  </mail>
  <mail>
    <header>Re: Timed Tests and Thread Safety</header>
    <body>Why not? When you find a @Test(timeout=...), create a thread, run the @Before method in it, then the test method, then the @After method, all in that thread. You can detect if the test times out and still be able to run the @After in that same thread after the InterruptedException kicks in. -- Cédric</body>
  </mail>
  <mail>
    <header>Re: Timed Tests and Thread Safety</header>
    <body>Note the Timeout rule will call @Before and @After methods in the same thread as the test. The test class is created before rules are applied, so if your test class initializes fields at declaration time, that execution would happen in a different thread than the test. I also believe that @After methods would not be called for tests methods that timeout in classes that use the Timeout rule. - Kevin</body>
  </mail>
  <mail>
    <header>Re: Re-licensing from CPL to EPL (again)</header>
    <body>OK, I'm accepting this pull request.  Any further concerns will need to be expressed before the next release. On Thu, May 23, 2013 at 2:18 AM, Jaroslav Tulach &amp;lt;jaroslav.tulach@...</body>
  </mail>
  <mail>
    <header>Re: Timed Tests and Thread Safety</header>
    <body>@Kevin: I feel like a fool.  I actually "discovered" rules during this exercise and spent some time changing legacy @Test(timeout = ...) tests to use a fixture-level Timeout @Rule.  However, I just assumed that the threading behavior between the two was the same. :(  Based on your information, I ran some more tests to nail down on which thread the various parts of the fixture are executed using both models.  The results are summarized below (from JUnit 4.8.2). Given these results, using Timeout @Rules satisfies my concerns about thread safety and gives me even more motivation to use them over @Test(timeout = ...). Thanks!  (Note sure if item [B4] is intentional, but I can live with it for now.) @David: Your suggestion for updating the documentation is probably the best solution based on the preferred behavior of the Timeout @Rule.  Below is my cut at a second paragraph I'd add to the Javadocs for the @Test annotation's timeout element.  Please edit as you see fit. thread other than the thread which runs the fixture's @Before and @After methods.  This may yield different behavior for code that is not thread safe when compared to the same test method without a timeout parameter.  Consider using the org.junit.rules.Timeout rule instead, which ensures a test method is run on the same thread as the fixture's @Before and @After methods. Thanks again for all the feedback, Steve</body>
  </mail>
  <mail>
    <header>Re: Re-licensing from CPL to EPL (again)</header>
    <body>Great, thanks. Philippe</body>
  </mail>
  <mail>
    <header>Alternate @Category annotations</header>
    <body>We have received a patch over at maven-surefire ( used as a replacement for @Category(mycategory.class). So you basically can make your own @IntegrationTest annotation. I am sceptical to the patch in question, one reason being that it blows standardized tool support out of the water. Is there any "conformant" way this can be implemented ? Kristian</body>
  </mail>
  <mail>
    <header>Re: Alternate @Category annotations</header>
    <body>Hi Kristian, ( used as a replacement for @Category(mycategory.class). So you basically can make your own @IntegrationTest annotation. standardized tool implemented ? One possibility (that I'm toying with an another domain) is to use a meta-annotation like @CategoryAnnotation.  Any annotation that is itself annotated with @CategoryAnnotation is a category annotation. So you could declare: @CategoryAnnotation @Retention(RetentionPolicy.RUNTIME) @Documented Then you could mark any test: @IntegrationTest @Test Perhaps @CategoryAnnotation would require its target to take a few parameters, such as a description. These meta-annotations can be slightly dizzying for some programmers, but they sure make the test annotations cleaner Of course, for this to work, the framework would have to recognize @CategoryAnnotation and its meaning. Dale -- Dale Emery Consultant to software teams and leaders</body>
  </mail>
  <mail>
    <header>Re: Alternate @Category annotations</header>
    <body>meta-annotation like @CategoryAnnotation.  Any annotation that is &amp;gt;itself annotated with @CategoryAnnotation is a category annotation. I think this sounds great. But Shouldn't the @CategoryAnnotation itself be part of Junit ? The filtering bit could well be delegated to various runners..? Kristian</body>
  </mail>
  <mail>
    <header>Re: Re: Alternate @Category annotations</header>
    <body>I'm with Kristian: don't implement such a thing in surefire, but not in JUnit. I think the Suggestion that Dale proposed is great. But it is a JUnit Feature Request, not a surefire feature request. Greetings,</body>
  </mail>
  <mail>
    <header>Re: Re: Timed Tests and Thread Safety</header>
    <body>Thanks, Steve. I'm tracking your suggestion at</body>
  </mail>
  <mail>
    <header>Re: Re: Alternate @Category annotations</header>
    <body>Sorry to come in late on the discussion. I've generally been against the idea of meta-annotations.  I understand that they can simplify things, but they also greatly raise the number of classes that someone investigating a test failure for the first time has to look at to understand exactly what's going on. That said, I don't want to _ban_ having enough rope to hang oneself, I just try to stay out of the rope-selling business.  So how can we allow teams that would want such a thing to get it done?  This enables a standard syntax for giving JUnit a string that specifies a filter.  With that in place, once the --filter syntax is supported by Eclipse, surefire, etc, it should open up a path for third parties to implement Filters in whatever form they wish, and users could just include the third-party jar to get meta-annotation filtering or whatever else they want.</body>
  </mail>
  <mail>
    <header>Latest JUnit javadoc</header>
    <body>I wonder if there is any official url-location, to which the latest JUnit javadocs are published? I have been linking other documentation to this location ...  ... but I recently discovered that it does not feature JUnit-4.11. (instead I think it is JUnit-4.10) I have not found any further information about this at github. Does anyone have any information on where the latest JUnit javadocs are published? - or can anyone recommend a 3rd party location where the latest JUnit javadocs are published and continuously updated on every new JUnit release? thanks /Henrik</body>
  </mail>
  <mail>
    <header>Re: Latest JUnit javadoc</header>
    <body>Hi It would be great to have versioned javadocs as well (with version numbers in the url). Grzegorz Slowikowski</body>
  </mail>
  <mail>
    <header>Re: Latest JUnit javadoc</header>
    <body>I agree that it would be helpful to have an offcial browsable location for the Javadoc for each release. However, this is not available at the moment. To help you out there are two resources: 1. There is an officially published Javadoc JAR in the Maven repo which you can download and extract (or attach to the real JAR in your IDE of choice):  oc.jar 2. The very latest bleeding-edge snapshot Javadoc can be accessed on our Jenkins: Hope this helps! Cheers, Marc</body>
  </mail>
  <mail>
    <header>Getting started?</header>
    <body>Hi, I would like to contribute to the project and I'm just wondering what's the best way. Thanks, Ricky</body>
  </mail>
  <mail>
    <header>should @Ignore processing and Filter processing be combined?</header>
    <body>This topic started from  Full disclosure: I'm for combining such processing since my group uses Filter notification to know which tests are being skipped in CI while allowing such tests to be run on dev machines. Our goal is to eliminate such tests, but exposure of those tests is required to achieve this goal. The following (especially the cons since I'm biased and there's lots about JUnit I don't yet understand) will likely be missing items but I'll try to be fair about them. If there's anything missing, I'm sure people will jump in. Pro's: * Simpler code. @Ignore processing would simply be just another filter. Existing duplicate code to check for @Ignore annotations will disappear. * Conceptually simpler. @Ignore and Filters aren't two separate things with different hard-coded nuances. Con's: * Slower performance. Since notifications will have to be made, the set of tests to be run can't be culled down. Such slower performance is theoretical and ought to be measured. Potential alternatives: * Have an option (somewhere) that allows notification for filtered tests. * Have a fireFiltered() method for notifiers. I think this would still require changes to AllDefaultPossibilitiesBuilder.runnerForClass() such that it returns something similar to IgnoredClassRunner for tests that are filtered out. Noel</body>
  </mail>
  <mail>
    <header>Re: should @Ignore processing and Filter processing be combined?</header>
    <body>It sounds like you either want Categories, have your own annotation and write a custom Filter. Another option would be to write a method that checks an environment variable or system property and based on the results optionally calls Assume.assumeTrue(false). But they currently *do* have different nuances. Filtered tests do not show up in the Description tree; Ignored tests do. JUnit provides notifications when "running" an ignored test; no notification exists for filtering tests. They are also semantically different IMHO. @Ignore is a code-level indication to never run a test. Filtering is a way to run a subset of the tests. It sounds like you want tests that are run in some environments and not others; I think Ignore is a poor choice because it doesn't allow you to specify which environments you want to run them in. Again, I would use Categories or a custom annotation and a filter. Filtering can happen before RunNotifiers are added. One way to filter is to create a Request, and then call Request.filterWith(), and then run the tests. When you filter a request, the filtered items vanish from the Runner/Description tree. It would be hard to change that behavior without breaking existing users. -- Kevin</body>
  </mail>
  <mail>
    <header>Re: should @Ignore processing and Filter processing be combined?</header>
    <body>Noel, Have you looked at using Assume to prevent running of certain tests in certain environments?</body>
  </mail>
  <mail>
    <header>JUnit's evolving structure</header>
    <body>&lt;a href="http://edmundkirwan.com/general/junit.html"&gt; An enlightening post about how JUnit's package structure has evolved over time. I wonder if a JUnit 5 might endeavor to reduce package tangle? Personally, I'd like to see more functionality extracted from the core and moved into dependent modules -- specific runners, rules, etc. Cheers, p</body>
  </mail>
  <mail>
    <header>Re: JUnit's evolving structure</header>
    <body>I appreciate aesthetics in code, but somehow package dependencies have never triggered my OCD. In any case, JUnit 5 is an API release. Repackaging should be decoupled into either 4.12 or 5.1. Kent time. I wonder if a JUnit 5 might endeavor to reduce package tangle? moved into dependent modules -- specific runners, rules, etc.</body>
  </mail>
  <mail>
    <header>Help-New to Java and I am not getting the error messages when I run java complie</header>
    <body>All the error are near the bottom--System.out.println---Can someone let me know in simple human language(thank you) how I would correct this?  Thank you, jen /** * This program demonstrates the Rectangle class's * setLength, setWidth, getLength, getWidth, getPerimeter, * getArea methods. */ public class RectangleDemo public static void main(String[] args) // Create a Rectangle object. // Create a Rectangle object. * The getArea method returns the value * stored in the Area field. * The getPerimeter method returns the value * stored in the perimeter field. // Display the length, width, area and perimeter. System.out.println("The box's length is " System.out.println("The box's width is " System.out.println("The box's area is " System.out.println("The box's perimeter is "</body>
  </mail>
  <mail>
    <header>Re: Help-New to Java and I am not getting the error messages when I run java complie</header>
    <body>You should really ask on a java mailing list since this really has nothing really to do with jUnit. You could also search for the answers too. The problem is that the code you have added is not anywhere in the processing flow. Java is not top down executed; in this code the main method is run, your added code needs to go within the main method to be executed:- // placing your additions here would be a good place. // placing your additions here would be a good place. // placing your additions here would be a good place. With the code placed as it is, your compile should be complaining about 'misplaced constructs" or similar. But there are more problems if the code your are compiling and running really looks like this. I would suggest you pick and choose an IDE and debug the code if you want to see how it works. -- Mark</body>
  </mail>
  <mail>
    <header>Re: JUnit's evolving structure</header>
    <body>Wondering how this analysis compares with a tool like Sonargraph with its structural focus (Cyclic Dependencies etc). Or said another way, with no prior experience --- I'm struggling with "Spoiklin Soice" usability. time. I wonder if a JUnit 5 might endeavor to reduce package tangle? moved into dependent modules -- specific runners, rules, etc.</body>
  </mail>
  <mail>
    <header>Re: Getting started?</header>
    <body>Ricky, Sorry for the late reply.  In general, most of the action is on github these days.  There's a few great ways to help out: - Go through the issues on  , and see if there's any that tickle your fancy.  I'd strongly recommend pinging the issue with a little "hey, is this a good idea" before digging in--I'll see it, and usually respond quickly. - We're still catching up with documentation at  think of to add ( some pointers to "next steps", for example), that might help the community more than additional code. Thanks, and good luck!</body>
  </mail>
  <mail>
    <header>Re: junit 4.10 grab by label in github</header>
    <body>Nic, Quite sorry for the delayed response.  If you look at  through Google or the github docs should give you the commands you need to pull down the version-specific source. If you have any questions in the future, the community at junit@yahoogroups.com (cc'ed) is often swifter than me individually.  Good luck,</body>
  </mail>
  <mail>
    <header>Re: A way to log test execution (who is going to run/stop), FYI...</header>
    <body>Oleskandr, Sorry for the late reply.  You may be best off with a Rule for displaying the method names.  n-junit-4 might be a starting point.  Good luck,  n-junit-4  -4-at-runtime  -name-as-unknown</body>
  </mail>
  <mail>
    <header>Request for comment on failing theory datapoint changes</header>
    <body>We're currently looking at making some changes to how theory datapoint-generating methods fail. Currently datapoint methods that throw exceptions are simply ignored: this means that theories with two valid sources for a parameter quietly pass even if one of those sources is failing and never producing values to test. There's an open pull request to fix this (  methods fail instead, but there's concern that this can break tests that currently pass, or that people might even actually be depending on this functionality. Does anybody have any strong feelings either way on this? I'm particularly interested from anybody who does depend on the current functionality, or anybody who can think of any reasonable scenarios where you might prefer this behaviour.</body>
  </mail>
  <mail>
    <header>Re: A way to log test execution (who is going to run/stop), FYI...</header>
    <body>n-junit-4  n-junit-4 I already read provided link but doesn't look dipper into @Rule. Seems that @Rule scope to contained class file. I look for solution which doesn't require of modifying of existent test source code (because I want make logging facility persistent - commit to SVN duplicate code is wrong). So instead of *coding* I look for *configuring*! And finally get it with:</body>
  </mail>
  <mail>
    <header>test a GNU framework</header>
    <body>Is there a general approach to testing a library? I'm trying to fork a GNU library, gnumail-providers.jar, and want to test it as I go.  Just read the manual on JUnit? thanks, Thufir</body>
  </mail>
  <mail>
    <header>yahoo versus gmail</header>
    <body>I don't normally use yahoo, but seem to be using a yahoo account to send this message.  Is it possible to use my gmail address instead? thanks, Thufir hawat.thufir@...</body>
  </mail>
  <mail>
    <header>Re: yahoo versus gmail</header>
    <body>Yes, you can subscribe using another email account by sending an email to junit-subscribe@yahoogroups.com. I hope this helps. Corey I don't normally use yahoo, but seem to be using a yahoo account to send this message. Is it possible to use my gmail address instead? thanks, Thufir hawat.thufir@...</body>
  </mail>
  <mail>
    <header>Re: test a GNU framework</header>
    <body>Hi Thufir, Can you give a bit more information on what you mean? Are you a completely newbie to automated testing and want some pointers? -- Maybe she awoke to see the roommate's boyfriend swinging from the chandelier wearing a boar's head. Something which you, I, and everyone else would call "Tuesday", of course.</body>
  </mail>
  <mail>
    <header>Re: test a GNU framework</header>
    <body>There is a lot of good information on the JUnit wiki hosted on GitHub. You can find that here:  More specific testing questions can also be asked in this mailing list as well. Corey Is there a general approach to testing a library? I'm trying to fork a GNU library, gnumail-providers.jar, and want to test it as I go. Just read the manual on JUnit? thanks, Thufir</body>
  </mail>
  <mail>
    <header>API documentation up-to-date?</header>
    <body>Hello, looking at stilll references to  ry.html However, the latest release (4.11) does not contain hamcrest anymore. Regards Mirko --</body>
  </mail>
  <mail>
    <header>Re: API documentation up-to-date?</header>
    <body>Excellent point.  Do you have a moment to raise a bug report at github.com/junit-team/junit/issues ?  Thanks, On Thu, Apr 18, 2013 at 5:20 PM, Mirko Friedenhagen &amp;lt;mfriedenhagen@...  ry.html</body>
  </mail>
  <mail>
    <header>Re: API documentation up-to-date?</header>
    <body>I did comment on #570 as it seems related. I see there are 185 open issues already, that is the price for junit's success, probably ;-). Regards Mirko -- Sent from my mobile  ry.html</body>
  </mail>
  <mail>
    <header>Annotation driven Junit Test cases</header>
    <body>Hi, My team has recently started work on trying to extend Junit to support all inclusive annotation driven testing of a method in Java. What I mean is that if we have a method public int add(int a ,int b) then, instead of having to write a separate class for testing it, we would like to annotate the method as follows @AutoTest @InputParams @AutoAssert public int add(int a,int b) The responsibility of setting up junit to understand and execute this set of annotation would be delegated t our custom Runner. The example above is quite basic as we plan to support testing for complex input objects that are seeded using an XML file. We are in pretty advanced stages of completing this implementation. Please let me know how can we share our code for approvals/reviews with the Junit community. Thanks, SG</body>
  </mail>
  <mail>
    <header>Re: Annotation driven Junit Test cases</header>
    <body>Hi, could you please explain what happens after you annotate the code like this: @AutoTest @InputParams @AutoAssert public int add(int a,int b) Are tests automatically generated? What test cases are created? What assertions? -- Regards / Pozdrawiam Tomek Kaczanowski</body>
  </mail>
  <mail>
    <header>Re: Annotation driven Junit Test cases</header>
    <body>You need to fork the junit repo on github and file a pull request. I do not like the idea too much, tho. It puts a lot of waste in the code and i dont believe in many use-cases where a test case is that simple. Am 24.04.2013 12:50 schrieb "sourabh" &amp;lt;sourabh707@...&amp;gt;:</body>
  </mail>
  <mail>
    <header>Re: Annotation driven Junit Test cases</header>
    <body>SG, At this point, I think you should try to bootstrap your project outside of JUnit.  Once something is in core JUnit, I try hard to guarantee that it is very unlikely to change in breaking ways, and this big an idea, at this early a stage, that degree of calcification is the last thing you want. If you find yourself tempted to make changes to core JUnit code in order to get the extension points that you need, please open pull requests for individual changes. Good luck!</body>
  </mail>
  <mail>
    <header>Re: Annotation driven Junit Test cases</header>
    <body>First timer here at JUnit, please excuse any faux-pas. I was wondering if you aren't concerned about clattering your production code with testing annotations, JUnit dependencies, etc.</body>
  </mail>
  <mail>
    <header>Re: Annotation driven Junit Test cases</header>
    <body>+1. I'd like more explanation as well. If you're looking for property testing, and you don't mind writing scala, then you could do worse than Scalacheck:  Scalacheck generates the input data for you. For instance: which will fail, because scalacheck will try -1. scala&amp;gt; propSqrt.check ! Falsified after 1 passed tests: Matthew Farwell.</body>
  </mail>
  <mail>
    <header>Re: Annotation driven Junit Test cases</header>
    <body>Appreciate your feedback and everyone else who commented on my suggestion. Although we were planning upon implementing support for asserting on complex objects too,but the concern regarding the source code getting complex to read with a "test concern" that may not really belong there is quite valid. I am putting our effort on hold for the time being.</body>
  </mail>
  <mail>
    <header>new JUnit book</header>
    <body>Hi All, I'm happy to inform you that my book "Practical Unit Testing with JUnit and Mockito" is available now! I would like to say loud "thank you" to all people who post on this list. I learned a great deal from you! In the last few months I have noticed much more activity from JUnit developers and users, and this is one of the reasons which convinced me to write a JUnit book. Congratulations and keep up the good job! The book contains a lot of unit-testing goodness and uses JUnit as *the* unit testing framework. It shows how to write unit tests with and without mocks, presents matchers, useful patterns, best practices (but also bashes some bad ideas), and discusses common issues. I hope you enjoy it! -- Regards / Pozdrawiam Tomek Kaczanowski</body>
  </mail>
  <mail>
    <header>Re: Re: Feedback requested: Impending changes to RunListener</header>
    <body>There are a few other options that were suggested. I've summarized them all here:  edit# Feel free to add comments if I missed something. If you don't have a Google account (or even if you do) feel free to continue to comment here. Stephen indicated a concern with the jcip-annotations license. Hopefully he (or someone else with a concern) can explain why the license is problematic. -- Kevin</body>
  </mail>
  <mail>
    <header>Re: Re: Feedback requested: Impending changes to RunListener</header>
    <body>Sorry On 13 February 2013 10:51, Stephen Connolly &amp;lt;stephen.alan.connolly@...  edit#</body>
  </mail>
  <mail>
    <header>Re: Re: Feedback requested: Impending changes to RunListener</header>
    <body>To allow for the removal of licensing concerns, I have clean-room reverse engineered the jcip-annotations as well:  Should be available from Central in the next 1-8 hours This should be a drop in replacement for But if it isn't please let me know and I can fix and roll a 1.0-2 On 13 February 2013 09:17, Stephen Connolly &amp;lt;stephen.alan.connolly@...  edit#</body>
  </mail>
  <mail>
    <header>Re: Re: Feedback requested: Impending changes to RunListener</header>
    <body>edit# I indicated that there may be a concern with the license and you'd want to check. We had (at former employers) an issue with the findbugs annotations (LGPL), so I created clean-room reverse engineered implementation (Apache License v2) of the same annotations specification. We weren't using the jcip-annotations, so those were not subject to the lawyers reviewing.</body>
  </mail>
  <mail>
    <header>Help with junit.org</header>
    <body>Hi, team JUnit. A quick recap: late last year, the organization that had been hosting junit.org for us (a group of stalwarts that started at ObjectMentor) lost their serving files, apparently effectively irrevocably.  Since then: 1) I've taken ownership of the junit.org domain on behalf of the JUnit organization. 2) We've transfered the github repo to the junit-team team account. I think the best place to end up would be to serve junit.org from github pages at junit-team.github.com/junit.  I've begun taking steps in this direction, but could use help navigating the DNS and github-administration tasks involved. My guess is that with one or two focused volunteers, we can get the major issues knocked out in under a week.  Anyone up for the challenge? Thanks,</body>
  </mail>
  <mail>
    <header>Re: Help with junit.org</header>
    <body>count me in</body>
  </mail>
  <mail>
    <header>Re: would like to contribute</header>
    <body>Here's a test that explicitly runs a sub-test-class:  perimental/theories/AssumingInTheoriesTest.java Here's a hand-rolled mock:  stSystem.java Hope this helps,</body>
  </mail>
  <mail>
    <header>Re: Feedback requested: Impending changes to RunListener</header>
    <body>Hi Stephen, The correct groupId is com.github.stephenc.jcip. I already intalled and used the junit lib 4.12-snapshot in other project. The text in @ThreadSafe is similar to the one in original jcip. Although i would omit mentioning modifier "public" since the all problem of thread safety is in fields which are read or write in critical section=methods/constructor. So the modifier may not necessarily be public. It can be also protected, etc. So better not to mention any modifier in the text. Let's wait for other repliers and then to make a new deployment. Cheers, Tibor  edit#</body>
  </mail>
  <mail>
    <header>Re: Re: Feedback requested: Impending changes to RunListener</header>
    <body>I don't think we should use a re-packaged implementation of jcip-annotations. Creating a new "clean room" implementation just so we can use one annotation in JUnit seems to violate KISS. Although I am the one who originally suggested we use ThreadSafe from jcip-annotations, I no longer feel that way. I think we should either have a JUnit-specific annotation or a create an abstract subclass of RunListener. If we create our own annotation, I strongly feel that it should not be named ThreadSafe (see my comments in the Google docs page for more details)  edit# -- Kevin  edit#</body>
  </mail>
  <mail>
    <header>Re: Feedback requested: Impending changes to RunListener</header>
    <body>Look at the original spec (ie java doc) and you will see that the spec specifically calls out public. I would be deviating from the spec if I dropped the public. I debated re-using the original java doc text, but decided it was better to write something equivalent in specification but differing in wording as the spec text is under Creative Commons I think it would be wrong to deviate from the "spec". Perhaps a clarification from "upstream" would be best.  edit#</body>
  </mail>
  <mail>
    <header>Re: Feedback requested: Impending changes to RunListener</header>
    <body>Hi All, I am open for declaring @ThreadSafe in JUnit bundle due to the reasons like the other artifacts are project or person specific in Maven central and license issues. But I am not open for @Concurrent. The @ThreadSafe is the strongest terminology. One day if we will have both, it will be just confusing. If we now take over Stephen's class javadoc, we have to copy the Apache License. I think we do not have to follow the jcip either Stephan's definition of thread-safety in the annotation. We can follow the general definition "to be free of data race conditions". Simply see the wikipedia. And what this definition really means has to be specified in the class which allows thread-safety treatments.  Therefore the RunListener has to say in javadoc that it can be annotated @ThreadSafe if its use pattern satisfies reasonable expectations of thread safety. So RunListener allows using this annotation. Now we can talk about these expectations. I think they will be these and maybe you can add yours: + If RunListener is created in T1, values in the variables initialized by the constructor which are (indirectly) read in public methods have proper + All public methods in RunListener can be called in T2, or more threads at the + RunListener must not achieve non-deterministic nor invalid state. What is your opinion about this approach? Cheers, Tibor  edit#  edit#</body>
  </mail>
  <mail>
    <header>Re: Help with junit.org</header>
    <body>Good news everyone! junit.org is now (apparently) correctly serving* from  easier to collaborate on any further needs.  Two requests: 1) Can everyone check that as well?  (If it's the correct page, there will be a comment in the source near the bottom that says "This is a test of the GitHub pages publishing system.")  You may need to clear your browser cache. 2) What else needs to be served from the junit.org domain?  Certainly the javadocs, and maybe the cookbook doc.  I'm hoping most of the rest of it can funnel into the wiki.  Is there anything I'm forgetting? Stephen, what do you recommend as next steps?  Thanks, * As usual, trying to document my DNS problems so they made sense to someone else caused me to realize where I'd gone wrong.</body>
  </mail>
  <mail>
    <header>Re: Help with junit.org</header>
    <body>Looks good from here! Charlie</body>
  </mail>
  <mail>
    <header>Re: Help with junit.org</header>
    <body>Works in Ottawa. Cheers Mark -- Cheers Mark Levison</body>
  </mail>
  <mail>
    <header>Re: Help with junit.org</header>
    <body>Working for me How much of the site do you want to have generated from the Maven build and how much do you want as manually generated HTML? In one sense, the easiest way to get started is to have Maven generate the whole site... though it is not always the prettiest. If you go for Maven generating the whole site I would recommend the main index be generated using the ugly as heck xdoc format and use markdown for the rest of the non-automatic pages. the xdoc format will let you customize the generated HTML much more, and allow a nicer looking front page. Also I would favour the fluido skin (i.e. bootstrap based) If you would rather the root be just regular html, then I will set up the Maven site to push to a sub-directory instead. -Stephen</body>
  </mail>
  <mail>
    <header>Re: Help with junit.org</header>
    <body>Works in Berlin. Best Regards, Stefan 2013/2/14 Mark Levison &amp;lt;mark@...&amp;gt;:</body>
  </mail>
  <mail>
    <header>Re: Re: Feedback requested: Impending changes to RunListener</header>
    <body>Hi, all. Kevin, thank you very much for the summary document.  I think that a JUnit-specific annotation, which is not name-confusable with a standard like @ThreadSafe, seems to be a pretty clear winner.  If we feel strongly that it should remain consonant with @ThreadSafe, we could make it a static inner annotation, and reference it as @RunListener.ThreadSafe.  That might also have the advantage of making clear that it's a single-purpose annotation (I'd rather not, at this point, start speculatively figuring out what other interfaces might try to pun meanings onto a general-purpose ThreadSafe annotation) I'm a little curious about the third-party library implementation.  Let's say I write a package FooTest which is compiled against JUnit 4.12, and it contains a FooListener I'd like to mark threadsafe.  A client wants to use it with JUnit 4.11 (she knows she won't get the concurrent performance boost, but wants it to just work).  The document seems to assume that if FooListener has a RunListener.TheadSafe annotation, then our client won't have a problem (unless, likely, she actually tries to instantiate all of the annotations from FooListener in her own code).  However, the document assumes that declaring a marker interface ThreadSafeRunListener _would_ break the client.  Is that true?  Does FooListener fail at bytecode verification because the verifier wants to make sure that it implements all of ThreadSafeRunListener's methods? Thanks,  edit#  edit#</body>
  </mail>
  <mail>
    <header>Re: Help with junit.org</header>
    <body>1) Works for me! Tibor17 + I vote for an extra link on the front page deployed directly from CloudBees by making a new release.</body>
  </mail>
  <mail>
    <header>Re: Re: Feedback requested: Impending changes to RunListener</header>
    <body>I'm personally find with that as long as the JavaDoc for the annotation makes it clear that a RunListener implementation annotated with that interface will be treated differently than one not annotated with that interface when addListener() and removeListener() is called. Correct as of JDK 1.5.0_06. See  -a-classnotfoundexception-at-runtime It sounds that if the client wants to write code that extends FooListener then JUnit 4.12 will need to be on the compile-time classpath I believe it would result in a NoClassDefFoundError exception. It should be easy to verify. Note that it may be hard to write a library that has a compile-time dependency on JUnit 4.12 while being runtime compatible with 4.11 for other reasons. Does FooListener fail at bytecode That would be my guess. -- Kevin</body>
  </mail>
  <mail>
    <header>Re: Feedback requested: Impending changes to RunListener</header>
    <body>David, I can confirm that running annotated listener in 4.11 and compiled with 4.12 does not throw exception. So the annotation is winner in my eyes. Regarding the static inner annotation in RunListener, this would mean that other classes which will maybe later need the same name of annotation will just duplicate again. Cheers, Tibor  -a-classnotfoundexception-at-runtime</body>
  </mail>
  <mail>
    <header>Re: Re: Feedback requested: Impending changes to RunListener</header>
    <body>Remember, this annotation changes the behavior of JUnit will have when interacting with classes that extend RunListener. It's not simply an indication that the listener is thread-safe (though your listener would have to be thread-safe to use this annotation). See my comments in  ThreadSafe annotation would be problematic I'm personally not too worried about what might happen if we need to think about indicating the thread-safety of extension points somewhere else in JUnit. We could easily support multiple annotations in the future if we need to, and when that time comes, perhaps JSR-305 will be more mature. -- Kevin  -a-classnotfoundexception-at-runtime</body>
  </mail>
  <mail>
    <header>Re: Feedback requested: Impending changes to RunListener</header>
    <body>I am still thinking of the inner staff. You know that it's not recommended convention to make a class inner unless it uses this pointer of the top class. Then it should be public annotation in the same package. Hm?  -a-classnotfoundexception-at-runtime</body>
  </mail>
  <mail>
    <header>Test suite naming convention and package hierarchy. Need suggestion....</header>
    <body>I ask my question at:   classes-that-marked-by-suiteclasses-junit4 and don't receive any answer. So I read JUnit FAQ and post here... I involved into project where: * Test files with classes which marked as @SuiteClasses placed This cause problem that test eexecuted twice or more times on "mvn test": * Recently I integrate DbUnit to project. Running DbUnit test This cause CI Jenkins to stop building and delivering project build to manual-test team... ================================================================ To resolve issue I think to rename our test-guites to to distinct from &amp;lt;PREFIX&amp;gt;Test.java pattern. Also I think that it is good practice to move all test-suites to separate package: Some points to naming schema I fount in FAQ: but FAQ is silent about test-suites... Any suggection for best practice for naming suites are welcome!</body>
  </mail>
  <mail>
    <header>Re: Test suite naming convention and package hierarchy. Need suggestion....</header>
    <body>Oleskandr, I agree that using a simple naming strategy like *Test for individual test cases and *Suite for suites is a good solution when sharing tests between an IDE and maven. If I'm reading right, there's a completely different problem here where trying to run DbTests from the command line hangs; I'll have to leave that one to others who are more familiar with DbTest, or perhaps the DbTest forum itself. Good luck,  classes-that-marked-by-suiteclasses-junit4</body>
  </mail>
  <mail>
    <header>Re: Test suite naming convention and package hierarchy. Need suggestion....</header>
    <body>Thanks for answer! Have another related micro-question at bottom of replay... I understand and put this test to make better look of my situation... I don't want to fix this problem as have no time to debug based on project schedule. And well chosen naming schema workaround this issue (so "mvn test" run only *Test classes  and ignore *Suite classes). How about storing all suites in separate single package? It is easy to locate all available suites without "find . -name '*.Suite.java'" Is any standard practice on this field?</body>
  </mail>
  <mail>
    <header>Re: Re: Test suite naming convention and package hierarchy. Need suggestion....</header>
    <body>In my experience, teams that use explicit suites tend to keep the suites close to the tests they contain, but I'm not aware of a huge drawback in trying your suggestion here.</body>
  </mail>
  <mail>
    <header>A way to get print to console in RunListener?</header>
    <body>JUnit internally call System.setOut  .io.PrintStream%29 I write my custom simple RunListener to get a way to debug in some test execution by printing what test started and what stopped. But System.out.println() doesn't work... I found solution at:   -system-setout ... PrintStream ps = new PrintStream(new FileOutputStream(FileDescriptor.out)) This code solve my problem. I worry only about the right way to do output in RunListener. Is my solution ideologically right or there are exist object for printing message to console in JUnit API?</body>
  </mail>
  <mail>
    <header>A way to log test execution (who is going to run/stop), FYI...</header>
    <body>Our build on Jenkins stuck on some test. Our *large* organisation forbid access to build server... So I want to find this broken test (seems to be DB related test with using DbUnit). Firstly I think to run 'sed -i "s=...=...=" *Test.java"' on test sources. But this require to make fake commit to SVN and then revert history back. After googling I found:   n-junit-4 -4-at-runtime -name-as-unknown So getting run test name is hard task. But I found "listener" keyword so next googling take me: and I end with implementation: Next I add profile to pom.xml and configure build on Jenkins with '-Pjunitlog'. What is wonderful that JUnit got Listener support not so long time ago (near 4 years ago):  Are there any other ways to print test method name without putting System.out in each tests?</body>
  </mail>
  <mail>
    <header>Re: A way to get print to console in RunListener?</header>
    <body>Oleskandr wrote on 22.2.2013 15:06: I don't think that JUnit itself calls it. It's probably the IDE or build tool that calls it. They do it in order to accurately know that what test printed what text. Some other IDEs read the process' stdout/stderr, but that causes some inaccuracies in showing the results, as explained in Actually, because JUnit does NOT handle System.out/err itself, I set out to write the Jumi test runner, to get better usability through a more end-to-end coverage of the problem of running tests. -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Re: A way to get print to console in RunListener?</header>
    <body>Hm... So System.setOut() performed by Maven Surefire plugin... Your video on youtube is interesting (where System.out and System.err print independently because IDE supplied OutStreams for 'out' and 'err' not synced). So JUnit don't in play in this case. Thanks!</body>
  </mail>
  <mail>
    <header>Re: Re: Please read: impending transfer of KentBeck/junit github repo to junit-team/junit</header>
    <body>Yes, we have just killed a good number of links.  If this turns out to be a large problem, we'll need to come up with a solution. We've almost always had to handle the javadoc manually, which has led to a number of oversights and mistakes over the years--has anyone had a favorite automatic javadoc-posting solution?</body>
  </mail>
  <mail>
    <header>Re: Re: Please read: impending transfer of KentBeck/junit github repo to junit-team/junit</header>
    <body>Are you looking for versioned javadoc, or is the latest release sufficient? Could be made part of the Maven release process. AFAIR we did not add publishing the Maven site, but it can be done and leave the site hosting on Github. For example this is exactly what I do for jszip.org -Stephen</body>
  </mail>
  <mail>
    <header>Re: Re: Please read: impending transfer of KentBeck/junit github repo to junit-team/junit</header>
    <body>Would it be possible for Kent to clone junit-team/junit ? That would fix the links. - Kevin</body>
  </mail>
  <mail>
    <header>Re: Feedback requested: Impending changes to RunListener</header>
    <body>Sorry in advance if this is "too wordy". Getting an API correct is hard work, and the discussion helps. Given the thread so far, I'd be highly surprised if we decided to add a new dependency. If we go with using an annotation, we would have an annotation provided with JUnit that you could use. Does that change your view? RunListener is an abstract class, not an interface (which has been handy when we've wanted to add new notification methods) so I'm not sure if having a ThreadSafeRunListener interface makes sense. We could have ThreadSafeRunListener which is a subclass of RunListener with no additional methods. Fixing one without fixing the other is actually harder than fixing them both. If there's a concern that we could break existing uses, we can ping the thread when the changes stabilize a bit more. I'm not sure I agree (but I'm very interested in others thoughts). JUnit is used by all types of users, from novice to advanced. It is often the first and only third-party library a novice user uses. Novice users are highly likely to not handle thread-safety issues. Thread-safety issues in a listener could lead to all sorts of confusing results. I think we need to make it easy for novice users to add listeners without worrying about thread-safety issues, and possible for advanced users to have thread-safe listeners. We could limit the scope of the lock we use for non-thread-safe listeners. Currently, it's essentially a global lock. We could make the lock per-listener, but that might result in user-visible behavior changes. Thanks for the feedback. Keep it coming! -- Kevin</body>
  </mail>
  <mail>
    <header>Re: Feedback requested: Impending changes to RunListener</header>
    <body>Hi Kevin, I'm about to board a plane, but I took a look at the code on the way to the airport. I wonder if you could serialize the events on a separate thread that is the only thread that writes to the RunListeners. Multiple threads could deposit events in a concurrent collection. The lone dedicated thread could take events out and one one thread write them to listeners. I do something like that in ScalaTest in this class:  est/DispatchReporter.scala In the case of RunNotifier, it is a bit more complicated because the listeners to report to can change over time whereas in my case this is immutable. But still I think you could use a similar technique. I'm not familiar with what ParallelComputer is, so maybe this wouldn't work. But I thought I'd suggest it. Bill  otification/RunNotifier.java#L54  t/jcip/annotations/ThreadSafe.java  -a-classnotfoundexception-at-runtime -- Bill Venners Artima, Inc.</body>
  </mail>
  <mail>
    <header>Re: Feedback requested: Impending changes to RunListener</header>
    <body>That would indeed reduce the difference between the two aproaches. The difference I still see is that the annotation is more general.  You can use it at other places in the API if needed.   This is good if you think it would be usefull in multiple place in the API.  However, if it is supported in only one place, it might raise useless questions when implementing/extending other interfaces.  The implementer might ask himself if he should write thread safe code with that annotation or if it doesn't mather for this interface. Other differences are that the annotation is less intrusive than the taging interface that is a little bit old school. Given that, I'm now thinking that annotation is a good idea, but a bigger work.  I think for the annotation you should review the documention of the entire API to document where it applies. Is the RunListener for novice ;-) Anyway, even non novice might have issues to implement a thread safe class.  So I understand your concern.  But anyway, here also, you will need to document very well the locking aproach. Gilles</body>
  </mail>
  <mail>
    <header>Re: Feedback requested: Impending changes to RunListener</header>
    <body>I understand your concerns w.r.t. the intended semantics of third-party @ThreadSafe annotations. For that reason I could certainly get behind a differently-named annotation such as @Concurrent. Adding one more annotation is cheap, after all ;) Cheers, Stephan  t/jcip/annotations/ThreadSafe.java  -a-classnotfoundexception-at-runtime</body>
  </mail>
  <mail>
    <header>Re: Please read: impending transfer of KentBeck/junit github repo to junit-team/junit</header>
    <body>Hi David, number of oversights and mistakes over the years--has anyone had a favorite automatic javadoc-posting solution? I use ant+maven to check out the code and generate the javadocs.  Then I manually commit the javadocs to the gh-pages branch and push it to github.  Not entirely automatic yet, but automatic enough for me. Dale -- Dale Emery Consultant to software teams and leaders</body>
  </mail>
  <mail>
    <header>Re: Re: Please read: impending transfer of KentBeck/junit github repo to junit-team/junit</header>
    <body>Stephen, I think the latest release is a great first step.  Tell me more about how jszip.org works.  Thanks!</body>
  </mail>
  <mail>
    <header>Re: Re: Please read: impending transfer of KentBeck/junit github repo to junit-team/junit</header>
    <body>If Kent clones junit-team/junit, it would mean that links that once pointed to the official source would now point to Kent's local fork.  Issue links and wiki links would not work. One possibility would be to put, for the moment, a fork at KentBeck/junit, whose master branch is a single README.md pointing people to the real new home. That said, I'd probably prioritize this issue more highly once we see an actual user in the wild getting confused, so we can see what technique would be most useful.  So far, the mailing lists, stackoverflow, and twittersphere appear pretty quiet about the issue.</body>
  </mail>
  <mail>
    <header>Re: Re: Please read: impending transfer of KentBeck/junit github repo to junit-team/junit</header>
    <body>Here's the full details on the github side:  On 8 February 2013 15:25, Stephen Connolly</body>
  </mail>
  <mail>
    <header>Re: Re: Please read: impending transfer of KentBeck/junit github repo to junit-team/junit</header>
    <body>If you set up the "junit-team.github.com" (now that I remember how github hosting works) repo and can give me push access to the "site" repo, I could make sure it is set up correctly. Then all you'd need to do is set up the CNAME in DNS from www.junit.org to junit-team.github.com and presto - github hosting of the junit website On 8 February 2013 15:21, Stephen Connolly</body>
  </mail>
  <mail>
    <header>Re: Re: Please read: impending transfer of KentBeck/junit github repo to junit-team/junit</header>
    <body>It's hosted on github.com. The site is an organization level repo:  Each "module" pushes to a sub-section of the site, e.g.   So you could leave the main content *not generated by Maven* and then just publish the maven site to a sub-section of the main site. To push to github, you need to add a few tweaks to the pom: * You need to set the &amp;lt;url&amp;gt; to the URL that the site will end up on:  * You need to add the equivalent &amp;lt;site&amp;gt; stuff, e.g.  * You need to add the Maven wagon for deploying to a github hosted site, e.g. * Note: I also add a Markdown doxia module so that I can write the pages in markdown I think that is all you need to do. Then anyone with commit access to the  the Maven generated site (which would include the javadocs) just runs mvn site-deploy Everything else is magic. (There may be an entry in your settings.xml that would be required also) We could make the site URL versioned, that would mean that the site would contain javadocs for each version, or we could have Jenkins push the site as well. -Stephen</body>
  </mail>
  <mail>
    <header>Re: Please read: impending transfer of KentBeck/junit github repo to junit-team/junit</header>
    <body>We can automate that, making it either part of the new maven release process, or a job on the Jenkins server (bleeding edge java docs)</body>
  </mail>
  <mail>
    <header>Re: Re: Please read: impending transfer of KentBeck/junit github repo to junit-team/junit</header>
    <body>I've had a member of one of our teams here already come screaming that "junit has gone from github". -- Maybe she awoke to see the roommate's boyfriend swinging from the chandelier wearing a boar's head. Something which you, I, and everyone else would call "Tuesday", of course.</body>
  </mail>
  <mail>
    <header>Re: Re: Please read: impending transfer of KentBeck/junit github repo to junit-team/junit</header>
    <body>Hello there, I have used Stephen's general strategy as well, (manual entry page, Maven sites as directories beneath). The site distribution url is equal to Stephen's approach. As an alternative (not having tried Stephen's wagon), I have used the maven-scm-publish-plugin[1]. After the initial setup (see pom.xml[2] for an example), it is sufficient to execute sth. like `mvn clean verify site site:stage scm-publish:publish-scm` and you are set. The scm-publish plugin: - checks out the gh-pages branch in a directory beneath target - merges your staged site into this directory, - makes one commit and pushes The scm-publish:publish-scm is in my experience blazingly fast compared to deploying the site via wagon (I had tried this with SVN in the past and it was a real pain, but as I said I did not try Stephen's wagon for github :-)). Projects inheriting from a base pom use the same strategy for publishing the site, the only thing they have to define is a property called scmpublish.content[3]. Regards Mirko 1. 2. 3. On Fri, Feb 8, 2013 at 4:21 PM, Stephen Connolly</body>
  </mail>
  <mail>
    <header>Re: Re: Please read: impending transfer of KentBeck/junit github repo to junit-team/junit</header>
    <body>I haven't tried the scm-publish, and its been a while since I refreshed my toolchain (the wagon is a fork of Katherine Huxtable's, not my work!). Either technique works, we can do some performance bake-out if JUnit wants to go down this path</body>
  </mail>
  <mail>
    <header>Re: Categories and JUnit</header>
    <body>All, I have started to work on integrating RuntimeSuite into JUnit on my fork of Dale's repo:  This is what I've done so far: - Added support for finding classes in JAR files and wildcard folders - Work towards a standard (Maven) project layout, i.e. removed extra source folders - Removed dependency to Logback and SLF4J - Added support for classes annotated with @RunWith that don't use the @Test annotation - Added support for JUnit 3.x style tests and suites If you find the time, I would be happy to hear your feedback. In addition here are some todos I have identified: - Get rid of own RuntimeSuite-specific @Category annotation and the one defined by JUnit - Reuse Categories.CategoryFilter to implement the Filter for categories - Adjust coding style - Javadoc polish Cheers, Marc</body>
  </mail>
  <mail>
    <header>Re: Re: Please read: impending transfer of KentBeck/junit github repo to junit-team/junit</header>
    <body>OK, that sounds like a reasonable data point.  Let's see what can be done.</body>
  </mail>
  <mail>
    <header>Re: Feedback requested: Impending changes to RunListener</header>
    <body>Hi all junit guys, Let me turn back to the original problem. We knew that it's a good idea to let the users to annotated a custom listener by @ThreadSafe if it's really thread-safe. In every other case the given listener is wrapped in synchronized listener which is package private class. I am convinced that we should not make synchronized listener public since this is our internal patch. The user may have whatever thread-safe listener depending on implementation and still not having it synchronized. Thus s/he can annotated the clas by @ThreadSafe. We are synchronizing the listener's methods internally in the patch only because the user's implementation is unknown -listener in not annotated yet. Back to jcip-annotations license. Such library is under Creative Commons Attribution License ( If we use Maven dependency, we are free to share, distribute and transmit. So there is no legal issue for the JUnit. Any objections to this lincense? Thx, Tibor @ThreadSafe annotations. For that reason I could certainly get behind a differently-named annotation such as @Concurrent. Adding one more annotation is cheap, after all ;) dependency. We  t/jcip/annotations/ThreadSafe.java  -a-classnotfoundexception-at-runtime This</body>
  </mail>
  <mail>
    <header>Re: Feedback requested: Impending changes to RunListener</header>
    <body>At the risk of repeating myself: my only objection is with the package in which said annotation resides: net.jcip.annotations instead of javax.annotation.concurrent. But that argument can also be made in reverse. Hence my suggestion to inspect the annotation's simple name only. That also makes the licencing discussion mood, unless one wishes to depend on jcip-annotation to provide a "default" or "preferred" version of the annotation. That's fine of course. :) Though then do please mark the dependency &amp;lt;optional&amp;gt;: otherwise I have to start explicitly excluding it (I derive my annotations from one of the FindBugs modules mentioned in an earlier email; no need to duplicate classes on the classpath). Cheers, Stephan by @ThreadSafe if it's really thread-safe. which is package private class. is our internal patch. and still not having it synchronized. Thus s/he can annotated the clas by @ThreadSafe. because the user's implementation is unknown -listener in not annotated yet. Attribution License ( @ThreadSafe annotations. For that reason I could certainly get behind a differently-named annotation such as @Concurrent. Adding one more annotation is cheap, after all ;) vs very dependency. are We an to  t/jcip/annotations/ThreadSafe.java later.  -a-classnotfoundexception-at-runtime This issue any to</body>
  </mail>
  <mail>
    <header>Re: Feedback requested: Impending changes to RunListener</header>
    <body>Hi All, Stephan, I would also prefer javax package. Let's see this link wich is listing all artifacts having javax.**.ThreadSafe  I have also the same problem with their versions. My objection to these is that, there is no unique and final artifact related to JSR-305, and none of them has groupId "sun", "oracle", nor "javax". They may change as a long as the JSR changes. The JSR 305 is not final. Hopefully, the jcip is more considered standard and the version would not change. In worst case your Maven module will have two @ThreadSafe annotations on the top of listener's class including two packages. The license of jcip allows us to copy the content of the annotation, but I am not sure if we are allowed to repackage it. If not, I already submited ThreadSafe annotation in junit package  I am not mentioning this commit because it's mine, nothing but because this issue takes quite long and we freezed to resolve it. Having such annotation in JUnit package is also not the best idea. One solution of not being dependent on findbugs and net.jcip artifacts, either the JUnit annotation is to detect the annotation "javax.annotation.concurrent.ThreadSafe" as String : class name but not the class object itself. This allows us to be compatible with the Maven artifacts and the finalized JSR 305 in JDK. Of course we can add such maven dependency later and annotate JUnit classes ThreadSafe/NotThreadSafe in other pulls if we want to. But this is not our goal yet. Sounds promissing? Cheers, Tibor which said annotation resides: net.jcip.annotations instead of javax.annotation.concurrent. But that argument can also be made in reverse. Hence my suggestion to inspect the annotation's simple name only. That also makes the licencing discussion mood, unless one wishes to depend on jcip-annotation to provide a "default" or "preferred" version of the annotation. That's fine of course. :) Though then do please mark the dependency : otherwise I have to start explicitly excluding it (I derive my annotations from one of the FindBugs modules mentioned in an earlier email; no need to duplicate classes on the classpath). listener by @ThreadSafe if it's really thread-safe. which is package private class. this is our internal patch. and still not having it synchronized. Thus s/he can annotated the clas by @ThreadSafe. because the user's implementation is unknown -listener in not annotated yet. Attribution License ( @ThreadSafe annotations. For that reason I could certainly get behind a differently-named annotation such as @Concurrent. Adding one more annotation is cheap, after all ;) vs very dependency. (ob find behavior. are code, for on got synchronized. We having an passed to it  t/jcip/annotations/ThreadSafe.java later. the  -a-classnotfoundexception-at-runtime This in issue any to and</body>
  </mail>
  <mail>
    <header>Re: Re: Feedback requested: Impending changes to RunListener</header>
    <body>The JSR-305 ThreadSafe annotation appears to have @Retention(RetentionPolicy.CLASS):  otation/concurrent/ThreadSafe.java Do you see something different in your version? Having RetentionPolicy.CLASS means it can only be read via bytecode-level post-processing, not via reflection:  That would only work if the retention policy for your ThreadSafe annotation was "RUNTIME". So if we went with this approach, we would risk someone making a change that they believe will allow their runner to be called concurrently but would still result in the calls to their runner being synchronized. -- Kevin That also makes the licencing discussion mood, unless one wishes to depend  t/jcip/annotations/ThreadSafe.java  -a-classnotfoundexception-at-runtime</body>
  </mail>
  <mail>
    <header>Re: Re: Please read: impending transfer of KentBeck/junit github repo to junit-team/junit</header>
    <body>Hello, one caveat: when you have any resources in the site starting with a dot, you better include a file `.nojekyll` in your site, see:  coco.html Regards Mirko On Fri, Feb 8, 2013 at 6:27 PM, Stephen Connolly</body>
  </mail>
  <mail>
    <header>Re: Categories and JUnit</header>
    <body>FYI, the code I mentioned that uses Filters for Categories support allows one to use properties to control which tests are run. For example "-Dtest.categories.include=**/A.class,**/B.class -Dtest.categories.exclude=**/C.class,**/D.class" would run tests that are categorized both as A and B but neither C nor D. No need to hand-craft Suites for each combination one may want. Fundamentals" started by Mark Levison has made it very clear that using Categories is not as easy as it should be. It (often) requires maintaining classic Suites by hand which is very cumbersome. Forgetting to add a new test to the SuiteClasses annotation is a common pitfall. category or name is something that does belong to the core. junit.contrib is a nice idea but so far there is no clear release model, no common licence and so on. JUnit core on the other hand, is a commonly used library. New features and improvements become immediately usable by a large majority of Java developers. possibilities: scenes. easily add a custom Finder or Filter without touching the runner. Option (3) would have the advantage that existing users of ClasspathSuite would have an easy migration (changing package names). codebases under CPL for us, I guess. JUnit proper smaller. of how  148058da827d3897672be2959c132dcbd/doc/ReleaseNotes4.9.html I style on to. JUnit this on etc. NUnit just can -</body>
  </mail>
  <mail>
    <header>Re: Categories and JUnit</header>
    <body>I have implemented better support for Categories (it uses Filters) that I would like to contribute. How do I go about doing this (especially since some of the tests use JMockit)? Thanks, Noel</body>
  </mail>
  <mail>
    <header>would like to contribute</header>
    <body>I have created better support for filters (primarily CategoriesIncludeFilter and CategoriesExcludeFilter but any Filter can be plugged in, including an IgnoreFilter that uses the filter mechanism to support @Ignore). I would like to contribute this code to the JUnit project but it uses mocks for some of the testing. What mocking framework does the JUnit project use in its testing? If it currently doesn't use a mocking framework, should I rewrite the tests to be more end-to-end? Thanks, Noel</body>
  </mail>
  <mail>
    <header>Re: would like to contribute</header>
    <body>Indeed, we do not use automatic mocking frameworks for JUnit's self-tests. In many places, we test features by what you might consider integration-style, constructing test classes that use the feature, and asserting the desired outcomes.  In some others, we use hand-rolled mocks. Let me know if you have any questions about translating particular idioms.</body>
  </mail>
  <mail>
    <header>Re: would like to contribute</header>
    <body>Can you point me to specific examples of both styles? When you say 'constructing test classes', do you mean there's something like a testdata directory with such classes? Or are they created some other way? Thanks, Noel</body>
  </mail>
  <mail>
    <header>Re: Feedback requested: Impending changes to RunListener</header>
    <body>Hi all, ok, so in that case the standard javax annotations cannot be used. Other options are jcip and proprietary one. I vote for jcip since the license allows us to use a dependency. To me the name "ThreadSafe" sounds more preferable to "Concurrent", since the implemntator must take care of more than concurrent calls of listener's methods, but also atomicity, visibility of vars, constructor and treatment of critical section(s) inside of the listener. Any thoughts? Cheers, Tibor  otation/concurrent/ThreadSafe.java  t/jcip/annotations/ThreadSafe.java  -a-classnotfoundexception-at-runtime</body>
  </mail>
  <mail>
    <header>Re: Categories and JUnit</header>
    <body>I second that. I haven't looked at RuntimeSuite yet, but if it is more flexible it should be the way to go. Migrating existing cpsuite suites shouldn't be much of an issue either since - I assume - a typical user has only a handful - or less - hand-configured classes to convert. Johannes</body>
  </mail>
  <mail>
    <header>4.12 Release</header>
    <body>Hi! We have been testing a snapshot for the last week and it seems pretty stable. No bugs so far. Problem is: we are going to release soon and we need to decide if we roll back to 4.11. Can anyone tell me if theres any concrete plans for a 4.12 release? Regards!</body>
  </mail>
  <mail>
    <header>Re: 4.12 Release</header>
    <body>Henning, I'm doing some triage of issues still outstanding and currently targeted to 4.12.  Is there particular functionality in 4.12 that you'd miss if you had to release with 4.11?  (You may have already mentioned this in another thread--if so, my apologies.)</body>
  </mail>
  <mail>
    <header>Re: Categories and JUnit</header>
    <body>About "Before tackling new features let's make the basics simple". While I agree with most of the rest that was said I reacted negatively in the beginning to that statement in the context of Lambdas "I'm in shock, you're discussing how to use Lambda's well when some of the basic elements are hard to use correctly". It is simply a false dichotomy. It is not a matter of "we should be doing this rather than that". In my experience Lambdas are a key to a great deal of simplicity. It's not really a new feature in the sense "we can do new stuff" as it is "we can do stuff differently". Looking at lambdas certainly doesn't prevent fixing other things. More than anything from this discussion, when looking at JUnit5 in the light of java 1.8, one of the things that should be solved in "core" is categories (it seems).</body>
  </mail>
  <mail>
    <header>Re: Categories and JUnit</header>
    <body>OK, I can get behind classpath searching as a core feature.  That said, it's likely to be at least a month or two before there's a finalized release that incorporates this.  In the meantime, would it make sense to add a section to the wiki that explains how someone can use RuntimeSuite and the existing features of JUnit to get what Mark's team originally wanted in Eclipse/maven/command-line/etc?  The hope would be that this would move at least a few teams from "I give up" to "I'm glad this will get easier, but at least we're up and running".  In the process of generating it, we might also unearth some corner cases that would nice to know before baking things in (for example, will our recommended Eclipse solution work in the presence of tests loaded into OSGi containers?) On Mon, Jan 28, 2013 at 12:57 PM, Joakim Ohlrogge &amp;lt;joakim.ohlrogge@...</body>
  </mail>
  <mail>
    <header>Re: Re: Is it Time for JUnit 5</header>
    <body>One of the things I would love to see in some upcoming JUnit version is some kind of feature introspection (I'll explain what I mean with that) in a moment. rationale: More than anything, JUnit is an integrationhub for running tests. All(?) IDE's support running JUnit tests in some way as well as buildtools, CI severs etc. One issue with JUnit4 has always been that IDEs can't keep up with JUnit and JUnit in turn is constrained with the current state of IDEs. It is hard for other tools to compete because JUnit is already there. "Feature introspection" It would be great if there was a way for 3rd part tools to ask JUnit for features. A basic feature could be "run all tests on classpath", or "run named test", "run category". As a 3rd party tool vendor I could then query JUnit for features and delegate more of the work to JUnit. If we take categories as an example. Today eclipse simply doesn't recognize them but with feature introspection it could just appear as a choice in a menu. A feature would have some basic categorization where some categories are well known such as "run" so that tools can logically present the basics. A feature would have some way to declare it's required input, referably with some types (like: A test, A category, A suite, A test with parameters etc, Needs a resultbuilder etc). A feature would have some way to describe itself "Runs the specified category of tests" A feature can be contributed by a 3rd party like a custom runner can. With features it would also open up new possibilities with tools like Ant, Maven, Gradle etc where features can be delegated to JUnit and it would be simpler to build and maintain testrelated tasks since they would not require to be available as compiled tasks before the build starts, extensions can be built and maintained in the same way as your tests until you want to share them with others. Admittedly this is an idea that is not finished. I'm basically aiming at bridging the gap a bit between 3rd party tools and the JUnit core without having to implement UI and solve UX problems. Thoughts?</body>
  </mail>
  <mail>
    <header>Re: JUnit 5, Lambas and Fundamentals</header>
    <body>Side note: GitHub is now supposed to be hosting junit.org, but they seem to be experiencing problems.  If anyone knows a way to get their attention beyond repeated requests through normal support channels, I'd be all ears.</body>
  </mail>
  <mail>
    <header>Re: Categories and JUnit</header>
    <body>On Mon, Jan 28, 2013 at 12:57 PM, Joakim Ohlrogge &amp;lt;joakim.ohlrogge@... Fair enough I was being a bit provocative. I had previously raised the issues around categories and got very little reaction. Give the reaction I've seen from Java developers at a the last client around the state of category support, I thought the tree needed shaking. My point was it seemed like the cool stuff was getting attention (ex Lambda's) while the basics (Categories et al) were being ignored. My point wasn't that Lambda's shouldn't be done but that the basics need to be solid first. Back to client work. Cheers Mark</body>
  </mail>
  <mail>
    <header>Re: Categories and JUnit</header>
    <body>Hi Marc, codebases under CPL for us, I guess. @Johannes, Dale: Would you do that? I would be happy to attach JUnit's usual license to any of my code incorporated into JUnit.  At what time and by what means would I do that? Dale -- Dale Emery Consultant to software teams and leaders</body>
  </mail>
  <mail>
    <header>Re: Categories and JUnit</header>
    <body>Hi David, likely to be at least a month or two before there's a finalized release that incorporates this. Oh. That's a faster timeframe than I was expecting. explains how someone can use RuntimeSuite and the existing features of JUnit to get what Mark's team originally wanted in Eclipse/maven/command-line/etc? I developed RuntimeSuite at a client who was just starting to use Maven.  We invoked the suite by configuring surefire like this: You could generalize that by using a property instead of naming a specific class. That's the extent of my understanding of how to use RuntimeSuite with Maven. So does that (admittedly minimal) guidance suffice for Maven? I have no idea what's required to integrate anything with Eclipse (or IntelliJ IDEA). At my client, we weren't doing anything trickier than configuring Maven to run our suite class.  We never, for example, used properties or command line args to configure finders and filters.  In fact, none of the finders and filters built into RuntimeSuite were configurable at runtime.  Everything they know, they know at compile time. That said, people /could/ implement their own finders and filters, configurable at runtime in whatever way suits them.  Because finders and filters are implemented as rules, you can hand their constructors any configuration options you desire, as long as you know how to get the options to the constructors.  (A simple matter of programming?) to "I'm glad this will get easier, but at least we're up and running".  In the process of generating it, we might also unearth some corner cases that would nice to know before baking things in (for example, will our recommended Eclipse solution work in the presence of tests loaded into OSGi containers?) I am entirely ignorant of OSGI. Dale -- Dale Emery Consultant to software teams and leaders</body>
  </mail>
  <mail>
    <header>Re: Categories and JUnit</header>
    <body>Mark, By the way, I don't know if you follow the github project, but if you're only watching the mailing list, you're probably getting an odd picture of what's "getting done". If you look through the list of commits, you may find that many things that obviously need fixing are simply getting fixed, without lots of discussion on the mailing list.  Things tend to surface on the list if they are controversial, need feedback, or are speculative and fun. And, hopefully, you're helping your clients to remember that if they feel that contributors to JUnit represent a different set of desires and needs than they're facing, there's a clear way to fix that, as there is with most open-source projects.</body>
  </mail>
  <mail>
    <header>Re: Categories and JUnit</header>
    <body>Dale, it would be a first to actually incorporate such a large amount of third-party code, so we'd play it a bit by ear.  It may be as simple as chiming in on the github pull request discussion with a statement similar to yours above.  If we get to that bridge, we'll make it as easy as possible to cross.</body>
  </mail>
  <mail>
    <header>Re: Categories and JUnit</header>
    <body>Oh, I would also consider it aggressive as a target.  I was just pointing out that even the best-case scenario of getting code into JUnit would be an order of magnitude or two higher latency and effort than improving the documentation to point to existing, already-working solutions, so we should prioritize the doc upgrade. And it's only a shady memory to me, populated by phantoms and cold spectres. Which is why it would be good to try to get people who care about it to beta-test our documentation before there's hundreds of lines of code behind it.  :-)</body>
  </mail>
  <mail>
    <header>Re: Categories and JUnit</header>
    <body>I pay attention to GitHub when I can. For better or worse coding is a rare event for me these days, so I don't pay more attention or contribute directly. I raised the issue because I could see it at the one client and it was similar to what I remembered from the last time I used Junit. I made the noise because the feature still seemed as difficult to use as it was a few years ago. Cheers Mark</body>
  </mail>
  <mail>
    <header>Before/After Category</header>
    <body>Hi, Is there a way to run some code before/after a category? Similarly to Before/After class. Thanks in advance, Przemek</body>
  </mail>
  <mail>
    <header>Re: Before/After Category</header>
    <body>You can use @BeforeClass and @AfterClass (or a @ClassRule) in a class that uses the Suite runner. The Categories runner extends suite. -- Kevin</body>
  </mail>
  <mail>
    <header>Re: Before/After Category</header>
    <body>Kevin Cooney &amp;lt;kcooney@...&amp;gt; writes: Thanks for the reply. I don't have any such class. I run tests from Maven and use Surefire's groups/excludeGroups to choose categories. I don't want to have any suite file to maintain (90's are gone ;-)). To be more specific, I have DatabaseTest category and want to init/drop database before/after all database tests, so something like Maven plugin, because those classes do more than just init - it's a legacy system and refactoring this would take much more than just configure Maven/jUnit appropriately. Cheers, Przemek</body>
  </mail>
  <mail>
    <header>Re: Before/After Category</header>
    <body>This sounds like the other thread where we were thinking that JUnit core should have a Suite that discovers classes on the classpath. Then you could create an AllTests suite that runs all of your tests, and wrap that in a Categories suite. -- Kevi ---------- Forwarded message ---------- Date: Wed, Jan 30, 2013 at 10:54 AM Subject: Re: [junit] Before/After Category To: junit@yahoogroups.com ** Kevin Cooney kcooney@...&amp;gt; writes: Thanks for the reply. I don't have any such class. I run tests from Maven and use Surefire's groups/excludeGroups to choose categories. I don't want to have any suite file to maintain (90's are gone ;-)). To be more specific, I have DatabaseTest category and want to init/drop database before/after all database tests, so something like Maven plugin, because those classes do more than just init - it's a legacy system and refactoring this would take much more than just configure Maven/jUnit appropriately. Cheers, Przemek</body>
  </mail>
  <mail>
    <header>Chaining of rules - shorter syntax proposal</header>
    <body>Hi, The current syntax for chaining the rules into the single one is like this: @Rule public TestRule chain = RuleChain.outerRule(new FirstRule()).enclose(new I found it too verbose, also it kind of makes me think about what is "outer" and what is "enclose", etc. From the practical point of view, I want to execute some setup actions in the specific order and that's all, I don't care about all these "enclose" thingies. The proposed syntax is just this: @Rule It is filed as pull request Would like to know what others think of it. Regards, Alex</body>
  </mail>
  <mail>
    <header>Re: Please read: impending transfer of KentBeck/junit github repo to junit-team/junit</header>
    <body>All, This has now happened.  The most immediate fallout is that old links to github issues and pages likely need to have "KentBeck" replaced by "junit-team" in order to resolve.  Let me know if any other issues immediately arise.</body>
  </mail>
  <mail>
    <header>Feedback requested: Impending changes to RunListener</header>
    <body>Hello, everyone Short version: we are thinking of adding an optional dependency from JUnit to jcip-annotations and are soliciting feedback. A few people have noticed that when you use ParallelComputer, you got poor performance because calls to registered RunListeners are synchronized. We would like to fix this in the next release of JUnit. In order to prevent affecting existing users, we are proposing having an annotation that can be added to RunListener implementations that can safely be called concurrently from multiple threads. If a RunListener passed to a RunNotifier is not annotated with this annotation, JUnit will wrap it with a decorator that does synchronization. We would appreciate feedback on this new annotation. We have two options: a. Create our own annotation for this b. Use ThreadSafe (  t/jcip/annotations/ThreadSafe.java ) The advantages to option b are: 1. It's a well-known annotation 2. Users that use JUnit can add this annotation to their thread-safe RunListener implementations today and get the benefits "for free" later. Note we can do this without requiring that all users of JUnit have the jcip-annotations jar in their classpath as of JDK 1.5.0_06 (see  -a-classnotfoundexception-at-runtime If jcip-annotations is not on the classpath then all RunListener implementations will be treated as not thread-safe. As a specific example, the Maven Surefire plugin would use this dependency and include jcip-annotations. Currently, JUnit only depends on one third-party library (Hamcrest). This has caused us some pain in the past when the Hamcrest code changed in ways that broke existing users of JUnit. We believe this will not be an issue with jcip-annotations because the JAR only contains annotations, not any code. One possible concern would be with other open source libraries that provide RunListener implementations (they would need to add jcip-annotations to their compile-time classpath if they have thread-safe annotations, and document this to their users). Thoughts? -- Kevin</body>
  </mail>
  <mail>
    <header>Re: Feedback requested: Impending changes to RunListener</header>
    <body>I like the idea, a lot! But would like to ask that only the *simple name* of the annotation is considered, without regard for the package in which it resides. This way one can: 1. Use an alternative third-party annotation, such as javax.annotation.concurrent.ThreadSafe from libraries like com.google.code.findbugs:jsr305:1.3.9 and com.google.code.findbugs:annotations:2.0.1. 2. Define a private annotation, without adding _any_ additional dependency. I use javax.annotation.concurrent.ThreadSafe quite a lot in my own code, so (1) is quite important from my perspective. There are precedents for this approach: IIRC, Eclipse does something like this for variations on @Nullable and @Nonnull, whereas (again, IIRC) Findbugs handles two instances of @SuppressWarnings. Cheers, Stephan  t/jcip/annotations/ThreadSafe.java  -a-classnotfoundexception-at-runtime</body>
  </mail>
  <mail>
    <header>Re: Feedback requested: Impending changes to RunListener</header>
    <body>There are some legal people who have issues with some of the licenses on some of those annotations jars... Also I have seen issues with those annotations being absent from the compiler's classpath... IOW the annotation does not need to be present when running, but does seem in some cases to be required when compiling classes that inherit from annotated code (because the compiler needs to inspect the meta annotations to see in the annotation is inherited or something like that) Might boil down to either some meta-annotation  or comparing annotations based on simpleName  t/jcip/annotations/ThreadSafe.java  -a-classnotfoundexception-at-runtime</body>
  </mail>
  <mail>
    <header>Re: Feedback requested: Impending changes to RunListener</header>
    <body>It looks like jcip-annotations uses Creative Commons, which is not recommended to be used to license software. That pretty much seals it for me. So it looks like we will either go with our own annotation or allow any annotation named "ThreadSafe" (in which case, JUnit would have our own ThreadSafe annotation in an internal package). The only remaining question is whether people expect APIs to behave differently based on whether the objects passed to them are of types annotated with a ThreadSafe annotation. One of the things I like about the JUnit annotations is that someone can look at the JavaDoc of the annotation to get a very clear idea of what behavior JUnit will give to the class/method/field/parameter with that annotation, plus it's easy to see what classes/methods/etc have special behavior (unlike JUnit3 where some behavior was based on the name of the method) -- Kevin</body>
  </mail>
  <mail>
    <header>Re: Feedback requested: Impending changes to RunListener</header>
    <body>Somebody could do like I did for find bugs annotations though  A bit of a pain reconstructing clean room, but can be done. Iirc what stopped me at the time is the jcip annotations were being put into a jsr and that is still stalled afair</body>
  </mail>
  <mail>
    <header>Re: Feedback requested: Impending changes to RunListener</header>
    <body>Hi Kevin, Can you clarify what the performance issue was? Is the problem that you have events coming possibly in parallel via different threads, and you want to send them all to a user-specified RunListener? Because you don't know whether a RunListener is thread safe, currently you are serializing those events somehow that's slow? Bill  t/jcip/annotations/ThreadSafe.java  -a-classnotfoundexception-at-runtime -- Bill Venners Artima, Inc.</body>
  </mail>
  <mail>
    <header>Re: Feedback requested: Impending changes to RunListener</header>
    <body>Currently the RunListener code stores the listeners in a synchronized list, and has a large synchronized block where it calls all of the listeners:  otification/RunNotifier.java#L54 -- Kevin  t/jcip/annotations/ThreadSafe.java  -a-classnotfoundexception-at-runtime</body>
  </mail>
  <mail>
    <header>Re: Re: Please read: impending transfer of KentBeck/junit github repo to junit-team/junit</header>
    <body>This is more a remark than anything else, but this means that any URL's pointing to the old repo are now dead. For instance, Stack Overflow. This also applies to junit.org I suppose. Is there a fixed URL for the junit api? Thanks. Matthew Farwell.</body>
  </mail>
  <mail>
    <header>Re: Re: Is it Time for JUnit 5</header>
    <body>What you've described is already in an existing testing framework for Java. Here's an example of a parameterized test with Java 8 lambdas and the Specsy testing framework ( originally using Scala (Specsy has frontends for Java, Scala and Groovy at the moment), but it's not much longer with Java lambdas. The original in Scala:  et/orfjackal/dimdwarf/domain/SimpleTimestampSpec.scala The same in Java: The test results look like this using the Jumi test runner ( If I remove the "shareSideEffects()" call, then each test will be excuted in its own test class instance, using Specsy's test isolation mechanism. But in this parameterized test it's much faster to disable the isolation, especially since the system under test is immutable so it doesn't need the isolation. This is how the results look without that optimization: ... ... Got any new ideas that haven't yet been implemented? ;) Bill Venners wrote on 17.1.2013 5:50: -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Re: Re: Is it Time for JUnit 5</header>
    <body>et/orfjackal/dimdwarf/domain/SimpleTimestampSpec.scala doesn't seem to have much of a user base. 2 github forks, no questions on the ML. JUnit on the other hand has a huge user base, and I think that is a good enough reason to implement block-style tests in JUnit if that's what people want. Convincing people to switch to something better is possible, but it takes a lot of marketing effort. Being better isn't enough. I am one of the authors of the very first testing framework to introduce this kind of name/block API (RSpec), so I think the more the merrier! Cheers, Aslak</body>
  </mail>
  <mail>
    <header>JUnit 5, Lambas and Fundamentals</header>
    <body>Gang - I realize that I don't commit here nor in NUnit, as a result I have a little street cred. Its been about 5yrs since I made a significant part of my living from writing code. Instead I spend most of my time and effort coaching and training clients on the basic Agile ideas. In the past few weeks I've spent a lot of time with a client that builds Java applications. This has brought me back to JUnit. I'm in shock, you're discussing how to use Lambda's well when some of the basic elements are hard to use correctly. Examples Categories - require a special runner and the use of suites; Parameterized Data - requires a special runner etc. The Categories is the worst one. The client had some slow tests that should be removed from their main unit test suite and run only on nightly builds. Over time they want to revisit the tests, speed them up (using Fake DB and In Memory streams etc). In the world of Nunit no problem we would just mark them as members of the category slow and run them separately on the build server. In JUnit the requirement to use suites for this capability was so painful that we just migrated the tests to a separate eclipse project. Their parameterized tests several were missing the annotations for the special test runner. There are a number of other small details where JUnit makes it a little harder than necessary to do the work. Suggestion before debating an attractive Lambda syntax, make the existing features easy to use. In addition take NUnit for spin you might find some good ideas on how to handle many of these details. -- Cheers Mark Levison</body>
  </mail>
  <mail>
    <header>Re: JUnit 5, Lambas and Fundamentals</header>
    <body>Is there any reason why you wouldn't use JUnit Categories exactly as you have outlined for NUnit? This is the exact mechanism we use for our slower tests. -- Maybe she awoke to see the roommate's boyfriend swinging from the chandelier wearing a boar's head. Something which you, I, and everyone else would call "Tuesday", of course.</body>
  </mail>
  <mail>
    <header>Re: JUnit 5, Lambas and Fundamentals</header>
    <body>But you need to use Suite annotations and you need separate slow and fast lists. NUnit just allows includes/excludes from the command line. Cheers Mark. -- Cheers Mark Levison Agile Pain Relief Consulting</body>
  </mail>
  <mail>
    <header>Re: JUnit 5, Lambas and Fundamentals</header>
    <body>If you're using Maven you can use category support in surefire, again just specifying a slow list and having the default as the fast list.  Personally I prefer having my tests in separate root source trees. -- Maybe she awoke to see the roommate's boyfriend swinging from the chandelier wearing a boar's head. Something which you, I, and everyone else would call "Tuesday", of course.</body>
  </mail>
  <mail>
    <header>Re: JUnit 5, Lambas and Fundamentals</header>
    <body>In favor of JUnit, its core is pretty flexible and does allow implementing such categories. You will need a custom runner or rules but these can be put in a superclass inherited by all tests and then you just stick to annotations. It's a pity everyone seems to have their own solution of course. Here's mine -- randomizedtesting uses annotations to mark groups this is used for various things in practice (@Slow, @Nightly, @AwaitsFix, @WindowsOnly, custom groups can be added).  Here's a relevant snippet of test code showing how to declare and use a custom group.  Dawid</body>
  </mail>
  <mail>
    <header>Re: JUnit 5, Lambas and Fundamentals</header>
    <body>If you are helping your teams become more agile, then hopefully they are running their tests in an IDE most of the time. If that's the case, I think selecting a class named "FastTests" and telling your IDE to run it as a test is easier than fiddling with your JUnit run configurations to specify which category to run. Yes, it involves writing a little bit of code to create the class, but it's thankfully very little code. Certainly, the documentation could be better, but the wiki is helping with that (please contribute if you can). As for parameterized data, I agree that this shouldn't require a different runner. Getting parameterized data to work with the same runner as for normal tests would probably require a major rewrite of a lot of the core JUnit code. If there is a JUnit5 that introduces a different runner model, we should definitely re-think how parameterized tests are modeled. -- Kevin</body>
  </mail>
  <mail>
    <header>Re: Categories and JUnit</header>
    <body>I vote for encouraging submissions to junit.contrib, and keeping the core of JUnit proper smaller. --p  148058da827d3897672be2959c132dcbd/doc/ReleaseNotes4.9.html</body>
  </mail>
  <mail>
    <header>Re: JUnit 5, Lambas and Fundamentals</header>
    <body>Kevin, Colin and anyone else who is interested, Let's imagine the scenario here. I show up at client site as part of a two week engagement. During the 3 days of training we discuss Hill's definition of a Microtest; SPiFFy; etc. Now they all understand no **good** unit test touches the file system, database, network etc. In addition they've groked the value of creating only a small object graph for each test, max 7-8 objects. Here comes the hard part, they've got legacy code. They sincerely want to do good stuff going forward, but their tests take ~25 minutes to run. Profiling indicates that there are ~35 tests over ~20 test classes that are slow. In almost every case slow tests are mixed in with fast tests. In addition many of these slow tests could be made fast (and more valuable) if we just made some clever use of fakes. However this changeover will take easily a couple of months of part time effort. In the world of NUnit we would just mark these as members of the category slow. In JUnit we either: As it stands I can waste alot of time with a client trying to overcome this issue when we should be practicing TDD, Mikado method, etc. Again my key point for JUnit 5 before discussing new things like Lambda's I think the challenge should be to make the existing functionality as simple to use as possible. Cheers Mark Levison</body>
  </mail>
  <mail>
    <header>Re: JUnit 5, Lambas and Fundamentals</header>
    <body>I would also like a chance to define categories to run through more simple means. Integrated IDE support would be nice of course, but something like parameter to set would help for starters. I do not use the suites or categories right now but I do have tests that are too slow for me to run all the time. I also do not want to maintain separate suite classes but rather prefer to just right-click on a package in IntelliJ and select "run tests". And repeating that from the menu if I so prefer. I like to group my tests by what they test and not have many source trees, so currently I just temporarily disable some tests if they bother me, run tests for a chosen package, and the whole set later.</body>
  </mail>
  <mail>
    <header>Re: JUnit 5, Lambas and Fundamentals</header>
    <body>Ok. I'm trying to understand what actually happens with NUnit. I mark a test as "slow", and run all of the tests in my project. Are you saying that without selecting the category of tests to run, the IDE doesn't run the slow tests, that is it only runs tests which are not marked as slow? If this is so, how does it know which are the slow tests? So, if I understand correctly, your goal here is to allow a user to mark a test as "slow" and from then on, if the user runs all tests in Eclipse, these tests get ignored. This would be achievable if we changed the eclipse plugin for JUnit, and wouldn't need a change to JUnit itself. You could have a set of categories to ignore when running the tests from Eclipse, which would be settable from the project properties or wherever. Coudl you please clarify what actually happens in an IDE with NUnit? Thanks. Matthew Farwell.</body>
  </mail>
  <mail>
    <header>Re: JUnit 5, Lambas and Fundamentals</header>
    <body>That's the general idea. In addition NUnit supports command line parameters to do the same. I would like the user and the build machine to run their tests split along category lines. My underlying point is that anything that requires the user to specify something in multiple places, either categories or paramaterized tests, is likely to go wrong. Confused - why not change the runner so it requires less special case handling? BTW I've not looked in the JUnit source code in years. I would but since I'm currently running on a mac I can't prove anything until I have my next .NET client :-) -- Cheers Mark Levison</body>
  </mail>
  <mail>
    <header>Re: JUnit 5, Lambas and Fundamentals</header>
    <body>Mark, I agree with the overall idea of simplicity.  The path to simplicity often begins with a single step, and I'd love to get a succinct description of what that step would be for you.  In particular, maven surefire allows one to specify "run every test in this package/jar/etc in these categories". Eclipse does not have this functionality.  If that functionality were also in Eclipse, would it have been a step toward solving your problem?</body>
  </mail>
  <mail>
    <header>Re: JUnit 5, Lambas and Fundamentals</header>
    <body>Hi All, I've been holding my peace, since I figure you all don't particularly want a long dissertation about another test framework, running in a different language. However, Matthew's question seems to call for a clear answer so you can figure out which way you want to go. In NUnit, I can mark a test as slow by annotating it [Category("Slow")]. NUnit has no idea what "Slow" means or what to do with it. It's just a tag. In order to make use of the category I have to either specify it using a command-line option or select it in the Categories window of the NUnit Gui. In either case, I can choose to run all tests or just some categories. I can also choose to exclude some categories. There's actually more flexibility at the command line than in the Gui, since I can specify boolean combinations of categories there like "Data-Slow", which means run all the Data category except those also marked as Slow. Here are differences in the implementations, as I have observed them. It may not be complete and could even be dead wrong in the case of JUnit, so please correct me if I'm off base: 1. NUnit categories are strings. JUnit's are classes. 2. NUnit controls what categories to execute at runtime, without changing the code. JUnit requires changing the code or at least setting up suites for each of your commonly used categories in advance. I suppose some IDEs may allow runtime selection of categories for JUnit. These two differences appear to be orthogonal. Regarding the first difference: I once spent some time considering emulating JUnit and using a Type rather than a string to represent a category. Use of a Type (class) is more sophisticated and appealed to me at first. In the end, I couldn't really point to an solid advantage to the user, so we still use strings. Regarding the second difference: Runtime category selection is something NUnit users wouldn't want to do without these days. There seems to be no obstacle to allowing it in JUnit while retaining the ability to define suites as now. That's what I would do... Charlie</body>
  </mail>
  <mail>
    <header>Re: JUnit 5, Lambas and Fundamentals</header>
    <body>I went through the same decision with TestNG and eventually, I decided that being to run groups with regular expressions (".*fast.*") outweighed the benefits offered by having a @Group annotation. -- Cédric</body>
  </mail>
  <mail>
    <header>Re: JUnit 5, Lambas and Fundamentals</header>
    <body>Thank you for your dissertation, it is always useful to have another point of view, especially if it's based upon experience with another test framework. To recap: In NUnit, you can annotate a method/class with a category, and when you run the tests, you can filter the tests run based upon a category, through the GUI or command line options. Let's have a JUnit example: Using the above code (no suites, nothing else apart from the category classes), when I run my tests in maven surefire, I can specify the categories for which I want to run tests, and it performs as expected. This only runs testFast(). You can't specify a category in Eclipse, but mostly because it hasn't yet been added :-). I personally would find this useful. This is a reasonably easy change, but may take a while to add because of the release cycle for Eclipse. Also, it is fairly easy to put an extra command line parameter to JUnitCore to only run particular categories, similarly to the maven plugin. If this is wanted, please raise an issue/pull request. As an aside, I can't remember the last time I ran a set of tests from the command line directly (except for answering stack overflow questions). I use Eclipse, maven and rarely ant, but never the command line. To explain, I always want my tests to be run as part of a build, and I always build just before I commit, so I don't want the mental overhead of having to run JUnit from the command line each time. A bit of explanation. Apologies if this is obvious. We're talking about multiple things here. JUnit, maven surefire and the Eclipse JUnit plugin. JUnit, given a list of classes/tests, will execute the tests. Maven surefire &amp;amp; the eclipse plugin selects the list of classes/tests to test. JUnit supports categories, as does maven surefire, but the Eclipse plugin does not, nor does the command line. So, ignoring the class/string debate, would the following be acceptable for you: 1) Add a command line parameter to specify categories to include/ignore (JUnitCore) 2) Change the Eclipse (or IDE of choice) to specify categories to include/ignore Also, there are moves afoot to add test discovery directly to JUnit, through ClasspathSuite or similar, so the command line option may be easier to use. Thanks. Matthew Farwell.</body>
  </mail>
  <mail>
    <header>Re: JUnit 5, Lambas and Fundamentals</header>
    <body>I've responded to Charlie Poole's response, so please see that as well. Because you'll still need to add the categories to include/exclude, and this will require changes to Eclipse. JUnit already supports this, because maven already has this functionality.</body>
  </mail>
  <mail>
    <header>Re: JUnit 5, Lambas and Fundamentals</header>
    <body>Like I mentioned in my e-mail before, the runner I wrote has support for annotation-based categories (with a meta-annotation @TestGroup so that you can add your own group annotations to your will). I see several practical benefits of not using strings and enforcing annotations: - harder to make a typo (compiler checks/ validation), - easier to lookup a bunch of annotated tests using IDE's standard tools (lookup any occurrence of annotation @Slow, etc.), - easier to convey the defaults for an annotation (since the meta-annotation holds the default system property for turning it on and off, the description of an annotation etc.). Categories can also be implemented with test/class rules, they don't really need a designated runner. A disabled test would be assumption-ignored by the rule. Dawid</body>
  </mail>
  <mail>
    <header>Re: JUnit 5, Lambas and Fundamentals</header>
    <body>Charlie, Thanks very much for your input.  With regards to the last two points, which I think are definitely interesting: 1) The main thing we were hoping to get with classes was help from the compiler, based on a real-life experience (in a different context) in which someone checked in a test that should have been in the "must pass" group, but mispeled the label name, causing a bug to slip through.  There was also the thought that IDE's could help with renames and reference counts.  I'll leave it to more frequent users of the feature to say whether those have been worth it. I'd also take quite seriously any recommendations for how we could enable string-based category names without breaking existing users. 2) It's been quite a while since I've thought of JUnitCore.main as the primary "runtime" of JUnit.  It's been many, many years since I worked on a team where invoking that directly was done with any frequency whatsoever. The vast majority of tests are run either through IDEs or build systems, which, as far as I've seen, always bypass the command-line processing functionality of JUnitCore in order to implement their own graphical or XML-based configuration system.  So adding command-line options to JUnitCore has become rather low-priority in my book, since it would help such a small percentage of users. That's an explanation of the current status quo, which needs not necessarily be maintained. I hope that users and maintainers of other frameworks feel welcome to post their experiences with these other frameworks here.</body>
  </mail>
  <mail>
    <header>Re: JUnit 5, Lambas and Fundamentals</header>
    <body>For the first two, you would achieve the same if you just declare your category names as String constants and reference those, while giving the option to write typos if you prefer. I don't quite understand the third bullet so I don't know about that. Now, if I have to write fully qualified class names as command line parameters, I would actually prefer to just write "slow". Teemu</body>
  </mail>
  <mail>
    <header>Re: JUnit 5, Lambas and Fundamentals</header>
    <body>The third bullet is related to the first two. The @Slow annotation is declared as: the @TestGroup indicates @Slow is a category, it is enabled by default and it can be turned on or off with a -Dslow=[on,off,true,false,yes,no] system property, regardless of how this property is passed to the runner (IDE, command line, etc.). I'm not saying it's the only solution to the problem, it's just a different type of choice compared to string-based categories and it's been working really well for me so I throw my 5c to the discussion. The downside of using annotations is that they need to be accessible to the compiler which may be an additional hassle in multi-project settings (a common test dependency with category annotations). There are always pros and cons. Dawid</body>
  </mail>
  <mail>
    <header>Re: JUnit 5, Lambas and Fundamentals</header>
    <body>OK, that is quite nice. You have  specific annotations and you can give them string names to use as a reference as well for running.</body>
  </mail>
  <mail>
    <header>Re: JUnit 5, Lambas and Fundamentals</header>
    <body>If you were to replace Class[] in Category with Object[] and call toString() on those, would that work? IDE and build system support would be the best goal I guess. Perhaps a JVM option such as -Djunit.include=slow? I could configure my IDE runner with that even if it does not support the categories directly.. :) Teemu</body>
  </mail>
  <mail>
    <header>Re: JUnit 5, Lambas and Fundamentals</header>
    <body>Yes, exactly. You can see a real-life example of such test groups in Apache Lucene, here:  org/apache/lucene/util/LuceneTestCase.java#L151-L205 Oh, and I forgot -- there is one more thing you can do with this: because test categories are _your_ annotations you can add custom fields to them, as in: @TestGroup(enabled = false, sysProperty = SYSPROP_AWAITSFIX) Whenever you mark a test as awaiting a fix you'll also have to provide a bug URL to the associated issue. Nice little benefits :) Disabled categories produce assumption-ignored events, as in:  For example: [junit4:junit4] IGNOR/A 0.01s J1 | TestIndexWriterDelete.testApplyDeletesOnFlush [junit4:junit4]    &amp;gt; Assumption #1: 'nightly' test group is disabled (@Nightly) You could argue whether this is the desired behavior (an ignored test could be silently dropped too). The feedback from Lucene/Solr developers was that they preferred this to be explicit so that ignored tests were reported, not dropped. Again -- a matter of the developer group's consensus rather than any "optimal" choice. Dawid</body>
  </mail>
  <mail>
    <header>Re: JUnit 5, Lambas and Fundamentals</header>
    <body>Or just a separate "name" attribute I don't quite see how this would work.  Take Eclipse as an example: it chooses which test classes it wants to run with no help from the org.junit source code (by looking at its own internal model of the classpath), and then eventually asks JUnit to run them.  By the time any code I could add to JUnit would take effect, it would already be too late.</body>
  </mail>
  <mail>
    <header>Re: JUnit 5, Lambas and Fundamentals</header>
    <body>Le vendredi 25 janvier 2013, David Saff a écrit : This could be made to work for excludes, but not for includes. The exclude could be treated as @Ignore. But personally I don't think it's a good idea. You've always been opposed to introducing dependencies on System properties before. Matthew Farwell.</body>
  </mail>
  <mail>
    <header>Re: JUnit 5, Lambas and Fundamentals</header>
    <body>OK, so I guess it would be up to the IDE developers to support the category selection in the GUI. Something that would help me is if there was a way to define a suite by package name. So I could say @Suite(package="foo") and the suite would then consist of all tests in package "foo" and its "subpackages" (such as foo.bar). Is this possible somehow? I generally just like to group my tests by packages but the current syntax seems to require me to manually keep a list of classes for each suite. If I add or remove any test classes, I would need to update the suite. IntelliJ allows me to right-click on a package and run all tests in it like this. But then it just runs all my tests and I don't have control over categories etc. With a package level suite definition I could configure it in a separate class as I like and not worry about updating it for new tests etc. Also, junit.org has been showing a 404 page for a few days at least. Is that by intent? Was looking for some documentation on this. Teemu</body>
  </mail>
  <mail>
    <header>Re: Categories and JUnit</header>
    <body>All, on the one hand, I agree with what Paul said: Keep the core small and proper. On the other hand, the discussion in this thread and in "JUnit 5, Lambas and Fundamentals" started by Mark Levison has made it very clear that using Categories is not as easy as it should be. It (often) requires maintaining classic Suites by hand which is very cumbersome. Forgetting to add a new test to the SuiteClasses annotation is a common pitfall. Thus, I think finding test classes on the classpath and filtering them by category or name is something that does belong to the core. junit.contrib is a nice idea but so far there is no clear release model, no common licence and so on. JUnit core on the other hand, is a commonly used library. New features and improvements become immediately usable by a large majority of Java developers. If we decide to add such functionality to JUnit, I think we have the following possibilities: 1. Include Johannes' ClasspathSuite pretty much as-is. 2. Include Dale's RuntimeSuite pretty much as-is. 3. Include both runners but delegate to a common implementation behind the scenes. Personally, I very much like Dale's approach. It is very flexible, one can easily add a custom Finder or Filter without touching the runner. Option (3) would have the advantage that existing users of ClasspathSuite would have an easy migration (changing package names). All of these possibilities require that Johannes and/or Dale relicense their codebases under CPL for us, I guess. @Johannes, Dale: Would you do that? @All: What do you think? Cheers, Marc Am 22.01.2013 um 20:55 schrieb Paul Holser: JUnit proper smaller. of how  148058da827d3897672be2959c132dcbd/doc/ReleaseNotes4.9.html I JUnit NUnit just</body>
  </mail>
  <mail>
    <header>Re: Categories and JUnit</header>
    <body>@Marc - thanks that was exactly the point I was trying to make. This is a core problem, some of the basic functionality of Junit is hard to use. Before tackling new features let's make the basics simple. @David - you're correct most developers are using eclipse, maven and ant. Many of these bypass Junit mechanisms for finding and running tests. Why? Any chance it's because Junit doesn't yet do what they need? Perhaps with a more flexible Junit core the could reduce the amount of code they need to support Junit. That might make it easier to decouple the Junit innovation cycle from the other tools. @Charlie thanks for the clear explanation of what NUnit does. Thanks for all the other replies. I was busy at a client last week and will be this week too, hence my silence. I've just stolen 10 minutes during my kids ski lessons to reply via my phone. Please excuse the resulting errors. Trust @Marc to represent my key point well. Cheers Mark</body>
  </mail>
  <mail>
    <header>Re: Is it Time for JUnit 5</header>
    <body>It would be good if jUnit produces results while running test cases from eclipse IDE. Is there any option to run selective test cases, lets says one Java Class file contains 10 test cases. Can i run two test cases out of 10 instead of creating one Java class file one  test case (1 to 1) Like: @BeforeTest //Driver setup @Test _driver.get(" @Test _driver.get(" ..... list goes till 10. Thanks, Jeevan. On Wed, Dec 19, 2012 at 8:32 AM, Mirko Friedenhagen &amp;lt;mfriedenhagen@...</body>
  </mail>
  <mail>
    <header>Re: Is it Time for JUnit 5</header>
    <body>Not to stem the tide, but if there are individual features you'd like to see in any future version of JUnit, 4.x _or_ 5.x, the best place is the github issues repo at you've logged the feature request there, feel free to circulate it in a new thread on this list to drive discussion.  It may be that a feature you think requires a full version bump in JUnit 5 can be easily layered on top of current JUnit 4 features, once looked at in the right way. Oh, and message received on donuts.  :-)</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit 4.10 Documentation?</header>
    <body>Mark, Ah, that is frustrating.  Since it's a wiki, feel free to add the text that you feel would have been most helpful--if it turns out to be the wrong place, we'll move it where it needs to go.  Thanks!</body>
  </mail>
  <mail>
    <header>Re: Categories and JUnit</header>
    <body>We went through a round of trying to import ClasspathSuite into core JUnit. If I remember, everyone was on board with the general idea, but there were differences in coding style that made it hard to just drop in wholesale. If someone would like to look into giving something like that another try, I think it would be great.  Thanks,</body>
  </mail>
  <mail>
    <header>Jumi 0.2 test runner released</header>
    <body>version 0.2.241 was just now released. Compared to the JUnit test runner it is more expressive, which might be useful for JUnit 5, and it also has native support for running tests in parallel, which would already now be useful for JUnit 4. I'll implement JUnit backward compatibility soon in a following release, after which it will be possible to run JUnit tests with Jumi (including testing frameworks that support the JUnit test runner), but parallelism will be limited to the test class level. For test method level parallelism JUnit would need to implement its own Jumi driver The release announcement it at my blog:  -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Re:</header>
    <body>[This is a recording.] I'm on vacation, returning to the office Jan 7, 2013. Merry Christmas and Happy New Year! Bill</body>
  </mail>
  <mail>
    <header>Re: junit in three IDEs</header>
    <body>David, Yes - it something I regularly find possible with other languages and environments: The experience goes something like this: I want to unit test one class - so that means one file.  If I MUST pull in many other classes I am not really testing one class, therefore not really unit testing. I get a copy of this file then compile it, the compiler gives errors about missing dependencies - I create these as dummies - much like test first development - just enough of a file or class to make the error go away.  Next I add methods as needed by the code, then dummy up some return values if needed by the unit-under-test.  I figure in java I might use something like mockito to make this faster and easier. When I am done I have something that will compile, but no way to test it. I now write skeleton code to test methods of the unit-under-test.  I figure junit fits in here. The "extra" file (or files) that I have made are part of my "test fixture" - one time setup needed to plug in and test the unit-under-test.  I can now test the unit-under-test independently of other units which will get their own tests, and I don't need to pull in the world to do it.  It also gives me a clearer idea of the behavior of the unit-under-test (file, class, etc). Hopefully that makes my use case clearer. Fenn (Brian Fennell)</body>
  </mail>
  <mail>
    <header>Re: Categories and JUnit</header>
    <body>If there's interest, I'm happy to offer my RuntimeSuite for integration into JUnit: I don't know whether my coding style fits any better than ClasspathSuite's did. If necessary I'm willing to make it fit better, given some guidance about what "fit better" means. Dale -- Dale Emery Consultant to software teams and leaders</body>
  </mail>
  <mail>
    <header>Re: junit in three IDEs</header>
    <body>Fenn wrote on 27.12.2012 19:51: Are you perhaps coming from a background of working with languages where the primary type of Seams (see Working Effectively With Legacy Code) is Preprocessor Seam or Link Seam? For example C. In Java and many other languages we have Object Seams (e.g. polymorphism), which are much easier to use than Link Seams (in Java Link Seams are used very rarely - notably in the SLF4J library). And by using the right patterns the dependencies can be made explicit and configurable:  -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Re: junit in three IDEs</header>
    <body>Esko, Yes, theses linkages can be at the preprocessor time or at link time (for C).  For Perl they can be at run-time (since Perl gets compiled into bytecode at runtime) or at "compile time" (for the case of modules that are pre-compiled to bytecode, then seralized as bytecode to disk for later loading, but this is rare).  For Java dependency checking can be at compile-time or at runtime.  For Java runtime dependency checking an happen automatically, or when there is an explicit call to ClassLoader.loadClass(String). I am not able to access youtube from work because of our firewall, so I may be missing some of what you are trying to convey. The specific case I am trying to understand is unit tests for code where I have the source, so I am more interested in the compile time use case.  If I am working with existing code, and I don't want to make changes to the code just to test, I am not sure how polymorphism helps me - either I use the class that my class-under-test depends on from my existing code base, or I don't.  If I don't, I can create a class in my project with the same name and packagename, or I can subclass that class, but using a subclass is a code change, and I only want to test the existing code, not change it just to test it.  I can pass subclasses of needed classes as arguments to the methods of my class-under-test, but again to sub-class I either need to pull in the existing class or I don't, and if I am to unit test just one class - well I don't want to pull in anything I can avoid pulling in. Perhaps you are suggesting that I refactor for testability - which is an option, but not the usecase I am trying to understand. javac will throw an error if I have an import statement and the class to import is not there at compiletime. java will throw an exception at runtime if I have a class that compiled fine because the class was there at compile-time, but it is not in the classpath now.  In either case I can provide the original class or a class that simply has the same name and the same interface. I don't have to provide the entire interface, only the bits that are used by my class-under-test. My usecase can easily expand to 2 classes-under-test or 3 or 5 or 7, but I wanted to understand the 1-class usecase first.  I don't want to have to pull in then entire 50000 class project just to test one class. The following pages (see below) describe part of what I am talking about with subversion and eclipse, but I was hoping to get a compare and contrast of different IDEs, and how junit fits in specifically. I am a developer, this is how I develop, how is this supported by my Integrated Development Environment (or isn't).  htm rom-eclipse.html to-an-eclipse-project</body>
  </mail>
  <mail>
    <header>Re: junit in three IDEs</header>
    <body>Fenn wrote on 28.12.2012 18:07: If the dependencies of the system under test are interfaces, then you can create test dummy implementations of those interfaces and pass them in. Implementing interfaces doesn't have the disadvantages of implementation inheritance (e.g. the fragile baseclass problem - which is what I assume you meant by it being "a code change"). The classes that are part of the system under test are not changed - only their dependencies are replaced with test doubles. The related principles from  Inversion Principle and Open Closed Principle. The choice of IDE is orthogonal to how to unit test classes. -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Please read: impending transfer of KentBeck/junit github repo to junit-team/junit</header>
    <body>All, In order to make administration of the junit repo more flexible, Kent and I are planning to transfer the root junit github repo to the junit-team organization account.  This will impact you in a number of ways: - Issues and pulls will be referenced from  - Any local forks will need to be updated to the new upstream repo.  (See instructions at the bottom of  The transfer is subject to human approval within github, so we don't have an exact timeline to share.  Probably early next week. Let us know if you anticipate or experience any problems with this change. Sorry for the disruption,</body>
  </mail>
  <mail>
    <header>Re: Categories and JUnit</header>
    <body>Sorry for my post-holiday latency on this.  Dale, your offer looks intriguing.  I honestly can't remember what the issues were with ClasspathSuite.  The idea would probably still need a champion willing to take on renaming packages, adjusting formatting, and coping with me being a stickler for new code going into JUnit. Another, lower-effort idea would be to create an extensions section on the wiki, which would be an easy place to direct questions like Mark's to.</body>
  </mail>
  <mail>
    <header>junit-quickcheck: seeking feedback</header>
    <body>Hi JUnit, I've been working on junit-quickcheck ( wanted to solicit some feedback from potential users. junit-quickcheck uses the ParameterSupplier extension point of JUnit's Theories runner to feed a number of randomly generated values to a @Theory method, as opposed to prescribing @DataPoint(s). As its name suggests, it draws inspiration from the Haskell QuickCheck library ( Though the project is built with Maven, none of the artifacts it produces are deployed to a central Maven repo (yet). Some of its dependencies are still snapshot versions: they can be found here: runner that should be current with the JUnit 4.11 implementation, but: ParameterSignatures to carry a parameter's name org.junit.experimental.theories.*... depends on: If you choose to build junit-quickcheck, you'll need to build these dependencies too. I'm interested in any and all feedback, but am particularly interested in these items: -- Would size control be useful (e.g. maxSize on @ForAll)? Maybe size() gets computed on every generation, as with Haskell QuickCheck? -- Do we need different random distributions/@Frequency? -- What other basic generator configs would be useful? -- What other out-of-the-box generators would be useful? -- Is the behavior of the out-of-the-box generators sufficient? What should be changed, if anything? -- nextLong(min, max) and nextDouble(min, max) -- getting them to span the entire range. -- Is @SuchThat with OGNL and Paranamer useful, or cute but not that helpful? What about without Paranamer? Feel free to check this project out, and drop me an email or post issues to the project's GitHub site. Thanks for your time! Regards, Paul Holser</body>
  </mail>
  <mail>
    <header>Re: Categories and JUnit</header>
    <body>Dale, I'll support anything that allows me to drop supporting and hosting classpathSuite for good :) One additional thing you might consider: Marc (Philipp) outlined a way to use cpsuite using rules instead of a runner; that was maybe 2 yrs ago. I cannot remember the details but it looked like a superior invocation style to me at the time. Maybe you can dig out Marc's posting and have a look - or Marc can repost his approach here. cheers, Johannes</body>
  </mail>
  <mail>
    <header>Re: Is it Time for JUnit 5</header>
    <body>Hi Jens, I have to only agree. The time is getting still shorter for Java 8 release, and thus missing it would mean that JUnit as a nice framework will be too old. Also agree with David that watching the steps of other new frameworks is important as well. The modularity, as somebody mentioned, has to be also considered, but without knowing the outcome it is quite difficult. So perhaps template tests under new languages without having a framework should be written first to see what wants to be reached. Features and goals from other projects should be considered. BR, Tibor many nice ways to do thing become possible. Therefore I am wondering if other people agree that it might be time for a JUnit5 putting this new feature to good use.  JUnit) that registers a test for execution. It looks roughly like this: have to do is wrap the code block (i.e. closure) in a new new code block. call to test in a loop.</body>
  </mail>
  <mail>
    <header>Re:3</header>
    <body>&lt;a href="http://www.creation3d.org/market/cLearn%20How%20to%20Make%20Money%20Online"&gt;</body>
  </mail>
  <mail>
    <header>Re: Re: Is it Time for JUnit 5</header>
    <body>would mean that JUnit as a nice framework will be too old. Too old? Really? I think we have some time. There was some delay between TestNG being released and the release of JUnit 4.0, but JUnit 4 still got adopted. important as well. I was thinking about that. JavaScript is a functional language, but all of the JS test frameworks that I am aware of use JUnit-like syntax for defining test cases (JsUnit defines test functions at global scope, JsTestDriver uses methods on a class). If functional programming could change the paradigm for defining tests, you would think it would have happened in JavaScript. Am I missing something? Sure, you could use functional programming to write more powerful assertions, but that could be done in an assertion framework. The places I see where functional programming could help are Theories and parametrised tests. I think we could do that in JUnit4 with at most a new core Runner. Sure, there are many parts of the implementation of JUnit 4 that I would love to change, but building a new Java test framework from scratch would be a large effort. One often-forgotten piece is all the tooling (IDE integration, build tool integration, etc). - Kevin without knowing the outcome it is quite difficult. should be written first to see what wants to be reached. feature many nice ways to do thing become possible. Therefore I am wondering if other people agree that it might be time for a JUnit5 putting this new feature to good use. ScalaTest definition in JUnit) that registers a test for execution. It looks roughly like this: you have to do is wrap the code block (i.e. closure) in a new new code block. the call to test in a loop.</body>
  </mail>
  <mail>
    <header>Re: junit-quickcheck: seeking feedback</header>
    <body>Paul, This looks really fun and exciting.  It'll likely be several days before I can take a look, but I'm hoping others will take the time.  Thanks!</body>
  </mail>
  <mail>
    <header>Re: Is it Time for JUnit 5</header>
    <body>[..] Whenever I checked with my limited understanding of JavaScript and its ecosystem I was extremely week on the unit testing side of things. Also the JS syntax doesn't lend itself to usage of closures as part of a DSL. To be more specific. With ScalaTest FunSuites a test looks like this // the actual test code With Java8 I think it might look similar to this: // the actual test code In JavaScript it would look more or less like: // the actual test code In current Java: I think one can identify some difference in verbosity, which might be part of the reason why this style didn't become popular with JS. regards Jens</body>
  </mail>
  <mail>
    <header>Re: Is it Time for JUnit 5</header>
    <body>The Java 8 will be compatible with JavaFX on bytecode level. The same with lambda language, and other languages mentioned by the Oracle. It looks like NOT all lambda syntax works in the current JDK 1.8, but what I tried that works is the annonymous functions After decompiling, I found out that these functions were compiled to private package classes implementing java.util.functions.Block. As my lambda code (jdk lambda-8-b72), the framework would be able to receive these functions in Java compilation : JUnitCore#run(Runnable... blocks) calling it in lambda JUnitCore.run( ) or in Java JUnitCore.run( ) I do not know how it would be with the annotations on these functions, and encapsulations. BR, Tibor ecosystem I was extremely week on the unit testing side of things. the reason why this style didn't become popular with JS.</body>
  </mail>
  <mail>
    <header>Re: Is it Time for JUnit 5</header>
    <body>The Java 8 will be compatible with JavaFX on bytecode level. The same with lambda language, and other languages mentioned by the Oracle. It looks like NOT all lambda syntax works in the current JDK 1.8, but what I tried that works is the annonymous functions These are compiled to private package classes implementing java.util.functions.Block. In my guess, the framework may be able to receive these functions like: JUnitCore#run(Block... blocks) calling it like JUnitCore.run( ) I do not know how it would be with annotations on these functions, and encapsulations. BR, Tibor ecosystem I was extremely week on the unit testing side of things. the reason why this style didn't become popular with JS.</body>
  </mail>
  <mail>
    <header>Re: Re: Is it Time for JUnit 5</header>
    <body>On one thing, I'm of the same opinion as Kevin: most of what we'd want to do in response to JUnit 8 could happen in a custom Runner, and I think that should be the primary focus of any early Java-8 driven exploration. I do think that a lambda-driven style has some interesting advantages. JUnit &amp;lt;= 4 uses Java as a substrate for its own weird domain-specific language.  Spend enough time with it, and it doesn't feel completely foreign, but it's not really Java.  The main driver for this is that a test is a named block, and reflectively-retrieved methods have, until now, been by far the cheapest syntactic way to create a named block. With lambdas, you can now enable an even cheaper named-block syntax: Now, rather than having to enable all kinds of weird annotation-driven extension schemes, extensions can be built in the natural Java way, through function composition and inheritance.  Create a paramTest function, and you've got parameterized tests: Push further, and the line between assertions and tests begins to look a little fuzzy.  I'm not sure what lies beyond that particular quantum limit, though.  :-) FYI, note that QUnit is a JavaScript test framework that does take this approach ( In general, the first few test frameworks that get released for a language often include at least one whose chief advantage is its familiarity for XUnit users*; later, many users often settle into a framework that fits the grain of the language better.  Since I've never been able to figure out what the grain of JavaScript is, I can't say which frameworks are in which camp. *  (the most extreme example being .NET: NUnit's first release was a method-name-for-method-name clone of JUnit (3.7?), down to methods designed to detect if the test was running on the quirky VisualAge VM, which had no .NET equivalent)</body>
  </mail>
  <mail>
    <header>Re: Re: Is it Time for JUnit 5</header>
    <body>So instead of writing @Test("Here is my test name") You write And instead of @ParamTest("Name") you write is this what you mean? weird. The Javascript version you linked seems at least a bit more sane, although I guess that is a property of how the language seems to implement that and not the framework. But yeah, I am just old and set in my ways. .NET has had this stuff for a while now right? So how does NUnit make use of this stuff? Would be nice if some of these proposals were collected somewhere, although I would probably not wander there anyway.. :) Teemu</body>
  </mail>
  <mail>
    <header>Re: Re: Is it Time for JUnit 5</header>
    <body>Agreed, I don't see much benefit to this and lambdas are certainly not designed to replace straight method definition and/or calls. As far as testing goes, I see lambdas being much more useful in client libraries than testing frameworks themselves. -- Cédric</body>
  </mail>
  <mail>
    <header>Re: Re: Is it Time for JUnit 5</header>
    <body>Hi All, One benefit of tests-as-lamdas, that is also enjoyed by Teemu's @Test("Here is my test name") annotation, is being able to express a test name as a string instead of an identifier, as is required when the test name is taken from a method name. Although in Scala there's a way to write a test method with spaces and other non-identifier characters in it, in Java a method name will likely have to be camel case (void hereIsMyTestName() ... ) or use underscores (void here_is_my_test_name() ...). I think the lower friction of being able to write test names as strings encourages, or at least makes less finger work, to write descriptive test names. I think that's a good thing. Another potential benefit is that you can dynamically register tests at runtime. It's useful, but my observation with ScalaTest is that it's been used pretty rarely in practice. Most times people just write tests by hand, and that works just fine when tests are methods. But it is handy when you need it. One downside of tests-as-lamdas compared to tests-as-methods in the Scala world is that test method compile faster than test lamdas, because there's a slight compiler overhead for dealing with lamdas. I have no idea whether this would be the case with the Java 8 compiler, but it may be worth measuring when the time comes. Bill -- Bill Venners Artima, Inc.</body>
  </mail>
  <mail>
    <header>Re: Re: Is it Time for JUnit 5</header>
    <body>Teemu, Neither of the first examples that you state are actual JUnit 4 BlockJUnit4ClassRunner syntax, so I'm a little confused about what your comparison entails.</body>
  </mail>
  <mail>
    <header>Re: Re: Is it Time for JUnit 5</header>
    <body>Hi David, It is just a comparison of what the method-style vs the lambda-style could look like. I guess the main difference is that the current style does not use a specific test name but that would not be too hard to add if needed. Teemu</body>
  </mail>
  <mail>
    <header>Re: Categories and JUnit</header>
    <body>All, as Johannes mentioned, I worked on integrating ClasspathSuite into JUnit core over two years ago. At the time, Kent and David were in the process of introducing a new runner named SuiteBuilder. However, SuiteBuilder was never released and my branch never merged. You can still take a look at how the usage would have looked like here:  148058da827d3897672be2959c132dcbd/doc/ReleaseNotes4.9.html In fact, SuiteBuilder and RuntimeSuite look very similar from a usage point-of-view. David, I'm sure you can explain the rationale behind not releasing SuiteBuilder in the first place, can you? Besides that, I would definitely support including RuntimeSuite into JUnit core. I'm not a lawyer, will the different licences be a problem? Cheers, Marc Am 10.01.2013 um 08:27 schrieb jlinkyh: classpathSuite for good :) cpsuite using rules instead of a runner; that was maybe 2 yrs ago. I cannot remember the details but it looked like a superior invocation style to me at the time. Maybe you can dig out Marc's posting and have a look - or Marc can repost his approach here. in work veryyyyyyyy slow slow much their</body>
  </mail>
  <mail>
    <header>Re: Categories and JUnit</header>
    <body>Marc, Thanks for remembering more of the history than I did. If I remember correctly (and obviously my memory is suspect, here), it wasn't that SuiteBuilder was a competitor to ClasspathSuite, it was just a different style of building suites, which we'd hoped to release and base something like ClasspathSuite on top of.  The main difference was allowing for an object to be the source of behavior modification, rather than increasingly complex annotation-based schemes (similar to the move from @Before/@After to Rules). I think that we simply ran out of energy or time before getting the code shippable. Certainly, we'd want to make sure that Johannes was comfortable re-licensing his code to us. If you have time and energy to make this a reality, I think it would definitely be interesting. One question would be whether this would be something we'd want in JUnit core, or perhaps try to re-vitalize an extension project like junit.contrib (which might be easier now that more people could get the new functionality just by repointing their maven dependency?), or just a family of small extensions.  148058da827d3897672be2959c132dcbd/doc/ReleaseNotes4.9.html</body>
  </mail>
  <mail>
    <header>Re: Is it Time for JUnit 5</header>
    <body>Esko, Thanks for your thoughts, and your work in this arena.  I haven't had a chance to take a deep look at your work, but look forward to doing so. The motive for creating a new breaking version would be several-fold: - Primarily, it's always been my opinion that a unit-testing framework should "fit the grain" of the host language.  It is looking like the transition from Java 7 to 8 will be an even bigger shift in the grain of Java than between 4 and 5.  There's been a lot of things we've wanted to do all along with JUnit that I've designed first in my head the way they would have worked in a language with lambdas, and then redesigned to fit the grain of a lambda-less language.  Assertions (and mocks) have especially contorted themselves in ways that they might finally now be able to relax. - Secondarily, personally, there are some core decisions made very early in the design of JUnit 4 that are beginning to show their age, and are hard to figure out how to fix while leaving everything intact: node, and a mutable builder for the test structure, and then later an immutable reference for the test structure, is exasperating. causes some awkwardness. before any is run places some binding constraints, and should be at most optional in a world in which tests are often run by daemons many more times a day than by humans. are developers.  Passed/Failed?  Passed/Failed/Skipped? Passed/Failed/Ignored, etc.  The current design bakes one required system pretty deep into the internals, unnecessarily. Now, should the framework to which I'd contribute time to fix these problems be called JUnit 5, or something entirely different?  That's another kettle of fish, with some interesting options to consider.  Looks like we have at least 9 months to consider them at length.  ecsy/java/JavaSpecsyExample.java  specsy/groovy/GroovySpecsyExample.groovy</body>
  </mail>
  <mail>
    <header>Re: Thoughts on Test Case Design / Execution</header>
    <body>Corey, I think you're on the right track: I think a solution to #45 would give you what you're looking for.  Barring that, you're probably best off forking, renaming, and patching Parameterized yourself.  Good luck,</body>
  </mail>
  <mail>
    <header>Re: Thoughts on Test Case Design / Execution</header>
    <body>David, My understanding of the JUnit architecture is that a new Java instance is created for each test. Would I be correct in assuming that in order to implement the requirements detailed in #45 it would need to deviate from the standard architecture? If so, do you see that as a problem? Thanks, Corey</body>
  </mail>
  <mail>
    <header>Re: Is it Time for JUnit 5</header>
    <body>David Saff wrote on 13.12.2012 17:47: Yes, assertions could probably get much benefit from lambdas. I support the idea of having assertions as a separate library which is decoupled from the testing framework (the same way as Hamcrest, FEST-Assert and probably others). The testing framework would then focus fully on the test execution model (e.g. test isolation, execution order, rules and other metaprogramming). There is wide variablity in how assertions can be done (especially in different languages). I don't have strong opinions about what an assert should be like, and seems that there are as many kinds of asserts as there are testing frameworks. There is less variablity in testing frameworks' execution model, but those differences are often at a more fundamental level (e.g. test isolation vs. shared state). I and others hold strong opinions about them. Thus I would like to be able to mix and match the frameworks and assertions separately, sometimes even using multiple assertion libraries in the same test. I've noticed those as well. I've already addressed each of those in Jumi: - A testing framework must assign a unique immutable TestId for each test in a test class, which is then used to send events of when the test was started, finished, failed etc. The TestId implies a tree structure of tests (to be used in test result reports). Everything is expressed as immutable events (Jumi relies heavily on Event Sourcing). See details at  - The fi.jumi.api.drivers.Driver which corresponds org.junit.runner.Runner requires a zero-argument constructor. The test class et al is passed as method argument to  - Jumi starts executing tests as soon as possible, at both the suite and test class levels. At suite level, test class execution starts asynchronously before all test classes are discovered (i.e. before Jumi has finished traversing the directories containing test classes). At test class level, more tests can be found during test execution (for example Specsy requires this) and the new test executions can be started asynchronously in parallel (depending on the testing framework and whether the user has disabled parallelism for that test class or the whole suite). That's been on my mind for a long time, but I haven't yet figured out a good way to support all the variations, so I'm deferring the decision. I would love to hear your ideas. A very flexible way would be to allow tagging tests with arbitrary keywords, but then the problem will be that how each of those keywords should affect the user interface. There would have to be at least some keywords with specific meaning, which brings us back to the original question of which states to support. To get started we could list all the variations in use today and the use cases for using each of them (e.g. it's an acceptance tests for a feature which has not yet been implemented). I'm hoping there to be 5 or less different reasons that are served by test statuses. 9 months, like giving birth to a baby. I suppose the names of quite many people have been pondered for that long. :) JUnit's name is well known, so it's a marketing bonus. On the other hand, the software industry moves quickly and good technology can get popular regardless of its name. -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Re: Is it Time for JUnit 5</header>
    <body>There's a lot of interesting stuff to chat about in your mail.  I'm swamped at work until mid-next-week, so please don't take a couple days of silence as lack of interest.</body>
  </mail>
  <mail>
    <header>Re: Thoughts on Test Case Design / Execution</header>
    <body>Hmm.  If @BeforeParametersRun were static, and was passed in the parameters about to be used, would it allow you to accomplish you what you're looking for?</body>
  </mail>
  <mail>
    <header>Re: Thoughts on Test Case Design / Execution</header>
    <body>I don't think a static implementation that has shared state would work. In my case those parameters used in @BeforeParameterRun would be unique to each run and I wouldn't want to potentially impact another run. Assuming this requires a break from the architectural standard of JUnit do you think this is something that would ft as a modification to the existing Parameterized runner or should it be a new runner? Thanks, Corey</body>
  </mail>
  <mail>
    <header>Parameterized Test with Rules (withou special Runner)</header>
    <body>If anybody wants to use parameterized Test, but can't use the Parameterized Runner, she migh be interested in an approach based on Rules:  les/ The idea is to have the current parameter value available from the rule and make the rule iterate through the different values, passed in at construction time. The source code is available at github:</body>
  </mail>
  <mail>
    <header>Re: Is it Time for JUnit 5</header>
    <body>+1 : Separate library would certainly help those of us who are trying to manage large teams and to ensure they do things like use assertThat(blah, is(blah)) instead of assertEquals(blah, blah) (assertThat is type safe for refactoring, where assertEquals isn't) Nice!  I like the idea of getting on with probably CPU bound stuff while may be IO bound on class scan I'd love to see status improvements.  A classic case is assumptions.  We want to show failed assumptions on our Jenkins dashboard. I think JUnit has a philosophy of simplicity.  Delivering more simplicity would be worthy of the name JUnit 5 (or should 5,6,7 be skipped and call it JUnit 8 ;) ) Neale</body>
  </mail>
  <mail>
    <header>Re: Thoughts on Test Case Design / Execution</header>
    <body>For anyone interested I put a proposal together to implement my requirements:</body>
  </mail>
  <mail>
    <header>Re: Is it Time for JUnit 5</header>
    <body>Thinking more about this, I think that what defines JUnit, as Neale points out, is its philosophy, and the community of people who buy into that philosophy.  So I think that when considering a new version, we could certainly consider strongly following the design examples of other frameworks, like Jumi or others, but in the end, a JUnit 5 would be built piece by piece by submissions to this community. I think also that the compatibility between JUnit 3 and JUnit 4 was instrumental in making it useful for teams, and I'd like to see a similar focus on backward compatibility moving forward. One last thought: one of the biggest confusions about JUnit 4 was the fact that it was both a version number referring to a new release of a software package, _and_ the only useful name for the collection of new libraries included in that release.  Starting in JUnit 5, I think a different naming scheme would be quite helpful.  Choosing a scheme that I'm positive we _won't_ use, for example: - The runner and interfaces introduced in JUnit &amp;lt;= 3 would be JUnit Cupcake - The runner and interfaces introduced in JUnit 4 would be JUnit Donut - The runner and interfaces introduced in JUnit 5 would be JUnit Eclair Thanks, On Mon, Dec 17, 2012 at 6:42 AM, Neale Upstone</body>
  </mail>
  <mail>
    <header>JUnit 4.10 Documentation?</header>
    <body>I'm newly back in the land of Eclipse for a few weeks and I'm trying to get my head wrapped around the minutia of JUnit 4.10 and Hamcrest.Core 1.1.0 as these are what come with Eclipse Juno. Where it up to me I would just upgrade to the most current JUnit and Hamcrest but its probably best I stick close to the client's devenv. Is there an elegant way to see the old documentation? Perhaps some git magic of displaying all wiki pages labelled 4.10? In addition is there some way to find the list of supported Hamcrest matchers? I spent an hour this afternoon trying to get greaterThan() to work. Either I don't know the right package or its not included in Hamcrest.core. Thanks Mark Levison - human part time</body>
  </mail>
  <mail>
    <header>Re: Parameterized Test with Rules (withou special Runner)</header>
    <body>Very clever.  I'd love to make it easier to make a system like this do all the right things, including generating a new version of the test class per data point.  But this could likely get many people 50% of the way there.  les/</body>
  </mail>
  <mail>
    <header>Categories and JUnit</header>
    <body>In the land of NUnit when I find a client has written some veryyyyyyyy slow runnnnnning tests I encourage them to use categories to label the slow stuff and then we just run them separately. That works well enough to allow clients to start digging themselves out of the hole called Database/FileAccess in a unit test. This is doable because NUnit allows to specify /include and /exclude from the command line. So you just feed it the assembly name and /exclude and it runs your tests without the slow stuff. Now back in the land of JUnit 4.10 (included in Eclipse), I just assumed that something similar would hold true. But I'm confused, I can live without the handy command line options although they do make life much simpler. How do I make Categories work I tried writing this code: @RunWith(Categories.class) @IncludeCategory(SlowTests.class) But that fails with an initialization error - claiming I'm missing a constructor (who knew). So then I tried: @RunWith(Categories.class) @ExcludeCategory(SlowTests.class) And while it works we see to back in the world of JUnit 3.8.1 - where everything had to be declared in suites and we often forget to add test classes. Help me see that I'm missing an easier, more obvious and better way. It **almost** seems better just to move the slower tests to their own separate tree (yes that has its own problems). Cheers Mark Levison</body>
  </mail>
  <mail>
    <header>Re: Is it Time for JUnit 5</header>
    <body>Hi David, JUnit for me is still the de facto standard for unit testing in Java. It's integrated in all the major IDEs from the start. It's known by pretty much every Java Developer. Even if they don't use it or don't use it well, it's still the first unit testing framework that comes to mind. This has probably to do with the trust in the people who guide and develop JUnit. But I really don't know Moving towards JUnit 5 I think it will be hard to to loose this status, I think. When it makes sense to use an existing library (and licences allow), I see no principal problem in reusing something like Jumi for JUnit 5. I have no idea, whether that makes sense at all, since I didn't look into Jumi. I just don't think that JUnit 5 should necessarily be "built piece by piece by submissions to this community". Using Hamcrest inside JUnit 4 was a great move and it is an external library. I also think, that backwards compatibility for executing JUnit 4 Tests at least is a must. If I can't gracefully migrate towards JUnit 5 I would have a problem and many other as well. I'm not sure whether we still need JUnit 3 support, though. JUnit 4 is old enough, that I think we could kill JUnit 3 if that makes things easier. I think JUnit 4 was a great naming. I made clear, that the new software release also brough the new libraries. I don't see that as a problem. And doing the same with JUnit 5 would be consistent with that. So when JUnit 5 changes the interface for tests and also brings a new release (of course) I would still call it JUnit 5 and everyone should know what's meant. I think it would be much more confusing If you started to introduce two names. One for the software release version and one for the interface. Then I would have to say something like: I use JUnit 5 but I'm writing JUnit Donut style tests? And who can remember those strange names anyways? Do you remember the last two names of Eclipse and can sort them? Or any other product that uses naming for that matter? I can't. But I can easily remember JUnit 3, 4 and 5. And I have no problem in stating that I use JUnit 5 with JUnit 4 style tests. On the other hand I strongly believe that, whatever you do, it will work out ok for two reasons: 1) JUnit is just too established and too well known. 2) I trust in Kent and you, to stear JUnit in a good direction and to listen to the community. Greetings,</body>
  </mail>
  <mail>
    <header>Re: JUnit 4.10 Documentation?</header>
    <body>Mark, If you're looking for 4.10 Javadoc you can find it here:  This includes Hamcrest Javadoc as well. I hope this helps! Corey I'm newly back in the land of Eclipse for a few weeks and I'm trying to get my head wrapped around the minutia of JUnit 4.10 and Hamcrest.Core 1.1.0 as these are what come with Eclipse Juno. Where it up to me I would just upgrade to the most current JUnit and Hamcrest but its probably best I stick close to the client's devenv. Is there an elegant way to see the old documentation? Perhaps some git magic of displaying all wiki pages labelled 4.10? In addition is there some way to find the list of supported Hamcrest matchers? I spent an hour this afternoon trying to get greaterThan() to work. Either I don't know the right package or its not included in Hamcrest.core. Thanks Mark Levison - human part time</body>
  </mail>
  <mail>
    <header>Re: Is it Time for JUnit 5</header>
    <body>[Hmm... I was expecting Cupcakes, Donuts and Eclairs for lunch on Thurs when I visit Google (London) for lunch tomorrow :)] One possible change from 4 including the libraries would be to pull out a junit-core, which would define the runners and interfaces. Perhaps there would also be a junit4-compat or something which would allow breaking changes to be adapted to run via existing JUnit4 interfaces, or the other way around, for JUnit4 to be able to run seamlessly from new APIs via adapters. Certainly ensuring a smooth transition is important, given the number of place JUnit is consumed.  I'd say it'll also be important to allow them to upgrade to the JUnit 5 API for better features</body>
  </mail>
  <mail>
    <header>Re: Is it Time for JUnit 5</header>
    <body>Neale Upstone wrote on 19.12.2012 10:48: +1 That's why JUnit backward compatibility is very high on Jumi's TODO list, right after automatic test discovery. It's probable that I'll get to implement it during this winter holiday. Jumi's expressiveness is a superset of the JUnit test runner, so it should work out quite nicely. I think Jumi's API is more fail-fast than JUnit's test runner API, so some misbehaving custom JUnit runners might fail to run, but I'm expecting those to be in the minority. Vanilla JUnit 3 + 4 compatibility is most important. -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Re: JUnit 4.10 Documentation?</header>
    <body>Corey - thanks that's a great start. Is there any chance that the wiki is tagged for v4.10 and I could look at the examples in that context? Cheers Mark -- Cheers Mark Levison Agile Pain Relief Consulting</body>
  </mail>
  <mail>
    <header>Re: JUnit 4.10 Documentation?</header>
    <body>Mark, Not that I know of. Sorry. Corey</body>
  </mail>
  <mail>
    <header>Re: Is it Time for JUnit 5</header>
    <body>Hello Esko, junit compatibilty would probably allow to use maven's surefire plugin, so this would be really nice. Regards Mirko -- Sent from my mobile</body>
  </mail>
  <mail>
    <header>Re: JUnit 4.10 Documentation?</header>
    <body>C'est la vie. Suggestion (to David, Kent et al) for future releases - its really helpful to tag the wiki for each release so that people stuck working with older versions of JUnit don't read the current documentation and get hung up on the imports. Between 4.10 (at least I think that's the version Eclipse Juno ships with) and the current wiki something changed about a few of the imports. Net result trying to apply what's in those docs fails. I'm happy that JUnit is still evolving but its helpful if people stuck two minor releases back can find some examples that work in their world. Cheers Mark -- Cheers Mark Levison Agile Pain Relief Consulting</body>
  </mail>
  <mail>
    <header>Re: JUnit 4.10 Documentation?</header>
    <body>Mark, We only recently switched to the wiki format, so the examples you see there are going to be weighted toward recent code, and especially how to use recent features.  That said, what were one or two of the examples that failed for you?  (They might be simply broken).</body>
  </mail>
  <mail>
    <header>Re: Categories and JUnit</header>
    <body>Mark, I think what you want is a still-missing-feature, rather than a regression "back [to] the world of JUnit 3.8.1".  With or without categories, JUnit doesn't have a built-in way to run everything on the classpath, or in some particular jar.  Generally, this is supplied by the framework using JUnit, be it maven, ant, Eclipse, etc. There's a couple of paths to the future you're probably hoping for.  If Eclipse had built-in support for category inclusion/exclusion on JUnit run configurations, would that give you what you need?  Thanks,</body>
  </mail>
  <mail>
    <header>Re: Categories and JUnit</header>
    <body>You might want to take a look at ClasspathSuite  It runs all the tests on the classpath and support exclusions. Greetings,</body>
  </mail>
  <mail>
    <header>Re: Categories and JUnit</header>
    <body>Interesting in the .NET world the Unit Testing tool supplies this as part of the test runner (exception JetBrains who roll their own test runner causing untold problems). Naively I just mapped my experience from there back here. I remember to use Beginner's mind, Beginner's mind. Sure but then you would need to build the support into Maven etc. I'm confused why doesn't eclipse ask JUnit to enumerate the list of tests in batch of .class/.jar files? That way you could apply any filter etc you wanted. Added bonus do it on a lazy eval basis and parameterized attributes work well (ala NUnit again). Martin the Classpath runner you linked to is exactly what I'm looking for. Maybe in another life this could just be integrated in JUnit. The classpath runner is even more elegant since it allows for text filters. Cheers Mark - Brain not quite in JUnit gear. -- Cheers Mark Levison Agile Pain Relief Consulting</body>
  </mail>
  <mail>
    <header>Re: Is it Time for JUnit 5</header>
    <body>Mirko Friedenhagen wrote on 19.12.2012 16:32: I'm talking about JUnit backward compatibility - that you can run JUnit tests using Jumi. Surefire is on the other side of the toolchain. Maven integration is very important for Jumi's adoption, you don't need to worry about that. It remains to be seen whether it will be easier to modify Surefire or to build a new plugin. I've looked at Surefire's support for test runners (JUnit, TestNG, POJO) and they are not ideal for Jumi, because Jumi's scope includes half of what Surefire does. Jumi's scope includes taking care of test discovery and creating the JVM process. That overlaps with Surefire's responsibilities (as well as every other build tool, CI and IDE). One reason for taking over those responsibilities is to make the tests run the same way regardless of whether they are run from within and IDE or a build tool. Currently there are slight differences in classpaths, working directories etc. when running the same tests from different tools. Another reason is to enable better usability on the IDE side. Supporting the same reporting format as Surefire uses is also important, because many CIs already know how to parse that format. In the long run, to expose all the information that Jumi provides, a new reporting format may be created. (Jumi anyways persists an event log of test executions, so other tools could use Jumi's libraries to read that same file format.) -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Fwd: Re: JUnit 4.10 Documentation?</header>
    <body>David - I don't remember the mistake. There is a possibility that it was in all the confusion I was having trying to get hamcrest to work. As soon as I realized hamcrest existed I tried to make use of it greaterThan - wanting to test if an integer was '&amp;gt;0'. I quickly found hamcrest syntax on the web that works. However much digging made me realize that it probably comes from hamcrest-all.jar and in a later version than JUNit currently includes. If I could change one thing about the documentation in that case - I would make it clear (possibly on the first wiki page), JUnit continues a limited subset of hamcrest at an earlier version than is documented on many websites now. Net result playing with current hamcrest samples can be harmful to your mental health. THanks for your help Mark -- Cheers Mark Levison Agile Pain Relief Consulting</body>
  </mail>
  <mail>
    <header>Re: Is it Time for JUnit 5</header>
    <body>Hi All, I agree with Malte that the name "JUnit 5" would make most sense to users, despite the problems with version numbers. I'd enjoy helping with the effort when the time comes. I'm an old Java guy still, despite my recent focus on Scala, and I could bring some experience of actually using in a testing context features similar to those that will be made available to a JUnit 5 via Java 8 (lamdas, extension methods, etc.). Bill -- Bill Venners Artima, Inc.</body>
  </mail>
  <mail>
    <header>Re: Is it Time for JUnit 5</header>
    <body>Just to agree with everyone, I also like the name JUnit 5, without any donuts. I also hope it will be kept simple, at least in the core. I really have not found any need for the rules, parametrizations, and whatnot. Support for easier extension of the tool would be great and maybe that would be the main thing for me. Provide a chance to extend in whatever direction, including IDE integration without knowing everything about the tests before running them, and that would be great for the core for me. Then people could pile their stuff on the top. So, maybe a bit more modular but preferrably not requiring me to download 20 jars making the install not so simple.. Teemu</body>
  </mail>
  <mail>
    <header>Re: junit in three IDEs</header>
    <body>Really, you have to adjust. Being a Java Developer is all about tool-support. Your approach simply makes no sense. Even SSD space is cheap, Ram is cheap, connections are fast. Checkout/pull junit with IntelliJ. It will ask you to open the project. If you have configured a SDK other than 5 got to project settings (ctrl+alt+shift+s) and choose the one that you favour. The project will be up and running. Checking out and configuring takes me around 1 minute. IntelliJ is the most keyboard-centric IDE i know. If you want to know a shortcut simply use ctrl+shift+a to search for the command and see the shortcut. You will not immediately know about all benefits but as soon as you have learned to use the IDE properly and learned about real Java development you will laugh at the idea of coding using vi. Wanting to develop effectively and staying with vi/working on just a few files simply does not mix. Developing Java (or any other advanced OO language) means a lot of refactoring all the time. You will switch approaches constantly. Create/delete classes, move methods, rename methods/parameters, change configuration, ... Without proper tool support this is hard work. Also you will never get the style a project is coded in and its design without looking at the whole. For instance the code ive seen in junit so far is not the typical code style of a java project. I think a lot of code comes from people with a C background. If I would add a class the way I usually write it it would simply not fit in. I cannot go into more detail but it would be a good idea to just drop the bearded-unwashed-linux-freak-attitude and give it a try. If you really are open to something new I promise that you will not regret it. But dont take it lightly. It will take a few years to adjust and learn how to effectively use the tools. Also theres a lot of blog-post reading, tutorial watching aso. A good place to start to look at how things are served in the Java world is respond with "i dont use flash". Thats another thing I dont want to discuss about any more ;) Regards, Henning.</body>
  </mail>
  <mail>
    <header>Custom MethodSorter</header>
    <body>I'm looking at creating my own MethodSorter. Is there documentation on how to do that, and is it even possible? -- Eirik There is no high like a tango high There is no low like a tango low</body>
  </mail>
  <mail>
    <header>Thoughts on Test Case Design / Execution</header>
    <body>I support a vendor application for which we've built a framework on top of to perform browser based testing. Given that our data changes quite a bit there are a large chunk of test cases that I'd like to extract the data out of and put in an external data store such as a database. Ideally I'd like to create a "test run" in the data store that contains a unique identifier and the data for a particular test and then execute it by providing the unique identifier to JUnit. JUnit would then pass this along to the correct test classes. I apologize for the overly vague description, but what would be the most efficient use of JUnit for this use case? It would seem the solution would be two fold. First, I'd create Parameterized tests that read the test data from the data store based on provided unique identifiers. Second, I need a way to pass the set of unique identifiers to the tests themselves. Would the best approach for this be a custom runner? Thanks for your time, Corey</body>
  </mail>
  <mail>
    <header>Re: Custom MethodSorter</header>
    <body>Hi, I've just answered your question on Stack Overflow  s-fixmethodorder . Matthew Farwell.</body>
  </mail>
  <mail>
    <header>Re: Custom MethodSorter</header>
    <body>Question: why do you want your own method sorter? As Matthew mentioned in his StackOverflow response, it's best to make test methods not dependent on each other -- Kevin</body>
  </mail>
  <mail>
    <header>Re: Thoughts on Test Case Design / Execution</header>
    <body>It would seem that you could use Parameterized, and have a @Parameters method that would read the unique identifiers out of a system property or file.  Would that work?</body>
  </mail>
  <mail>
    <header>Re: Custom MethodSorter</header>
    <body>I'd like to see a random method sorter.  That would give better confidence that your tests *are* independent.  Is it worth raising a ticket for this?</body>
  </mail>
  <mail>
    <header>Re: Custom MethodSorter</header>
    <body>If it was random, how would you reproduce the problem if a particular ordering caused a failure? IMHO, doing this would make the test suite appear flaky. Flaky tests produce a broken window affect. In other words, when many developers see flaky tests, they just keep re-running them until they pass. -- Kevin</body>
  </mail>
  <mail>
    <header>Re: Custom MethodSorter</header>
    <body>Have the seed outputted for that test run and, if they fail, have a way to specify that same seed for another run?</body>
  </mail>
  <mail>
    <header>Re: Custom MethodSorter</header>
    <body>Maven's Surefire has a nice option where one order is used on even hours and the reverse order on odd hours... So it flips between two reproducible orders... And the worst case you need to wait 1 hour to confirm.</body>
  </mail>
  <mail>
    <header>Re: Custom MethodSorter</header>
    <body>Dne St 5. prosince 2012 20:41:04, James Shaw napsal(a): Déjà vu. Various options were discussed at  -jt</body>
  </mail>
  <mail>
    <header>Re: Custom MethodSorter</header>
    <body>I'm aware that JUnit discourages such dependencies. They work well for us, however, and we're going to keep having them (Either through method naming, or through a custom MethodSorter which would use a custom annotation). in dependent on on how</body>
  </mail>
  <mail>
    <header>Re: Custom MethodSorter</header>
    <body>First, my bad for putting the question up multiple places. I'll use the mailing list for discussions, then respond at Stack Overflow. Now, in you response you write "This isn't easy, and is discouraged, because JUnit doesn't encourage dependent tests." I'm not quite sure what that means :-). Is is possible, or not? Looking at the source code, it might just look impossible, but maybe someone knows something I don't? "Cannot be done" or "Yes. It's discouraged, you do it by..."? And of course, from there on it gets messy :-) I know that JUnit doesn't encourage dependent test, and if our IDE of choice had better support for Testng (who doesn't have this particular sentiment), we'd just go down that route. But it doesn't, and now JUnit does support ordering, so we're trying to adapt to that. With JUnit 4.11, we've got a way. If we find a way to create our own MethodSorter (which I hope for), we're good. If JUnit should provide its own mechanism (which I might dream of, but not hope for), it would be even better. Until then, method names are it, and now we've got methods named "test01_insert" and "test02_copy". It's not ideal, and I'm a bit sad that the test framework insists so hard to not support us in our usage pattern, but I think that ship has sailed. Eirik  or-junits-fixmethodorder I'm looking at creating my own MethodSorter. Is there documentation on how&amp;gt; &amp;gt; to do that, and is it even possible?</body>
  </mail>
  <mail>
    <header>Re: Re: Custom MethodSorter</header>
    <body>It is possible, but you might need to write your own Runner. I had a pull request a while back that allowed you to designate groups of methods that must "happen before" other methods but would not dictate the sequence within that graph, but then we lost interest it pursuing that line of testing. JUnit sees itself as purely for Unit tests. Unit tests by their very nature are supposed to be fast, so if your test requires setup from a previous test... just invoke the previous test as your first step in your "dependent" test, so you'll have something like It doesn't matter what order the above tests are run, and dependencies are clearly called out. OK, so the something() method gets invoked 3 times, but these are Unit tests, so it doesn't matter, and you have clean setup of the fresh Foo instance created for each run. Also, by the way, true JUnit style is *one* assert per test method... ok nobody does that all the time... though when I have done it it has proved really useful. TestNG cares about more than just Unit tests... when you hit more heavyweight tests, then you need to care about test sequencing as you really want to try and keep the number of asserts per method down so that you get a fine grained view of test failures. What I have wanted to see in JUnit is a way to mark smoke tests for features. If the smoke test fails then all the tests that cover that feature would be skipped. The danger of such support is that it would be tempting to abuse for sequencing tests ;-) -Stephen</body>
  </mail>
  <mail>
    <header>Re: Custom MethodSorter</header>
    <body>Sorry to skip back to the top question. As many people point out, if you're doing this because test B only operates as expected if test A runs first, don't do that.  There are lots of ways to avoid that, and I'm happy to talk about it. On the other hand, if the reason you're doing this is to order independent tests in a way that puts fast or often-failing tests near the beginning of a run in order to enhance feedback time, I totally understand what you're going for, so let's pretend that's why you want to do it. Don't use MethodSorter.  It's at a lower implementation level than you likely want. Instead, write a custom runner: Now, you just have to define createDelegate(...) and createSorter(...). For a fully general solution, you could make new annotations, to enable: @RunWith(Sorted.class) @SortedRunWith(JUnit4.class) If you (or anyone listening) wanted to take a go at making a pull request to add something like that to the core, I think it would be useful. However, to just get your job done, you might go ahead and hard-code the particular Runner and Sorter that you want. Good luck,</body>
  </mail>
  <mail>
    <header>Re: Custom MethodSorter</header>
    <body>operates ways to independent beginning of you're Let's pretend :-) We already use custom runners for a couple of scenarios, so that's definitely a way. Still, sorting the methods would be exactly what we needed, so we were hoping to use that new and shiny feature. And that's probably what we will do, although using sortable method names ("test010_runFirst", "test050_runFifith", etc). Quick, easy, and good enough.</body>
  </mail>
  <mail>
    <header>Re: Custom MethodSorter</header>
    <body>--- In junit@yahoogroups.com, Stephen Connolly I know, I know... JUnit and me never quite agreed on that, and while JUnit doesn't want to be used that way, I still do, and am happy with the results. Use, abuse... :-) Anyway, my original question was not as much on making it possible (we already have custom Runners in our toolbox), as on making it easy using the latest and greatest shiny feature. Instead, we'll probably just use the simple mechanism of  sortable method names ("test010_runFirst", "test050_runFifith", etc). Quick, easy, and good enough.</body>
  </mail>
  <mail>
    <header>Re: Custom MethodSorter</header>
    <body>If you want to change the test method run order because you want that method order to change every run/hour/day, then a custom Runner is not a great option; your teammates will have to remember to use that custom runner everywhere. Instead, you can create your own main class to replace JUnitCore and use Request.sortWith() and use something like this to order it:  /Ordering.html#arbitrary Be aware that if the method order changes during the day that could be problematic. If I am doing development and a test starts to fail, my first thought is I made a code change that caused it to fail, and go and look for the bug I introduced in my code or test. It wouldn't at all occur to me that the test started failing because the clock passed 2pm, so the method order was changed because it was an even hour. If you want your method order to periodically change, have it change at 2am and have a continuous build. -- Kevin</body>
  </mail>
  <mail>
    <header>Re: Contributing to JUnit -- Questions</header>
    <body>David (or anyone else really), Are there any other items that people want worked on? Thanks, Corey</body>
  </mail>
  <mail>
    <header>Re: Thoughts on Test Case Design / Execution</header>
    <body>David, I thought about it a bit more and I think that's the approach I'm going to take. I plan to implement a @ClassRule at either a *base* class or *suite class* that will be responsible for setting up and tearing down a connection to a database based on credentials being provided via system properties. For each class in test I'll implement a @Parameters method that uses the setup data source to read the test data by providing an identifier unique to the class (like the fully qualified class name). I believe that'll be a maintainable solution. Thanks for responding! Corey</body>
  </mail>
  <mail>
    <header>Re: Contributing to JUnit -- Questions</header>
    <body>Corey,  some really nice performance wins if addressed.  Want to give it a go? Thanks!</body>
  </mail>
  <mail>
    <header>Re: Contributing to JUnit -- Questions</header>
    <body>David, Sure I'll take a look at this. It may be a bit before you see a pull request due to the fact that it's a busy time of year. Thanks, Corey</body>
  </mail>
  <mail>
    <header>Is it Time for JUnit 5</header>
    <body>It looks like Closure will finally find their way into Java. With this feature many nice ways to do thing become possible. Therefore I am wondering if other people agree that it might be time for a JUnit5 putting this new feature to good use. A source for inspiration for me in this regard are the FunSuite of ScalaTest  There a test definition is a method call (instead of a method definition in JUnit) that registers a test for execution. It looks roughly like this: With this approach things like Rules become extremly trivial, since all you have to do is wrap the code block (i.e. closure) in a new new code block. Also parameterized test become fairly easy, because you would just put the call to test in a loop. What do you think? Is this an interesting direction for JUnit to go? kind regards Jens</body>
  </mail>
  <mail>
    <header>Categories: are they still experimental?</header>
    <body>The subject says it all really. Are categories still considered experimental, and if not, should the package be moved out of org.junit.experimental. If they are still considered experimental, what would be required to move them to non-experimental? I would ask the same question for Theories, but, for me, Theories don't seem to be as mature. Matthew Farwell.</body>
  </mail>
  <mail>
    <header>Re: Categories: are they still experimental?</header>
    <body>In my opionion some very important features got merged just yesterday. People will use it more extensively and maybe there are still important things to add (I dont think of anything special). When changing the package name some stuff could get renamed as @Category=&amp;gt;@Categories, @Categories=&amp;gt;CategoryRunner or something like that. @IncludeCategory=&amp;gt;IncludeCategories. Moving stuff from experimental is a chance for last API-changes and it should happen when everything feels real feature-complete.</body>
  </mail>
  <mail>
    <header>Re: Categories: are they still experimental?</header>
    <body>I could imagine moving Categories out of experimental relatively soon. There's still a few things I'd love to see fixed before committing, but could be talked out of: - Categories and Parameters don't play well together. - You can't assign a whole Suite to a Category in a useful way. Fixing these might mean somewhat gnarly changes in how Filters work, or maybe even switching to a new API that is Filter-like, but works more like we'd want.</body>
  </mail>
  <mail>
    <header>Re: Is it Time for JUnit 5</header>
    <body>Jens, Yes, I'm really excited about the possibilities of closures in JUnit.  I figure the day after Java 8 is finalized (currently not until September 2013), we'd at least create a branch for exploration.  If anyone would want to organize something based on a pre-release version of Java, (probably by simply creating a new github repo), please invite me.  :-)</body>
  </mail>
  <mail>
    <header>Re: Contributing to JUnit -- Questions</header>
    <body>Of course!  Thanks for volunteering!</body>
  </mail>
  <mail>
    <header>Re: Thoughts on Test Case Design / Execution</header>
    <body>I've had a bit more time to flesh out my design and I'm running into a bit of a problem. As I mentioned previously I'm using Selenium in conjunction with JUnit to do automated browser testing. Suppose I have a test class that Id like to execute with parameters that are read from an external data source such as a database. The tests in this class have a common setup and tear down that is currently implemented as a @ClassRule. This setup reads required information from a database. Please note that this setup is relatively expensive in terms of execution time and resources. Now suppose Id like to execute this same test class multiple times with different sets of parameters to model different business situations. One of the supported ways to do this is through the parameterized runner and the @Parameters annotation. The problem Im now experiencing is with regards to the setup and tear down  The behavior of @ClassRule (and @BeforeClass / @AfterClass), as expected, only executes once before all parameterized instances and once after all parameterized instances. Outside of moving the expensive setup and tear down to the individual method level using @Before / @After / @Rule  or implementing a custom runner are there any other solutions to this problem? There does look like there is an existing open issue on GitHub requesting this functionality: Thanks for your time, Corey</body>
  </mail>
  <mail>
    <header>Re: Is it Time for JUnit 5</header>
    <body>I've written a testing framework called Specsy ( runs on Scala, Groovy and also Java. Though it works on Java 7, the syntax is awfully verbose [1], but with Java 8's lambdas it will be quite close to the Groovy version [2]. The motivation for creating Specsy was to have test isolation (like JUnit and JDave), nested tests (like JDave and Scala's specs), and instead of "after methods" it has more expressive defer blocks (like Golang). [1]  ecsy/java/JavaSpecsyExample.java [2]  specsy/groovy/GroovySpecsyExample.groovy Right now I'm implementing a new test runner called Jumi ( runner, as explained in During this winter holiday I should be able to add support for test discovery, maybe also JUnit backward compatibility, after which it should be usable for early adopters (right now it's usable only for testing framework developers - Specsy 2.0 runs on Jumi). What does this have to do with JUnit 5? - Firstly, both of these frameworks I mentioned had clear goals to do some things that were lacking in JUnit and other frameworks. What are the goals for JUnit 5? What would be such a radical improvement that it would warrant a major release (that breaks compatibility, basically being a new testing framework) instead of minor 4.x releases? - Secondly, if you decide to create a "JUnit 5" that is a radical change from JUnit 4, instead of an incremental update, then please keep an eye on Jumi. If JUnit 4's test runner is not enough for JUnit 5, then it could run using Jumi instead of creating yet another test runner. That would save time from yourself and all the tool vendors who would need to integrate with any new test runner. -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Re: assertArrayEquals on arrays of objects</header>
    <body>Hello, while I do not agree with Stephen on adding no methods for testing (e.g. I like my objects to have final members only and add default scoped constructor for easier testing sometimes), I find it extremely hard to have easily understandable equals or hashcode methods. IMO these are mostly useful in pure data objects only, any class with a state should not implement these and should fall back to the default object identity comparison. So I would agree with Stephen, that it is sometimes better to do duck comparison, hereby stating that this is something different than equality. Regards Mirko</body>
  </mail>
  <mail>
    <header>Re: assertArrayEquals on arrays of objects</header>
    <body>No it doesn't. Explain how comparing objects based on the results of the objects public getters being the same breaks encapsulation?</body>
  </mail>
  <mail>
    <header>Re: assertArrayEquals on arrays of objects</header>
    <body>Please stop emailing me. To: junit@yahoogroups.com Sent: Saturday, November 17, 2012 4:30 PM Subject: Re: [junit] assertArrayEquals on arrays of objects Â  Isn't that a sign that production code may want to do this as well and that equality for these objects may make sense? How would a matcher check for equality without calling equals or hashCode? Robert</body>
  </mail>
  <mail>
    <header>Re: assertArrayEquals on arrays of objects</header>
    <body>You maybe are mistaking my explanation for why somebody would want to avoid adding an equals for my position. 90% of the time I have the equals I need anyway Of the remaining 10%, 5% need the equals but I just haven't added it yet And 4% need the equals but I just didn't realise it yet The 1% *need* equals based on identity not equality because that is the correct comparison basis for those objects. When testing those rare cases you may need to have your test cases compare based on duck-comparison My point is to understand why you need to add test probe methods and I suggest that almost always the reason is you didn't understand something about the problem you are solving and suddenly either the test is the wrong test or that "test helper" is actually required for production. (e.g. I like my objects to have final members only and add default</body>
  </mail>
  <mail>
    <header>assertArrayEquals on arrays of objects</header>
    <body>On 18 November 2012 17:40, CÃ©dric Beust â No it doesn't. Explain how comparing objects based on the results of the objects public getters being the same breaks encapsulation? That is what I mean by duck-comparison: comparing based on what you can see using the public exposed API. Guava has a java bean based equals helper. I was not suggesting to use reflection and compare fields</body>
  </mail>
  <mail>
    <header>Re: assertArrayEquals on arrays of objects</header>
    <body>On Mon, 19 Nov 2012 00:18:55 +0000 Stephen Connolly I'm with CÃ¨dric on this one. Adding getters (and especially setters) for all fields is a code smell to me. (The only exception is for beans where you have to have them.) I'd rather implement equals and hashCode than add getters for the test. If other code needs getters for every detail of the class, you're probably violating Tell Don't Ask or have some serious Feature Envy. Just curious: doesn't that lead to multiple implementations of the comparison easily when more than one test needs it? Robert</body>
  </mail>
  <mail>
    <header>Re: assertArrayEquals on arrays of objects</header>
    <body>This: leaks a lot more implementation details than It also won't get you very far if the identity of the object is an implementation detail that's not exposed with a public getter. -- Cédric</body>
  </mail>
  <mail>
    <header>Re: assertArrayEquals on arrays of objects</header>
    <body>Not when you are dealing with the CONTRACT of the class. The person object has a contract, namely that there be a first and last name [*] Now lets look at a different case. The Task object. Because Task objects are submitted to queues and sets and lists, it needs a specific semantics for equals and hashCode. Namely identity. But two Tasks can be the same even if they are not equal. It is legitimate for me to submit to a work queue two "equal" tasks but which have different identity. Therefore when testing the TaskCloner class, it is reasonable to verify that when passed an array of tasks it returns "equal" tasks in the same order. Such a test cannot be done based on Task.equals() *because* the Task object *requires* equals to be based on identity, so we *must* use Duck comparison to compare the two arrays. [*]: I dislike the Person analogy because "Bono" and "Cher" cause issues! I am not saying that you use Duck comparison for every case. It does not make sense for the Person object. There is maybe 1% (at best) when you *should* use duck comparison... the Task case being a reasonable example IMHO. The O.P. asked *why* one would want to not use the .equals() method and *how* you would proceed in that case, I responded to answer the *why* and *how* and you seem to have jumped on me thinking I am recommending this for *all* tests... I am not and have not. Duck-comparison is a valid and useful tool to keep in your toolbelt. And its use should be critically evaluated just as I recommend critically evaluating adding any method to your production code *just to make testing easier*. That is because I have found that when you look closer it is never "just to make testing easier" and it is almost always "I don't know what I am doing". But if you always know exactly what you are doing then I bow to your splendid magnificence and concede that you are a better programmer than I. -Stephen</body>
  </mail>
  <mail>
    <header>Re: assertArrayEquals on arrays of objects</header>
    <body>Where have I said that you add getters? Your object has a publicly exposed API. Consider the Person object. You may have chosen to expose the details of that person as: or as or as or as Those are all valid choices for implementing a Person object. Now personally for a Person object I would have an equals implemented that compared based on names, *because* it is, to my mind, an essential component of such a class. BUT by Duck-Comparison I mean you look at the public exposed API contract of the object and compare based on that. I am saying don't add either *for the test*. I seriously think you are just not getting my point. Let me try and state it this way: IF you find yourself having to add code to enable testing THEN you probably are mis-understanding something about your problem space AND WHEN you look closely, I contend, you will find at least one of the following: better and removes the need for the 'test' methods The end result is that you remove the need for 'test' methods (either by promoting them to 'production' methods, or by refactoring)</body>
  </mail>
  <mail>
    <header>Re: assertArrayEquals on arrays of objects</header>
    <body>I partially disagree with this statement. Yes, adding more code adds more scope for introducing bugs, but if you're adding code that allows your code to be tested, then that is a good thing. When I'm dealing with dates and times in code, then it's a very common idiom to see a DateTimeHelper which an be injected so that you can test code which depends on the current date and time. Without this, it's very hard to test this sort of code. So adding code can make my code more reliable. Within reason, of course. I would say that if your equals/hashCode aren't necessary except for tests, then don't put them in. You can always override/mock them in your tests if you really really need them. However, I would feel that having equals and hashCode *only* in the tests is probably a code smell. I can't think of an example where this would be necessary. Most of the time, I suspect you can do a sort with an explicit comparator if you want to compare two collections. Matthew Farwell.</body>
  </mail>
  <mail>
    <header>Re: assertArrayEquals on arrays of objects</header>
    <body>Hi Matthew, I wonder if you really can mock equals/hashcode - from what I remember most popular frameworks (i.e. Mockito) can't: "Cannot mock equals(), hashCode(). Firstly, you should not mock those methods. Secondly, Mockito defines and depends upon a specific implementation of these methods. Redefining them might break Mockito." (from -- Regards / Pozdrawiam Tomek Kaczanowski</body>
  </mail>
  <mail>
    <header>Re: assertArrayEquals on arrays of objects</header>
    <body>If your classes, and those methods are not final, you can just have the tests extend the class providing the required equals method. I am not advocating doing the above... just pointing out that there is no need to use a mocking framework...</body>
  </mail>
  <mail>
    <header>Re: assertArrayEquals on arrays of objects</header>
    <body>Wel let's not mention the case I found where in a conference call scheduling application, the DateTimeHelper class got abused by another developer in production code to "work around" some DST issue causing all sorts of bugs.... which only happened on the last day of October and only if it was a Thursday! Thank goodness we had Jenkins running nightly tests, and nobody had committed *any* changes to that branch that week... or we would never have found the bug. Adding code to "make testing easier" can have unintended consequences when others come along maintaining your code and start to abuse your API contract! [Yes it was somebody doing something they shouldn't have... and yes I suspect they would have used reflection to achieve the same bug if the helper was not there... but that would have been a bigger more glaring code smell] The real issue is that Comparator, Object.equals, Object.hashCode all have an implicit contract defined by the JRE, and you need to ensure that they are correctly implemented *with respect to that contract*. The comparisons that you need to make in unit tests *need not necessarily be the same* as the required contract that your classes are required to follow for their correct behaviour in production. As long as when you are writing your assertThat(x, is(y)) or you stop and think: "Is it really the equality as specified by the x's .equals() method that I want to check" then you are fine. Because often enough, you may not require that test.</body>
  </mail>
  <mail>
    <header>Re: junit.org: can you help?</header>
    <body>This is what I do for There is a git repo: which is markdown. When I push to the repo, this updates  an html site which I push to the same site on github and www.scalastyle.org. I find this works well, because I want to have the two sites. You could even set up a git hook to push to www.junit.org automatically. If however, you're happy with junit.github.com, then you don't need anything but the git repo. Matthew Farwell.</body>
  </mail>
  <mail>
    <header>Re: assertArrayEquals on arrays of objects</header>
    <body>Salut, You may well be right, I can't remember, and I can't check at the minute. I'll just say again that I can't think of a reason that you'd want to implement equals and hashCode in the tests but not in the production code. And you can still override them, but again, this seems dodgy. Matthew Farwell Le lundi 19 novembre 2012, Tomek Kaczanowski a écrit :</body>
  </mail>
  <mail>
    <header>Re: junit.org: can you help?</header>
    <body>@Mirko: Thanks for mentioning Jekyll. I think for starters a simple HTML landing page would be enough. @Matthew: You can use your own domain with GitHub [1] but I don't know if that is true for repos like [1] Cheers, Marc Am 19.11.2012 um 15:27 schrieb Matthew Farwell:</body>
  </mail>
  <mail>
    <header>Re: junit.org: can you help?</header>
    <body>Marc Philipp wrote on 19.11.2012 23:54: It's true. For example I'm hosting  the same way I'm hosting also a couple of other projects. Just add a CNAME file with the domain name to the repository and set the DNS records. -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Re: assertArrayEquals on arrays of objects</header>
    <body>Hi zodiaczx6 I'm a little curious; can you please tell me why you're against doing such for tests? Cheers, halfpirate1210 your array. I generally advise against doing this purely for tests and instead look at implementing your own hamcrest matcher. object (let's say object A1) from class A. Object A1 contains several variables and most importantly, an array of objects which are instantiated from another class (let's say class B); so the elements in that array are objects, not data types like int, string, etc. simply creating another object; A2 from class A. I wanted to test using assertArrayEquals and the result is red bar. always different since they are based on reference? But then again assertArrayEquals checks array length and content.</body>
  </mail>
  <mail>
    <header>Re: junit.org: can you help?</header>
    <body>If all you're doing is using github, then you can use markdown, which would probably be a lot easier for people to edit. If you will eventually be pushing to junit.org, then you can at that point use jekyll to generate the html. Personally, I'd recommend using markdown. Matthew Farwell.</body>
  </mail>
  <mail>
    <header>Re: Re: assertArrayEquals on arrays of objects</header>
    <body>A number of reasons: 1) equals and hashCode are hard to get right, so why do something difficult twice? (see Always override hashCode when you override e+java+hashcode+equals&amp;amp;source=bl&amp;amp;ots=yYHiMfw2T3&amp;amp;sig=f9nvbLZBX1_WuKBQWaCwHUG1hkA&amp;amp;\ hl=en&amp;amp;sa=X&amp;amp;ei=OourULLXBOrd4QTwqYDwDA&amp;amp;ved=0CEkQ6AEwBA#v=onepage&amp;amp;q=effective%20jav\ a%20hashcode%20equals&amp;amp;f=false ) 2) as the above link says, you always need to do both. If you do one, then do the other, so you have to apply the same rigour to your test code as you do to your code under test. 3) Lots of collection classes (such as Map, Set) implicitly rely on hashCode/equals. Overriding these methods can change behaviour, and generally confuse things. If equals() and hashCode() in your test code are implemently correctly, then functionally the code will be correct, but may This will put all of your keys in the same bucket in a HashMap). 4) Objects inserted in a map/set by the code under test won't be found by the test code, because you've overridden equals() and hashCode(). 5) ORMs such as hibernate depend implicitly on hashCode and equals. If they are lazily loaded, then the class itself will be a dynamic proxy, so this.getClass() != o.getClass(), so implementing equals becomes more complicated. For more information, I recommend reading Overriding equals and hashCode in java especially the accepted answer, and the hibernate answer. Convinced yet? So either implement equals() and hashCode() correctly in your real classes, or use custom code to test for equality (such as a Matcher, or simply a custom method). Matthew Farwell.</body>
  </mail>
  <mail>
    <header>Re: Re: assertArrayEquals on arrays of objects</header>
    <body>Sorry, as the person to start all of this I feel bad for not chiming in, but I've been ill ! Anyway, there's been some interesting reasons for and against this but my reasons boil down to this: 1) If I am TDDing, which is always, and I write a test that will fail because .equals() and hashCode() have not been overriden I will get no meaningful diagnostics in the test because .equals() evaluates to true or false and that is it.  With a matcher I'm going to get told that object don't match with a full list of fields that do and do not match - and surely everyone checks their test diagnostics before making a test pass? 2) I write a test that overrides equals based on all the fields in the object and I make it go green and all is good with the world.  A requirement comes in meaning that I want equals to only match on a single field (Id or something like that), my tests of course still pass.  I then go and make a change to some code so that checking all fields would fail the test, but only using the equals method means it passes. On Tue, Nov 20, 2012 at 12:01 PM, halfpirate1210 -- Maybe she awoke to see the roommate's boyfriend swinging from the chandelier wearing a boar's head. Something which you, I, and everyone else would call "Tuesday", of course.</body>
  </mail>
  <mail>
    <header>Re: Strange behavior</header>
    <body>What is the behavior, and what is the expected behavior? Can you post any of your code?</body>
  </mail>
  <mail>
    <header>Signalling unsupported tests?</header>
    <body>Hello. I have a set of test cases that cannot be executed on certain systems (they involve OpenGL, and some features of OpenGL are optional and cannot be determined to be supported until runtime). Is there some way I can have a test signal that it is not supported and should therefore silently pass? test, but this involves quite a lot of manual labour (and also requires me to manually throw exceptions in the case of tests that expect exceptions to be thrown).</body>
  </mail>
  <mail>
    <header>Re: Signalling unsupported tests?</header>
    <body>You can write assumeTrue(someCondition()) at the beginning of any test, and the test will be skipped if someCondition() returns false.  You can also put it in a @BeforeClass method in order to skip an entire class if someCondition() fails.</body>
  </mail>
  <mail>
    <header>Re: Signalling unsupported tests?</header>
    <body>On Mon, 3 Dec 2012 13:24:05 -0500 Ah, thanks. Sounds ideal.</body>
  </mail>
  <mail>
    <header>junit in three IDEs</header>
    <body>hi folks, I am a old command-line loving unix geek, but I want to get trendy and learn at least one IDE.  Up until now vi+BASH has been my IDE of choice.  I also already program in about two dozen languages. To try out my sea legs I want to compare and contract Eclipse, Netbeans, and IntelliJ IDEA against the following use case: I need to grock some java code in an existing SVN repository.  I want to pull down one existing java file, write some junit tests, but not pull down the entire giant project it is attached to.  I may need some moch objects too just to get it to compile, and to make the junit tests work. Most of the how-to and intro stuff I can find on these IDEs starts with "so you make your FIRST project, then pull down some menus, and the wonderful IDE helps you type in your FIRST java program, then if you really want to you can save the entire project in CVS!"  This is hardly EVER the scenario I run into.  It is more likely I need to jump into the middle of thousands or millions of existing files and learn to swim without breaking anything, maybe even fix a bug or add a feature. Can anyone give me some tips on the "best" way to do this with his or her favorite IDE and some selection of plugins? Brian Fennell</body>
  </mail>
  <mail>
    <header>Re: junit in three IDEs</header>
    <body>The requirement to be able to pull down a single file is somewhat new to me.  Although it can consume a fair amount of bandwidth, disk space, and waiting time to pull down the full project for editing, these days I find that the sum of those costs is less than the cost of my time trying to finagle a specialized one-off project configuration to exclude some of the dependencies. Is this something you regularly find possible with vi and bash?</body>
  </mail>
  <mail>
    <header>Re: Signalling unsupported tests?</header>
    <body>Since it sounds you have lots of tests with the same or similar condition, you might consider putting it into a Rule</body>
  </mail>
  <mail>
    <header>@inherited in @Category</header>
    <body>Hi! In class-level-inheritance of the @Category-Annotation. For example in my current project at work we have a set of Abstract Test classes (eg. for Integration-Tests in need of the databases or external Systems). There are close to 1k Tests deriving from those Abstract classes. If @Category was inherited we could easily just annotate the abstract class instead of the inheritors. There is also a poll at:  Please let us know if this would break your tests. Regards, Henning.</body>
  </mail>
  <mail>
    <header>Re: junit in three IDEs</header>
    <body>Dear command line lover. Your request is special. It might match the NetBeans vision of the IDE reproducing to 100% everything that happens on command line. Give it a try. NetBeans have excellent support for Maven, can deal quite well with (even 3rd party created) Ant scripts and there is an experimental support for Gradle. However, this still requires your checkout is buildable from command line. Checking-out a single file and hoping the IDE will think-up the surrounding environment is beyond the scope of what NetBeans (and obviously any other IDE) can do. We are trying to aim at "self describing sources": When you have (you have checked out) sources that a (supported) command line tool can understood, NetBeans understands it as well. -jt Dne Út 27. listopadu 2012 14:11:11, Fenn napsal(a):</body>
  </mail>
  <mail>
    <header>Re: JUnit 4.11-beta-1 is released</header>
    <body>Marc, I agree that Hamcrest is a terrific library for expressing expected test outcomes. So is FEST-Assert. If my tests are small and focused enough, I might even roll with native Java assertions. The AssertionError (or, really, any exception that propagates out of a test) represents sort of an implicit contract between test and runner: signal the test as failed if the exception makes it out of the test unhandled. There are lots of ways to satisfy that contract; I'm not sure that one based on Hamcrest has to be the answer. The time period between JUnit 4.4 and 4.11 was challenging for those developers who wanted some of the goodness of Hamcrest &amp;gt; 1.1, what with the attendant Maven exclusions, surprising failures, and so forth. It led me to wonder whether Assert/Assume ought to be separate from the core of JUnit. Then, the putative "junit-assertions" module could depend on Hamcrest if it so chose, and "junit-core" (made-up module that doesn't exist right now) wouldn't have to. Further, developers could choose to use junit-assertions or not; Hamcrest alone (with MatcherAssert.assertThat()) or not; FEST-Assert, etc. I think of AssumptionViolatedException as another implicit contract between test and runner. Right now, though, unless you want to depend on a public-but-not-published AssumptionViolatedException class that you need Hamcrest to use, org.junit.Assume is the only way to satisfy that contract. Better would be to have AssumptionViolatedException be part of "junit-core", not depending on Hamcrest, and letting Assume live in "junit-assertions" and handle the Hamcrest matching. I'll send more under separate cover, maybe as a GitHub issue, as this doesn't pertain so much to JUnit 4.11 beta 1 as it does a consideration for the next major version of JUnit. I think it'd be interesting to explore segmenting JUnit into a multi-module project with dependencies teased out a bit. Thanks again for your excellent work and stewardship! --p</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit 4.11-beta-1 is released</header>
    <body>+1 on the creation of a junit-core  (or whatever name but without Hamcrest as a requirement) Cheers, Paul. outcomes. So is FEST-Assert. If my tests are small and focused enough, I might even roll with native Java assertions. The AssertionError (or, really, any exception that propagates out of a test) represents sort of an implicit contract between test and runner: signal the test as failed if the exception makes it out of the test unhandled. There are lots of ways to satisfy that contract; I'm not sure that one based on Hamcrest has to be the answer. developers who wanted some of the goodness of Hamcrest &amp;gt; 1.1, what with the attendant Maven exclusions, surprising failures, and so forth. It led me to wonder whether Assert/Assume ought to be separate from the core of JUnit. Then, the putative "junit-assertions" module could depend on Hamcrest if it so chose, and "junit-core" (made-up module that doesn't exist right now) wouldn't have to. Further, developers could choose to use junit-assertions or not; Hamcrest alone (with MatcherAssert.assertThat()) or not; FEST-Assert, etc. test and runner. Right now, though, unless you want to depend on a public-but-not-published AssumptionViolatedException class that you need Hamcrest to use, org.junit.Assume is the only way to satisfy that contract. Better would be to have AssumptionViolatedException be part of "junit-core", not depending on Hamcrest, and letting Assume live in "junit-assertions" and handle the Hamcrest matching. pertain so much to JUnit 4.11 beta 1 as it does a consideration for the next major version of JUnit. I think it'd be interesting to explore segmenting JUnit into a multi-module project with dependencies teased out a bit.</body>
  </mail>
  <mail>
    <header>Re: JUnit 4.11-beta-1 is released</header>
    <body>pertain so much to JUnit 4.11 beta 1 as it does a consideration for the next major version of JUnit. I think it'd be interesting to explore segmenting JUnit into a multi-module project with dependencies teased out a bit. Paul, I like the idea, you have my support. Please go ahead and open an issue for it. Thanks, Marc</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit 4.11-beta-1 is released</header>
    <body>Hello everyone, sounds like a good plan. To be backwards-compatible junit should depend on hamcrest, however. Otherwise we have to increase the major version number. junit could then be a project only consisting of dependencies without any (Java-) source, right? junit depends on junit-core +1 for making AssumptionViolatedException non-internal and putting org.junit.Assume into junit-assertions as well. Throwing an exception is no real biggy. I refrained from doing so because the package indicated AssumptionViolatedException to be internal. Regards Mirko outcomes. So is FEST-Assert. If my tests are small and focused enough, I might even roll with native Java assertions. The AssertionError (or, really, any exception that propagates out of a test) represents sort of an implicit contract between test and runner: signal the test as failed if the exception makes it out of the test unhandled. There are lots of ways to satisfy that contract; I'm not sure that one based on Hamcrest has to be the answer. developers who wanted some of the goodness of Hamcrest &amp;gt; 1.1, what with the attendant Maven exclusions, surprising failures, and so forth. It led me to wonder whether Assert/Assume ought to be separate from the core of JUnit. Then, the putative "junit-assertions" module could depend on Hamcrest if it so chose, and "junit-core" (made-up module that doesn't exist right now) wouldn't have to. Further, developers could choose to use junit-assertions or not; Hamcrest alone (with MatcherAssert.assertThat()) or not; FEST-Assert, etc. test and runner. Right now, though, unless you want to depend on a public-but-not-published AssumptionViolatedException class that you need Hamcrest to use, org.junit.Assume is the only way to satisfy that contract. Better would be to have AssumptionViolatedException be part of "junit-core", not depending on Hamcrest, and letting Assume live in "junit-assertions" and handle the Hamcrest matching. pertain so much to JUnit 4.11 beta 1 as it does a consideration for the next major version of JUnit. I think it'd be interesting to explore segmenting JUnit into a multi-module project with dependencies teased out a bit.</body>
  </mail>
  <mail>
    <header>Contributing to JUnit -- Questions</header>
    <body>I apologize at the outset if this is the wrong forum for this question, but I couldn't find any location on GitHub or the website to ask and the developer's mailing list did not seem terribly active. If there is a location for reference please let me know and I apologize for missing it. I'm a developer and I'm interested in contributing to the project. How can I be of assistance? I noticed a number of open issues on GitHub but it wasn't immediately discernible to me which issues were available for active work. Thanks for your time, Corey</body>
  </mail>
  <mail>
    <header>Re: Contributing to JUnit -- Questions</header>
    <body>Corey, we are currently about to release 4.11 and have started to think about what should be in 4.12 [1]. You are of course welcome to contribute. Is there any specific feature you would like to work on? Cheers, Marc [1]  en</body>
  </mail>
  <mail>
    <header>Re: Contributing to JUnit -- Questions</header>
    <body>Marc, I have nothing in mind to be perfectly honest. I personally wouldn't mind starting with something small so I can start to build my understanding of the code base. This is my first foray into an open source project and I imagine I have a lot to learn. I couldn't tell with the existing open issues which were targeted for the upcoming release. I thought an email to the group was more appropriate so I wasn't wasting resources. Thanks for your time! Corey Corey, we are currently about to release 4.11 and have started to think about what should be in 4.12 [1]. You are of course welcome to contribute. Is there any specific feature you would like to work on? Cheers, Marc [1]  en</body>
  </mail>
  <mail>
    <header>Re: Contributing to JUnit -- Questions</header>
    <body>The issues which are targeted to particular release are marked with 4.12 I believe. Matthew Farwell.  en</body>
  </mail>
  <mail>
    <header>Re: Contributing to JUnit -- Questions</header>
    <body>Corey, Welcome!  I would recommend starting off with something small, perhaps like  for first-time contributors tends to be caught up in code formatting, GitHub wrangling, and getting used to the "team" structure.  Best to get that under your belt after just a couple dozen new lines of code.  Some earnest contributors start with a thousand-line patch, only to get frustrated before we can work together to massage it into something pullable. Thanks for checking in here!</body>
  </mail>
  <mail>
    <header>Re: Contributing to JUnit -- Questions</header>
    <body>David, Thanks for the information and pointer to the issue that I can work. I'll try and get myself setup with GitHub and get acclimated to the environment. If all goes well maybe you'll see me soon on GitHub. Thanks again! Corey</body>
  </mail>
  <mail>
    <header>JUnit Extension to provide comprehensive support for Data Driven Testing</header>
    <body>Hi, There's a new project initiated in the open community that extends JUnit classes to provide Data Driven Testing Support to its users. The project is called EasyTest( (broadly)has the following features: 1) Provide Test Data to your test methods using a simple Annotation(@DataLoader) 2) Test data can be provided in any form : XML, CSV, EXCEL (which are suported by EasyTest) or user can provide its own custom Data Provider implementation. 3) Test methods now support both input parameter as well as output parameter. If a test method is returning output, the output is captured in the same file from which input was provided. 4) The test methods in the IDE now show, for each run of a given test method, what was its input parameters. So if I have a test method with name testMethodwithItemIdParam that takes a single input parameter itemId, then when this test method is executed for different itemId values, the IDE will show something like this : 5) You can generate reports of your test run using a simple @Report annotation 6) You can capture some analytics related information about your class under test using @Intercept annotation. And theres a lot more features. If interested, check out the github project :  For information about the features supported by EasyTest, look at its WIKI:</body>
  </mail>
  <mail>
    <header>Re: JUnit Extension to provide comprehensive support for Data Driven Testing</header>
    <body>Thanks, Anuj! It's projects like these that make me glad of the work we put in to custom runners.</body>
  </mail>
  <mail>
    <header>Re: JUnit Extension to provide comprehensive support for Data Driven Testing</header>
    <body>Hi David, I am glad that the EasyTest project has found some takers already in the industry and that people have already started contributing to the project. It's efforts and work of you and JUnit team that is actually paying off and not just mine :) I hope to collaborate with JUnit on a more regular basis so that we can understand whats important for the customewrs and what is it that we here can do to make JUnit as well as EasyTest a bigger success story :) Cheers!</body>
  </mail>
  <mail>
    <header>Re: Contributing to JUnit -- Questions</header>
    <body>Now that I've essentially wrapped up work on issue #144 are there any other items that folks would like someone to work on? Thanks! Corey</body>
  </mail>
  <mail>
    <header>Re: Contributing to JUnit -- Questions</header>
    <body>#157 should be super quick.  Thanks!</body>
  </mail>
  <mail>
    <header>JUnit 4.11 is released</header>
    <body>All, I am happy to announce the release of JUnit 4.11. There have been a lot of contributions by a full cast of contributors. Thanks again to everyone who took part by reporting an issue, offering his/her opinion, or even submitting a pull request! As usual, you can download the JARs or the complete ZIP file directly from  In addition, the JARs have been submitted to Maven Central and should appear there within one or two hours. You can find the full release notes on GitHub:  Cheers, Marc Philipp</body>
  </mail>
  <mail>
    <header>junit.org: can you help?</header>
    <body>Summary: can you help patch up the github pages for JUnit to serve as the new home of junit.org? All, You may have recently noticed that days, and then came back a shadow of its former self.  That site has been operated and maintained by 8thlight.com for several years, and by Object Mentor before that.  But it recently had a rather nasty failure, and it's not clear when the content that had been hosted only there will come back. Rather than spend a lot of effort recreating the old situation, I'd like to move us to a new situation, in which the team that develops JUnit is the same one that develops the primary information sources about JUnit.  Along those lines, I'd like to get the github pages for JUnit ready to be a good new home for junit.org.  These pages are hosted at  can be edited by opening pull requests against  visually clean single page, with a short description of what JUnit is, and links to downloads, javadoc, mailing list, and the wiki (  getting better day by day as a source of user documentation. If anyone feels like rolling up their sleeves and give this a try, it would be a great step forward.  I'm out of the office all next week, but am happy to move quickly getting the pieces in place upon my return. Thanks, all,</body>
  </mail>
  <mail>
    <header>assertArrayEquals on arrays of objects</header>
    <body>Hello. Newbie here. I created a class (let's say class A) and in my JUnit class, I created an object (let's say object A1) from class A. Object A1 contains several variables and most importantly, an array of objects which are instantiated from another class (let's say class B); so the elements in that array are objects, not data types like int, string, etc. So I wanted to test this array of objects with another array of objects by simply creating another object; A2 from class A. I wanted to test using assertArrayEquals and the result is red bar. So my question is why did the test fail? I'm thinking probably objects are always different since they are based on reference? But then again assertArrayEquals checks array length and content. Many thanks, halfpirate1210</body>
  </mail>
  <mail>
    <header>Re: assertArrayEquals on arrays of objects</header>
    <body>You'll need to override equals (and by definition hashCode) on the objects in your array. I generally advise against doing this purely for tests and instead look at implementing your own hamcrest matcher. object (let's say object A1) from class A. Object A1 contains several variables and most importantly, an array of objects which are instantiated from another class (let's say class B); so the elements in that array are objects, not data types like int, string, etc. simply creating another object; A2 from class A. I wanted to test using assertArrayEquals and the result is red bar. always different since they are based on reference? But then again assertArrayEquals checks array length and content.</body>
  </mail>
  <mail>
    <header>Re: assertArrayEquals on arrays of objects</header>
    <body>Isn't that a sign that production code may want to do this as well and that equality for these objects may make sense? How would a matcher check for equality without calling equals or hashCode? Robert</body>
  </mail>
  <mail>
    <header>Re: assertArrayEquals on arrays of objects</header>
    <body>Production code may use something different for equality, eg an id field which makes sense for prod but that could produce false positives in test. Checking each individual field. I can provide examples of necessary.</body>
  </mail>
  <mail>
    <header>Re: assertArrayEquals on arrays of objects</header>
    <body>Hm. Sounds weird if equality differs from test to production... But isn't that exactly what the equals and hashCode methods would do? Seems to me that having these comparisons in equals and hashCode would make for better encapsulation than opening the class to make these fields available to a matcher. What am I missing here? Robert</body>
  </mail>
  <mail>
    <header>Re: assertArrayEquals on arrays of objects</header>
    <body>Don't add equality or hashCode methods *because* you need them for testing Add them *if* you need them for production. Eg in some cases it makes sense for hashCode to be Object.hashCode(), where you are storing tasks in a hash based map, etc. Each task may well be equivalent to a duplicate, but it may be necessary to repeat the task. Also there is no need to expose more, because duck-based comparison should be sufficient for unit test scenarios... And when it isn't you probably will have implemented an equals method that is either sufficient or can be made so by the addition of duck-comparisons Btw by duck comparisons I mean: If (a.getQuacks()==b.getQuacks()&amp;amp;&amp;amp;a.getWalkingStyle()==b.getWalkingStyle()&amp;amp;&amp;amp;a.isFea\ thered()==b.isFeathered()) Iow compare based on exposed properties -Stephen</body>
  </mail>
  <mail>
    <header>designed ParallelComputer Surefire plugin</header>
    <body>We wrote a ParallelComputer which is runninf test classes and methods in parallel. This is the public available pull request in Junit:  Can you please comment on the Javadoc if you understand it and you would be able to use it (especially in surefire plugin)? Public available source code:  rc/main/java/org/junit/experimental/ParallelComputer.java Thx, Tibor</body>
  </mail>
  <mail>
    <header>Re: assertArrayEquals on arrays of objects</header>
    <body>Or just compare something like the results of .toString(). Personally I do not mind implementing equals or whatever makes my day to do the comparison for tests. Unit tests are so closely linked to design anyway. On the other hand, implementing new matchers for just some specific test case, I wouldn't want all that extra maintenance outside my objects etc. Just personal preferences of course. Whatever works for whoever needs it is best.. On 17 November 2012 20:45, Stephen Connolly &amp;lt;stephen.alan.connolly@... (a.getQuacks()==b.getQuacks()&amp;amp;&amp;amp;a.getWalkingStyle()==b.getWalkingStyle()&amp;amp;&amp;amp;a.isFea\ thered()==b.isFeathered())</body>
  </mail>
  <mail>
    <header>Re: assertArrayEquals on arrays of objects</header>
    <body>What's the justification for this restriction? It makes no sense to me. You might never have to test for equality of your objects in production but need it for testing. And more generally, there is really nothing wrong with implementing hashCode()/equals() for your objects that match their purpose. -- Cédric</body>
  </mail>
  <mail>
    <header>Re: assertArrayEquals on arrays of objects</header>
    <body>Every line of code you write introduces another place for you to write a bug. So adding test hooks to your production code, whatever form those hooks take, is adding more scope for bugs. Production code should be just what is required and no more, ie no dead code please. That is the ideal we should strive for, just as 100% coverage is the ideal we should strive for. Now in practice, for my code, I usually implement equals and hash code... But I do so *following the correct contract for equals and hashcode* One of the elements of that contract is that hashCode of two equal objects should be identical, and that it should be based on the objects final fields. often enough to warrant mentioning (though not every day), unless your objects are immutable (I like immutable objects too btw which is why this doesn't happen every day for me) you will find that the necessities of the equals and hashCode contracts with respect to collections etc, results in equals methods that only compare on a subset of the objects fields, in which case you need, in your tests, to compare on the non-final fields too. On other occasions I have found it necessary to leave the equals and hashCode methods unimplemented because I need specific behaviour within collections. In such cases I typically have test cases to verify that equals is inherited from Object so that future maintainers do not accidentally add an implementation. Normally, I use a wrapper class for adding such objects to collections so that it is safe to use equals... But that can put an excessive GC load, and as a result you may be forced to go without the  wrapper... In a sense it is a pity that the collections classes do not allow for plugable hashCode and equality strategies, Or you might have need for the Object.equals behaviour The point is that such purpose may not match the needs of testing. I agree that 95% if the time adding equals and hashCode is perfectly fine. And since we often use IDE tooling or Guava's helpers (or equivalent helpers) to implement these methods it is very low risk. My point is that there are times when it is less clear, and a subset of those where it is the wrong thing to do. You should always know *why* you are adding code to production. Adding code *just because your tests need it* is a bad code smell... It indicates that either you don't understand a production requirement of your code (which may mean that the equals method is needed anyway) or you have a bad design of your production code in the first place. Another final point is that relying on equals comparing equality as opposed to identity within your tests can hinder refactoring as it may make it harder to split the class given that you then have to take care that the equals methods are split correctly... Using duck comparison based on eg Guava's helpers is very little work and allows for correct testing.</body>
  </mail>
  <mail>
    <header>Re: assertArrayEquals on arrays of objects</header>
    <body>By not writing equals() and hashCode(), you have a bug in your code. This is similar to having a method in your code that is incorrect and not fixing it just for some weird YAGNI nonsense. Preventing subclasses from overriding methods that are legally overridable? Now that sounds like a big code smell to me. You seem to be subverting equals() to mean what you want it to mean, which is a big no-no in my opinion. You should always know *why* you are adding code to production. Adding code I disagree. If I have a choice between not writing a test or writing a test that requires adding to or modifying my production code, I'll choose the latter any day. Using duck comparison based on eg But it totally breaks encapsulation. -- Cédric</body>
  </mail>
  <mail>
    <header>Strange behavior</header>
    <body>Hi, I'm new to Junit and had yesterday some strange behaviour. I'm writing eclipse plugin. To test this plugin I've made a fragment where my test are located. One of my test in this plug in sometimes failed an I don't know why. This test open and read a GIS file and gave some information about the file content. I really don't know where to start to fix this failure. Is this the fact that i open and read a file(from my hard drive ) that could be the problem ? Or the fact that I'm launching my test via Eclipse  ? If you any idea to help that would be great. Best regards Thomas</body>
  </mail>
  <mail>
    <header>Re: junit.org: can you help?</header>
    <body>Hello David, did you already thing about how to publish content? I see github offers a simple blogging suite named jekyll ( go for this? Regards Mirko</body>
  </mail>
  <mail>
    <header>Re:</header>
    <body>[This is a recording.] I'm taking the day off, Friday, Sep 27, 2012. Bill</body>
  </mail>
  <mail>
    <header>Hoping for Release of 4.11</header>
    <body>I was curious, when might we expect JUnit 4.11 to be released? I need the new feature that allows passing names into data drive tests via "@Parameters(name = -Cheers</body>
  </mail>
  <mail>
    <header>Re: Hoping for Release of 4.11</header>
    <body>Hi ralthor, I am currently waiting for 4.11, too, because of named Parameterized Tests. I took a snapshot of JUnit and uploaded it into our Nexus. So I was able to have named tests before the release. I didn't have any problems with my current tests, so try it. Kind regards, Philip</body>
  </mail>
  <mail>
    <header>Re: Hoping for Release of 4.11</header>
    <body>At this point, Marc Philipp has stepped up and is spinning a beta release. I believe he's just waiting on release notes feedback from, well, me.  You can follow along at  Once documentation has settled out, we will probably have several weeks of beta testing, and then release.</body>
  </mail>
  <mail>
    <header>Re: Hoping for Release of 4.11</header>
    <body>Excellent! Many thanks</body>
  </mail>
  <mail>
    <header>Re-run of failed test cases</header>
    <body>Hi Team, Can anybody help me out how to re-rerun the failed test cases either through Ant or Programmatic. Lets say i have 10 test cases in two different Java Class files,when i run the suite,two test cases failed in each class file. I need to re-run only the failed test cases from that particular classes only not the entire classes again. Thanks, Jeevan.</body>
  </mail>
  <mail>
    <header>Re: Re-run of failed test cases</header>
    <body>Look at formatter seems to be what you are searching. Gilles Scokart</body>
  </mail>
  <mail>
    <header>JUnit Mailing List Etiquette</header>
    <body>Once again, it's time for a little reminder of some of the finer points of JUnit mailing list etiquette. This will be posted now and then; not often enough to be spam, but often enough to keep our newer members aware of how we conduct business around here. Dear members and readers of the JUnit mailing list, Around here, we love testing. Not only do we love testing, we love to discuss any and all aspects of testing, often with enthusiasm and passion. This is good. This is the reason that this mailing list exists. On top of all this, we are very keen to help others understand this strange affliction we have; medical name "testus infectus", better known as being test infected. We love to answer questions and help those new to the joy move further down the road towards test enlightenment. In the classic spirit of hospitality, our list is your list, our test cases are your test cases. Please make yourself at home and enjoy the journey. :-) That said, there are some things that we don't love, so sit tight and listen up. We don't love people who haven't, or won't, read the JUnit Frequently Asked Questions (FAQ) document, lovingly maintained by Mike Clark or the "Smart Questions" document written and maintained by Eric S. Raymond. Here are the links, go forth and read ...  We don't love people who think that we'll do their homework assignments for them. Back when I was a lad, we didn't have the Internet and we had to do our own homework assignments without the aid of all the knowledge and information that you have available to you today. (And yes, now that you ask, I did walk uphill both ways to school through the snow.) We don't love people who are incapable of using a search engine, but are yet somehow capable of signing up onto this mailing list so that they can ask questions that ten seconds of searching would reveal the answer to. Learn how to use a search engine. Around here, Google seems quite popular. Here's a link; learn to love it and use it.  We don't love job postings. We do love having jobs (or at least, we like the pay) and we do like to look at job postings, but we like to look at them in more logical places like job websites. So, please don't be upset when a moderator deletes your carefully worded prose describing yet another testing job. We don't love thread hijacking. That's when you start a different subject by replying to a previous conversation and not even changing the subject line. We like to discuss a variety of subjects, so please feel free to be inspired to ask side-questions during ongoing conversations. Just do so by starting a fresh thread with a unique subject line. Lastly, we don't love people who whine, moan and generally sound like petulant children after they've been told that they have violated one of the "laws of the land" around here. It's a big old Internet; feel free to take your questions and/or tantrums somewhere else if you don't like the way we do things around here. Simon (One of the JUnit mailing list moderators) -- simonpeter.org | simonpeter.com | newlife-upc.org</body>
  </mail>
  <mail>
    <header>JUnit 4.11-beta-1 is released</header>
    <body>All, I am happy to announce the release of JUnit 4.11-beta-1. There have been a lot of contributions by a full cast of contributors. Thanks to everyone who took part by reporting an issue, offering his/her opinion, or even submitting a pull request! Today, we are releasing a first beta version of 4.11. The reason is simple: We want to make sure the upgrade from Hamcrest 1.1 to 1.3 goes smoothly. Therefore, we are kindly asking you to give it a try. If you find anything we should consider, please let us know, either via this mailing list or directly on GitHub: As usual, you can download the JARs or the complete ZIP file directly from  have been submitted to Maven Central and should appear there within one or two hours. You can find the preliminary release notes on GitHub and copied below:  Cheers, Marc Philipp Summary of changes in version 4.11 [unreleased!] Matchers: Upgrade to Hamcrest 1.3 JUnit now uses the latest version of Hamcrest. Thus, you can use all the available matchers and benefit from an improved assertThat which will now print the mismatch description from the matcher when an assertion fails. Example Old error message: Expected: an instance of java.lang.Integer New error message: Expected: an instance of java.lang.Integer Hamcrests new FeatureMatcher makes writing custom matchers that make use of custom mismatch descriptions quite easy: @Test Running this test will return the following failure message: Most of the matchers in JUnitMatchers have been deprecated. Please use org.hamcrest.CoreMatchers directly. Parameterized Tests In order to easily identify the individual test cases in a Parameterized test, you may provide a name using the @Parameters annotation. This name is allowed to contain placeholders that are replaced at runtime: Example @RunWith(Parameterized.class) In the example given above, the Parameterized runner creates names like [1: fib(3)=2]. If you dont specify a name, the current parameter index will be used by default. Test execution order By design, JUnit does not specify the execution order of test method invocations. Until now, the methods were simply invoked in the order returned by the reflection API. However, using the JVM order is unwise since the Java platform does not specify any particular order, and in fact JDK 7 returns a more or less random order. Of course, well-written test code would not assume any order, but some does, and a predictable failure is better than a random failure on certain platforms. From now on, JUnit will by default use a deterministic, but not predictable, order (MethodSorters.DEFAULT). To change the test execution order simply annotate your test class using @FixMethodOrder and specify one of the available MethodSorters: @FixMethodOrder(MethodSorters.JVM): Leaves the test methods in the order returned by the JVM. This order may vary from run to run. @FixMethodOrder(MethodSorters.NAME_ASCENDING): Sorts the test methods by method name, in lexicographic order. Maven artifacts Up until now there were two Maven artifacts for JUnit: junit:junit-dep and junit:junit. From a Maven point-of-view only the former made sense because it did not contain the Hamcrest classes but declared a dependency to the Hamcrest Maven artifact. The latter included the Hamcrest classes which was very un-Maven-like. From this release on, you should use junit:junit which will be what junit:junit-dep used to. If you still reference junit:junit-dep, Maven will automatically relocate you to the new junit:junit and issue a warning for you to fix. Rules A number of improvements have been made to Rules: Both @Rule and @ClassRule can now be used on methods that return a TestRule. ExpectedException now always prints the stacktrace of the actual exception in case of failure. A parent folder can be specified for TemporaryFolder. In addition, the newFile/newFolder methods will now fail when the file or folder could not be created. TestWatcher has a new template method called skipped that is invoked when a test is skipped due to a failed assumption. Improvements to Assert and Assume assertNotEquals has been added to Assert. assertEquals has been overloaded in order to check whether two floats are equal given a certain float delta. Most methods in Assume now allow to pass a custom message.</body>
  </mail>
  <mail>
    <header>Re: JUnit 4.11-beta-1 is released</header>
    <body>Many thanks to Marc for getting 4.11 prepped for takeoff. From looking at the downloads on GitHub, it seems as though there are still junit.jar and junit-dep.jar for 4.11 beta 1. Is this intentional? I was thinking that there would ultimately be only junit.jar, without the Hamcrest classes baked in? Cheers, p of contributions by a full cast of contributors. Thanks to everyone who took part by reporting an issue, offering his/her opinion, or even submitting a pull request! want to make sure the upgrade from Hamcrest 1.1 to 1.3 goes smoothly. Therefore, we are kindly asking you to give it a try. If you find anything we should consider, please let us know, either via this mailing list or directly on GitHub:  hours. available matchers and benefit from an improved assertThat which will now print the mismatch description from the matcher when an assertion fails. custom mismatch descriptions quite easy: org.hamcrest.CoreMatchers directly. you may provide a name using the @Parameters annotation. This name is allowed to contain placeholders that are replaced at runtime: fib(3)=2]. If you don't specify a name, the current parameter index will be used by default. invocations. Until now, the methods were simply invoked in the order returned by the reflection API. However, using the JVM order is unwise since the Java platform does not specify any particular order, and in fact JDK 7 returns a more or less random order. Of course, well-written test code would not assume any order, but some does, and a predictable failure is better than a random failure on certain platforms. order (MethodSorters.DEFAULT). To change the test execution order simply annotate your test class using @FixMethodOrder and specify one of the available MethodSorters: returned by the JVM. This order may vary from run to run. method name, in lexicographic order. junit:junit. From a Maven point-of-view only the former made sense because it did not contain the Hamcrest classes but declared a dependency to the Hamcrest Maven artifact. The latter included the Hamcrest classes which was very un-Maven-like. junit:junit-dep used to. If you still reference junit:junit-dep, Maven will automatically relocate you to the new junit:junit and issue a warning for you to fix. case of failure. newFile/newFolder methods will now fail when the file or folder could not be created. test is skipped due to a failed assumption. equal given a certain float delta.</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit 4.11-beta-1 is released</header>
    <body>Paul, we have deprecated the Maven artifact that used to have Hamcrest embedded since that didn't make any sense from a Maven point-of-view (see the release notes for details). The all-in-one JAR (junit.jar) is still offered as a download for users that simply want to get started using JUnit without having to download an extra JAR from Hamcrest. An alternative would be to remove the two JARs from the downloads altogether and instead put the Hamcrest JAR along with what is now called junit-dep.jar inside the JUnit ZIP file with a simple README that explains how to use it. In this scenario, there wouldn't be an old school junit.jar any longer. What do you think? Regards, Marc</body>
  </mail>
  <mail>
    <header>Re: JUnit 4.11-beta-1 is released</header>
    <body>Marc, I think the way it's set up for non-Maven users is fine; as a Maven user, I'll be thrilled to depend explicitly only on junit:junit. Ultimately I think it'd be great to break JUnit's dependency on Hamcrest entirely, but I suspect that's a much more involved effort (JUnit 5?). Thanks again! --p since that didn't make any sense from a Maven point-of-view (see the release notes for details). simply want to get started using JUnit without having to download an extra JAR from Hamcrest. and instead put the Hamcrest JAR along with what is now called junit-dep.jar inside the JUnit ZIP file with a simple README that explains how to use it. In this scenario, there wouldn't be an old school junit.jar any longer.</body>
  </mail>
  <mail>
    <header>Re: JUnit 4.11-beta-1 is released</header>
    <body>While I do not consider my opinion to have much weight, I like moving toward a junit jar without Hamcrest. Providing both jars in the zip file as a convenience for those that download manually is both nice and highlights the dependency. user, I'll be thrilled to depend explicitly only on junit:junit. entirely, but I suspect that's a much more involved effort (JUnit 5?). since that didn't make any sense from a Maven point-of-view (see the release notes for details). simply want to get started using JUnit without having to download an extra JAR from Hamcrest. and instead put the Hamcrest JAR along with what is now called junit-dep.jar inside the JUnit ZIP file with a simple README that explains how to use it. In this scenario, there wouldn't be an old school junit.jar any longer.</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit 4.11-beta-1 is released</header>
    <body>Hello, any improvements in hamcrest are now used for junit as well - as are all new bugs :-). There is no easy answer, I guess. As org.junit.Assert.&amp;lt;T&amp;gt;assertThat(T,org.hamcrest.Matcher&amp;lt;? super T&amp;gt;):void exists, an alternative approach to use shaded versions of the hamcrest will not work. So this should be JUnit5 :-). Regards Mirko user, I'll be thrilled to depend explicitly only on junit:junit. entirely, but I suspect that's a much more involved effort (JUnit 5?). since that didn't make any sense from a Maven point-of-view (see the release notes for details). simply want to get started using JUnit without having to download an extra JAR from Hamcrest. and instead put the Hamcrest JAR along with what is now called junit-dep.jar inside the JUnit ZIP file with a simple README that explains how to use it. In this scenario, there wouldn't be an old school junit.jar any longer.</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit 4.11-beta-1 is released</header>
    <body>Here's a suggestion.  With no change to the maven packaging, here's what we make available for download. JUnit 4.11 - junit-dep.jar: no hamcrest - junit.jar: includes hamcrest - junit-nodep.jar: includes hamcrest JUnit 4.12 - junit-dep.jar: no hamcrest - junit.jar: no hamcrest - junit-nodep.jar: includes hamcrest (Long in the future, drop junit-dep.jar) So, the idea is to eventually get to a place where junit.jar does not have hamcrest, while still having an all-in-one jar, with the nodep name that is familiar from other libraries. Users who are paying attention can switch to junit-nodep now, and rest easy we won't mess with them in the future.  In 4.12, people broken by the swap in content of junit.jar can switch to junit-nodep.jar. Thoughts?</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit 4.11-beta-1 is released</header>
    <body>Sounds like a good plan. I think we could even drop junit-dep.jar with 4.12. IMHO it would be quite easy for people consuming the JARs to put a different one on their classpath since, fot them, that is a manual process anyway. Opinions? Regards, Marc 2012/10/18 David Saff &amp;lt;saff@...&amp;gt;:</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit 4.11-beta-1 is released</header>
    <body>From my very personal point-of-view I cannot imagine using JUnit without Hamcrest anymore. @Paul: What would be the benefit of "breaking the dependency" entirely? @Mirko: Why shouldn't you be able to use a different version of Hamcrest? Regards, Marc</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit 4.11-beta-1 is released</header>
    <body>Hello Marc, as long as hamcrest has the same major number and stays backwards compatible there should be no problem. My point was, that you always depend on hamcrest when you use assertThat in your tests :-). Regards Mirko</body>
  </mail>
  <mail>
    <header>Re: JUnit 4.11-beta-1 is released</header>
    <body>As long as the end-goal is for the Maven junit:junit artifact to _declare_ a dependency on Hamcrest without including it, I'm happy! If I had it my way this would be effective with version 4.11, but I understand that it's more user friendly to postpone the change until 4.12. Cheers, Stephan</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit 4.11-beta-1 is released</header>
    <body>I would certainly like a version of JUnit without any dependency on hamcrest for when using with Groovy.  I find hamcrest very useful when using Java but I haven't found a case where I would use it with Groovy and it is unfortunate design that I have to include hamrest on the classpath to keep JUnit happy but have no use for it. Some version which had a pom with hamcrest marked as optional (if it is present at all) is what I would like to see and (although somewhat more controversial) I would have a preference for all class references to hamcrest done through reflection. Cheers, Paul.</body>
  </mail>
  <mail>
    <header>Re: JUnit 4.11-beta-1 is released</header>
    <body>Actually, this will be effective with 4.11. This discussion was about the JARs to be downloaded by non-Maven users. Cheers, Marc Am 19.10.2012 um 20:50 schrieb sschroev: dependency on Hamcrest without including it, I'm happy! If I had it my way this would be effective with version 4.11, but I understand that it's more user friendly to postpone the change until 4.12. is easy been find the Parameterized is fact one order by will</body>
  </mail>
  <mail>
    <header>Custom failed test handling</header>
    <body>I am Selenium Developer. I was trying to override the class: TestWatcher method: failed. To add some custom test failure handling (take a screenshot on test failure). However I noticed that the failed() method is invoked after the @after method is executed. Currently we are using the @after method to close the browser. So we need to execute takeAScreenShot() after a test has failed, and before the @after method is exeuted. Any suggestions? I didn't see a way to do this, without making some major changes to TestWatcher.</body>
  </mail>
  <mail>
    <header>Re: Custom failed test handling</header>
    <body>J, Here's how I'd approach it.  I'll assume you already have some kind of You'll need to take the logic from your after method, and put it into an ExternalResource: And then, in your test class, you can include both with a RuleChain: @Rule public TestRule chain = TestRule.outerRule(new Hope that helps,</body>
  </mail>
  <mail>
    <header>Re: Custom failed test handling</header>
    <body>Thank you so much for the quick reply! Thats a great approach! The only thing is that some of our tests use @After to close the browser, while others use @AfterClass to close the browser. I would like to apply this custom test failure handling globally if possible. The way you've suggested would allow us to do it for all of the Test Classes that use the @After to close the browser (Which I think i'll start doing now) however it would cause all the test classes that use @AfterClass to close the browser to break. Unless I made two separate extensions from TestWatcher... One for the @After close browser and one for the @AfterClass..... wow I think that would work nicely... Is that what you would suggest? Thanks a lot -James</body>
  </mail>
  <mail>
    <header>Re: Re: Custom failed test handling</header>
    <body>Actually, you should be able to reuse the same extension.  On classes where you want to close the browser after each test, use the strategy I outlined above.  On classes where you want to only close the browser after the whole class, you'll use:</body>
  </mail>
  <mail>
    <header>Collecting proposals for 4.12 features and bugs</header>
    <body>All, As 4.11 nears release, I've started a github label to track features and bugs that are of small- to medium-scope, and clear benefit.  Feel free to nominate one or two of your favorites:  age=1&amp;amp;sort=updated&amp;amp;state=open If you move something into the list, please also comment on the issue, because I don't think that it generates a notification otherwise. No promises, of course, but I think this may provide a way to filter to the top those issues that are hold the most potential.  Thanks,</body>
  </mail>
  <mail>
    <header>Re: JUnit and Spring configuration</header>
    <body>Metain, I'm sorry, I usually try not to let things linger for multiple weeks here. Did you already find a solution? [org.springframework.test.context.support.DependencyInjectionTestExecutionListen\ er@6419fa  sd</body>
  </mail>
  <mail>
    <header>Re: JUnit and Spring configuration</header>
    <body>Spring can't load, because some bean get's a failure, when initialized. That has nothing to do with JUnit, but only with Spring. Ask somewhere, where you can get Spring help. Greetings, systems of [org.springframework.test.context.support.DependencyInjectionTestExecutionListen\ er@6419fa]  sd for</body>
  </mail>
  <mail>
    <header>Re: Collecting proposals for 4.12 features and bugs</header>
    <body>Hi David, I failed to apply the label myself, but I'd like to nominate  Cheers, Stephan  age=1&amp;amp;sort=updated&amp;amp;state=open</body>
  </mail>
  <mail>
    <header>Re: Re: Collecting proposals for 4.12 features and bugs</header>
    <body>Anything in a pull that I haven't already closed or indicated otherwise is definitely on the table for resolution during the 4.12 cycle.  Sorry not to have mentioned that.  age=1&amp;amp;sort=updated&amp;amp;state=open</body>
  </mail>
  <mail>
    <header>Support for multiple Include/Exclude categories</header>
    <body>Hi! I am a user of JUnit and project contributor in github. I am glad to say that we extended Categories with new feature in pull request  This extension is not yet in KentBeck repo, however the implementation and tests are ready. In JUnit we got a consensus of anotations design and behavior, but we do not have consensus in javadoc for Categories class. We would like to ask you to have a look and help us refine the Javadoc, which finally would help to all users of JUnit. Our main goal is to declare many inclusive/exclusive categories on the top of a test suite, unlike the old Categories.java runner which used just only one category. There is Maven community with surefire-plugin, which may use this extension known as groups -currently they only use a single group. Note: you'r welcome to login to www.github.com and contribute to the pull #503 i mentioned above. Thx, Tibor</body>
  </mail>
  <mail>
    <header>Re: SecurityException: signer information does not match</header>
    <body>Thanks. Didn't think it was the test class's signature problem. Test cases in different package cannot easily test non-public classes and methods. Probably the solution to me is to pack all test cases into a test jar and sign it as well.</body>
  </mail>
  <mail>
    <header>Type safe categories</header>
    <body>Hello, we start using categories in a project to distinguish unit and integration tests using database. Our requirement is to run unit tests from within Eclipse and using Maven. The experience was rather disappointing. The support for categories in Eclipse is completely missing.  Maven plugin did not work out of the box as the wrong test executor was instantiated. Once this was fixed, we found that the category class must be available in the class path of all projects, else the plugin fails with a ClassNotFoundException. Why are categories not plain strings as in TestNG? This would prevent class not found exceptions and in addition removes the requirement to have a dependency on the single module containing the categories. If you like you can still use String constants to be "name safe". Evaluating TestNG as an alternative lead to the following results: - Good support in the Eclipse Plugin and Maven -- Groups (= categories) are found by the Eclipse plugin - TestNG does not create a new instance per test. As a consequence all fields must be set in @BeforeMethod. Using a normal constructor causes unexpected results. - @BeforeMethod is not executed, if a group is specified. There is a @BeforeGroup annotation which makes the whole thing much more complex. Best Regards Sebastian</body>
  </mail>
  <mail>
    <header>Re: Type safe categories</header>
    <body>Classes as categories was my idea.  If I had it to do over again, I'd choose strings.  If anyone has the passion and time to invest in a string-based category implementation, we should talk.</body>
  </mail>
  <mail>
    <header>Re: Type safe categories</header>
    <body>This is intentional, either put that @BeforeMethod in the same group as the one you are running or specify "alwaysRun=true". -- Cédric</body>
  </mail>
  <mail>
    <header>Re: Type safe categories</header>
    <body>Am 21.09.2012 um 03:50 schrieb CÃ©dric Beust â: We found this as well. Let's put it that way. It is very flexible but I experienced it as not intuitive. I expect a @BeforeMethod to run always otherwise I would call it @BeforeMethodIfGroupMatches -- Best Regards / Viele GrÃ¼Ãe Sebastian Hennebrueder -----  Java software developer and trainer for Hibernate and Java Persistence</body>
  </mail>
  <mail>
    <header>Re: Type safe categories</header>
    <body>I don't think classes are a bad idea, actually. I implemented the concept of "groups" of tests for Apache Lucene and it is annotation-based. That is: there is a meta-annotation @TestGroup that you can use to annotate your own annotations which are then recognized as groups and either enabled or disabled together. So, for example, slow tests are annotated with this thing: @Documented @Inherited @Retention(RetentionPolicy.RUNTIME) @TestGroup(enabled = true, sysProperty = SYSPROP_SLOW) Lucene coders use multiple IDEs (and emacs, vi, etc...) and I think classes (or annotations in my case) work very well for this. One upside is that you don't need special support for test groups, you can just locate them using regular Java-element searches. Also, it's harder to make a typo, you get support for completion, annotations define additional group properties (such as system properties used to turn them on/off), etc. Obviously there are drawbacks like the ones you mentioned -- you need to reference those annotations during compilation, for example. But all in all, I'd say it's not a bad idea to use classes/ annotations for defining groups. Dawid</body>
  </mail>
  <mail>
    <header>Re: Type safe categories</header>
    <body>Hi Sebastian, we are using the categories and classes are interesting feature. So i implemented a runner which i am discussing in a pull request  If we introduced an annotation, e.g. @TypeSafe or @FailSafe, then the ClassNotFoundException could be avoided due to an absent class in the classpath. What's your opinion? BR, Tibor tests using database. Our requirement is to run unit tests from within Eclipse and using Maven. not work out of the box as the wrong test executor was instantiated. Once this was fixed, we found that the category class must be available in the class path of all projects, else the plugin fails with a ClassNotFoundException. not found exceptions and in addition removes the requirement to have a dependency on the single module containing the categories. If you like you can still use String constants to be "name safe". must be set in @BeforeMethod. Using a normal constructor causes unexpected results. @BeforeGroup annotation which makes the whole thing much more complex.</body>
  </mail>
  <mail>
    <header>Re: Type safe categories</header>
    <body>good point! What frameworks they would be if all had the same ideas -strings. Strings do not know inheritance. That's the difference between frameworks. As I said before introducing @TypeSafe/FailSafe would hide ClassNotFoundExc. Although it would be an issue to use category class in compile time and omit the class in runtime. BR, Tibor</body>
  </mail>
  <mail>
    <header>Re: Re: Type safe categories</header>
    <body>It's very easy to simulate: running the group "db.*" in TestNG will run all the groups that belong to a group that starts with "db". Naming your groups in a hierarchical way similar to packages ("db.fast", "db.slow", "frontend.login", etc...) leads to a very flexible way to structure your tests. -- Cédric</body>
  </mail>
  <mail>
    <header>Re: Type safe categories</header>
    <body>You can use the @Group an classes and methods. If you want to be type safe, then you can use a meta annotation. What do you think? Type safe meta annotation -- Best Regards / Viele Grüße Sebastian Hennebrueder -----  Java software developer and trainer for Hibernate and Java Persistence Am 22.09.2012 um 00:00 schrieb tibord47: implemented a runner which i am discussing in a pull request  ClassNotFoundException could be avoided due to an absent class in the classpath. tests using database. Our requirement is to run unit tests from within Eclipse and using Maven. did not work out of the box as the wrong test executor was instantiated. Once this was fixed, we found that the category class must be available in the class path of all projects, else the plugin fails with a ClassNotFoundException. not found exceptions and in addition removes the requirement to have a dependency on the single module containing the categories. If you like you can still use String constants to be "name safe". fields must be set in @BeforeMethod. Using a normal constructor causes unexpected results. @BeforeGroup annotation which makes the whole thing much more complex.</body>
  </mail>
  <mail>
    <header>Re: Type safe categories</header>
    <body>That's a pretty neat idea! On the second thought -- you lose some of the advantages that I talked about (being able to search for a particular group using IDE search, etc.). I like it thought, it's a nice compromise between the two camps (strings vs. classes). D. On Sun, Sep 23, 2012 at 10:28 PM, Sebastian Hennebrueder  then you can use a meta annotation. implemented a runner which i am discussing in a pull request  ClassNotFoundException could be avoided due to an absent class in the classpath. tests using database. Our requirement is to run unit tests from within Eclipse and using Maven. did not work out of the box as the wrong test executor was instantiated. Once this was fixed, we found that the category class must be available in the class path of all projects, else the plugin fails with a ClassNotFoundException. not found exceptions and in addition removes the requirement to have a dependency on the single module containing the categories. If you like you can still use String constants to be "name safe". fields must be set in @BeforeMethod. Using a normal constructor causes unexpected results. @BeforeGroup annotation which makes the whole thing much more complex.</body>
  </mail>
  <mail>
    <header>Re: Type safe categories</header>
    <body>Hi Sebastian, Nice. I wrote something very similar for our company's internal Integration Test framework. I named the annotation @Keyword. Together with a @ClassRule capable of parsing simple predicates over strings (e.g. 'a', 'a&amp;amp;b', '(a|b)&amp;amp;c') this allows for quite fine-grained control over the set of tests being run. Cheers, Stephan  then you can use a meta annotation. implemented a runner which i am discussing in a pull request  ClassNotFoundException could be avoided due to an absent class in the classpath. tests using database. Our requirement is to run unit tests from within Eclipse and using Maven. did not work out of the box as the wrong test executor was instantiated. Once this was fixed, we found that the category class must be available in the class path of all projects, else the plugin fails with a ClassNotFoundException. class not found exceptions and in addition removes the requirement to have a dependency on the single module containing the categories. If you like you can still use String constants to be "name safe". fields must be set in @BeforeMethod. Using a normal constructor causes unexpected results. @BeforeGroup annotation which makes the whole thing much more complex.</body>
  </mail>
  <mail>
    <header>Re: Type safe categories</header>
    <body>Hi! Why not having an annotation for categories at and use instead the class/package name as a feature to filter? I feel that (the need) for such an annotation implies a risk that test go easily lost (this is implemented on class-level in the RegexpSuite in the project unofficialjunit on SF). An inconvenience of this approach is the need for some rigour when naming classes and packages. On the other hand, this rigour may anyhow be needed to separate "true" unit tests from integration tests, etc. And yes, I would chip in to reimplemente categories in one way or another. Cheers,</body>
  </mail>
  <mail>
    <header>fake console class</header>
    <body>How can I create a fake Console class to simulate user input for JUNIT testing? pl help</body>
  </mail>
  <mail>
    <header>Re: fake console class</header>
    <body>testing? pl help System.in can be replaced with your own stream. I can't recall from the top of my mind, how it's done. It's standard Java and has nothing to do with JUnit, really. A quick web-search revealed:  System.setIn() Greetings,</body>
  </mail>
  <mail>
    <header>Re: fake console class</header>
    <body>Hi Raji! Am 24.09.2012 08:07, schrieb Raji: This is a quite common scenario and as Malte stated, it's not JUnit specific. Nonetheless, I would like to speak about the testing purpose here. Is it really necessary to unit test the input? Or do you want to test the logic after the user entered some data via the standard input? Please reconsider refactoring your code before mocking/replacing standard input. I'm sure there's a better option. Kind regards, Philip</body>
  </mail>
  <mail>
    <header>Re: fake console class</header>
    <body>Refactor your app so it doesn't depend directly on java.io.Console, but instead depends on your own interface with similar methods, for example foo.bar.IO. Pass an instance of IO via a constructor or setter (DI) and supply a mock instance for testing and a Console-backed one in production. Aslak</body>
  </mail>
  <mail>
    <header>Re: fake console class</header>
    <body>For bonus points, refactor the code that interacts with the console such that in operates on an arbitrary InputStream, and then pass in System.in. This way you can use a custom InputStream while testing. testing? pl help</body>
  </mail>
  <mail>
    <header>Re: Re: fake console class</header>
    <body>The System Rules library has a TextFromStandardInputStream rule:</body>
  </mail>
  <mail>
    <header>Re: Type safe categories</header>
    <body>I would like to introduce negation but then I believe we have to put another constraint. To avoid not running tests I would put the negation on the group filtering not the groups for the tests. This allows to say: Just run all but the slow integration tests. The problem: Image you run a suite filtering for: not groupA and you have a test being marked with: groupA, groupB If you compare not groupA to groupA do you fail or not. Even if we decided, it wouldn't be easy to understand. What about the following constraints: - Only a single group per test? - Group filter can have multiple groups but no includes and excludes at the same time. -- Best Regards / Viele Grüße Sebastian Hennebrueder -----  Java software developer and trainer for Hibernate and Java Persistence Am 24.09.2012 um 12:21 schrieb le_garcon_enerve: class/package name as a feature to filter? I feel that (the need) for such an annotation implies a risk that test go easily lost (this is implemented on class-level in the RegexpSuite in the project unofficialjunit on SF). classes and packages. On the other hand, this rigour may anyhow be needed to separate "true" unit tests from integration tests, etc.</body>
  </mail>
  <mail>
    <header>Re: fake console class</header>
    <body>Thanks al guys :) I just created a Console Interface with methods print and read. SystemConsole  class implements the interface with System.out for print and BufferedReader for read. This wil be used in the working code. FakeConsole class also implements the interface. here string arrays is used for input and output. Input array is predefined if necessary. This class is used for testing. Any method that prints, for example, say printMenu has the signature printMenu(Console console) When called inside the program it is called printMenu(new SystemConsole()) When called inside the test it is called printMenu(new FakeConsole())  Regards Raji</body>
  </mail>
  <mail>
    <header>Re: Type safe categories</header>
    <body>FWIW: The way I implemented test filtering (see an earlier reply), the expression '!groupA' would match a test annotated 'groupB', but *not* a test annotated 'groupA, groupB'. In my mind that's in line with the most "obvious" semantics. (Example: if a test is annotated 'UI, componentX', then it stands to reason that it's a UI test of some program component X. If I want to run only non-UI tests, or want to disable testing of said component, then the filters '!UI' and '!componentX' do the right thing, respectively.) Cheers, Stephan constraint. the groups for the tests. wouldn't be easy to understand. same time. class/package name as a feature to filter? I feel that (the need) for such an annotation implies a risk that test go easily lost (this is implemented on class-level in the RegexpSuite in the project unofficialjunit on SF). classes and packages. On the other hand, this rigour may anyhow be needed to separate "true" unit tests from integration tests, etc. integration plugin in have</body>
  </mail>
  <mail>
    <header>Re: Type safe categories</header>
    <body>Hi, I pushed a version having a @Group for a test class or method containing only a single value for the group name. The suite is annotated with either @IncludeGroups or @ExcludeGroups. I am not sure, if I like the two annotations or if a annotation like would be nicer. Do you think that it is a good idea, that a test can only belong to a single group? Would you prefer a single annotation (see @GroupFilter) over the two other annotations? -- Best Regards / Viele Grüße Sebastian Hennebrueder -----  Java software developer and trainer for Hibernate and Java Persistence Am 25.09.2012 um 09:00 schrieb sschroev: expression '!groupA' would match a test annotated 'groupB', but *not* a test annotated 'groupA, groupB'. In my mind that's in line with the most "obvious" semantics. that it's a UI test of some program component X. If I want to run only non-UI tests, or want to disable testing of said component, then the filters '!UI' and '!componentX' do the right thing, respectively.) constraint. not the groups for the tests. it wouldn't be easy to understand. same time. class/package name as a feature to filter? I feel that (the need) for such an annotation implies a risk that test go easily lost (this is implemented on class-level in the RegexpSuite in the project unofficialjunit on SF). classes and packages. On the other hand, this rigour may anyhow be needed to separate "true" unit tests from integration tests, etc. integration plugin instantiated. available in have like</body>
  </mail>
  <mail>
    <header>Filte, Suite and Runner</header>
    <body>Hello, my impression of filter and suites is a little bit mixed. Custom filters and custom runners are coupled and not trivial to use. I understood a suite as the place to choose classes to execute but a suite can be run with a filter which is a suite itself.  You can use a suite to control what is executed but you must explicitly name classes, use a custom runner to make use of advanced filtering like packages. Using an IDE like Eclipse or IntelliJ, using a Suite causes multiple execution of the same test and is more or less unusable. Considering issue thinking about working a little bit on filtering. My idea is that there is a set of common filter and the user can register further filters. default filters: - @Ignore which should be a filter actually as well (but isn't) - group filter - package filter To allow custom registration, we could follow the idea of the ServiceLoader provided with Java 1.6. As junit uses 1.5 we would have to reimplement a part of it but could switch to it later. Basic principle: in a directory META-INF/service you can create a file named like the interface: org.junit.runner.manipulation.Filter and in this class you add the qualified name of custom classes implementing this interface. All filters are added to the chain. Alternatively, such a config file contains only a class which can be used for the user to register additional filters and possibly other stuff. I am thinking about configuration profiles, which allows to customize multiple filters at the same time. I would consider YAML a nice format. --- profile: integration filter: groups - queueintegration - dbintegration filter: package - de.laliluna.foo - de.laliluna.bar filter: de.custom.FilterClass - max: 5 - boost: true --- profile: unit filter: groups - !queueintegration - !dbintegration filter: package - de.laliluna.foo - de.laliluna.bar filter: de.custom.FilterClass - max: 5 - boost: true --- Running the tests, you specify the configuration profile, can register custom filters if you like and have them configured. What do you think? -- Best Regards / Viele Grüße Sebastian Hennebrueder -----  Java software developer and trainer for Hibernate and Java Persistence</body>
  </mail>
  <mail>
    <header>Re: Type safe categories</header>
    <body>Hi Sebastian, If you're anyway willing to consider special syntax (as in your example, where '!' indicates negation), then you might as well go one step further and allow arbitrary propositional expressions, including disjunction, conjunction and grouping (i.e. use of parentheses). At the very least, using @GroupFilter allows you to keep that option open as a future extension. Cheers, Stephan a single value for the group name. group? annotations? expression '!groupA' would match a test annotated 'groupB', but *not* a test annotated 'groupA, groupB'. In my mind that's in line with the most "obvious" semantics. that it's a UI test of some program component X. If I want to run only non-UI tests, or want to disable testing of said component, then the filters '!UI' and '!componentX' do the right thing, respectively.) another constraint. not the groups for the tests. decided, it wouldn't be easy to understand. the same time. class/package name as a feature to filter? I feel that (the need) for such an annotation implies a risk that test go easily lost (this is implemented on class-level in the RegexpSuite in the project unofficialjunit on SF). naming classes and packages. On the other hand, this rigour may anyhow be needed to separate "true" unit tests from integration tests, etc. another. integration within plugin instantiated. available in prevent to have like all causes complex.</body>
  </mail>
  <mail>
    <header>Re: Re: Type safe categories</header>
    <body>For what it's worth, TestNG addresses this need by embarking a BeanShell interpreter. Details here:  BeanShell works great and is very light, but it's no longer being maintained. I think it's fine for this kind of usage but I would probably consider different languages today. -- Cédric</body>
  </mail>
  <mail>
    <header>JUnit and Spring configuration</header>
    <body>Hello everyone, I'm trying to configure JUnit to work with Spring, but I cannot. I create a test class this way: ------------------------------------------------- @RunWith(SpringJUnit4ClassRunner.class) @Autowired @Test .... ------------------------------------------------- In classpath, I inserted src/main/resources, where the web-application-config.xml is located. Here its content: ------------------------------------------------- ------------------------------------------------- When I run as JUnit the MyControllerToTest class, I get the following: ------------------------------------------------- ERROR: org.springframework.test.context.TestContextManager - Caught exception while allowing TestExecutionListener [org.springframework.test.context.support.DependencyInjectionTestExecutionListen\ er@6419fa] to prepare test instance [com.infoone.myapp.MyControllerToTest@10036f2] java.lang.IllegalStateException: Failed to load ApplicationContext ... Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'flowExecutor': Cannot resolve reference to bean 'flowRegistry' while setting bean property 'flowDefinitionLocator'; nested exception is org.springframework.beans.factory.BeanCreationException: Error nested exception is java.lang.IllegalStateException: An I/O Exception occurred resolving the flow location pattern '/**/*-flow.xml' ... aused by: org.springframework.beans.factory.BeanCreationException: Error nested exception is java.lang.IllegalStateException: An I/O Exception occurred resolving the flow location pattern '/**/*-flow.xml' ...4 Caused by: java.lang.IllegalStateException: An I/O Exception occurred resolving the flow location pattern '/**/*-flow.xml' ... Caused by: java.io.FileNotFoundException: class path resource [WEB-INF/flows/] cannot be resolved to URL because it does not exist ------------------------------------------------- Maybe, you also need my web-flow-config file, also located in src/main/resources (whereas my flows are in WEB-INF/flows/**/*.xml): ------------------------------------------------- sd class="org.springframework.webflow.security.SecurityFlowExecutionListener" ------------------------------------------------- Please consider that I'm also using JSF and Icefaces (which I don't want to test via JUnit at the moment). Thank you! -- View this message in context:  Sent from the JUnit - User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: Type safe categories</header>
    <body>Hello! after some considerations, I believe to have a single annotation is nicer. I changed the code accordingly and pushed it to Are there any missing pieces? @CÃ©dric We use python to execute snippets as expressions in a Java project. It is nice but always requires further dependencies. -- Best Regards / Viele GrÃ¼Ãe Sebastian Hennebrueder -----  Java software developer and trainer for Hibernate and Java Persistence Am 26.09.2012 um 00:05 schrieb CÃ©dric Beust â:</body>
  </mail>
  <mail>
    <header>Re: Filte, Suite and Runner</header>
    <body>Hello, here is a proposal to provide a simple filter mechanism in Junit Custom filter in 3 steps - create a config file - create a class which contributes filter - implement your filter 1) Config file Create a text file in META-INF/org.junit.contribution containing the class implementing your contribution sample content as used in the test: org.junit.experimental.filter.CustomContribution 2) Implement the contribution class 3) Implementing your filter That's all. You can find the latest version at Have a look in the tests in org.junit.experimental.filter.GroupTests to see how it works Side notes # This approach provides just another filter. # It breaks integration with IntelliJ to some extent as IntelliJ only makes use of the ignore event # It only works with maven if the use of surefire-junit47 is enforced. It is used automatically only if you have Junit &amp;gt; 4.7 AND using parallel test processing # it allows to trigger an event as for example the @Ignore would do, which allows Eclipse, IntelliJ and maven in the future to show how many tests where filtered out. # it is executed per test method as @Ignore as well # it allows to not use test suites any more # it separates the filter concept cleanly from the test runner and suites I appreciate any feedback. -- Best Regards / Viele Grüße Sebastian Hennebrueder -----  Java software developer and trainer for Hibernate and Java Persistence Am 25.09.2012 um 19:32 schrieb Sebastian Hennebrueder: custom runners are coupled and not trivial to use. I understood a suite as the place to choose classes to execute but a suite can be run with a filter which is a suite itself. You can use a suite to control what is executed but you must explicitly name classes, use a custom runner to make use of advanced filtering like packages. of the same test and is more or less unusable. thinking about working a little bit on filtering. further filters. provided with Java 1.6. As junit uses 1.5 we would have to reimplement a part of it but could switch to it later. interface: org.junit.runner.manipulation.Filter and in this class you add the qualified name of custom classes implementing this interface. the user to register additional filters and possibly other stuff. filters at the same time. I would consider YAML a nice format. filters if you like and have them configured.</body>
  </mail>
  <mail>
    <header>Re: Migrating Junit 4.10 to 3.8.1</header>
    <body>David, thank you so much for answering so promptly and in such an accurate way. My tests were not recognised because of the upper case. I am working in a group assignment usign Maven, Junit 3.8.1 is the default Version my proffessor demands. a try/catch to make it work. Could you please tell me if it s correct to do this?. TestcuandoAsientoConEstadoReservadoConSobreReservasEsCompradoLasSobreReservasSeC\ Assert.assertTrue(asientoDisponible.getReservante().getDni().equalsIgnoreCase(ju\ Assert.assertTrue(asientoDisponible.getReservante().getDni().equalsIgnoreCase(pe\</body>
  </mail>
  <mail>
    <header>Re: Re: Migrating Junit 4.10 to 3.8.1</header>
    <body>On Thu, Sep 6, 2012 at 4:38 PM, gonzalezsj@... This is very depressing :-( If it's an option, I'd encourage you to try to find a class with a teacher that's a bit less antiquated because this doesn't bode well about his expertise in the domain. -- Cédric</body>
  </mail>
  <mail>
    <header>Re: Re: Migrating Junit 4.10 to 3.8.1</header>
    <body>Make an appointment with the professor. Show him how 3.8.1 is old and buggy and not current. Show him how the new version is still open source, free to all, etc. Do not show up the professor in class, we tend to get grumpy when that happens and we remember who made us look bad. pat</body>
  </mail>
  <mail>
    <header>Re: Re: Tests starting before Logback initialisation complete when run in parallel</header>
    <body>People *have* been known to make a microscopic Junit run-listener they attach to surefire to do this. I know this might give me flames ;) Check docs at  and small sample project at  /target/JUnit4RunListenerIT/junit4-runlistener for a sample on how to do this. Kristian</body>
  </mail>
  <mail>
    <header>Re: Re: Migrating Junit 4.10 to 3.8.1</header>
    <body>Sabrina, Yes, using try/catch to test exceptions is a common pattern in JUnit 3. Meeting a class requirement sounds like a good reason to backport.  You could take other posters' advice about how to change your professor's mind or your class registration, but I wouldn't be surprised if just staying put and learning what you can under the requirements is a better use of time. At your next job, you'll have written the same tests in JUnit 3 and JUnit 4, and will be well-informed about the advantages and disadvantages. Good luck, On Thu, Sep 6, 2012 at 7:38 PM, gonzalezsj@... TestcuandoAsientoConEstadoReservadoConSobreReservasEsCompradoLasSobreReservasSeC\ Assert.assertTrue(asientoDisponible.getReservante().getDni().equalsIgnoreCase(ju\ Assert.assertTrue(asientoDisponible.getReservante().getDni().equalsIgnoreCase(pe\</body>
  </mail>
  <mail>
    <header>Re: Re: Tests starting before Logback initialisation complete when run in parallel</header>
    <body>This topic comes up again and again. Often not with the multithreading-aspect attached. So it's not uncommon, that people want to do one time initialization and cleanup. I had this problem two more than once. One time initialization can be done more or less. One time cleanup can't be done, really. I would really like to see this in JUnit, since I execute my JUnit tests in two different IDEs and in maven. So Changing the JUnit Runner is really not a choice. We already have RunListeners, which would be nice in theory, but does not work well in IDEs. So if I could somehow attach a RunListener, even though I don't call the Runner myself, that would be really cool! Greetings,</body>
  </mail>
  <mail>
    <header>Re: Re: Tests starting before Logback initialisation complete when run in parallel</header>
    <body>Malte Finsterwalder wrote on 7.9.2012 23:38: Well, I'm working on a new test runner ( initialization and cleanup is definitely on the roadmap. This far I've had to use hacks like shutdown hooks (java.lang.Runtime.addShutdownHook) and I too want proper support from testing frameworks. One of the motivations of making Jumi is to have the tests executed the same way regardless of whether an IDE or a build tool launches them. It has a slightly larger scope than JUnit's test runner (including process forking and test discovery) so adding this kind of hooks there may be a bit easier than to JUnit. Though you'll need to wait a while before it gets integration support from all the tools - the first release is to be expected within a couple of months. -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Re: Migrating Junit 4.10 to 3.8.1</header>
    <body>Sabrina, Here is a utility class that has an "assertException" method.  reUtil.html Here is an example invocation:  (See the public void testPlugins_notActive() method.) -------------------- Rest assured that not everyone automatically thinks the latest release of a technology is the "best" alternative... or that an  exuberance for injection demands attention.  _Marvin PatternEnabled.com</body>
  </mail>
  <mail>
    <header>Re: Tests starting before Logback initialisation complete when run in parallel</header>
    <body>I can see value in a @BeforeSuite-annotation but in general I think test-suites should be administered by the build-tool. - In this case SureFire, which perhaps should support some suite/category-solution that can be applied to many test-frameworks, not only JUnit. But Brett's particular problem is not limited to a test-suite or testing framework. It goes beyond testing. - He can accidently encounter it whenever he starts up a multi-threaded JVM, therewith making JVM-startup his problem domain. Therefore I think that using a javaagent would be a good pattern and - yes - my build tool can do that ... - In the Surefire-configuration you specify an "argLine" for the JVM: In the "Premain-Class" of "myagent" we can define JVM-wide setup and/or tearDown - e.g. public class GlobalTearDown extends Thread public static void premain(String args) public void run() Output from Maven/Surefire when "GlobalTearDown" is used as "Premain-Class": --------------------------------------------------------------------- [surefire:test] Surefire report directory: /home/me/projects/experiments/target/surefire-reports HELLO FROM premain ------------------------------------------------------- T E S T S ------------------------------------------------------- Running org.callbackparams.experiments.DummyTest Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.029 sec Results : Tests run: 1, Failures: 0, Errors: 0, Skipped: 0 TEAR-DOWN EXECUTES HERE --------------------------------------------------------------------- I don't know how the "Premain-Class" should look to solve Brett's problem but I'm quite sure the problem can be elegantly solved with this pattern. - And his solution can perhaps be easily reused in other projects as well as outside of the testing activities. /Henrik</body>
  </mail>
  <mail>
    <header>@TimeoutSuite, how do I pass this as a parameter on the command line</header>
    <body>Hi! Is there a way to pass the TimeoutSuite as a parameter on the command line when I start the test ? Thanks,</body>
  </mail>
  <mail>
    <header>Re: @TimeoutSuite, how do I pass this as a parameter on the command line</header>
    <body>If you mean this:  mizedtesting-runner/com/carrotsearch/randomizedtesting/annotations/TimeoutSuite.\ html then you're using the wrong mailing list because that's not part of standard JUnit. Anyway, the answer would be the number of milliseconds followed by "!" (to override any annotations, otherwise it's just a default for non-annotated classes). -Dtests.timeoutSuite=1000! Dawid</body>
  </mail>
  <mail>
    <header>Re: Re: Tests starting before Logback initialisation complete when run in parallel</header>
    <body>Except when using an IDE, there I just want to: (1) select an individual test and have that run in a Debugger. Or (2) select a suite or class hierarchy and have the output appear in the JUnit window (and log window if appropriate) confirming things are still working. Agree completely here, with the caveat that _most_ situations would probably be catered for by @BeforeClass. Q: In multi-threaded mode: are multiple threads used to run the @BeforeClass code? test-suites should be administered by the build-tool. - In this case SureFire, which perhaps should support some suite/category-solution that can be applied to many test-frameworks, not only JUnit. I agree partially here. Tests should easily selectable within an IDE, in particular I want to be able to debug a specific test or run all tests with the same convenience that I can execute the debugger against the main project. Using Maven + Surefire results in added complexity that isn't really necessary. This fails with the IDE use case - IDE users quite often want to execute a suite or all tests or a particular set of tests simply by grouping... then they want to debug within that set. framework. It goes beyond testing. - He can accidently encounter it whenever he starts up a multi-threaded JVM, therewith making JVM-startup his problem domain. Therefore I think that using a javaagent would be a good pattern and - yes - my build tool can do that ... - In the Surefire-configuration you specify an "argLine" for the JVM: I disagree here. In applications (web or console based) I can already control programmatically how the logging apparatus is instantiated, meaning this isn't an issue for me in the normal case. When using JUnit in parallel test mode I can't control this at all tearDown - e.g. /home/me/projects/experiments/target/surefire-reports I'm quite sure the problem can be elegantly solved with this pattern. - And his solution can perhaps be easily reused in other projects as well as outside of the testing activities. I appreciate you've gone to great lengths to propose a general 'fits all' category of solution but I am concerned about the unintended consequences such behaviour might introduce (there might be none and I fully admit that I don't rightly know). I do know that this type of shutdown hook processing is the wrong solution for web applications (they should hook into the container life-cycle for such tasks). Essentially we're talking about controlled initialisation and shutdown of an application using whatever is the appropriate life-cycle. In this context the life-cycle is the initialisation and shutdown of JUnit or whatever testing framework being used. Containers / Frameworks that support multi-threading usually have a single-threaded initialisation and shutdown phases to enforce deterministic behaviour during these critical phases before going into full mutli-threaded mode. We are talking about a very specific case of behaviour which is ultimately caused by parallel test execution without a guaranteed deterministic stable initialisation phase. It boils down to the simple fact that there is a use case for something similar to: @BeforeAll / @AfterAll (or any appropriate naming) These should be executed serially rather than multi-threaded and considered 'reserved' only for special global setup / tear-down operations that must be executed under single-threading conditions. What's more, this should work out of the box with any IDE. As David et. al. have indicated already this is technically possible by using: (1) A common base class and locking OR (2) Annotating all classes with a special rule and using locking The problem with this solution is its logically in reverse. I would like the startup / teardown behaviour applied automatically rather than me having to decorate classes accordingly or use a specific base class. Use of a special Runner is possible I guess but would break in a IDE (which typically uses its own runner). Essentially I guess this is a necessary start-up 'aspect'  - which I suspect is, in the main, the idea you're proposing by using a Java Agent Irrespective however, the discussion is most interesting. -- Best Regards, Brett Delle Grazie</body>
  </mail>
  <mail>
    <header>Re: @TimeoutSuite, how do I pass this as a parameter on the command line</header>
    <body>Thanks Dawid! This was what I was looking for ... Regards, -NN  mizedtesting-runner/com/carrotsearch/randomizedtesting/annotations/TimeoutSuite.\ html</body>
  </mail>
  <mail>
    <header>Re: Migrating Junit 4.10 to 3.8.1</header>
    <body>Marvin thank you for your answer. It gave me a different viewpoint of how to manage Exceptions, might be able to use it on my next assignment. I Appreciate everyones willingness to fulfill my doubts. Regards, Sabrina.  reUtil.html  technology is the "best" alternative... or that an  exuberance for injection demands attention.</body>
  </mail>
  <mail>
    <header>Re: Re: Migrating Junit 4.10 to 3.8.1</header>
    <body>Hi, consider using for try/catch. -- Regards / Pozdrawiam Tomek Kaczanowski</body>
  </mail>
  <mail>
    <header>Re: Re: Migrating Junit 4.10 to 3.8.1</header>
    <body>Marvin, In your code you have: l#91 92 l#92 l#93 l#94 95 l#95 l#96 l#97 98 l#98 l#99 l#100 l#101 Is there any reason why you don't have: l#91 92 l#92 l#93 l#94 95 l#95 l#96 l#97 l#100 l#101 And let JUnit handle any unexpected exceptions?  reUtil.html  -- Maybe she awoke to see the roommate's boyfriend swinging from the chandelier wearing a boar's head. Something which you, I, and everyone else would call "Tuesday", of course.</body>
  </mail>
  <mail>
    <header>License</header>
    <body>Hi all, I'm currently managing a release for Apache Wave ( realise this is released under the CPL license however it is not compatible with the Apache 2 License, which Apache require us to use. I was wondering if it would be possible to relicense the software under a different license so we can continue to use the software. A good list of licenses to use is located here:</body>
  </mail>
  <mail>
    <header>Re: License</header>
    <body>Dne Ät 13. zÃ¡ÅÃ­ 2012 08:12:56, anguslturner napsal(a): I'd like to point out that TestNG offers almost identical functionality to JUnit and it comes with Apache friendly license. -jt</body>
  </mail>
  <mail>
    <header>Re: License</header>
    <body>Dne Ät 13. zÃ¡ÅÃ­ 2012 19:07:07, Jaroslav Tulach napsal(a): Moreover I'd like to add that due to recent work of LukÃ¡Å¡ Jungmann[1] it should be pretty easy to migrate from JUnit4 to TestNG in an incremental manner. LukÃ¡Å¡ bachelor studies were successfully finished due to this project. Now he is looking for a suitable topic for his master thesis - so, in case migrating to TestNg is not as smooth as you'd like it to be, LukÃ¡Å¡ will be glad to solve all your inquiries as part of his subsequent studies. -jt [1]</body>
  </mail>
  <mail>
    <header>Re: License</header>
    <body>Your license page seems to mention CPL down there with something about "appropriately labeled", whatever that means? In any case, the interesting question for me is how does the license of a test framework relate to the tested product? If I just write some test cases and use JUnit as a library, does the license of the test framework have any impact on me? If I release the tests? If I don't? If I include the junit.jar file with my distribution? I always think that if the framework is used as an unmodified library the license would not impact me. Perhaps if it is GPL I need to provide a link to the framework source code? But I am no expert on the licenses and this always is a bit confusing for me. What do others think?</body>
  </mail>
  <mail>
    <header>Re: License</header>
    <body>Honestly, I'd like to see JUnit put to as many uses as possible, and would hate to see its licensing get in its way.  I am not a lawyer, but have learned to be very cautious around these things.  anguslturner, would you or someone else on the Apache project have time to invest in collaborating to solve this problem in a way that dots all the T's and crosses all the I's, legally? Thanks,</body>
  </mail>
  <mail>
    <header>Re: License</header>
    <body>You should discuss it in your project, but if you are using for your build only, and don't redistribute it, it should be compliant with the ASF policy. There is quiet a lot of other apache projects that are using junit for their test.  Apache Ant is an example. Gilles Scokart</body>
  </mail>
  <mail>
    <header>Re: License</header>
    <body>I think I see the issue, after looking in the svn repo, namely that the source tree includes .jar files, specifically junit... Therefore under apache voting rules, as we vote on the source distribution, it includes junit. A simple solution would be to use maven ant tasks or ivy to download junit from central when somebody builds the source with a view to testing. Cassandra has a good example of how to do this... (better might be to use a build tool such as maven - I am biased towards maven being on the PMC) but this will most likely delay your release vote</body>
  </mail>
  <mail>
    <header>Re: License</header>
    <body>There are loads of apache projects using junit. I think you may be mis-interpreting the requirements. If you are building with maven (for fecks sake we use junit) then you are not distributing either the junit source code or the binary, so you shouldn't even need to worry. Iirc the rules are for code included in the source distribution that the vote applies to. Are you really including junit in that?</body>
  </mail>
  <mail>
    <header>Re: License</header>
    <body>I'm new to all this release stuff and I may have something completely wrong :-). Currently in our repo we have the junit source .jar as we use it to run our tests, and to avoid external dependancies that is included? I wasn't sure if we needed to include tests in the source distribution, which may solve the problem completely. I'll ask again on our mailing list and see what the consensus is. CPL is actually accepted if it's included in a binary form. Is that easy to do? (I'm new to java/java build systems and just agreed to check all the licensing stuff is in order, I do know other languages so i'm not completely clueless however)</body>
  </mail>
  <mail>
    <header>Re: Migrating Junit 4.10 to 3.8.1</header>
    <body>@Colin, It was a bit hard to read... but I understand your question to be... why bother to have an assertException() method: 74      /** 75       * This method asserts that a specified exception was thrown. 76       * 77       * @param expectedExceptionClass 78       * @param actualException 79       * 80       * @return boolean 81       */ 82      public static boolean assertException( 83          final Class&amp;lt;? extends Throwable&amp;gt; expectedExceptionClass, 85 86          if (expectedExceptionClass.getName().equalsIgnoreCase( 90 91          // Determine if a previous assertion failed error already occurred. 92          if 93 94              // If so, re-throw the error. 96 98 99          Assert.fail("The expected exception [" + expectedExceptionClass.getName() 100             + "] was not thrown.\n" + "However, an unexpected [" 101             + actualException.getClass().getName() + "] exception was 102 There are a couple of primary points to be made: 1. The assert method ends 'cleanly' with an AssertionFailedError if the wrong exception was caught. 2. The assert method displays feedback listing the expected exception and the actual exception. _Marvin PatternEnabled.com</body>
  </mail>
  <mail>
    <header>SecurityException: signer information does not match</header>
    <body>I have a signed JAR, my.jar and one test case, com.company.MyTest. When I run JUint test in command line with java command, I got following error: /root/dev/jdk1.7.0_03/bin/java -cp ./junit-4.10.jar:./release/my.jar org.junit.runner.JUnitCore com.company.MyTest JUnit version 4.10 Exception in thread "main" java.lang.SecurityException: class "com.company.AgentClass"'s signer information does not match signer information of other classes in the same package java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142) Googled this problem. Most people said it's because of conflicts of certificates or signed and unsigned class in classpath. But I only have two jars in my classpath, one is my signed jar, the other is junit jar.  I don't see conflicts here and I can guarantee that all classes in the jar are signed with the same certificate. Actually my NetBeans project which includes the same jar, JUnit4 and many JUnit test cases works just fine. I just cannot make this java command line working. Anybody can help with it? Thanks in advance.</body>
  </mail>
  <mail>
    <header>Re: SecurityException: signer information does not match</header>
    <body>Hmm.. Just for clarification, is MyTest.class in my.jar?</body>
  </mail>
  <mail>
    <header>Re: SecurityException: signer information does not match</header>
    <body>No, com.company.MyTest is not in my.jar. The MyTest.class file is located in ./com/company folder. It is a unit test class which tests classes packaged in my.jar. Thanks,</body>
  </mail>
  <mail>
    <header>Re: Re: SecurityException: signer information does not match</header>
    <body>So com.company.MyTest is coming from an unsigned .class file, and com.company.AgentClass is coming from a signed .jar file.  Java doesn't like mixing signed and unsigned classes in the same package, and is telling you so.  The easiest thing to do may be to move your test class to a new package.</body>
  </mail>
  <mail>
    <header>Re: Feedback Required | Extending Junit to perform Data Driven Testing</header>
    <body>Hi Matthew, Sorry for replying late. I was caught up in a lot of other stuff. I saw the proposal for @DataProvider and it looks a good start, but IMHO it might not turn out to be a great one. Here are some reasons why I feel such apprehension: 1)The annotation currently is applied per method, which means that if there is a single class providing the input test data for 10 test methods, the user has to apply the annotation over each test method. This seems undesirable as it promotes duplicacy within the test class. Moreover, running each test method would mean extra processing, which can be avoided by making the annotation support ElementType.TYPE as well. I have a similar annotation(@DataLoader)in my test framework, EasyTest that supports such a behavior.( /easytest/annotation/DataLoader.java 2)It is not clear from the discussion which JUnit Runner will support this annotation: Parameterized or Theories or there would be a new Runner. 3)It would be nice if we give some sense of direction to the user regarding the structure of DataProviderClass and the method it supports. So, something like : 3)I somehow get the feeling(and it could be simply me and if that is the case, please ignore me) that the aspect of performing Data Driven Testing should be given more time, and proper thought should be put in around its design and the way it will be made available to the end users. I feel we should not rush into developing a feature focusing a single use case/requirement, rather we should try to first gather and understand all the aspects of Data Driven Testing and then develop that requirement as a whole rather than in pieces. I would be much more beneficial to the community as a whole. Thanks, Anuj</body>
  </mail>
  <mail>
    <header>Re: Re: Feedback Required | Extending Junit to perform Data Driven Testing</header>
    <body>Sorry for any misunderstanding, I agree that there are parts which need to be clarified. See my responses inline:  annotation/DataLoader.java If you have a single set of data which applies to all of the test methods, then you can use the current implementation of Parameterized. My point was that I wish to have two methods which have separate sets of data, so therefore I have to specify the DataProvider multiple times. Unless of course, you're suggesting that if we specify @DataProvider at class level, it has the same effect as the current Parameterized? I wouldn't object to that. I was planning to modify Parameterized, but a new runner would be acceptable. first thought. However, since we're specifying the name of the method in our DataProvider (if dataProviderClass is not specified), why not be able to specify it in the dataProviderClass? The main difference would be that the method would need to be static in our class, whereas in the dataProviderClass it could be non-static. 3)I somehow get the feeling(and it could be simply me and if that is the I'm not rushing, that's why I'm asking the question on the junit mailing list :-) However, I think this is a generalization of the current usage of Parameterized, and this would be useful, to me at least. Thanks. Matthew.</body>
  </mail>
  <mail>
    <header>Re: Re: Feedback Required | Extending Junit to perform Data Driven Testing</header>
    <body>Anuj wrote on 28.8.2012 11:53: Instead of expanding JUnit beyond what fits its design (i.e. tests are expressed as methods in a single nesting level), it's possible to use another testing framework which is more expressive and can express such tests out-of-the-box. Here is an example of how it can be done in Specsy ( thanks to Specsy's closure-based approach and unlimited nesting of tests. For now it's in Scala, but Specsy 2 will have also Java and Groovy frontends (and the backend will be rewritten in Java to avoid a dependency to the massive Scala library). import org.junit.runner.RunWith import org.specsy.scala._ import org.hamcrest.MatcherAssert.assertThat import org.hamcrest.Matchers._ @RunWith(classOf[Specsy]) tests is immutable When that is executed, the names of the tests will be in a tree like this: MultipleParameterizedSpec - adding ints - adding strings (Though at least in IDEA 11, using the current JUnit runner, the tree visualization is a bit buggy. That will be fixed when I finish implementing the Jumi test runner ( things supports nested tests natively.) -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Re: Re: Feedback Required | Extending Junit to perform Data Driven Testing</header>
    <body>Esko Luontola wrote on 28.8.2012 17:02: In case the Yahoo mailing list messed up the formatting, here is the code again: -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Re: Feedback Required | Extending Junit to perform Data Driven Testing</header>
    <body>Het Matthew, I think my previous mail got lost as I cannot see it being delivered to the group even after 3 hours. So here is my response once again: 1) Parameterized runner does not work in a way that I was talking about DataLoader below. It has the drawback that if you provide a single set of test data for multiple methods, it will pass all the test data to all the methods. Have a look at this blog post for more clarification of the Parameterized Runner and its drawback:  2) I feel a new runner would be a better approach although I do not know what all feature set will this runner support. 3) I feel it is easier and also simpler if we get rid of the whole idea of providing method names. I say this because in real world scenario, no two test methods will have exactly the same set of test data. Thus the name of the method should suffice instead of asking the user to explicitly specify the method name in the annotation. But thats just my approach. I feel this requires more input from the community. Cheers! Anuj  annotation/DataLoader.java</body>
  </mail>
  <mail>
    <header>Re: Re: Feedback Required | Extending Junit to perform Data Driven Testing</header>
    <body>I'm glad this discussion is going on.  I don't have a comprehensive opinion yet, but did want to tip my hand on one bias, in case it guides future conversation. I'm not likely to be very keen on adding any features to JUnit core whose primary motivation is to reduce the number of classes in a suite.  If a user wants to do two different things, but have them accessible in the file system in one place, the Enclosed runner is always available: @RunWith(Enclosed.class) IMHO, classes are how Java groups methods and data that belong together. I'm reluctant to introduce new ways of grouping (such as annotations on methods that contain the names of other methods) if equivalent class-based techniques will work.  annotation/DataLoader.java</body>
  </mail>
  <mail>
    <header>Re: Re: Feedback Required | Extending Junit to perform Data Driven Testing</header>
    <body>One thing that you can't do is stack runners, so you can't use Enclosed in conjunction with other runners. I'm sure there was an issue to allow multiple runners for a test class, but I can't find it now. I think this is an avenue to explore anyway. My motivation here is to group all my tests for one class together in one test class, it's true. Instead of having one FooTest, I've got FooTest, FooBarTest, FooBazTest. If you don't like names of methods (which I can understand), what if we had a class name which was instantiated (like the dataProviderClass in my example), which had to implement an interface? This require a local static class for each test, which would be acceptable. Bit more boilerplate, but never mind. Using this gist: names are not fixed, and that the method of running isn't decided (but I would prefer to use Parameterized). Matthew Farwell.  annotation/DataLoader.java</body>
  </mail>
  <mail>
    <header>Re: Feedback Required | Extending Junit to perform Data Driven Testing</header>
    <body>Hi David, I get from your reply that you are not very keen on introducing an annotation that needs to be applied per method level. Is this the correct assumption or did I misinterpret it? if it is then I also agree with you that having a class level annotation is more beneficial than having a method level annotation. That's what EasyTest(my extension to JUnit) now has in the form of @DataLoader(although for flexibility and completeness purposes it is also available at the method level.) I did not get the following part: "I'm not likely to be very keen on adding any features to JUnit core whose primary motivation is to reduce the number of classes in a suite." Cheers!Anuj opinion whose a file together. on class-based to about set of all the  ml know idea of no two name of specify need stuff. but why I that if test seems Moreover, be have a supports  asytest/annotation/DataLoader.java point so Unless of class object to support Runner. user classes was method in be able be that is the Driven around feel understand requirement mailing usage to get current with junit order to you with which I'm create are to @DataProvider data item in proposal. I @DataParameter so just think also? hands. So the new choose = the CSV loader, in .dat testWithStrongParameters(@DataProvider()LibraryId id , parameter's optional + extending annotations.You GitHub Theories fileType = the loader, fileType = MyDataLoader.class)public .dat void DataProvide should paramName void item.getItemId() + GitHub</body>
  </mail>
  <mail>
    <header>Re: Feedback Required | Extending Junit to perform Data Driven Testing</header>
    <body>A Side note first: The gist has a comma along with it, therefore it doesn't work when clicked. :) Matthew, being a JUnit user for so long, personally I would repel at the idea of writing static classes that extend an interface in my test class. Here are my reasons: 1) It makes the whole process of writing test cases more complicated. Also, the writing test cases is now coupled with writing test data. A tester cannot work exclusively on writing test data without concerning  himself from the test cases. This leads to coupling. We should allow the user to write test data separately from the test case. 2) We, as developers, get only a fraction of the time to write test cases, and therefore the less time we have to spend on writing and executing the test cases, the better. 3) There is a problem of maintenance here. I personally believe that, the less you make a user depend on your framework, the better it is. Junit's @Test is actually a classic example of how easy it is to get up and running without the user thinking about any external dependencies. The user doesn't have to follow a nice learning curve and know the APIs. That's where annotations are so powerful. 4) In your above gist as well(just like the previous one), a user has to provide annotation at the method level, which, as I pointed out before, can and ideally should be avoided. The user should be able to say(in terms of writing test cases) something like : "Here is my test data which contains data for each test method I have in my test class. Now run all the methods that are Tests and pass the right parameters to them." Well, that's where atleast my money lies and that's what I have tried to capture in EasyTest. Again, it is a philosophical discussion which can have a lot of rights and wrongs. Whenever I design any software, my philosophy always is: "Think about what the users would be required to learn/code about my software, in order to get up and running with my system." The less the user needs to learn and depend on an external system, the better and faster the development. Obviously, there are situations where certain things cannot be avoided, and then we make informed decisions. :) Cheers! Anuj  annotation/DataLoader.java</body>
  </mail>
  <mail>
    <header>Re: Re: Feedback Required | Extending Junit to perform Data Driven Testing</header>
    <body>I really think that you don't understand my use case here, I'm sorry. This is my use case. I have a class which contains multiple methods that I wish to test. Each test requires it's own, specific data set. I cannot use Parameterized because I must define a constructor, and I cannot have multiple constructors. I would like to make my job easier by being able to say test this method with this dataset. I use Parameterized a lot, and I have absolutely no problem with defining the data in my class, just like it is suggested in the javadoc for Parameterized. If I could use the same data set for all of the methods I wished to test, then I could use the current implementation of Parameterized. So see my comments inline. You don't use Rules? These are effectively the same thing. You extend a class/interface and reimplement a method. Effectively the same thing here. I can understand what you're saying about separation of tests &amp;amp; test data, but that's not what I want to do. I have no problem with the data and tests being in the same physical file. In fact, I prefer that because I'm doing unit testing. In the past, I have defined my test data in another file, but that's not what I'm talking about here. 2) We, as developers, get only a fraction of the time to write test cases, I don't understand what you're trying to say in either of these points. Like I say above, if I could define something at class level, then I wouldn't need to add this functionality to JUnit. Also, in your easytest framework, you have annotation which applies at method level, so I don't what you're objecting to.  annotation/DataLoader.java</body>
  </mail>
  <mail>
    <header>Re: Feedback Required | Extending Junit to perform Data Driven Testing</header>
    <body>The main difference between Rule and what you suggest is that Rule acts as a true composition where the class it is being used in doesnt define the behavior of the Rule, instead it uses the Behavior. In your case you are defining as well as using the behavior in the same class.  This is a perspective issue. I always look at the fact that a single class should define and handle single behavior. As far as DataLoader annotation goes in the EasyTest framework, the biggest difference between what you suggest in your gist and what DataProvider does is that a user is not required to use @DataProvider at the method level. He can simply use the annotation at the class level and the framework will take care of the rest. A user can simply say @test on its test method and the framework will take care of the rest. As I said before, the functionality of applying the DataLoader annotation at the method level is for completeness purpose and not a mandatory requirement. And I am not objecting to your solution of asking a user to provide a static class per test method, but I am presenting my view point that I would personally not be using such a Runner/behavior. But again that is just me. There could be a lot of people who may find this idea very interesting. But I am not one of them unfortunately :(. Cheers!  annotation/DataLoader.java</body>
  </mail>
  <mail>
    <header>Re: Re: Feedback Required | Extending Junit to perform Data Driven Testing</header>
    <body>Matthew, You can use Enclosed in combination with other runners, at least the way I intended it: @RunWith(Enclosed.class) I think that would solve part of your frustration here, yes?  annotation/DataLoader.java</body>
  </mail>
  <mail>
    <header>Re: Re: Feedback Required | Extending Junit to perform Data Driven Testing</header>
    <body>Hi all, Maybe I am a bit off topic, but I think JUnit used to be really nice when you looked it up and it was so simple to use and understand. Now you get these rules, theories, runners, and all kinds of strange things. They are nice for anyone needing to extend JUnit to integrate with something external but I wish the user never needs to see the stuff.. I like the basic use of annotations in JUnit 4 but I prefer to have any more complex stuff written in the code and not in the annotations. Of course, it is nice to have the option and support those who like a different type of an approach. Just saying... :) Teemu</body>
  </mail>
  <mail>
    <header>Tests starting before Logback initialisation complete when run in parallel</header>
    <body>Hi, I'm using JUnit 4.10 with Maven 3.0.4, Surefire 2.12.3, JDK 1.6.0_35 on Windows 7 Surefire is configured with parallel=methods and threadCount=10 For logging, I'm using SLF4J to Logback, initialised by default method (i.e. configuration file logback-test.xml is on the test classpath) I have an order of initialisation problem in that: (1) Some unit tests test classes that use commons-logging (and logback via jcl-slf4j) but are ending up with Null loggers. (2) jcl-slf4j is not initialised _until_ those classes are called. If I disable parallelism the code works correctly, implying an order of initialisation issue. According to the most recent FAQ on Junit.org (Section 5, #3) I could use @BeforeClass and @AfterClass at the class level but I'm talking about at the global level, something that needs to be executed even if only a single test is run. What is the correct method to add global, one-time, setup / tear-down hooks? In this case they would need to execute and complete (i.e. blocking) before any parallel tests are run. Is it simplest to override the Runner and initialise the logging in code there? Thanks, Best Regards, Brett</body>
  </mail>
  <mail>
    <header>Re: Feedback Required | Extending Junit to perform Data Driven Testing</header>
    <body>Hi Teemu, I think I share the feelings with you that JUnits simplicity was its winning edge. A simple @Test annotation with a simple @RunWith did a lot of things for us for a long time. Although in the same breath I would also like to state the fact that the things around us change constantly. IMHO, during the constant changes, we should be able to hold on to the simple things and build on top of that to accommodate the changing requirements. There is a great need in the IT world currently to do data driven testing such that the data is not coupled with the test. The main benefit it gives is the ability to control data and test separately, which results in less coupling and ultimately better maintenance. EasyTest is trying to achieve exactly that by extending JUnit in a way  that its simplicity is conserved(EasyTest works with @Test annotations) and at the same time users have the ability to specify the data outside of their test classes. Do have a look at EasyTest and share your thoughts with us. Its always good to get feedback from the people who have experience in the related field. Here's EasyTest for your reference:  Cheers! Anuj</body>
  </mail>
  <mail>
    <header>Re: Re: Feedback Required | Extending Junit to perform Data Driven Testing</header>
    <body>Hi, I'm glad someone else spoke up.Â  Though I'm a very infrequent user of JUnit, I must confess that getting the daily emails about the enhanced capabilities of JUnit these days has shown a possibly powerful tool that's become a little byzantine for the casual user to be able to work with. One thing I haven't seen is something that bridges the knowledge gap.Â  What I mean is, JUnit's been around for many years now, but to my knowledge, outside of this group, there's still only two useful websites and even those (at last check) don't seem as comprehensive as they could be (comparing it to something like the Java SE API, for example).Â  So there's all this esoterica being discussed here, and the websites look like they haven't been updated in years.Â  There's a gap there.Â  I find myself getting lost in casually following these discussions thinking, "What if you just want to run a test class to unit-test an application class?Â  What is all this fancy stuff going on now and these different strange names and applications people are using?"Â  I've done enough non-JUnit unit testing to know how the tool should be useable for those applications, but I am definitely lost when it comes to TestRunners and all this other stuff I've seen. This isn't really a complaint so much as an observation.Â  Thanks for reading. Mike ________________________________ To: junit@yahoogroups.com Sent: Tuesday, September 4, 2012 5:03 AM Subject: [junit] Re: Feedback Required | Extending Junit to perform Data Driven Testing Â  Hi Teemu, I think I share the feelings with you that JUnits simplicity was its winning edge. A simple @Test annotation with a simple @RunWith did a lot of things for us for a long time. Although in the same breath I would also like to state the fact that the things around us change constantly. IMHO, during the constant changes, we should be able to hold on to the simple things and build on top of that to accommodate the changing requirements. There is a great need in the IT world currently to do data driven testing such that the data is not coupled with the test. The main benefit it gives is the ability to control data and test separately, which results in less coupling and ultimately better maintenance. EasyTest is trying to achieve exactly that by extending JUnit in a way  that its simplicity is conserved(EasyTest works with @Test annotations) and at the same time users have the ability to specify the data outside of their test classes. Do have a look at EasyTest and share your thoughts with us. Its always good to get feedback from the people who have experience in the related field. Here's EasyTest for your reference:  Cheers! Anuj</body>
  </mail>
  <mail>
    <header>Re: Re: Feedback Required | Extending Junit to perform Data Driven Testing</header>
    <body>Mike, Two quick thoughts: 1) There's definitely a documentation gap.  Thanks for prodding me on this fact--I have an idea of how we might be able to bootstrap something fairly quickly on this. 2) I _hope_ that JUnit's simplicity hasn't disappeared.  I may be living in a filter bubble, but my feeling is that the things that should be easy have stayed easy.  Much of the more esoteric discussion on this list is around making some hard things possible.  That is, 99% of JUnit users just use JUnit, and don't participate in the "community", per se.  80% of the discussion on this list tends to be around the work of the other 1% of extenders and developers. Definitely curious to hear feedback on this angle.  Thanks,</body>
  </mail>
  <mail>
    <header>JUnit wiki?</header>
    <body>All, There's been feedback on the list recently (and, well, much longer ago than recently) that JUnit could really use a master documentation layer.  There have been organizational, technical, and political reasons why we've fallen behind on this. Here's what seems to be the Simplest Thing that could Possibly Work: Let's work together to build a core of documentation at the wiki on the junit project at github:  From here on out, before accepting pull requests, I will: 1) Make sure that there's an obvious place on the wiki where documentation for the new feature should live. 2) Make sure the submitter has added documentation there. After a month or so, if it looks like the wiki has momentum, I'll make sure that junit.sourceforge.net and junit.org prominently feature the wiki as the point of most up-to-date and useful information. Thoughts?  Thanks,</body>
  </mail>
  <mail>
    <header>Re: JUnit wiki?</header>
    <body>Hello David, I think is a simple step in the right direction. The wiki is a git repository as well, so contributing should be possible (not sure whether there are pull requests for the wiki, though ;-)) Regards Mirko -- Sent from my mobile</body>
  </mail>
  <mail>
    <header>Re: JUnit wiki?</header>
    <body>There aren't actually pull requests for the wikis, anyone can edit the pages directly. If you want more control David, you'll have to create a repo which you can deploy somewhere (similar to ). Matthew Farwell.</body>
  </mail>
  <mail>
    <header>Re: JUnit wiki?</header>
    <body>There is not. You'd have to use Github Pages to get the usual git workflow. Aslak</body>
  </mail>
  <mail>
    <header>Re: JUnit wiki?</header>
    <body>Thanks for doing this, David I suspect having more control will eventually be an issue, but for starters it would be great to get some content out there. I'm slowly adding a "getting started" guide that I put together for my company (in part, because of the lack of up-to-date JUnit4 documentation). Please consider this just a placeholder to get some thoughts out there. People can feel free to reorganize it, rewrite it, or create alternative versions. -- Kevin</body>
  </mail>
  <mail>
    <header>Re: Tests starting before Logback initialisation complete when run in parallel</header>
    <body>Brett, There's currently not a good single way to do what you want.  There's current conversation on the github repo about how to do it in a future version, but there's no great first-step answer. One possibility is to add a @BeforeClass or @ClassRule to each of your tests that would, in a thread-safe way, check if your initialization has already been performed, and if not, do it.  I know that's not a great solution.</body>
  </mail>
  <mail>
    <header>Re: Tests starting before Logback initialisation complete when run in parallel</header>
    <body>Hi David, Thanks David, I'll look into doing that. -- Best Regards, Brett Delle Grazie</body>
  </mail>
  <mail>
    <header>Re: Tests starting before Logback initialisation complete when run in parallel</header>
    <body>Hello, wild guess: do you have both commons-logging as well as jcl-over-slf4j in your test class path? Regards Mirko</body>
  </mail>
  <mail>
    <header>Re: Tests starting before Logback initialisation complete when run in parallel</header>
    <body>Hi Mirko, No, commons-logging is explicitly excluded. The problem is definitely due to parallelism configuration. Disabling parallelism via 'none' in maven resolves the issue but obviously executes the tests slower. Essentially what happens is Logback is still executing its auto-initialisation while some tests start to write to the logs resulting in lost log information. As noted by another post in this thread, I'll have to serialise the initialisation explicitly. Thanks, Brett</body>
  </mail>
  <mail>
    <header>Re: Tests starting before Logback initialisation complete when run in parallel</header>
    <body>Such "global, one-time, setup / tear-down" is outside the scope of JUnit, according to me. You should turn to your test-running tool on this one, i.e. Surefire. Surefire is your tool to organize which tests to run when and how. JUnit is glue between Surefire and the JUnit test-classes. About your problem I think you have put yourself in a corner by trying to run all tests in parallel in the same JVM. Even if you could use "global, one-time, setup / tear-down" you still put very strict limits on what your test-classes can safely do and I simply don't think it is worth it. I strongly advice you to rethink here and configure Surefire with forkMode="perthread", so that parallel test-executions take place in separate JVM-processes. cheers /Henrik there?</body>
  </mail>
  <mail>
    <header>Re: Re: Tests starting before Logback initialisation complete when run in parallel</header>
    <body>Right, which is why I think a @BeforeSuite annotation belongs to the testing framework, not the build tool. How would your build tool create a connection pool or an executor for your tests to use? -- Cédric</body>
  </mail>
  <mail>
    <header>Migrating Junit 4.10 to 3.8.1</header>
    <body>I m writing because i am new to Junit, and i need to change the version of Junit i am using 4.10 to 3.8.1 version. I ve written my tests according to the Junit 4.10 version, therefore when i try to run it with Junit 3.8.1 errors occur. I ve tried to adapt to the earlier version but i wasnt able to make it work. Ive changed the name of my methods to begin with the word test,extended TestCase, but didnt know how to adapt one of my tests that expects an exception to occur. However, i commented it to see if all of the other tests worked, but they didnt. I ve got this message instead: Junit.framework.AssertionFailedError: NotestsFound Here is the code of my tests: asientoDisponible = new Asiento("3456", new BigDecimal("343.5"), "T", "P", new //TEST BusquedaBase busqueda = new BusquedaBase(null, null, null, null, null, null, BusquedaPorUbicacion busquedaPorUbicacion = new //TEST BusquedaBase busqueda = new BusquedaBase(null, null, null, null, null, null, BusquedaPorPrecio busquedaPorPrecio = new BusquedaPorPrecio(busqueda, new //TEST BusquedaBase busqueda = new BusquedaBase(null, null, null, null, null, null, Usuario usuario = new Usuario("asd", "asd", "asd", false, busqueda, new //TEST BusquedaBase busqueda = new BusquedaBase (null, null, null, null, null, null, Usuario usuario = new Usuario("asd", "asd", "asd", false, busqueda, new //TEST //TEST //TEST //TEST public void TestcuandoAsientoConEstadoReservadoConSobreReservasEsCompradoLasSobreReservasSeC\ //TEST public void //TEST THAT EXPECTS EXCEPTION TO OCCUR @Test(expected=AsientoNoDisponibleException.class) //TEST //pepe es el primero de la lista de sobrereservas  Assert.assertTrue(asientoDisponible.getReservante().getDni().equalsIgnoreCase(ju\  Assert.assertTrue(asientoDisponible.getReservante().getDni().equalsIgnoreCase(pe\ I would really appreciate it if anyone could tell me what should i to make my tests work. Regards, Sabrina.</body>
  </mail>
  <mail>
    <header>Re: Migrating Junit 4.10 to 3.8.1</header>
    <body>Sabrina, It may be as simple as making sure that your test method names start with "test" (all lower case).  I haven't looked super closely at whether there are other issues. In general, backporting from JUnit 4 may prove time-consuming and, sometimes, quite difficult.  I hope you're getting a suitable benefit for the cost. Good luck, On Thu, Sep 6, 2012 at 2:23 PM, gonzalezsj@... TestcuandoAsientoConEstadoReservadoConSobreReservasEsCompradoLasSobreReservasSeC\ Assert.assertTrue(asientoDisponible.getReservante().getDni().equalsIgnoreCase(ju\ Assert.assertTrue(asientoDisponible.getReservante().getDni().equalsIgnoreCase(pe\</body>
  </mail>
  <mail>
    <header>Re: How to set a global counter for several test cases</header>
    <body>Yang, Can you get all your tests running in a single JVM by adjusting the "forkmode" parameter to your junit task?  (</body>
  </mail>
  <mail>
    <header>Re: How to set a global counter for several test cases</header>
    <body>David, Good approach. But I am not sure if I turn this as "once", what kind influence would bring? I realize the cost of re-create JVM but each JVM process for one test case seem like a recommended way. Thanks!</body>
  </mail>
  <mail>
    <header>Splitting up and parameterizing "common" tests</header>
    <body>Hello. I have a set of packages, let's call them "database-core", "database-sqlite", "database-postgres". The database-core package exposes an interface type DB, and the database-sqlite and database-postgres packages both expose types that implement the DB interface: DBSqlite and DBPostgres, respectively. I have a huge pile of tests in the database-sqlite package, and a huge pile of tests in the database-postgres package. Now here's the problem: These enormous piles of tests that exercise these two types are basically identical bar the different specific DB implementation type. What I'd like to do is somehow move all of these tests into the database-core package and have the tests work with the DB interface type only. The database-sqlite package would then obviously instantiate a DBSqlite value and somehow pass it as a parameter to these tests. The database-postgres package would do the same. This would obviously give some extra confidence that the two implementations have the same semantics (at least with regards to the parts of the code the tests end up executing). What's the correct/simplest way to do this with JUnit 4?</body>
  </mail>
  <mail>
    <header>Re: Splitting up and parameterizing "common" tests</header>
    <body>org.junit@... wrote on 15.7.2012 23:51: You can do that by putting the common tests in an abstract test class with abstract factory method(s) for creating the concrete implementations. As an example here is one such abstract test class. Notice the newActors method:  actors/ActorsContract.java Here are the implementations of that class, with some implementation specific tests:  actors/MultiThreadedActorsTest.java actors/SingleThreadedActorsTest.java -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Re: Splitting up and parameterizing "common" tests</header>
    <body>On Mon, 16 Jul 2012 14:13:22 +0300  actors/ActorsContract.java  actors/MultiThreadedActorsTest.java  actors/SingleThreadedActorsTest.java Thanks, that's exactly the sort of thing I was looking for (didn't occur to me that JUnit would handle abstract classes in that manner).</body>
  </mail>
  <mail>
    <header>Re: Splitting up and parameterizing "common" tests</header>
    <body>Esko's solution is the most common (and likely best) approach. If you have a large number of tests, however, it could be tedious and a bit error prone; you would need to have two subclasses of each test. If you forget to add a DBSqlite version of your test, you have less code coverage than you think you do (of course, that's probably the case with your code now). If all of the tests work with both database types, you might want to try to indicate which database to use via a system property, and run all of the tests twice. If you do this, new tests could automatically be run using both DB implementations. It would mean that your tests would depend on both implementations, and if you wanted to run the tests in your IDE you would have to set the system property to specify which implementation to use. -- Kevin -- Kevin  actors/ActorsContract.java  actors/MultiThreadedActorsTest.java  actors/SingleThreadedActorsTest.java</body>
  </mail>
  <mail>
    <header>Re: Re: How to set a global counter for several test cases</header>
    <body>Yang, Sorry for the late response. I regularly run all my tests in the same JVM.  Depending on your use case, it might be a fine trade-off.  It should be easy enough to give it a try and see if it seems to cause any problems.</body>
  </mail>
  <mail>
    <header>Re: Re: How to set a global counter for several test cases</header>
    <body>Maybe have the Ant task produce the JUnit report file and parse that to get the count of failed tests?</body>
  </mail>
  <mail>
    <header>Re: Splitting up and parameterizing "common" tests</header>
    <body>To solve your problem is one of the major purposes of CallbackParams:  With CallbackParams you can have enum-classes provide parameter-values. In your case I can suggest an enum-class "DBFactory", which has one constant "POSTGRES" to provide the DBPostgres implementation and another constant "SQLITE" to provide the DBSqlite implementation: You can then have your test-classes use the JUnit-runner CallbackParamsRunner ...  ParamsRunner.html ... and the field-annotation @ParameterizedValue ...  lue.html ... to parameterize your "common" test-classes: @RunWith(CallbackParamsRunner.class) The test-class ACommonTest will be run twice - once for each constant in DBFactory. The field database will be injected with the enum-constant POSTGRES on the first run and SQLITE on the second run. Your tests will get proper names: - testMethod[database=POSTGRES] - testMethod[database=SQLITE] One of the major objectives for CallbackParams is to simplify future maintenance, such as when you decide to support another database, such as Oracle. All you need to do for the tests is to add another constant "ORACLE" to your enum-class - and all of your test-classes will suddenly test Oracle as well. Good luck /Henrik</body>
  </mail>
  <mail>
    <header>The "Junit Oath" (humor)</header>
    <body>After last summer's "Green Lantern" movie, my inner unit-testing evangelist merged with my inner comics geek, and channelled the Green-Lantern-themed "Junit Oath". Now you can see it in it's full glory at: Enjoy.</body>
  </mail>
  <mail>
    <header>Re: Re: How to set a global counter for several test cases</header>
    <body>David, Thanks for your reply. I tired several methods, seem like it is better to solve outside of Junit tests. -- Regards. Yang</body>
  </mail>
  <mail>
    <header>What version of JUnit is class and source compatible with Java 1.3?</header>
    <body>Hello I want to run JUnit inside a BlackBerry Java 5.0 application. My code needs to be class and source compatible with Java 1.3. What version of JUnit can I use and where can I download this version? I had a look on GitHub, only 4. release is available. Hendré</body>
  </mail>
  <mail>
    <header>Re: What version of JUnit is class and source compatible with Java 1.3?</header>
    <body>JUnit 3.7 and upwards is available in Maven Central:  %22 bakgat73 wrote on 26.7.2012 17:45: -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Adapting JUnit for the BlackBerry Java Developers Environment.</header>
    <body>I want to adapt JUnit for use in the BlackBerry Java Development Environment. The BlackBerry Java JDE 5.0 is source and class compatible with Java 1.3 and is based on Java ME. There are no support for AWT, Swing, Reflection or Annotations in the BlackBerry 5.0 JDK. From my initial investigation, removing the AWT and Swing packages are not a problem, however reflection seems to be core to how JUnit function. What version of JUnit must I start with and is it worth the effort to replace the reflection code? Are there anyone that want's to collaborate on this project? Hendré</body>
  </mail>
  <mail>
    <header>Re: Adapting JUnit for the BlackBerry Java Developers Environment.</header>
    <body>bakgat73 wrote on 27.7.2012 17:04: Even though your production code can't use reflection, it should be possible to use it in tests if you can run the tests on your desktop using the standard JRE. With most build tools this means keeping the production and the test code in different modules, so that you can configure them different JDKs. If that is not possible, then here are some ideas: Making JUnit uses reflection for finding out all test methods from a class, and without reflection it would require lots of boilerplate to explicitly call all those methods. An option would be to create your own framework (maybe reusing JUnit's assertions) or start based on a framework which uses reflection very little. For example my Specsy testing framework ( reflection only when instantiating the test class [1], because the tests are declared using closures (in the Java version they will be anonymous inner classes, see this draft [2] on the syntax). Hard-coding that instatiation would require only a single-method factory class for each test class. In the near future I'll rewrite Specsy in Java (it will be called Specsy 2), and create thin frontends at least for Java, Scala and Groovy. After that it might be possible to fork it and create a reflection-free Java 1.3 compatible version. Specsy 2 and the Jumi test runner ( uses very little reflection so it might be possible to fork and extract a limited Java 1.3 compatible version of it. Creating your own testing framework is actually quite easy, if you just keep the scope small. Without support for running tests in parallel, it is possible to implement the same programming model as in Specsy, plus a small test runner for it, in 10-50 hours. I wrote NanoSpec.go [3] in 6 hours (about 300 LOC production code) and it uses Go's minimal test runner [4] (about 400 LOC), which would not take much longer to implement either. [1]  1/src/main/scala/net/orfjackal/specsy/core/SpecClassRunner.scala#L18 [2]  6/specsy-core/src/test/java/org/specsy/examples/JavaStackSpecDraft4.java [3] [4] -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Regarding Junit Theories</header>
    <body>Hi , I see that Junit THeories have been in experimental state for quite a long. Is there any roadmap to move them out of the experimental state? It is really helpful for us in our project, but we are a bit skeptical to use experimental features in our code base. If there's a road map that says it will be part of the junit core soon, that will be sufficient. Thanks, Anuj</body>
  </mail>
  <mail>
    <header>Re: Regarding Junit Theories</header>
    <body>Anuj, I don't have an official road map document.  I can tell you that maintaining the current functionality of Theories is important to the team. Right now, we haven't been putting high priority on moving code from experimental into core. Hey, all: are there other list members who would find their lives easier if Theories was moved to core?</body>
  </mail>
  <mail>
    <header>New JUnit snapshot with Hamcrest 1.3 available</header>
    <body>Hi folks, I am glad to announce that there is a new JUnit snapshot available through GitHub and Maven. It includes/references the recently released Hamcrest 1.3. It would help us a great deal if some of you could give it a try and provide feedback. In particular, if you make heavy use of assertThat and Hamcrest matchers, please report any incompatibilities that you might experience. Cheers, Marc</body>
  </mail>
  <mail>
    <header>How can i update/override my branch with latest KentBeck/junit?</header>
    <body>I tried to override my branch my way using rebase and i completely broke it. Later on the push cmd did not work saying that the branch is up-to-date and nothing to push :( Can you please provide commands to override a branch from KentBeck/junit? thx, Tibor</body>
  </mail>
  <mail>
    <header>Re: How can i update/override my branch with latest KentBeck/junit?</header>
    <body>I'd not tried this recently, so I've just had a go at rebasing a branch in my fork: git clone git@...:nealeoc/junit.git cd junit/ git branch -r git checkout -t -b local-complex-rules origin/complex-rules git remote add upstream git@...:KentBeck/junit.git git fetch upstream git branch -r git rebase upstream/master This then unsurprisingly fails to rebase, as my branch is out of date, so I need to fix it up, and then do. git add -u git rebase --continue And then I can git push Later on the push cmd did not work saying that the branch is up-to-date and nothing to push :(</body>
  </mail>
  <mail>
    <header>Help requested: updating javadoc for junit.framework classes</header>
    <body>Hi, all. There's a 3-year-old request to update the JUnit javadoc so that the junit.framework classes are included (and properly marked as deprecated). Is there anyone out there that would have the time and energy to take this on?  Thanks,</body>
  </mail>
  <mail>
    <header>Re: Help requested: updating javadoc for junit.framework classes</header>
    <body>After reading the issue, I'm not quite sure what the task would be. Mark everything in junit.* as deprecated and be over with it? Adding a reference to the equivalent org.junit.* class to be use instead (where appropriate). Is that correct? Greetings,</body>
  </mail>
  <mail>
    <header>Extension to Junit Theories | Data Driven Testing in a more consistent way</header>
    <body>Hi, I have been in talks with David Saff regarding how the current implementation of JUnit Theories limits its users to perform Data Driven Testing. Also the data handling(permutation of all the data set) by Theories is not something that assist in performing data driven testing. All this and more resulted in I agreeing to David's suggestion of submitting an initial extension to Theories Runnner that handles data in a consistent way and provides users the ability to extend the framework. So here is the link to the initial source code that supports new features for doing Data Driven Testing :  Majorly the support is in form of annotations. There is also a sample test in the repository that explores most of the new features introduced. I am looking forward to your suggestions of how you feel about the extension and what can be improved so that it can be used by JUnit as an extension to Theories Runner. Cheers! Anuj Kumar</body>
  </mail>
  <mail>
    <header>Re: Extension to Junit Theories | Data Driven Testing in a more consistent way</header>
    <body>And I forgot to provide the github link. Here it is :  Cheers! Anuj of JUnit Theories limits its users to perform Data Driven Testing. Also the data handling(permutation of all the data set) by Theories is not something that assist in performing data driven testing. an initial extension to Theories Runnner that handles data in a consistent way and provides users the ability to extend the framework. features introduced. and what can be improved so that it can be used by JUnit as an extension to Theories Runner.</body>
  </mail>
  <mail>
    <header>Feedback Required | Extending Junit to perform Data Driven Testing</header>
    <body>Hi, I am looking for some feedback into my work of extending JUnit's capability to perform Data Driven Testing using annotations.You can find the source code here :  Please enter any suggestions/improvements/requests to the GitHub repository or main me directly at anuj.gandharv@... These are some of the extensions to the existing JUnit Theories runner : CASE 1: Specify test data in the form of CSV file. You can choose the type of file containing the data:(CSV,EXCEL,XML or CUSTOM) FileType.CSV) //This is new annotation definedpublic void file. CASE 2: Gives user flexibility to provide its own custom loader, in case the framework does not support the data file : FileType.CUSTOM)@CustomLoader(loader = MyDataLoader.class)public void # The Map corresponds to a single row of test data in the .dat file. CASE 3: Auto detects and populates user defined objects: testWithStrongParameters(@DataProvider()LibraryId id , annotation tells the framework that the parameter's value should be provided by the framework.   It can also take an optional paramName which gives more control over the data to the user. OR System.out.println(item.getDescription() + item.getItemId() + As specified above, you can find the source code here :  Please enter any suggestions/improvements/requests to the GitHub repository or main me directly at anuj.gandharv@... Thanks, Anuj</body>
  </mail>
  <mail>
    <header>Re: Feedback Required | Extending Junit to perform Data Driven Testing</header>
    <body>Looks like the formatting of the above message got out of hands. So here's one more try ondifferent things that can be achieved with the new extension: CASE 1: Specify test data in the form of CSV file. You can choose the type of file containing the data:(CSV,EXCEL,XML or CUSTOM) CASE 2: Gives user flexibility to provide its own custom loader, in case the framework does not support the data file : @Theory @CustomLoader(loader = MyDataLoader.class) public void testWithCustomLoader(@DataProvider()Map&amp;lt;String, String&amp;gt; inputData) # The Map corresponds to a single row of test data in the .dat file. CASE 3: Auto detects and populates user defined objects: @Theory public void testWithStrongParameters(@DataProvider()LibraryId id , # DataProvide annotation tells the framework that the parameter's value should be provided by the framework.   It can also take an optional paramName which gives more control over the data to the user. OR @Theory System.out.println(item.getDescription() + item.getItemId() + Hopefully the format will remain this time. Cheers! Anuj</body>
  </mail>
  <mail>
    <header>Re: Re: Feedback Required | Extending Junit to perform Data Driven Testing</header>
    <body>Hello, Sorry this took so long to get back to you, but I was trying to get my thoughts together. I don't believe that the suggestion below fits in with the current JUnit philospohy, so doesn't belong in the junit core library. Specifically, I don't think CSV/Excel/XML parsing belongs in JUnit, so I agree with your decision to write it as an extension rather than as part of junit core. However, I do believe that we can add stuff to JUnit core in order to allow people to do this sort of thing more easily, and maybe help you with your code as well. I often have the following problem: I've got a class Foo in which I'm testing multiple methods (foo#addInts &amp;amp; foo#addStrings). So I create a single class to test the two. But if either of these methods are better tested using parameterized, then I can't do it because I have to define the constructor. So, what I would propose is to have a @DataProvider annotation which specifies a method to call which returns a collection of data for this particular method. The test method is called for each item in the list. See this would be fairly easy to do. I also think this would be extensible in another framework, specifically in your case. All you should have to do is extend the @DataParameter so that the data comes from another source. Again, see the gist, you'd just have to specify a dataProviderClass. What do people think of this idea, and what do you (anuj) think also? Thanks. Matthew Farwell.</body>
  </mail>
  <mail>
    <header>Re: Re: Feedback Required | Extending Junit to perform Data Driven Testing</header>
    <body>Matthew, I like this idea. Having to create multiple testclasses because of this is really annoying. Regards Mirko -- Sent from my mobile</body>
  </mail>
  <mail>
    <header>Re: Test-Driven Development</header>
    <body>Thank you Colin. Marques  1503627/ref=sr_1_1?ie=UTF8&amp;amp;qid=1337006797&amp;amp;sr=8-1  =sr_1_5?s=books&amp;amp;ie=UTF8&amp;amp;qid=1337006854&amp;amp;sr=1-5</body>
  </mail>
  <mail>
    <header>Re: Test-Driven Development</header>
    <body>Thank you Tomek Marques  1503627/ref=sr_1_1?ie=UTF8&amp;amp;qid=1337006797&amp;amp;sr=8-1  =sr_1_5?s=books&amp;amp;ie=UTF8&amp;amp;qid=1337006854&amp;amp;sr=1-5</body>
  </mail>
  <mail>
    <header>Re: Test-Driven Development</header>
    <body>Why would you say that? :O I would think you could pick up all the basics you need from the junit site itself then move onto the GOOS book before you pick up too many bad habits alot of the other literature teaches you.  1503627/ref=sr_1_1?ie=UTF8&amp;amp;qid=1337006797&amp;amp;sr=8-1  =sr_1_5?s=books&amp;amp;ie=UTF8&amp;amp;qid=1337006854&amp;amp;sr=1-5 -- Maybe she awoke to see the roommate's boyfriend swinging from the chandelier wearing a boar's head. Something which you, I, and everyone else would call "Tuesday", of course.</body>
  </mail>
  <mail>
    <header>Re: Test-Driven Development</header>
    <body>Just go through the junit official site, or Wikipedia, you will find more reference.....anyway, Kent's TDD by example is a good start....</body>
  </mail>
  <mail>
    <header>Request for help: fix MethodSorter</header>
    <body>Hi, JUnit users.  fix in order to restore deterministic test ordering in JUnit 4.11.  Kevin Cooney has been kind enough to even include the needed code in the comments on the bug.  My day job is likely to keep me from checking in the quick fix this week--if anyone's in the mood to do a good deed and open a pull request, it would be a great help to all of us.  Thanks,</body>
  </mail>
  <mail>
    <header>Android Notification Bar Testing</header>
    <body>I am writing testing framework to test an application. This application receives IM(audio/video) and then notifies the user through notification bar. i need an automation to click on notification item. Can you please help in this regard. Any help in this regard will be highly appreciated.. Thanks, Akshay</body>
  </mail>
  <mail>
    <header>Re: Android Notification Bar Testing</header>
    <body>The answer will depend a lot on the details of your app and OS.  In many cases, teams find the most value in simulating these kinds of UI interactions in their automated tests: when the notification is clicked, it generates some kind of call back into the app.  Your automated test simply verifies that the call out to the notification manager is made, and then explicitly triggers the call back into the app. It is true that this kind of test will not catch, for example, if you've made a wrong assumption about the notification manager API, and are calling it in a way that looks good in the test, but doesn't actually create an on-screen notification.  Many teams find that occasionally manually testing the app/UI integration is cheap and sufficient to catch these kinds of errors. Good luck,</body>
  </mail>
  <mail>
    <header>Re: Android Notification Bar Testing</header>
    <body>thanks for the reply. I need to click on notification item when it is received from my test case(then activity will be launched and i can continue testing with robotium solo interaction).</body>
  </mail>
  <mail>
    <header>Re: Re: Android Notification Bar Testing</header>
    <body>There may be a way to do what you want using some kind of OS-specific screen-manipulation automation framework.  As I mentioned below, I'd recommend seeing if you can avoid that kind of testing.  If you can't, then you might want to ask around on the robotium lists or something similar to get a bigger chance of hearing from someone who's faced your exact problem. Good luck,</body>
  </mail>
  <mail>
    <header>Android Notification Bar Testing</header>
    <body>Can i click on notification bar item .. That is, I need to drag Notification bar down and then click on the first notification item.. Please help in this regard... Reagrds, Akshay</body>
  </mail>
  <mail>
    <header>Re: Android Notification Bar Testing</header>
    <body>I'm assuming this is the same problem you asked about before, when you were using Robotium for automation.  You will definitely have better odds of an answer if you ask on a Robotium forum.</body>
  </mail>
  <mail>
    <header>cpsuite with junit 4.10 and ANT 1.8.2</header>
    <body>I'm attempting to use cpsuite to run some tests from a jar file but it's having trouble using the jar file. Has anybody else seen issues around this?  What am I missing? anytime I use the @IncludeJars(true) I start seeing failures like this @RunWith(ClasspathSuite.class) @IncludeJars(true) public class AllTests ant snippet t=org.junit.runner.manipulation.NoTestsRemainException) java.security.AccessController.doPrivileged(Native Method) Source) Source) sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source) Source) org.apache.log4j.net.ZeroConfSupport.initializeJMDNS(ZeroConfSupport.java:180) org.apache.log4j.net.ZeroConfSupport.&amp;lt;clinit&amp;gt;(ZeroConfSupport.java:29) org.junit.extensions.cpsuite.ClasspathClassesFinder.gatherClasses(ClasspathClass\ esFinder.java:8 6) org.junit.extensions.cpsuite.ClasspathClassesFinder.gatherClassesInRoot(Classpat\ hClassesFinder. java:66) org.junit.extensions.cpsuite.ClasspathClassesFinder.findClassesInRoots(Classpath\ ClassesFinder.j ava:49) org.junit.extensions.cpsuite.ClasspathClassesFinder.findClassesInClasspath(Class\ pathClassesFind er.java:43) When I don't use the @IncludeJars(true) and just include the path to the classes it works fine. If I include a path to the classes directory it builds the list of tests and runs the tests out of the jar file correctly. @RunWith(ClasspathSuite.class) public class AllTests ant snippet Thanks Al</body>
  </mail>
  <mail>
    <header>Re: cpsuite with junit 4.10 and ANT 1.8.2</header>
    <body>CC:Johannes Link, the cpsuite author. Johannes, Any ideas on this?  Thanks, org.junit.extensions.cpsuite.ClasspathClassesFinder.gatherClasses(ClasspathClass\ esFinder.java:8 org.junit.extensions.cpsuite.ClasspathClassesFinder.gatherClassesInRoot(Classpat\ hClassesFinder. org.junit.extensions.cpsuite.ClasspathClassesFinder.findClassesInRoots(Classpath\ ClassesFinder.j org.junit.extensions.cpsuite.ClasspathClassesFinder.findClassesInClasspath(Class\ pathClassesFind</body>
  </mail>
  <mail>
    <header>Saff on summer leave...</header>
    <body>Hi, all. Just so you know, I'll be on parental leave, and much more out of touch than usual, for the first half of summer 2012.  Over the last few months, I've appreciated a couple of community members stepping up so that this isn't a one-man show, and I'll keep an eye out for anything urgent, but if you notice things piling up a bit more than usual, don't panic. Have a great summer,</body>
  </mail>
  <mail>
    <header>How to test program for "Eight Queens"</header>
    <body>If this is NOT the right forum for this post, please advise me, and my apologies in advance. Trusting that this is the right place... There is the Eight Queens problem (eight queens on a chessboard to be placed in such a manner that no queen attacks another). There are 92 solutions to this problem. How can one write tests for this problem (and other problems of similar nature)? Thanks and regards. Pradyumn Sharma Pragati Software Pvt Ltd 207, Lok Center, Marol-Maroshi Road, Andheri East, Mumbai 400 059. India Tel: +91 22 3091 0000 www.pragatisoftware.com www.twitter.com/PradyumnSharma</body>
  </mail>
  <mail>
    <header>Re: How to test program for "Eight Queens"</header>
    <body>Pradyumn Sharma wrote on 19.6.2012 14:02: You could write tests for low-level parts of the algorithm ("stepping stones" as Kent Beck called them in  those parts are put together you will have the full algorithm. Here is another problem which I solved using a similar algorithm as I've earlier used for the Eight Queens problem: "Diagram of Nine Places - Put the numbers 1 to 9 into the squares so it adds to 15 whether you view it horizontally, vertically or diagonally." My tests are at  experimental/nineplaces/DiagramTest.java and the solution at  experimental/nineplaces Of those tests noteworthy are Diagram_with_horizontal_failure, Diagram_with_vertical_failure and Diagram_with_diagonal_failure. They make sure that the Diagram class notices any violations of the rules. After that it's just a matter of iterating the possible solutions and backtracing when a rule is violated. I didn't write tests for the last ten lines of code which put it all together (the DiagramOfNinePlaces class), though it surely would be possible by abstracting the iterating of possible solutions. -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Re: How to test program for "Eight Queens"</header>
    <body>Hello, Â  You need to write a method to place the queens where they can't attack each other.Write a method using following algorithm which will return a list. ________________________________ To: junit@yahoogroups.com Sent: Tuesday, 19 June 2012 7:02 AM Subject: [junit] How to test program for "Eight Queens" Â  If this is NOT the right forum for this post, please advise me, and my apologies in advance. Trusting that this is the right place... There is the Eight Queens problem (eight queens on a chessboard to be placed in such a manner that no queen attacks another). There are 92 solutions to this problem. How can one write tests for this problem (and other problems of similar nature)? Thanks and regards. Pradyumn Sharma Pragati Software Pvt Ltd 207, Lok Center, Marol-Maroshi Road, Andheri East, Mumbai 400 059. India Tel: +91 22 3091 0000 www.pragatisoftware.com www.twitter.com/PradyumnSharma</body>
  </mail>
  <mail>
    <header>Re: How to test program for "Eight Queens"</header>
    <body>Normally, the typical way to solve a problem like this would be to write some code to see if the constraints of the problem are met. In this case, go through the chess board, and when you find a queen, see if it is attacking another queen. If it is, call Assert.fail(). The only tricky part is finding a useful way to represent the chess board (and, possibly, making the failure message print something useful). Given that there are a few well-known solutions to this problem, however, I would be tempted to do something more radical: see if the current board matches one of the well known solutions. Good luck, -- Kevin</body>
  </mail>
  <mail>
    <header>Re: How to test program for "Eight Queens"</header>
    <body>What have you tried so far? You'll need to make your question more specific to what your current focussed problem is. With the information you've provided this sounds like you're looking for something to solve your homework for you, which we won't do -- Maybe she awoke to see the roommate's boyfriend swinging from the chandelier wearing a boar's head. Something which you, I, and everyone else would call "Tuesday", of course.</body>
  </mail>
  <mail>
    <header>Any libraries for launching junit tests in a separate JVM?</header>
    <body>Are there any open-source libraries out there for launching junit tests and reporting back the results (such as might be done by an IDE, similar to Eclipse's JDT RemoteTestRunner, but intended to be reused by others) ? I've found the several projects that have internal components that do this, but I'm curious to know if there are any stand-alone libraries that provide an API for this sort of functionality. These are the OSS projects I've found with internal components for forking junit--if there are any other notable ones, I'd be happy to hear about them as well: Thanks! --Aaron V.</body>
  </mail>
  <mail>
    <header>Re: Any libraries for launching junit tests in a separate JVM?</header>
    <body>Sure. Try an ant task called &amp;lt;junit4&amp;gt; from randomizedtesting package here:  The task is a nearly drop-in replacement for &amp;lt;junit&amp;gt; but forks one or more JVMs (configurable) and runs tests in parallel. For example (complex) configuration of running tests in parallel take a look at Apache Lucene project (in trunk) because it uses &amp;lt;junit4&amp;gt; internally. Dawid</body>
  </mail>
  <mail>
    <header>Re:</header>
    <body>[This is a recording.] I'm out June 24 - July 1, 2012. I'll be reading mail occasionally. Bill</body>
  </mail>
  <mail>
    <header>Re: Any libraries for launching junit tests in a separate JVM?</header>
    <body>Aaron V. wrote on 29.6.2012 7:13: I'm working on a new test runner (backward compatible with JUnit tests) which is such a stand-alone library with zero external dependencies:  The first public release should happen this July, when I have holiday from work and time to work on it. The events which you get from tests are those which are now in SuiteListener [1] plus soon also events about printing to stdout/stderr. Some day later each event will also come with a timestamp and thread name, and there will be an event which tells all environment details (system properties, JVM version etc.). [1]  jumi-core/src/main/java/fi/jumi/core/SuiteListener.java -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Re: Any libraries for launching junit tests in a separate JVM?</header>
    <body>Interesting. This was part of the reason for that junit4 task I mentioned -- I needed a coordinated, full set of events from forked jvms (including sysouts, threading, etc.). This is already implemented (and pretty heavily tested) under  so we may want to join efforts if you want. Dawid</body>
  </mail>
  <mail>
    <header>Please unsubscribe me</header>
    <body>The "automatic" unsubscribe doesn' work. Thanks, Indrit</body>
  </mail>
  <mail>
    <header>Re: Any libraries for launching junit tests in a separate JVM?</header>
    <body>Dawid Weiss wrote on 29.6.2012 11:56: My goals for developing Jumi are wider than that and I don't think that it would be possible to reuse anything JUnit-specific. Some of the main reason for creating a new test runner was to better support testing frameworks which (1) don't know what tests there are before executing them, (2) contain nested tests. For example specs, ScalaTest and Specsy (by me, categories. The causes of these issues are implicit assumptions in JUnit's Runner interface and overcoming them requires changing the API. Other goals relate to usability. For example I think that all current IDEs and build tools suffer from the issue that the following code in a test won't print "abc", but will more probably print "acb" or "bac": Also it's not possible to run with one command all tests of a multi-module Maven project in IDEA or Eclipse, when different modules have conflicting classpaths (such as different versions of the same library) or their tests require module-specific working directories (which IIRC is the default in Maven Surefire Plugin). The rest of the goals relate to running tests faster: parallel execution, test order priorization, class loader caching etc. -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Re: Any libraries for launching junit tests in a separate JVM?</header>
    <body>Ok, clear. This has nothing to do with test frameworks -- you can see any of these orderings on the console too and it is allowed by PrintStream contracts (unless you redirect to a single underlying stream or coordinate all print events manually which isn't the case by default). Dawid</body>
  </mail>
  <mail>
    <header>Implementing an unstable test rule</header>
    <body>Hi, I'm trying to implement a test rule that handles unstable tests. It's made up of the test rule itself, plus an Unstable annotation that you can put either on the class or on a single method. The way I wrote it is similar to  diately, Normally before a test method is invoked, the test class fields are initialized. The problem with the retry is that since the same statement is reused, the fields will not be re-initialized between retries. I've tried to find a solution to this. It looks to me like I would have to create my own test runner to achieve this, which ideally I would like to avoid. Am I correct in that I have to create a custom test runner, or can it be done in some other way? Thanks Daniel</body>
  </mail>
  <mail>
    <header>Return from vacation</header>
    <body>Hi, all. I'm back from an extended vacation.  I'll be working slowly through github issues, but haven't been closely monitoring the list.  If there's anything you'd really like me to chime in on, feel free to ping me.  Thanks!</body>
  </mail>
  <mail>
    <header>How to set a global counter for several test cases</header>
    <body>Hello experts, I am working on a project having several Junit 4.10 test cases driven by Ant, requirement of adding detection of failed tests is brought up. Specifically, it require us to implement a global counter for all tests, the counter record the number of failure, once it exceed this limit number, do something. For example, we have Test case A, B; each has three tests. The whole test begin with Test A. Assume 2 tests of A failed, the counter is 2; then B begin, 1 test of B failed. Eventually the counter is 3. But I did some experiments, seem like each test case will be running in a separate JVM process. It is quite tricky to share a counter between two process. I look through the API, maybe this requirement can be done with custom runner, though we do want change too much and continue to use Ant - Junit runner. Please give me some hints on this issue. Thanks in advance. -- Regards. Yang</body>
  </mail>
  <mail>
    <header>Re: How can I check if a test failed during @After?</header>
    <body>A simpler way would be to use a test rule and check if the test throws an exception (excluding assumption exceptions). This is an example rule that implements this:  Dawid</body>
  </mail>
  <mail>
    <header>Re: Basic JUnit question(s)</header>
    <body>Michael, I know this is not exactly what you are asking about, but please bear in mind that generation of test skeleton based on the class which already exists is not the best way to achieve high-quality test code. I do not say it is evil (like kicking small puppies), just be careful with it. :)  Such approach steers you towards testing of class methods, which is fine, but testing of class responsibilities is what you goal should really be! The difference is (sometimes) subtle, but important in the long run. P.S. However, if you are starting (or renewing) your friendship with JUnit, then it might be a good start. -- Regards / Pozdrawiam Tomek Kaczanowski  W dniu 26 kwietnia 2012 22:13 u¿ytkownik Michael &amp;lt;mfeher00@...&amp;gt;napisa³:</body>
  </mail>
  <mail>
    <header>Re: How can I check if a test failed during @After?</header>
    <body>Thank you Dawid, however as I already mentioned in my question, TestWatcher methods are invoked after @After methods. pete</body>
  </mail>
  <mail>
    <header>Re: Re: How can I check if a test failed during @After?</header>
    <body>You need to declare TestWatcher rule as a @ClassRule. Dawid</body>
  </mail>
  <mail>
    <header>Re: Re: How can I check if a test failed during @After?</header>
    <body>Sorry, completely lost the thread here. My intention was that you replace whatever you want to do in your @After hooks and put it in the rule instead (TestWatcher or your own, custom one). This way you have full control over the execution of your tests and their output. So code from @After -&amp;gt; @Rule body. Dawid</body>
  </mail>
  <mail>
    <header>Re: Basic JUnit question(s)</header>
    <body>My answer is simple: Don't generate test stubs through IDE magic. It does not really help and potentially leads you down the wrong track. Writing good unit tests is a skill, that can't be automated. Greetings,</body>
  </mail>
  <mail>
    <header>parameterized test with multiple test methods</header>
    <body>Is the parameterized test class intended to have only one test method? I have created parameterized test classes with multiple test methods that use the same parameters with apparent success. However, when I tried it with a new test class yesterday JUnit didn't behave in the expected way. This is in RAD 8.0.4 using JUnit 4.8.1. The assertEquals in the second test method is reported as a failure even though the method being tested returned the correct results (I traced through with debug to verify). JUnit appended the result from the first test method to the result from the second test method and reported the second method as a failure because the combined result didn't match the expected result. Am I using the parameterized test incorrectly by having multiple test methods or is there a bug in JUnit?</body>
  </mail>
  <mail>
    <header>Re: parameterized test with multiple test methods</header>
    <body>Hmm, that's odd.  Not expected behavior. Were any of your parameters mutable types, such that if a value were shared between multiple invocations, it could have been modified from one invocation, with effects seen in the next? Any chance you could share at least a skeleton of your test case?   Thanks, On Fri, Apr 27, 2012 at 11:32 AM, barbara_a_bennett &amp;lt;barbara.bennett@...</body>
  </mail>
  <mail>
    <header>Re: How can I check if a test failed during @After?</header>
    <body>That is a great idea.  Sometimes you just need someone else's perspective -- not sure why that didn't occur to me before.  Thanks Dawid!</body>
  </mail>
  <mail>
    <header>Testing of OSGi declarative services</header>
    <body>Hi, I'm not able to test a OSGi declarative service with a JUnit Plugin Test in Eclipse. Although all necessary bundles (especially the Service, the Consumer with the JUnit Test class, org.eclipse.equinox.ds, org.eclipse.equinox.util, org.eclipse.jdt.junit.runtime and org.eclipse.pde.junit.runtime) are added to the Run Configuration of the Plugin Test and the bind/unbind methods are defined in the test class it comes to an Null Pointer Exception (the bind method seems to be not executed), if I access the Service attribute (e.g. public static IMyService myService) in a JUnit Test method. According to this site  e-context-of-a-junit-test the reason for this exception is that the OSGi framework is in a race condition with the JUnit tests runner context. The solution there to use a Count Down Latch that waits in a @Before method until the needed service (that should be tested) is binded, seems to be not working for me. In my case the await() method blocks infinitely, so the test will be never executed. On the other hand, if I define a maximum time to wait, e.g. await(10, TimeUnit.SECONDS), it comes after this time again to the Null Pointer Exception. What is the correct way to test a OSGi declarative service with JUnit? Any help is appreciated. Regards, Rene</body>
  </mail>
  <mail>
    <header>Re: parameterized test with multiple test methods</header>
    <body>Maybe it is a case of me having bad expectations. I assumed that each of the tests would get the parameters as they are defined in the parameter section, not after they've been modified by a previous test method. I'm used to the 3.8 "every test starts out fresh" idea. That isn't happening. One of the parameters is "new StringBuilder()". I expected both methods to get an empty StringBuilder. But, the second method is getting the StringBuilder with the contents added in the first method. I tried resetting it in an @After method just to see what happens. The code to set it to a new StringBuilder is executed but the second test method still gets the StringBuilder with the contents added by the first method. Is this the expected behavior?</body>
  </mail>
  <mail>
    <header>tomcat deps on ant which deps on junit ... BUILD FAILED</header>
    <body>~ While trying to install tomcat-7.0.27 it tells me install ant, wich tells me to install junit and then you get: ~ BUILD FAILED /media/sdb1/prjx/sw/jwebXBL/java_baseline/srcs/junit/junit/build.xml:191: The following error occurred while executing this line: /media/sdb1/prjx/sw/jwebXBL/java_baseline/srcs/junit/junit/build.xml:179: Java returned: 1 at org.apache.tools.ant.taskdefs.Java.execute(Java.java:111) ... at org.apache.tools.ant.launch.Launcher.main(Launcher.java:109) ~ Has anyone dealt with those issues? ~ lbrtchx ~ $ git clone "/media/sdb1/prjx/sw/jwebXBL/java_baseline/srcs/junit/REF/junit.git_"$_DT".inst_\ build.log" 2&amp;gt;&amp;amp;1 $ cd junit $ ant -verbose dist BUILD FAILED /media/sdb1/prjx/sw/jwebXBL/java_baseline/srcs/junit/junit/build.xml:191: The following error occurred while executing this line: /media/sdb1/prjx/sw/jwebXBL/java_baseline/srcs/junit/junit/build.xml:179: Java returned: 1 at org.apache.tools.ant.taskdefs.Java.execute(Java.java:111) at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291) at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:43) at java.lang.reflect.Method.invoke(Method.java:601) at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106) at org.apache.tools.ant.Task.perform(Task.java:348) at org.apache.tools.ant.taskdefs.Sequential.execute(Sequential.java:68) at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291) at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:43) at java.lang.reflect.Method.invoke(Method.java:601) at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106) at org.apache.tools.ant.Task.perform(Task.java:348) at org.apache.tools.ant.taskdefs.MacroInstance.execute(MacroInstance.java:398) at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291) at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:43) at java.lang.reflect.Method.invoke(Method.java:601) at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106) at org.apache.tools.ant.Task.perform(Task.java:348) at org.apache.tools.ant.Target.execute(Target.java:390) at org.apache.tools.ant.Target.performTasks(Target.java:411) at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399) at org.apache.tools.ant.Project.executeTarget(Project.java:1368) at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:\ 41) at org.apache.tools.ant.Project.executeTargets(Project.java:1251) at org.apache.tools.ant.Main.runBuild(Main.java:809) at org.apache.tools.ant.Main.startAnt(Main.java:217) at org.apache.tools.ant.launch.Launcher.run(Launcher.java:280) at org.apache.tools.ant.launch.Launcher.main(Launcher.java:109) Total time: 25 seconds</body>
  </mail>
  <mail>
    <header>Re: tomcat deps on ant which deps on junit ... BUILD FAILED</header>
    <body>In line 179 of build.xml a java task is executed in order to run the AllTests suite. I'm not too familiar with Ant but this does not look like a JUnit issue. Regards, Marc Am 30.04.2012 um 22:31 schrieb tekmonk2005: to install junit and then you get: following error occurred while executing this line: returned: 1 "/media/sdb1/prjx/sw/jwebXBL/java_baseline/srcs/junit/REF/junit.git_"$_DT".inst_\ build.log" 2&amp;gt;&amp;amp;1 following error occurred while executing this line: returned: 1 sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:43) sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:43) sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:43) org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:\ 41)</body>
  </mail>
  <mail>
    <header>Re: tomcat deps on ant which deps on junit ... BUILD FAILED</header>
    <body>~ I really don't know how to make sense of this, but ant does not appear to like symbolic links ... ~ lbrtchx ~ $ ls -l /usr/bin/ant lrwxrwxrwx 1 root root 20 Sep 13  2011 /usr/bin/ant -&amp;gt; ../share/ant/bin/ant $ ls -lH /usr/bin/ant -rwxr-xr-x 1 root root 9903 May 19  2011 /usr/bin/ant $ ls -l /usr/share/ant/bin/ant -rwxr-xr-x 1 root root 9903 May 19  2011 /usr/share/ant/bin/ant $ ANT_HOME=/usr/share/ant $ export PATH=$ANT_HOME/bin:$PATH $ ant -verbose -debug -Dtests.haltonfailure=false dist Apache Ant(TM) version 1.8.3 compiled on April 30 2012 Trying the default build file: build.xml Buildfile: /media/sdb1/prjx/sw/jwebXBL/java_baseline/srcs/junit/junit/build.xmlotal time: 24 seconds</body>
  </mail>
  <mail>
    <header>Re: tomcat deps on ant which deps on junit ... BUILD FAILED</header>
    <body>and this error is reported as a fixed bug ~  ~ lbrtchx</body>
  </mail>
  <mail>
    <header>Re: tomcat deps on ant which deps on junit ... BUILD FAILED</header>
    <body>Actually the complete failure trace is: dist: '/media/sdb1/prjx/sw/jwebXBL/java_baseline/srcs/jdk/jdk1.7.0_04/jre/bin/java' with arguments: '/media/sdb1/prjx/sw/jwebXBL/java_baseline/srcs/junit/junit/junit4.11-SNAPSHOT:/\ media/sdb1/prjx/sw/jwebXBL/java_baseline/srcs/junit/junit/junit4.11-SNAPSHOT/jun\ it-4.11-SNAPSHOT.jar' Execute:Java13CommandLauncher: Executing '/media/sdb1/prjx/sw/jwebXBL/java_baseline/srcs/jdk/jdk1.7.0_04/jre/bin/java' with arguments: '-Dignore.this=ignored' '-classpath' '/media/sdb1/prjx/sw/jwebXBL/java_baseline/srcs/junit/junit/junit4.11-SNAPSHOT:/\ media/sdb1/prjx/sw/jwebXBL/java_baseline/srcs/junit/junit/junit4.11-SNAPSHOT/jun\ it-4.11-SNAPSHOT.jar' 'org.junit.runner.JUnitCore' 'org.junit.tests.AllTests' The ' characters around the executable and arguments are not part of the commandgamma(), void gamma(boolean])]&amp;gt; but was:&amp;lt;...(), void epsilon(), [void org.junit.internal.MethodSorterTest.testNameAsc(MethodSorterTest.java:93) sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:43) org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java\ :45) org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:\ 15) org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:4\ 2) org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20\ ) org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:69\ ) org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:48\ ) org.junit.runners.ParentRunner.runChildren(ParentRunner.java:235) org.junit.runners.ParentRunner.runChildren(ParentRunner.java:235) org.junit.runners.ParentRunner.runChildren(ParentRunner.java:235) BUILD FAILED /media/sdb1/prjx/sw/jwebXBL/java_baseline/srcs/junit/junit/build.xml:191: The following error occurred while executing this line: /media/sdb1/prjx/sw/jwebXBL/java_baseline/srcs/junit/junit/build.xml:179: Java returned: 1 at org.apache.tools.ant.taskdefs.Java.execute(Java.java:111) at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291) at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:43) at java.lang.reflect.Method.invoke(Method.java:601) at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106) at org.apache.tools.ant.Task.perform(Task.java:348) at org.apache.tools.ant.taskdefs.Sequential.execute(Sequential.java:68) at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291) at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:43) at java.lang.reflect.Method.invoke(Method.java:601) at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106) at org.apache.tools.ant.Task.perform(Task.java:348) at org.apache.tools.ant.taskdefs.MacroInstance.execute(MacroInstance.java:398) at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291) at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:43) at java.lang.reflect.Method.invoke(Method.java:601) at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106) at org.apache.tools.ant.Task.perform(Task.java:348) at org.apache.tools.ant.Target.execute(Target.java:390) at org.apache.tools.ant.Target.performTasks(Target.java:411) at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399) at org.apache.tools.ant.Project.executeTarget(Project.java:1368) at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:\ 41) at org.apache.tools.ant.Project.executeTargets(Project.java:1251) at org.apache.tools.ant.Main.runBuild(Main.java:809) at org.apache.tools.ant.Main.startAnt(Main.java:217) at org.apache.tools.ant.launch.Launcher.run(Launcher.java:280) at org.apache.tools.ant.launch.Launcher.main(Launcher.java:109) Total time: 25 seconds</body>
  </mail>
  <mail>
    <header>running junit test via command line</header>
    <body>Good Day, I have a test that runs on eclipse. It has parameter -DinputFile=file.txt. Now I want to run it at the command prompt. I built everything as a jar then run: java -cp jarfile.jar org.junit.runner.JUnitCore junit.test.to.run -DinputFile=file.txt But I get an error of Could not find class: -DinputFile=file.txt Am I doing something wrong? Thanks, Law</body>
  </mail>
  <mail>
    <header>Re: running junit test via command line</header>
    <body>Your order of arguments is wrong. -D arguments must come before the main class. java -cp jarfile.jar -DinputFile=file.txt org.junit.runner.JUnitCore junit.test.to.run I want to run it at the command prompt. I built everything as a jar then run: -DinputFile=file.txt</body>
  </mail>
  <mail>
    <header>Re: Re: parameterized test with multiple test methods</header>
    <body>Barbara, Sorry for the long delay in responding.  What you're seeing is indeed a bug.  Do you have time to file it at  On Mon, Apr 30, 2012 at 4:49 PM, barbara_a_bennett</body>
  </mail>
  <mail>
    <header>Re: Re: tomcat deps on ant which deps on junit ... BUILD FAILED</header>
    <body>Sorry for the long delay in responding. Matthew, This looks potentially related to your method-sorting patch?  (  f ) Can you give any advice?  Thanks, '/media/sdb1/prjx/sw/jwebXBL/java_baseline/srcs/junit/junit/junit4.11-SNAPSHOT:/\ media/sdb1/prjx/sw/jwebXBL/java_baseline/srcs/junit/junit/junit4.11-SNAPSHOT/jun\ it-4.11-SNAPSHOT.jar' '/media/sdb1/prjx/sw/jwebXBL/java_baseline/srcs/junit/junit/junit4.11-SNAPSHOT:/\ media/sdb1/prjx/sw/jwebXBL/java_baseline/srcs/junit/junit/junit4.11-SNAPSHOT/jun\ it-4.11-SNAPSHOT.jar' ................................................................................\ ................................................................................\ ................................................................................\ .................................................................I.I............\ ................................................................................\ ................................................................................\ ...............I................................................................\ .....................................E.... sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:43) org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java\ :45) org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:\ 15) org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:4\ 2) org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20\ ) org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:69\ ) org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:48\ ) sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:43) sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:43) sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:43) org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:\ 41)</body>
  </mail>
  <mail>
    <header>Re: Testing of OSGi declarative services</header>
    <body>Rene, Sorry for the late reply.  Unfortunately, I don't have a lot of experience with declarative services, so I can't be a lot of help.  Are there OSGi-related lists that might be more helpful?  Have you found a solution?  e-context-of-a-junit-test</body>
  </mail>
  <mail>
    <header>Parameterization - of file names from directory; 1 parameter/test</header>
    <body>@RunWith(Parameterized.class) @Parameters The requirements is to feed the constructor with filenames from homeFolder so each test runs with a different input. The array of parameters, in my case, will consist of only one string, i.e. the filename. I get a "wrong number of arguments error": java.lang.IllegalArgumentException: wrong number of arguments Source) org.junit.runners.Parameterized$TestClassRunnerForParameters.createTest(Paramete\ rized.java:86) org.junit.runners.BlockJUnit4ClassRunner$1.runReflectiveCall(BlockJUnit4ClassRun\ ner.java:236) org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:\ 15) org.junit.runners.BlockJUnit4ClassRunner.methodBlock(BlockJUnit4ClassRunner.java\ :233) org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68\ ) org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47\ ) org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReferen\ ce.java:50) org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\ .java:467) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\ .java:683) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java\ :390) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.jav\ a:197) What am I doing wrong? BSri</body>
  </mail>
  <mail>
    <header>Re: Parameterization - of file names from directory; 1 parameter/test</header>
    <body>So the problem here is that you're creating a (1xN) array, but JUnit wants an (Nx1) array.  You're creating here the equivalent of but what you want is So you'll have to loop through the result of list[], and put each element into its own one-element array.  Good luck, org.junit.runners.Parameterized$TestClassRunnerForParameters.createTest(Paramete\ rized.java:86) org.junit.runners.BlockJUnit4ClassRunner$1.runReflectiveCall(BlockJUnit4ClassRun\ ner.java:236) org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:\ 15) org.junit.runners.BlockJUnit4ClassRunner.methodBlock(BlockJUnit4ClassRunner.java\ :233) org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68\ ) org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47\ ) org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReferen\ ce.java:50) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\ .java:467) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\ .java:683) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java\ :390) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.jav\ a:197)</body>
  </mail>
  <mail>
    <header>Re: Parameterization - of file names from directory; 1 parameter/test</header>
    <body>@RunWith(Parameterized.class) private static String homeFolder=new @Before // Instantiate a webDriver implementation - ignore the certificate error ... @Parameters @Test ... Thanks, David. I did just that. My @Parameters goes through without any problem but I still get java.lang.IllegalArgumentException: wrong number of arguments at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source) at java.lang.reflect.Constructor.newInstance(Unknown Source) at org.junit.runners.Parameterized$TestClassRunnerForParameters.createTest(Paramete\ rized.java:86) at org.junit.runners.BlockJUnit4ClassRunner$1.runReflectiveCall(BlockJUnit4ClassRun\ ner.java:236) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:\ 15) at org.junit.runners.BlockJUnit4ClassRunner.methodBlock(BlockJUnit4ClassRunner.java\ :233) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68\ ) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47\ ) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222) at org.junit.runners.ParentRunner.run(ParentRunner.java:300) at org.junit.runners.Suite.runChild(Suite.java:128) at org.junit.runners.Suite.runChild(Suite.java:24) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222) at org.junit.runners.ParentRunner.run(ParentRunner.java:300) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReferen\ ce.java:50) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\ .java:467) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\ .java:683) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java\ :390) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.jav\ a:197) org.junit.runners.Parameterized$TestClassRunnerForParameters.createTest(Paramete\ rized.java:86) org.junit.runners.BlockJUnit4ClassRunner$1.runReflectiveCall(BlockJUnit4ClassRun\ ner.java:236) org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:\ 15) org.junit.runners.BlockJUnit4ClassRunner.methodBlock(BlockJUnit4ClassRunner.java\ :233) org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68\ ) org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47\ ) org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReferen\ ce.java:50) org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\ .java:467) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\ .java:683) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java\ :390) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.jav\ a:197)</body>
  </mail>
  <mail>
    <header>Test-Driven Development</header>
    <body>Hi, I am student and beginner in TDD in JUnit4 (Java). If you please, someone could suggest some books and/or where can I get some simple examples to learn write unitestes? Thank you Marques</body>
  </mail>
  <mail>
    <header>Re: Test-Driven Development</header>
    <body>Marques, Have you worked your way through the JUnit FAQ? It's available online for reading and (if my memory serves me correctly) it would have been sent to you when you subscribed to this list.  This is only intended to help beginners, so it doesn't cover everything, but it should be a good start. After that, there are a number of JUnit books available on the market. Some example code is always good and there are often unit tests in open-source Java projects that you can review. I have a couple of JUnit example projects up on Github that you may care to look at. They were specifically written to help people with learning JUnit so they have extra comments for the tests.  Hope this helps. Simon (One of the JUnit list moderators) -- simonpeter.org | simonpeter.com | newlife-upc.org</body>
  </mail>
  <mail>
    <header>Re: Test-Driven Development</header>
    <body>The GOOS book is what I would consider to be the best book on TDD:  1503627/ref=sr_1_1?ie=UTF8&amp;amp;qid=1337006797&amp;amp;sr=8-1 This was my previous favourite:  =sr_1_5?s=books&amp;amp;ie=UTF8&amp;amp;qid=1337006854&amp;amp;sr=1-5 -- Maybe she awoke to see the roommate's boyfriend swinging from the chandelier wearing a boar's head. Something which you, I, and everyone else would call "Tuesday", of course.</body>
  </mail>
  <mail>
    <header>Re: Re: Parameterization - of file names from directory; 1 parameter/test</header>
    <body>I don't know what happens when you call a multi-dimensional array initializer with a multi-dimensional array in the middle.  The good news is, you don't have to, and avoiding it makes the code simpler: @Parameters What happens if you use that? org.junit.runners.Parameterized$TestClassRunnerForParameters.createTest(Paramete\ rized.java:86) org.junit.runners.BlockJUnit4ClassRunner$1.runReflectiveCall(BlockJUnit4ClassRun\ ner.java:236) org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:\ 15) org.junit.runners.BlockJUnit4ClassRunner.methodBlock(BlockJUnit4ClassRunner.java\ :233) org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68\ ) org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47\ ) org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReferen\ ce.java:50) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\ .java:467) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\ .java:683) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java\ :390) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.jav\ a:197) org.junit.runners.Parameterized$TestClassRunnerForParameters.createTest(Paramete\ rized.java:86) org.junit.runners.BlockJUnit4ClassRunner$1.runReflectiveCall(BlockJUnit4ClassRun\ ner.java:236) org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:\ 15) org.junit.runners.BlockJUnit4ClassRunner.methodBlock(BlockJUnit4ClassRunner.java\ :233) org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68\ ) org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47\ ) org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReferen\ ce.java:50) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\ .java:467) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\ .java:683) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java\ :390) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.jav\ a:197)</body>
  </mail>
  <mail>
    <header>Re: Test-Driven Development</header>
    <body>GOOS book is indeed a great book, but definitely not a book to begin with! -- Regards / Pozdrawiam Tomek Kaczanowski   1503627/ref=sr_1_1?ie=UTF8&amp;amp;qid=1337006797&amp;amp;sr=8-1  =sr_1_5?s=books&amp;amp;ie=UTF8&amp;amp;qid=1337006854&amp;amp;sr=1-5</body>
  </mail>
  <mail>
    <header>Re: Parameterization - of file names from directory; 1 parameter/test</header>
    <body>David, It works! Thanks so much. I got confused with the idea of returning a collection of object arrays. It looks much simpler now.. don't know what I was thinking :) Bhavani org.junit.runners.Parameterized$TestClassRunnerForParameters.createTest(Paramete\ rized.java:86) org.junit.runners.BlockJUnit4ClassRunner$1.runReflectiveCall(BlockJUnit4ClassRun\ ner.java:236) org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:\ 15) org.junit.runners.BlockJUnit4ClassRunner.methodBlock(BlockJUnit4ClassRunner.java\ :233) org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68\ ) org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47\ ) org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReferen\ ce.java:50) org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\ .java:467) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\ .java:683) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java\ :390) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.jav\ a:197) org.junit.runners.Parameterized$TestClassRunnerForParameters.createTest(Paramete\ rized.java:86) org.junit.runners.BlockJUnit4ClassRunner$1.runReflectiveCall(BlockJUnit4ClassRun\ ner.java:236) org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:\ 15) org.junit.runners.BlockJUnit4ClassRunner.methodBlock(BlockJUnit4ClassRunner.java\ :233) org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68\ ) org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47\ ) org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReferen\ ce.java:50) org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\ .java:467) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\ .java:683) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java\ :390) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.jav\ a:197)</body>
  </mail>
  <mail>
    <header>Re: Migration to JUnit 4.10</header>
    <body>Steve, I think we over-aggressively deprecated withBefores.  It is unlikely to be truly removed any time soon.  Thanks,</body>
  </mail>
  <mail>
    <header>Re: Migration to JUnit 4.10</header>
    <body>David, thanks for the answer. In that case, I'll stick to the current solution. Best Regards =========== Steve Hostettler</body>
  </mail>
  <mail>
    <header>Re: Request for feedback: JUnit + Hamcrest 1.3</header>
    <body>All, there's now a beta snapshot available on  Direct link:  r If you use JUnit and Hamcrest in your project, we kindly ask for your help to try to compile and run your tests using this snapshot version. If you find any problems, please provide feedback through this mailing list or by adding a comment to the corresponding pull request [1]. Thanks for your help in advance! Marc [1]</body>
  </mail>
  <mail>
    <header>The order of default builders.</header>
    <body>Hi everyone, So, AllDefaultPossibilitiesBuilder has ignoredBuilder() before annotated builder as shown here: @Override List&amp;lt;RunnerBuilder&amp;gt; builders= Arrays.asList( ignoredBuilder(), annotatedBuilder(), I understand this was done to enforce consistent handling of @Ignore at class level but it sucks if you want to have a custom runner that wishes to handle @Ignore on class in a different manner. In particular, I'm looking to report the descriptions of all ignored unit tests (rather than just skipping the entire class). Changing the order above will most likely break annotated runners that are not prepared to handle class-level @Ignore. Any other suggestions/ options how this could be solved? This could be a tweak to IgnoredBuilder to delegate to a sub-runner if it sees @RunWith and then just fire ignore events for each individual test? Dawid</body>
  </mail>
  <mail>
    <header>Re: The order of default builders.</header>
    <body>Dawid, Which of these situations are you targeting? Situation 1: @RunWith(MyCustomSuite.class) @Ignore Situation 2: @Ignore @RunWith(MyCustomRunner.class) Thanks,</body>
  </mail>
  <mail>
    <header>Re: The order of default builders.</header>
    <body>This would be Situation 2. I have a custom runner (not descending from JUnit) specifically to target things like reporting (that is -- I would like to know which tests were ignored if a suite is ignored, not just skip them silently). This is possible if somebody explicitly creates my runner with a suite class but not via factory (JUnitCore or Request) because then Ignore takes precedence over RunWith. Dawid</body>
  </mail>
  <mail>
    <header>Re: The order of default builders.</header>
    <body>Dawid, If there was a way to attach a listener implementation to a suite, would that give you what you're looking for?  Runner is a fairly heavy-weight extension slot to be used primarily for listening.</body>
  </mail>
  <mail>
    <header>Re: need suggestion about junit</header>
    <body>k.l, These are important and common questions, so often a Google search reveals some helpful resources.  For example, you might want to start with  Good luck, On Fri, Apr 20, 2012 at 1:22 AM, narayanaswami41</body>
  </mail>
  <mail>
    <header>Re: The order of default builders.</header>
    <body>Hi David, Yeah, well... I already wrote my Runner implementation --  There are benefits of having a custom, cleanroom-rewritten Runner -- I can experiment with features I wouldn't be able to implement if I descended from JUnit's default Runner implementation. This is a long story. My question/ issue is that I thought @RunWith would take precedence over anything else -- virtually pass control to a custom runner to handle all events and deal with contracts. This is the case with everything _except_ @Ignore-on-suite-class which causes a different runner implementation to be used. would that give you what you're looking for? Digressinon - I actually implemented suite-listeners in that runner of mine and they work great:  /main/java/com/carrotsearch/examples/randomizedrunner/Test014Listeners.java But again -- what I would like to see is this: JUnitCore.run(MyTestClass.class) always pass control to a runner designated in @RunWith. Currently if MyTestClass has an @Ignore, the custom runner will not be even called. I guess this qualifies as a request for a backwards incompatible change :( Dawid</body>
  </mail>
  <mail>
    <header>Re: The order of default builders.</header>
    <body>Not a perfect solution, but you could add your own custom annotation for this purpose. Your custom runner would check if the target class has this annotation, and if so, return child runners that do nothing but the reporting. -- Kevin</body>
  </mail>
  <mail>
    <header>Re: The order of default builders.</header>
    <body>Thanks. Yes, I could do this, like I did with other things (for example I support meta-annotation @TestGroup which allows one to define custom annotations like @Nightly, @Slow, etc. and disable/enable them as a group). This works much like an auto-assumption; you can see the test results from Apache Lucene here (grep for @Nightly or @AwaitsFix to see group-ignored tests):  But then... @Ignore works great and is well defined (and most importantly users already know what it does). The only unexpected thing (to me) is that on-class @Ignore doesn't even attempt to retrieve the descriptions tree. Don't get me wrong -- I do understand the design rationale for having on-class @Ignore served by another runner, but at the same I just disagree that it is a right decision. I think there should be something like a "certification test" for Runner implementations and the contract on passing on-class @Ignore should be that it doesn't execute any test (run count == zero). The number of ignored tests should be up to the Runner (either ignore the suite or each test separately). Dawid</body>
  </mail>
  <mail>
    <header>Best practices to keep scenarios outside of the unit test</header>
    <body>Hello all, I'm looking for a good way to keep scenarios stored outside of the unit tests.  Basically I'm thinking of some way to do black box testing based on some files, hopefully something simple enough that a non programmer can take look at and modify. Some thing that takes a few inputs for a function and lists the expected output. Something like but obviously for much more complicated tests: input1=1 input2=2 output=3 input1=2 input2=2 output=4 Any ideas on how to do this? Thanks, Andres</body>
  </mail>
  <mail>
    <header>Re: Best practices to keep scenarios outside of the unit test</header>
    <body>A CSV/Excel file? Matthew Farwell. Le 22 avril 2012 17:34, Andres Olarte &amp;lt;olarte.andres@...&amp;gt; a écrit :</body>
  </mail>
  <mail>
    <header>Re: Best practices to keep scenarios outside of the unit test</header>
    <body>Hello Andres. Maybe an XML file could be the simplest and easy way. But i recomend you a @parameterized test. You can see how here :  Greetings --</body>
  </mail>
  <mail>
    <header>Re: Best practices to keep scenarios outside of the unit test</header>
    <body>This problem has been solved many times already. For example, take a look at JBehave. It uses JUnit to run tests that are specified in Given/When/Then format. The language of each Given/When/Then can be defined by programmers and the test scenarios edited in a text file by non-technical people. Other tools for specifying acceptance (IE. "black box") tests include Fit, Robot Framework, Cucumber, etc. Don't limit yourself to JUnit. Good books include Fit for Developing Software (Rick Mugridge et al) and The Cucumber Book (Matt Wynne and Aslak Hellesoy). Gerard -- Gerard Meszaros Lean/Agile Coach/Mentor/Trainer  1-403-827-2967 Author of the Jolt Productivity Award winning book "xUnit Test Patterns - Refactoring Test Code" and winner of the "Programming with the Stars" competition at Agile 2009. Learn more -- Gerard Meszaros Lean/Agile Coach/Mentor/Trainer  1-403-827-2967 Author of the Jolt Productivity Award winning book "xUnit Test Patterns - Refactoring Test Code" and winner of the "Programming with the Stars" competition at Agile 2009. Learn more at</body>
  </mail>
  <mail>
    <header>Re: Re: Best practices to keep scenarios outside of the unit test</header>
    <body>Parameterized test runner is probably what you're after. The default one in JUnit does not support naming parameters (several folks provided patches, they're in github). I wrote a different runner and that one provides named parameters and static factory methods for test -- see an example of use here:  Dawid</body>
  </mail>
  <mail>
    <header>Re: Best practices to keep scenarios outside of the unit test</header>
    <body>Hi! Alternativly, use getData methods in CSVParametrized form the unofficialjunit project in sourceforge. Cheers, Georg</body>
  </mail>
  <mail>
    <header>Re: The order of default builders.</header>
    <body>Dawid, Imagine a developer being dropped into a new project.  There are JUnit tests using custom runners she's never seen, and some of those are failing. She'd like to Ignore some of the failing test classes, and focus in on a couple to fix first.  I think that there's value in being able to trust @Ignore to always Just Work, even if the custom runners being used are faulty in various ways. So the current functionality stays. I can definitely understand wanting to attach a suite listener, though, so if you're interested in pursuing contribution of that code, let me know. Thanks,</body>
  </mail>
  <mail>
    <header>Re: The order of default builders.</header>
    <body>Like I mentioned I can understand this rationale but I still differ in opinion. If there are custom runners that fail to comply with @Ignore contract they are badly broken, that's all. Whether to cater for badly broken code that should fulfill contracts is a philosophical question. I accept this decision even if I don't like the consequences. Sorry for being slow but how could this help me? And how would this be different from attaching a listener to JUnitCore? Recall I would like to retrieve a tree of Descriptions from a suite class annotated with an @Ignore annotation. Dawid</body>
  </mail>
  <mail>
    <header>Re: The order of default builders.</header>
    <body>Ah, I'd forgotten that you wanted a description of all the contents.  Does your scheme allow you to use a RunnerBuilder other than the default AllDefaultPossibilitiesBuilder?</body>
  </mail>
  <mail>
    <header>Re: The order of default builders.</header>
    <body>See, that's the problem -- I have no control over what the use case of invoking the suite class is. It can be invoked from Ant, Eclipse or somewhere else. I think most use cases are JUnitCore.runClass but I cannot rule out using Request or other combinations -- hard to tell, really. I wouldn't be asking for it but aside from the Runner implementation I also have a custom Ant task (to run tests in parallel JVMs among other features) and for this it'd be very nice to be able to list all ignored tests, including those from ignored suites. If not for anything else, you can then sum up how many individual test cases you have in your project... Currently what is available to a RunListener when @Ignore is invoked on a suite is 0 executed tests, 0 ignored tests, 0 failed tests - I think this is odd. I also agree with Cedric that the reason for an ignored test (or assumption-ignored test) is an important thing to have available in listeners. This is particularly itching with RunListeners because test ignored callback doesn't provide any means of passing a cause (unlike an assumption). This can be worked around using some trickery -- and I do that in randomizedtesting package -- but again -- it's an API constraint that is hard to overcome. Dawid</body>
  </mail>
  <mail>
    <header>Re: The order of default builders.</header>
    <body>So, with an extra suite-wrapping step, you can use whatever ordering of builders you want: @RunWith(MyCustomBuiltSuite.class) If you find that your extension with that workaround step is getting some major use, let's talk about how to make life easier for all those users, but this should be enough to bootstrap, no?</body>
  </mail>
  <mail>
    <header>Re: The order of default builders.</header>
    <body>they get upset at every spurious keystroke (even at the @Test annotation). That's fine, thanks for trying to help, David. I'll just live with this behavior of @Ignore. Dawid</body>
  </mail>
  <mail>
    <header>Not sure if JUnit can be used how I need it... suggestions?</header>
    <body>Hi :) I'm working on a project for university, which is about a website to teach the basics of Java programming. It'll have some programming lessons and then some exercises for the user to practise by typing them in a textbox that will then send its contents to a servlet. The servlet will compile the code (creating a .class file) and return some results (success or compiling errors). So far so good. But I'd also like to test that the user created an appropriate solution to the excercise, and I was thinking of doing so with JUnit. My problem is I can't think of a way to do it (I've never used JUnit before). Any ideas? Thanks!! Patricia.</body>
  </mail>
  <mail>
    <header>Re: Not sure if JUnit can be used how I need it... suggestions?</header>
    <body>That's a very general question. JUnit does not do much more than execute a bunch of tests and give you assertions to test. (It does give you some more "fancy" tricks, like Rules and Runners as an addon.) As long as you can write some test code that executes the not yet written class/method in a reliable way, I think it should be possible. Greetings,</body>
  </mail>
  <mail>
    <header>Parameterized method</header>
    <body>Hi All, I am new to junit. I am confused how to run the parameterized method. Ex: @Test Thanks SaiYaswanth</body>
  </mail>
  <mail>
    <header>Re: Parameterized method</header>
    <body>"Must" read this:  It´s a good and simple explain by example. Greetings -- M.P.7.O.</body>
  </mail>
  <mail>
    <header>Re: Parameterized method</header>
    <body>You need to use the ParameterizedTestRunner. Here's a blog on how to do that:  -- Maybe she awoke to see the roommate's boyfriend swinging from the chandelier wearing a boar's head. Something which you, I, and everyone else would call "Tuesday", of course.</body>
  </mail>
  <mail>
    <header>How can I check if a test failed during @After?</header>
    <body>I need to have Selenium Webdriver take a screenshot if the test failed, prior to closing the driver during teardown. Various attempts I've read about have not been successful (for example, @After is called and the driver destroyed prior to TestWatcher's failed() interception).  The cleanest way to do this would simply be to check during my @After tearDown() if the test failed. I've looked at the TestResult class and it's not clear if I could use that. Thanks for any help. pete</body>
  </mail>
  <mail>
    <header>Basic JUnit question(s)</header>
    <body>Hi all, Please bear with me as I'm getting back into JUnit after first using it several years ago.  I see all the discussions going on and they are far beyond what I conceive that I have use for at the moment. Presently, I'm developing part of a simulation system in Java for work, and I plan on using JUnit as part of NetBeans to do unit testing to bulletproof my code.  My question is, as I understand it, I can write a class and then "right-click to generate JUnit test class" or something.  So what happens when I update my real class with additional fixes and/or functionality?  Does NB/JU know to automatically update the test class, or do I have to regen the test class? Thanks for your time, Mike</body>
  </mail>
  <mail>
    <header>Coding review is possible with JUnit?</header>
    <body>I am new to JUnit.Entire project has developed using spring and JSPs. Now my job is review code and notice whether it follows coding standards or not.They didn't write any code for JUnit. I want to use JUnit for this purpose. Is it possible with JUnit.If it is possible can I write any extra code for this Thanks</body>
  </mail>
  <mail>
    <header>Re: Call for help: Assertions for Comparable</header>
    <body>Hi! Please feel fre to take some code for this out of "unofficialjunit" on sourceforge. Regards,  Georg</body>
  </mail>
  <mail>
    <header>Customize the JUnit result</header>
    <body>Hi All, Is there a way to get more detail info after running test cases? like spend how many time for each test case? list all passed test cases other than just failed? I am able to get some limit info form TestResult, but not enough to me. any suggestions would be appreciate! I launch test by TestRunner BTW. Thanks Wensi</body>
  </mail>
  <mail>
    <header>Displaying test case name from the testcase</header>
    <body>Forgive me if this is a FAQ, but I have tried digging through the documentation and the answer was not apparent. I am writing some test cases.  As part of the testing, I want to keep a log of the responses from the code for debugging purposes.  It would be really helpful to have some simple process to print out the tests name and other properties into the log.  Since there are hundreds of tests, I would like to make this a common step (ie call a method) to do this.  Problem is finding the name of the test itself (without having to pass it into the logging method or hacking the stack). I see there is a Description class in the runner.  Is there any way to access the runner (i.e. a singleton or static getter) from the test case?</body>
  </mail>
  <mail>
    <header>Re: Displaying test case name from the testcase</header>
    <body>You should write a @Rule that will intercept the Description associated with the current test case and store it somewhere (or use it directly). Check out the javadoc for @Rule.  Dawid</body>
  </mail>
  <mail>
    <header>Re: Displaying test case name from the testcase</header>
    <body>See also  Name.java</body>
  </mail>
  <mail>
    <header>JUnitCore Stopping</header>
    <body>Hello, I wan't to ask for a solution to stop and/or destroy a JUnitCore. Like pleaseStop() on the RunNotifier. I already tried ExecutorsService with no success. My only not yet tested solution is to System.exit my java programm after starting a new process of it.</body>
  </mail>
  <mail>
    <header>How to set the order in Junit</header>
    <body>Hi all I would like to know  how to set an order in Junit, Details: the Junit tests are executing from quickbuild. Thanks</body>
  </mail>
  <mail>
    <header>Re: How to set the order in Junit</header>
    <body>Hi, If you're asking about the ordering of tests, it's discouraged in JUnit. For more information, see this stackoverflow Answer:  of-test-is-it-intentional/7846712#7846712 Matthew Farwell. Le 22 février 2012 15:27, nirh20 &amp;lt;nir.heifetz@...&amp;gt; a écrit :</body>
  </mail>
  <mail>
    <header>Re: How to set the order in Junit</header>
    <body>Thank you very much! I will look on it  of-test-is-it-intentional/7846712#7846712</body>
  </mail>
  <mail>
    <header>Re: Alphabetizing test method run order?</header>
    <body>Hi, I've submitted a pull request for this  @SortMethodsWith(MethodSorters.NAME_ASC) There are four possibilities for the MethodSorters: MethodSorters.DEFAULT: the default value, deterministic, but not predictable MethodSorters.JVM: the order in which the tests are returned by the JVM, i.e. there is no sorting done MethodSorters.NAME_ASC: sorted in order of method name, ascending MethodSorters.NAME_DESC: sorter in order of method name, descending I would love to have feedback on this proposal. Thanks. Matthew Farwell. problems due to ordering they can easily change the order. Yes, I know that their tests are broken, but they probably do too. If the order is based upon the hashCode, I have to either run that test with a custom Runner (and make sure that it's usable in Eclipse, Jenkins, maven, etc. etc.)[*]. If the order is simply the name, then all I have to do to 'fix' my problem is change the name.</body>
  </mail>
  <mail>
    <header>Urgent please clear my doubts</header>
    <body>I dont know how to install and run  junit. I tried different methods given in the web. Nothing works. So please help me to run the program 1. Java is intstalled in C:\Program Files\Java\Jdk1.6.0 2. At which location should i intstall Junit( Eg: F:\) 3. If i installed JUnit in (F:\) the where should i place the program checkforprime.java and checkforprimetest.java. In C drive or in F drive 4. Im having Windows OS. Please send me the steps to run the program Regards Anu Smitha</body>
  </mail>
  <mail>
    <header>Re: Urgent please clear my doubts</header>
    <body>JUnit is a jar file, which needs to be added to your classpath. So you can install it anywhere. The easiest way to run junit is actually in an IDE (Eclipse, IntelliJ, Netbeans, ...) Greetings, the web. Nothing works. So please help me to run the program checkforprime.java and checkforprimetest.java. In C drive or in F drive</body>
  </mail>
  <mail>
    <header>Re: Urgent please clear my doubts</header>
    <body>Hello, Â  Better way to work with Juint is to have IDE like eclipse.It allready has Juint in-built in it.So you can download eclipse and when you go to file--&amp;gt;new---&amp;gt;other----&amp;gt;java ----&amp;gt;it will have Juint option.You can create your test cases from there. Â  Â  Thanks, Mihir ________________________________ To: junit@yahoogroups.com Sent: Sunday, 26 February 2012 6:42 AM Subject: [junit] Urgent please clear my doubts Â  I dont know how to install and runÂ  junit. I tried different methods given in the web. Nothing works. So please help me to run the program 1. Java is intstalled in C:\Program Files\Java\Jdk1.6.0 2. At which location should i intstall Junit( Eg: F:\) 3. If i installed JUnit in (F:\) the where should i place the program checkforprime.java and checkforprimetest.java. In C drive or in F drive 4. Im having Windows OS. Please send me the steps to run the program Regards Anu Smitha</body>
  </mail>
  <mail>
    <header>Removing methods JUnitCore#runMainAndExit and JUnitCore#runMain</header>
    <body>Hi, I've submitted a pull request to make private the methods JUnitCore#runMainAndExit and JUnitCore#runMain ( unner/JUnitCore.java Can I ask anyone who uses these methods to say so, because we want a small survey to see if they are used extensively. Also, if you do use them, can you say if you could work without them. Please note that both of these methods are marked as do not use: /** * Do not use. Testing purposes only. * @param system  */ This is the pull request: I did a quick github search, and I found two projects which use runMain (none that use runMainAndExit):  (multiple uses, last modification 2 years ago) Does anyone use these methods? Thanks. Matthew Farwell.</body>
  </mail>
  <mail>
    <header>RE: Urgent please clear my doubts</header>
    <body>You can put anything at any place just classpath for jars and path for java command  should be defined. Regards, Saurav From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of mihir jhala Sent: Tuesday, February 28, 2012 1:28 AM To: junit@yahoogroups.com Subject: Re: [junit] Urgent please clear my doubts Hello, Better way to work with Juint is to have IDE like eclipse.It allready has Juint in-built in it.So you can download eclipse and when you go to file--&amp;gt;new---&amp;gt;other----&amp;gt;java ----&amp;gt;it will have Juint option.You can create your test cases from there. Thanks, Mihir ________________________________ Sent: Sunday, 26 February 2012 6:42 AM Subject: [junit] Urgent please clear my doubts I dont know how to install and run  junit. I tried different methods given in the web. Nothing works. So please help me to run the program 1. Java is intstalled in C:\Program Files\Java\Jdk1.6.0 2. At which location should i intstall Junit( Eg: F:\) 3. If i installed JUnit in (F:\) the where should i place the program checkforprime.java and checkforprimetest.java. In C drive or in F drive 4. Im having Windows OS. Please send me the steps to run the program Regards Anu Smitha</body>
  </mail>
  <mail>
    <header>Integrating unit tests</header>
    <body>I have multiple products/applications. Some are running on Java background and some on .NET background. Correspondingly unit test cases are written for both the cases. Let us say for Java applications unit tests are written in JUNIT. For .NET applications unit tests are written in NUNIT. We can also assume that these tests are configured in some build tool like ANT,Maven,NMaven etc. My requirement is to integrate all these tests in a common framework(or a platform) and run them in a common environment which can be User Interface or a batch or a command. Please let me know if am not clear with the requirement.</body>
  </mail>
  <mail>
    <header>Re: Integrating unit tests</header>
    <body>Salut, You can probably use jenkins for this, although I haven't done it myself. I found the following references on the net: Jenkins  TFS and MSBuild: MSBuild + NUnit:  I would look at the jenkins docs for more information, for instance:  Matthew Farwell. Le 29 février 2012 11:13, sk_smile5n &amp;lt;sk_smile5n@...&amp;gt; a écrit :</body>
  </mail>
  <mail>
    <header>Re: Integrating unit tests</header>
    <body>Hi Matthew, Thanks for your immediate response.  I basically need to integrate both Junit and Nunit test cases in a common platform. Else will put it in this way. There are few test cases which are in TestNG and few with Nunit. What all the possible ways from which i can call and execute all the unit tests? There shouldn't be to runs. On a single run both cases should produce test results. Thanks in advance.</body>
  </mail>
  <mail>
    <header>Naming Conventions</header>
    <body>Hey Everybody, What are some naming conventions you practice for naming unit tests?  I'm Particularly interested in how you name unit tests for overloaded methods. Thanks, Hunter Hegler</body>
  </mail>
  <mail>
    <header>Re: Naming Conventions</header>
    <body>I usually don't name my tests after methods I test, but rather after the functionality to test and the result to expect. Some examples: aUserWithoutBonusDoesNotGetAnOffer aUserWithBonusGetsAnOffer wrongPasswordIsRejected Does that help? Greetings,</body>
  </mail>
  <mail>
    <header>Re: Naming Conventions</header>
    <body>The same as this but with the added part that we name our tests so that class name (-Test) + test name form a coherent sentence about the behaviour, e.g. PasswordValidatorTest -- Maybe she awoke to see the roommate's boyfriend swinging from the chandelier wearing a boar's head. Something which you, I, and everyone else would call "Tuesday", of course.</body>
  </mail>
  <mail>
    <header>Re: Naming Conventions</header>
    <body>Rule of a thumb: do not test methods, tests classes responsibility/behaviour. If you follow this rule, you won't have to find names for overloaded methods, but for different responsibilities that each of them should represent. -- Regards / Pozdrawiam Tomek Kaczanowski</body>
  </mail>
  <mail>
    <header>Re: Naming Conventions</header>
    <body>Hi! I try to describe the expected behaviour (much like the other posts). At some point, I included method names and aded a digit or tested behaviour, but that was not experessive/too lengthy. Regards,   Georg   ---------------------------------------------------------- Georg Thimm Ortelsburgerstr. 16a, 21337 Lüneburg Tel: 01577 951 7773              LinkedIn Profile: </body>
  </mail>
  <mail>
    <header>Release 4.11?</header>
    <body>Hi all, I'm about to release Cucumber-JVM 1.0.0. (a pure Java implementation for the popular Ruby BDD tool). Cucumber-JVM has some decent JUnit integration (a custom runner), but there is one little snag making it a little painful to use [1]. I have submitted a pull request for that [2]. I realise you have a lot of open tickets, and need to make sure stuff doesn't break. I'm not saying my pull request should be treated any differently than others. But it would be good to know whether you think it will be in 4.11 and approximately when it's due. Knowing it's not likely to be released any time soon would be helpful too, we'd have to hack our way around it (we've tried before - it's hard). Cheers, Aslak [1] [2]</body>
  </mail>
  <mail>
    <header>Request for feedback: JUnit + Hamcrest 1.3</header>
    <body>Hi, we are currently working on making JUnit use and work with the latest version of Hamcrest (1.3.RC2). All but one matcher that used to be provided by JUnitMatchers are now shipped with Hamcrest Core, i.e. CoreMatchers. Moreover, Hamcrest has introduced a couple of signature changes for these and other matchers, including hasItem, hasItems, both, and either. In some cases, these signature changes might cause compiler errors. Therefore, if you use JUnit and Hamcrest in your project, we kindly ask for your help to try to compile and run your tests using the hamcrest-1.3 branch from [1]. If you find any problems, please provide feedback through this mailing list or by adding a comment to the corresponding pull request [2]. Cheers, Marc [1] [2]</body>
  </mail>
  <mail>
    <header>Re: Request for feedback: JUnit + Hamcrest 1.3</header>
    <body>I've been using 1.3RC2 since it came out. I haven't noticed any problems, but I probably haven't used any of the moved matchers other than is(). Dale -- Dale Emery Consultant to software teams and leaders  "It depends upon what the meaning of the word 'is' is." William Jefferson Clinton</body>
  </mail>
  <mail>
    <header>Migration to JUnit 4.10</header>
    <body>Hello, I recently migrated 4.10 and I've got the following warning in a class that extends BlockJUnit4ClassRunner: The method withBefores(FrameworkMethod, Object, Statement) from the type BlockJUnit4ClassRunner is deprecated. Here is the class ... In the javadoc, it is written that I should use Rules. I have three issues/questions regarding that  modification: 1) I use BlockJUnit4ClassRunner not to extends anything specific to the tests 2) I do not want to add @Rule in the client test class (or in a parent class) 3) The actual snippet that I used in the withBefores method uses a bunch of objects initialized in the DerbyWeldJUnit4Runner class. So here is my question: How can integrate the Rule without having to modify the current client test code? Did I miss something in the design. Many thanks in advance</body>
  </mail>
  <mail>
    <header>Junit method check</header>
    <body>I have a Mockito code,   Mockito.when(f_inactive.retrieveJobNames(GROUP_NAME)).thenReturn(inactiveGroupNa\ Same I have to write in Junit. Here GROUP_NAME is a string value. If the when condition gets true then i have to return the String[]. Please suggest me how to write the same code in Junit.</body>
  </mail>
  <mail>
    <header>Re: Junit method check</header>
    <body>santhoshjoy, JUnit does not have a built-in mocking framework.  You can use Mockito with JUnit, so you don't need to give up your Mockito code. Mockito.when(f_inactive.retrieveJobNames(GROUP_NAME)).thenReturn(inactiveGroupNa\</body>
  </mail>
  <mail>
    <header>Re: Reporting on test runs from a custom Runner</header>
    <body>Thanks Matthew. I will try writing out the reports from a RunListener. If they can be registered by both the Ant and Maven plugins, that's pretty good. Eclipse is another story: after a cursory search, I don't see a way to register custom RunListeners in Eclipse's JUnit launcher. There is a method in org.eclipse.jdt.junit.JUnitCore for registering RunListeners, but nothing I can find in the UI for specifying one. Worst case, I suppose I could just register the RunListener from within my Runner, perhaps only when enabled by a system property. That's not as bad as my original picture of option 5. -Jonathan</body>
  </mail>
  <mail>
    <header>Re: Reporting on test runs from a custom Runner</header>
    <body>Am 15.12.2011 um 17:23 schrieb Jonathan Fuerth: I think this method is intended to be used by other Eclipse plugins, I don't think there's an UI for that. You could wrap your custom listener in an Eclipse plugin, though. Of course, that would only be worth the effort if you intend to use it a lot. Cheers, Marc</body>
  </mail>
  <mail>
    <header>Re: Reporting on test runs from a custom Runner</header>
    <body>Yes, I think I'd probably cheat and register the listener directly from within the runner. If every JUnit launcher needs its own custom configuration or plugin, that's not a very good experience for users of the framework. -Jonathan</body>
  </mail>
  <mail>
    <header>Re: Reporting on test runs from a custom Runner</header>
    <body>Hi Jonathan, Out of curiosity: have you considered implementing your framework extension as a TestRule instead of a Runner? Cheers, Stephan testing. It lets you create tests like this: parameter values (1, 100000), (2, 100000), ... (1, 200000), ... (10, 1000000). a lot of approaches, but I don't know which is "right." there a generic way to register listeners?) report when the suite is done (maybe this is the only way to register a TestListener anyhow?) to Maven) in any environment, but feels like a dirty approach) published on GitHub; I want a solution that can work for everyone. So I think ideas 3 and 4 are out. human-readable reports?</body>
  </mail>
  <mail>
    <header>Categories throws InitializationError</header>
    <body>When there are no tests matching the Include/Exclude filters, Categories throws an InitializationError.  Can this behavior be changed?  IMO, if nothing matches the criteria, the test execution should pass. Currently, we're using a hack around this problem: Thanks, Noel</body>
  </mail>
  <mail>
    <header>Can we use two different framwork in single test class</header>
    <body>Hi, Can i use Mockito framework to improve the code coverage</body>
  </mail>
  <mail>
    <header>Re: Can we use two different framwork in single test class</header>
    <body>You can use JUnit and Mockito together.</body>
  </mail>
  <mail>
    <header>Re:</header>
    <body>[This is a recording.] I'm on vacation Dec 21 - Jan 2. I'll be reading mail occasionally. Happy Holidays! Bill</body>
  </mail>
  <mail>
    <header>can we mock interface without implementation in jUnit</header>
    <body>hi friends, application and i am not able to cover the code in test as i am not able to mock the interface. any help appreciated. Thanks, Atul Ingale</body>
  </mail>
  <mail>
    <header>Re: Can we use two different framwork in single test class</header>
    <body>See, if we mock the object using junit how can i mock it again using Mockito in same class? i thought of using the @Before and @After but couldent succeed. do you have any idea how to implement it?</body>
  </mail>
  <mail>
    <header>Re: can we mock interface without implementation in jUnit</header>
    <body>Atul, Have you tried any of the popular mocking frameworks like jMock, EasyMock or Mockito?   What happens?</body>
  </mail>
  <mail>
    <header>Runner for maven</header>
    <body>Hi, I maintain the junit provider for maven-surefire, and I'm looking into transitioning from  a Junitcore+RunListener based approach to an approach based on something like BlockJUnit4ClassRunner. Unfortunately I cannot subclass the BlockJUnit4ClassRunner since the client code itself may need to do that, so I'd somehow need to put "my" Runner in front of the client-supplied one, maybe something proxy like. Anyone have any tips on this, maybe some existing code that does this ? Kristian</body>
  </mail>
  <mail>
    <header>Re: Runner for maven</header>
    <body>Hi Kristian Do you really want a transition from RunListener? To an outside observer - a JUnit Runner "describes" its test-executions and reports their outcome to the RunNotifier, which forward the info to RunListener, which is the interface that 3rd-party test-running applications (e.g. IDEs, Maven-Surefire etc) are expected to use. I have seen IDE-project test-extensions try to go beyond RunListener/RunNotifier and start to joggle with Runner internals (e.g. test-instance creation/setup, method-executions etc) and the result is something I don't like much. It works for simple cases but with customized Runner-classes and new JUnit-features (e.g. the introduction of JUnit-Rules) the result is usually bad and it discourages the IDE users (i.e. the developers) from taking full advantage of JUnit! However, Maven (versions 2.0-2.2) and its Surefire-plugin has handled the JUnit-integration wonderfully, as far as I know, so your post worries me a little. What is it that you want to accomplish by moving away from the successful(!) "Junitcore+RunListener based approach"? Henrik transitioning from  a Junitcore+RunListener based approach to an approach based on something like BlockJUnit4ClassRunner. code itself may need to do that, so I'd somehow need to put "my"</body>
  </mail>
  <mail>
    <header>Re: Re: Runner for maven</header>
    <body>Kristian, In reading your original mail, I was also confused as to what you wanted to achieve. Could you expand a little please? Thanks. Matthew Farwell. Le 3 janvier 2012 22:45, hkaipe &amp;lt;hkaipe@...&amp;gt; a écrit :</body>
  </mail>
  <mail>
    <header>Re: Runner for maven</header>
    <body>Sorry, I was doing just what I sometimes dislike of our own users ;) The real problem I want to solve is associating console output from a running thread to a given test-case (for parallel runs). We have this fairly well covered already and we manage to capture everything that happens within a given test-case for that test-case. The real problem is that the RunListener API does not demarcate test-classes properly, so I am unable to distinguish console output happening in @AfterClass of one test with @BeforeClass on the test-class on the same thread. This problem has been in the corner of my eye for quite some time and I've been trying to find a decent angle to solve it from. I promise not to do anything that is frowned upon, which is why I asked ;) Kristian</body>
  </mail>
  <mail>
    <header>Re: Runner for maven</header>
    <body>Dear Kristian, My first thought - and I hope not to sound arrogant - would be to - to remove the the output altogether (who reads it anyhow once the test is run successfully the first time ;-); if one needs to read the output of the test runs, what's the point of unit tests?!). - or to convert it into assertions (they also work nicely in methods not marked with @Test). If you still think you need the output, why not use a logger (log4j), which adds all the information you need? Refactoring should be very easy. As I'm starting to learn and play with AspectJ, I'd try that (but would not bet money on this being a good idea). This would allow to intercept calls to System.out.print() and alike, and tweak it print the argument(s) of the print()-statement augmented with the class to which the calling method belongs. thread to a given test-case (for parallel runs). We have this fairly well covered already and we manage to capture everything that happens within a given test-case for that test-case. properly, so I am unable to distinguish console output happening in @AfterClass of one test with @BeforeClass on the test-class on the same thread. been trying to find a decent angle to solve it from. I promise not to do anything that is frowned upon, which is why I asked ;)</body>
  </mail>
  <mail>
    <header>Re: Re: Runner for maven</header>
    <body>Hi Kristian, We had a similar issue. I was debating for a longer while if it makes sense to run parallel tests within the same VM. In many situations this speeds things a lot and has a nice memory conserving footprint but you cannot guarantee tests won't interact with each other (in the simplest case via mutating system properties). Finally the decision was to do it like Apache Lucene did it -- split tests into parallel slave VMs with repeatable suite execution order and sequential test execution within a single VM. This is implemented in an ANT task called junit4 here.  JUnit tests inside will give you a hint how to use it, the code is still very fresh so documentation is scarce. Now... this was a digression. Back to your question (because we did go that route as well, only backed up), one possible solution to isolating sysout/syserrs of parallel tests in a single VM is: 1) isolate each suite (for @BeforeClass/ @AfterClass hooks) into a separate thread which you have under control. This can be either a custom @Runner or a Computer, many ways to achieve it. 2) write a PrintStream implementation that redirects to a thread-local buffer. This gist implements a similar idea to demux multiple thread streams so that each one's output appears on a single line; you'll get the idea I'm sure.  3) once you have the above the rest is easy: replace default System.out/System.err (I assume no security manager is present or it allows such replacement), clear the buffer before suite, run your suite, flush the buffer. The buffer's content will be your thread's output even though system.* are singletons. Like I said though -- I would consider using multiple jvms for running parallel tests instead. Dawid</body>
  </mail>
  <mail>
    <header>Re: Runner for maven</header>
    <body>maven-surefire now also supports concurrent forks, and they don't have any of the interaction problems you describe - as you know. Since surefire is an all-purpose runner, we try to support any "sensible" mode of execution, and there are good use cases for both models of execution. Your first suggestion seems to work quite well, using the Computer I just wrap the created runner in another runner that attaches the testclass to the thread (and delegates on to the target Runner), which we pick up in reporting. Surefire does all the other stuff already, but I'm thinking we might be deprecating "both" mode threading support because it becomes such a pain to do correctly, at least it requires a tight collaboration between the RunListener and the Computer. Kristian</body>
  </mail>
  <mail>
    <header>Re: Runner for maven</header>
    <body>Surefire is maven's default test-runner. It serves a bucketload of use-cases, some of which are *far* off from what I'd do in my own tests. If the user decides to use loggers or system out is not really something we want to dictate. As a humoristic example, let me mention the issue we had on this guy spawning threads from a test that were producing console output for the entire test run that was collected by a JVM shutdown hook. Kristian run successfully the first time ;-); if one needs to read the output of the test runs, what's the point of unit tests?!). marked with @Test). adds all the information you need? Refactoring should be very easy. bet money on this being a good idea). This would allow to intercept calls to System.out.print() and alike, and tweak it print the argument(s) of the print()-statement augmented with the class to which the calling method belongs. running thread to a given test-case (for parallel runs). We have this fairly well covered already and we manage to capture everything that happens within a given test-case for that test-case. properly, so I am unable to distinguish console output happening in @AfterClass of one test with @BeforeClass on the test-class on the same thread. been trying to find a decent angle to solve it from. I promise not to do anything that is frowned upon, which is why I asked ;) to customized the a like. ?</body>
  </mail>
  <mail>
    <header>Re: Re: Runner for maven</header>
    <body>all-purpose runner, we try to support any "sensible" mode of execution, and there are good use cases for both models of execution. I was thinking about ANT actually, not maven (surefire). I admit we also needed some extra control over suite allocation scheduling and more detailed reporting, so surefire wasn't a perfect fit for us. It is a great tool though, I agree with that. Dawid</body>
  </mail>
  <mail>
    <header>Re: Re: Runner for maven</header>
    <body>Oh, I also didn't mention one more thing -- if you have tests that fork subthreads which in turn write to System.out/err then you will also need  a smarter way to track which suite a thread belongs to. This can be done with a parent thread group (in most cases works) but like you said -- I think it's just a pain and there is no way to implement it correctly for all possible use cases. Dawid all-purpose runner, we try to support any "sensible" mode of execution, and there are good use cases for both models of execution.</body>
  </mail>
  <mail>
    <header>Re: Re: Runner for maven</header>
    <body>I'm already working on something like that. I'm writing a new test runner called Jumi running tests in parallel in the same JVM, and it take care of capturing the System.out/err of individual tests. Jumi will do the output capturing by replacing System.out/err with its own implementation, which saves all print events (the same way it saves test lifecycle events), synchronizes both out and err (I think all current IDEs and build tools fail this:  bugs/SystemOutErrBugTest.java and also takes care of capturing the output of threads spawned by the test thread. For long-lived threads, such as AWT event dispatch thread, I will also try to figure out something (I'll timestamp all print events, so it should be possible to figure out roughly which test printed things in the AWT thread). The output capturing is at the top of my TODO list, so I will have it implemented after a couple of productive afternoons when I have time to work on it. Soon after that I'll make the first alpha release. I've looked a bit at how to integrate Jumi with maven-surefire. Jumi and Surefire have some overlap, for example both of them take care of classloading and starting a JVM process. One option is to use Surefire's classloading and use only the core runner parts of Jumi. Otherwise Jumi would need information that what are the dependency JARs, what are the current project's classes, maybe also that which of them are test and production classes (Jumi will do caching of the dependencies' class loaders to speed up the tests). That would require changes to Surefire, or then a completely new Maven plugin. kristian@... wrote on 4.1.2012 8:51: -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Re: Re: Runner for maven</header>
    <body>You may want to look into RandomizedRunner/JUnit4 task -- it has most of the things you mentioned (synchronized i/o events with reporting, capturing runaway threads and the like). The code is here:  I have a talk about randomized testing which includes the above concepts at Lucene EuroCon Barcelona, the video is here:  Dawid  bugs/SystemOutErrBugTest.java</body>
  </mail>
  <mail>
    <header>Re: Better parameterised tests</header>
    <body>Actually this thread wasn't related to the standard JUnit Parameterized runner, which is a failure. It was related to JUnitParams runner ( new version. Not only does JUnitParams solve the issue stated in the github comments you posted, but many others as well... You're welcome to use it ;-) Pawel discussion in one place.   (forcing us to count lines when a test fails) and consider including any of these patches in the JUnit tree.</body>
  </mail>
  <mail>
    <header>Re: Temporary increase in project latency</header>
    <body>All, Sorry for the radio silence that followed this post in last 2011. Starting today, I've joined the Android team at Google, working on the Google Books app ( This means that for the first time in three years, I'm now a full-time user of JUnit again, not just a maintainer.  Starting today, I'm going to try to get back to one-week maximum latency for new code reviews and communication around JUnit.  If you've gotten stuck in the backlog I've built up in the interim, feel free to re-forward and jump the queue. Also, if it feels like it's taking a long time to get a code review, please feel free to use this list to ask other devs to take a first look: often, the first 80% of improvements, especially around naming and documentation, can be provided by any suitably experienced developer. Thanks for your patience and for supporting each other within the community.</body>
  </mail>
  <mail>
    <header>Re: Better parameterised tests</header>
    <body>That is great, besides the fact that I will need to explain my team members and the procurement department why am I dragging another library in the project, who will support it and what will happen when the few committers move on to the next big thing. We need what is in the package to work - I took the time to implement a solution, but apparently JUnit has turned into a personal playground for a chosen few who are not interested in mundane day to day scenarios. These days I am slowly building support to migrate all project's tests to TestNG. runner, which is a failure. It was related to JUnitParams runner ( new version. posted, but many others as well... You're welcome to use it ;-)</body>
  </mail>
  <mail>
    <header>Re: Re: Better parameterised tests</header>
    <body>Dimitar, Patch processing has been slow on JUnit, as I shared with the list that my paid work and family commitments have been taking up more of my time over the last few months than before.  I hope you do find a solution that works for you, whether it involves the overhead of freely reusing others' efforts or of writing your own. On Mon, Jan 23, 2012 at 10:08 AM, foo_bar_baz_qux and the procurement department why am I dragging another library in the project, who will support it and what will happen when the few committers move on to the next big thing. solution, but apparently JUnit has turned into a personal playground for a chosen few who are not interested in mundane day to day scenarios. TestNG. runner, which is a failure. It was related to JUnitParams runner ( new version. posted, but many others as well... You're welcome to use it ;-)</body>
  </mail>
  <mail>
    <header>Call for help: Assertions for Comparable</header>
    <body>All, I'm trying to catch up on the Pull Request queue, with some help. Here's a pull request that's essentially ready to go, it just needs someone with git skills to merge it with HEAD. This change would add assertGreaterThan and assertLessThan to the standard assertions.  Is anyone motivated and up to the challenge?  Thanks,</body>
  </mail>
  <mail>
    <header>Re: Call for help: Assertions for Comparable</header>
    <body>Yeah, I can do it. What exactly needs to be done? A squash and push? Thanks. Matthew Farwell. Le 31 janvier 2012 20:49, David Saff &amp;lt;david@...&amp;gt; a écrit :</body>
  </mail>
  <mail>
    <header>Re: Call for help: Assertions for Comparable</header>
    <body>Hi David, I rebased @leet3lite's master branch onto @KentBeck's and resolved two conflicts. Here's a new pull request:  Please let me know if this one works better. Cheers, Marc Am 31.01.2012 um 20:49 schrieb David Saff:</body>
  </mail>
  <mail>
    <header>Re: Open up Description class to allow arbitrary test hierarchies?</header>
    <body>Hi David, Thanks for your reply. I admit I wasn't aiming at larger refactorings, only at slight changes to make Description a bit more permissive (and these goals should be easy to achieve). I read the discussion you mentioned in your post. Annotation-based approach seems to add another layer of complexity to me; whether this would be useful in practice I have no idea. In my experience all tests are somehow connected to a concrete method in some way (this is true even for generative runners like the parameterized runner). I don't have an opinion on removing getMethod/Class from Description -- can't say if it's a good or bad idea, really. Btw. where does it say that Description is serializable? :) Does it need to be, really? Dawid</body>
  </mail>
  <mail>
    <header>Improvements to Assume (issue 355).</header>
    <body>Hi, I've created an issue to extend Assume to contain explicit messages/ Throwable cause if needed. The issue includes a patch:  Can anybody enlighten me if it's possible to attach a pull request to an _existing_ issue in github? I'm used to Jira and the way I usually work is create an issue, create a git branch with the issue's number, then fold in. With github pull requests seem to create a new issue so there's no way to have the issue number before (?). Dawid</body>
  </mail>
  <mail>
    <header>Better parameterised tests</header>
    <body>Hi Some time ago I've written a runner for JUnit which is a replacement for the standard Parameterized runner - is easier &amp;amp; more flexible to use, gives nicer output in IDEs. I've made it available at The website has a description of all the features. JUnitParams now updated to work properly with JUnit 4.10. Pawel</body>
  </mail>
  <mail>
    <header>Re: Improvements to Assume (issue 355).</header>
    <body>All pull requests have their own issue numbers: it's awkward, but you get used to it.  If the name of the pull request (or possibly the description) contains the original issue number in one of the formats that GitHub expects (My favorite is, for example, "Fixes gh-355: explict messages in Assume"), then a link to the pull request will automatically get added to the original issue. Thanks!</body>
  </mail>
  <mail>
    <header>Temporary increase in project latency</header>
    <body>All, I've been very lucky for several years to had both a family and an employer that have left room for me to contribute to JUnit for free. However, for at least the next month, two launches are combining to absorb the lion's share of my time.  One is named Micah, and is rather user-friendly most of the time, but has a somewhat draining maintenance schedule, and sporadic uptime.  The other doesn't yet have a last name that we're sharing, although I expect the first name will be "Google". Thanks for understanding if your great questions and valuable patches are responded to with more delay over the coming weeks.</body>
  </mail>
  <mail>
    <header>Re: Better parameterised tests</header>
    <body>Hello, Tye link does not work. Could you please also post the correct link. I am having suite filter runner with classes that fall into that suite. One of the classes I am using Extended Runner to run a specific test case for multiple times.  Please let me know how can we over ride the runners for a specific test case. Thanks Rajesh standard Parameterized runner - is easier &amp;amp; more flexible to use, gives nicer output in IDEs. I've made it available at The website has a description of all the features.</body>
  </mail>
  <mail>
    <header>Re: Improvements to Assume (issue 355).</header>
    <body>Thanks David! Dawid</body>
  </mail>
  <mail>
    <header>Re: Re: Better parameterised tests</header>
    <body>It does work if you omit the final dot...  Dawid</body>
  </mail>
  <mail>
    <header>Re: Better parameterised tests</header>
    <body>The URL was auto-linked incorrectly; the trailing dot was added to the href. The link is: the classes I am using Extended Runner to run a specific test case for multiple times.  Please let me know how can we over ride the runners for a specific test case. standard Parameterized runner - is easier &amp;amp; more flexible to use, gives nicer output in IDEs. I've made it available at The website has a description of all the features.</body>
  </mail>
  <mail>
    <header>Re: Open up Description class to allow arbitrary test hierarchies?</header>
    <body>Hi, I'm interested in this, though for slightly different reasons, maybe we could exchange ideas on this. I haven't exactly thought this through in detail, but I think my requirements come down to being able to store arbitrary information in a Description, a key. I'm interesting in testing with Scala, and there are (at least) two generic problems: 1) Tests which are not linked to a specific method, but are run as separate tests. Scalatest for example allows the following @RunWith(classOf[JUnitRunner]) This creates a single method with the two tests within. However, the JUnitRunner runs the single method but records the two tests separately. This can be seen in Eclipse, see attached scalatest1.png. Now if I double click on the test name in the junit view, it tries to find a method of that name, and fails. Obviously, to correct this would require a fix to Eclipse, but if I could store the file &amp;amp; line number instead of the method name, I could jump to the appropriate line. 2) Scala allows spaces and other characters in method names, but these names are munged on compilation. For instance, space gets translated to $0020. Here the jump to in Eclipse works correctly, but the displayed description in Eclipse isn't nice, see scalatest2.png. So in both cases, the string I would like to display (in Eclipse, surefire whatever) doesn't match the method name, either because there is no method name or because It's not the same thing. I think that I could work around most issues is Eclipse etc if the test runner could add some arbitrary information to the description, which it could subsequently use. A string would be fine, because I could define the contents of that String, but arbitrary data would be even better. String would be simpler for everyone I think. Please note that I'm just thinking aloud at the minute, and I haven't actually done any proof of concepts as yet, but if you have any ideas, please feel free to take this to email. Matthew Farwell.</body>
  </mail>
  <mail>
    <header>Re: Open up Description class to allow arbitrary test hierarchies?</header>
    <body>Hi Matthew, Actually we are planning to "fix Eclipse" very soon. The next release of ScalaTest, version 2.0, will include enhancements to support IDE integration, and before releasing 2.0 we're going to help do the actual integration work for Eclipse, IDEA, and NetBeans. That way we can be sure we have it right before releasing the ScalaTest enhancements. I would like your feedback on it. I'll post announcements of preview snapshots on the scalatest-users mailing list, so please join that if you'd like to give input. Thanks. Bill ---- Bill Venners Artima, Inc.</body>
  </mail>
  <mail>
    <header>Re: Open up Description class to allow arbitrary test hierarchies?</header>
    <body>I think your reasons are aligned with mine -- the problem is that a test's visual description for the user interface and where it "points to" should be separate things. My thoughts on the subject so far are that Description should provide a String with the human description and some sort of an (empty) interface, let's call it a TestSource which would provide additional hints which resource to open and where. So something like this (ideas, not implementation): I can think of numerous advantages of such an approach, for example a single parameterized test could open the test case's source code by returning: but it could also point to the file with parameterized test data and open _that_ as well, as in: Not giving much thought about the implementation, but you get the idea. Obviously this would be a major pain for all tools that use JUnit because this would pretty much break backwards compatibility... but I'm all for it if a new major revision of JUnit is to ever see the light of day. Temporarily, and interestingly, Eclipse (and Ant and other tools I think) can be cheated a bit -- they all use a JUnit version provided by the user's classpath via reflective access typically (they don't have fixed version dependency). If you "classpath-shadow" your JUnit's Description (by prepending classpath with your own Description class, keeping the same API) you can do anything you with with the descriptions... This is a dirty hack though :( Dawid</body>
  </mail>
  <mail>
    <header>Re: Open up Description class to allow arbitrary test hierarchies?</header>
    <body>Hi Bill, I did the JUnit integration for Scala-IDE, so yes I would like to be involved. Currently Scala-IDE uses the Junit plugin for running and displaying the test results, and it would obviously be better if we could avoid forking that. But for instance the jump to method doesn't work for FlatSpec stuff, and will never work because it's trying to find a method called xxx where xxx is the first word in the description of the test. Which obviously will never work. For Scala-IDE we can work around this using aspects, but it would be nice it this worked nicely. Hence my interest in changing Description. Matthew. Le 4 novembre 2011 23:01, Bill Venners &amp;lt;bill@...&amp;gt; a écrit :</body>
  </mail>
  <mail>
    <header>Re: Open up Description class to allow arbitrary test hierarchies?</header>
    <body>I think that the reason why Description is final is because it is a value class, and there is code (especially in filters) that expects Description.equals() to obey the general contract of Object.equals(). Unfortunately, there is "no way to extend an instantiable class and add a value component while preserving the equals contract" (quoted from Effective Java, second edition, page 38). It's perfectly fine to add optional properties to the existing Description class, as long as Description.equals() and Description.hashCode() are updated, and all of the properties that are added have equals() methods that obey the general contract of Object.equals(). -- Kevin</body>
  </mail>
  <mail>
    <header>junit report formatting question</header>
    <body>I'm using a test suite class to collect up a bunch of individual testcase classes.   I also use the "junitreport" ant task to create an html report of the test results.   Currently, my test results are formatted such that all the individual test methods are organized only the test suite classname in the report, and I lose visibility as to which testcase class the test methods belong to. Instead, I would like the test results to be organized such that the individual testcase classnames appear in the report with the associated results for each of their test methods. Does anyone know if it's possible to configure the "junitreport" ant task to do this? Thanks</body>
  </mail>
  <mail>
    <header>Re: junit report formatting question</header>
    <body>Phil, Hopefully someone here knows.  However, the junitreport task was written by people on the ant project, so you may want to ask on their lists, as well. Good luck, classes.   I also use the "junitreport" ant task to create an html report of the test results.   Currently, my test results are formatted such that all the individual test methods are organized only the test suite classname in the report, and I lose visibility as to which testcase class the test methods belong to. individual testcase classnames appear in the report with the associated results for each of their test methods. do this?</body>
  </mail>
  <mail>
    <header>Re: junit report formatting question</header>
    <body>Hi Phil, ANT's junit task can include multiple &amp;lt;formatter&amp;gt; sub-elements. For your use-case I would suggest: 1) to use the default XML formatter and post-process the output using XSLT to emit a HTML with individual test cases, 2) write a custome formatter class (very simple) that emits individual plain-text or HTML files for each test case or suite, then aggregate. 3) write a formatter that System.println's directly, without creating any files. Your "report" is then the build file's output. We are using option (3) along with a custom runner, but you can peek here at what it looks like:  975.log Dawid</body>
  </mail>
  <mail>
    <header>Re: Open up Description class to allow arbitrary test hierarchies?</header>
    <body>So does this mean that adding a Map&amp;lt;String,Object&amp;gt; is being considered (i.e. having Description implement Map) ?</body>
  </mail>
  <mail>
    <header>Customizing the "got ..." message for custom Matchers</header>
    <body>Hi, Is it possible to customize the "got ..." message when writing custom Matchers? I found this message in the Archives:  which talks about a describeMismatch method but I don't see in the javadocs for the Matcher or SelfDescribing interfaces. Am I missing something? Thanks, Jason</body>
  </mail>
  <mail>
    <header>Re: Open up Description class to allow arbitrary test hierarchies?</header>
    <body>I'm not sure what David is considering. I'm just pointing out why making Description final is a good idea. -- Kevin On Thu, Nov 10, 2011 at 2:40 AM, Neale Upstone</body>
  </mail>
  <mail>
    <header>Re: Customizing the "got ..." message for custom Matchers</header>
    <body>JUnit uses version 1.1 of the Hamcrest library and it doesn't have that method. Hamcrest 1.2 and newer have it. Jason_Bodnar wrote on 10.11.2011 19:21: -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>How to announce all to features acceptance. The aceeptance process takes long.</header>
    <body>We are all developing new features and bug fixes in to JUnit. You had to already see that this is not short time to accept a new design. When I submit something, then only Kent and David are announced. I would expect that much more developers are announced as well, or even the entire group. This may speed up. What are you suggesting to speed up the acceptance?</body>
  </mail>
  <mail>
    <header>JUnit Developers Group on the LinkedIn</header>
    <body>Hi All, I have right now created an open group on the LinkedIn for the JUnit which we can enjoy. You are All Welcome to join! It is a good style that the professionals use in order to share their knowledge, code, asking questions, sending announcements, or even posting jobs, and discussing and clarifying detailed issues regarding the technologies -JUnit in our case.  With Best Regards, Tibor</body>
  </mail>
  <mail>
    <header>Re: Better parameterised tests</header>
    <body>I was going to start a new thread, but I'll plug in here, to keep the discussion in one place. I have had the same problem, different solution and the patch is in github:  Florian has same problem, different approach:  May the Powers That Be realize that this is a very annoying aspect of JUnit (forcing us to count lines when a test fails) and consider including any of these patches in the JUnit tree. Best regards, Dimitar</body>
  </mail>
  <mail>
    <header>Reporting on test runs from a custom Runner</header>
    <body>Hi everyone, I've created a custom Runner meant to help with performance and scalability testing. It lets you create tests like this: @RunWith(PerfRunner.class) In the above example, my runner calls demonstrationTest() 100 times, with parameter values (1, 100000), (2, 100000), ... (1, 200000), ... (10, 1000000). What I want to do now is produce charts of how long each call took. There are a lot of approaches, but I don't know which is "right." 1. Register a TestListener and write my own reports to disk from it (but is there a generic way to register listeners?) 2. Create my own main program that runs the test suite, and have it create the report when the suite is done (maybe this is the only way to register a TestListener anyhow?) 3. Transform the XML output of the ant junit task (but then it's bound to Ant) 4. Transform the XML output of the maven-surefure-plugin (but then it's bound to Maven) 5. Write performance results to disk directly from my TestRunner (should work in any environment, but feels like a dirty approach) Other ideas are welcome too, of course. My test runner is open source and published on GitHub; I want a solution that can work for everyone. So I think ideas 3 and 4 are out. Has anyone else thought about getting data from custom test runners into human-readable reports? -Jonathan</body>
  </mail>
  <mail>
    <header>Re: Reporting on test runs from a custom Runner</header>
    <body>Hi! Just my 2 cents: - an ant-script could still be used in maven (it has plugins for that purpose). It may need a bit of tinkering - I'm not very good in maven and ant. - Code injection via AspectJ could work well. Place a cutpoint on the method looping over the test again and again and measure the time before and after. Cheers, Georg testing. It lets you create tests like this: parameter values (1, 100000), (2, 100000), ... (1, 200000), ... (10, 1000000). a lot of approaches, but I don't know which is "right." there a generic way to register listeners?) report when the suite is done (maybe this is the only way to register a TestListener anyhow?) to Maven) in any environment, but feels like a dirty approach) published on GitHub; I want a solution that can work for everyone. So I think ideas 3 and 4 are out. human-readable reports?</body>
  </mail>
  <mail>
    <header>Re: Reporting on test runs from a custom Runner</header>
    <body>Salut, The best way would be to create your own RunListener (btw TestListener is JUnit3, RunListener is Junit4). Then, you can plug this into standard tools. For instance, in maven surefire, you can specify: I think you can do similar things with ant. So if you do 1, 3 and 4 aren't a problem. Cordialement, Matthew Farwell. Le 14 décembre 2011 23:01, jfuerth &amp;lt;jfuerth@...&amp;gt; a écrit :</body>
  </mail>
  <mail>
    <header>Re: Re: Reporting on test runs from a custom Runner</header>
    <body>I should probably also note for completeness that Google Caliper is specifically designed for micro-benchmarking (with or without parameterization):  Dawid</body>
  </mail>
  <mail>
    <header>Re: Reporting on test runs from a custom Runner</header>
    <body>You may want to check out JUnitBenchmarks -- it does what I think you want to achieve:  Dawid</body>
  </mail>
  <mail>
    <header>Re: Reporting on test runs from a custom Runner</header>
    <body>Thanks for the pointer, Dawid. I have to admit I didn't find JUnitBenchmarks in my searches. I went looking for something back in September and again earier this week and came up empty. As far as what I'm trying to accomplish, it's kind of two things. First, I want to microbenchmark the performance of some internal data structures we're experimenting with for a web framework. I need to vary more than one parameter for these tests: number of threads allowed, number of messages to send through it, size of those messages, timing of the messages, and more. A single test method is likely to run thousands of times and produce multiple 2D charts worth of data. It looks like Google Caliper (thanks for that pointer too!) may be well suited to this task. Second, I want to run end-to-end scalability tests in various Java EE 6 containers. These tests will have many of the same variables. For these tests, I think Caliper is out. We're going to need Arquillian to wrangle all the server setup and teardown work. Arquillian is a JUnit 4 test runner too--I haven't thought through how to reconcile my test runner with Arquillian's, but I work on the same team as the Arquillian guys, and I'm hoping we can figure something out. It will probably involve pointing Arquillian at my test runner, or vice-versa. Thank you once again for the responses. I really appreciate it! Cheers, -Jonathan</body>
  </mail>
  <mail>
    <header>Test names and Parmaterized</header>
    <body>This has probably come up before.  Please forgive me for I failed to find an answer. I'm using @RunWith(Parameterized.class) and want to have test names other than foo[int]. foo[int] isn't very helpful e.g. in Jenkins logs. Is there a way for the test to specify the name it should be known by? For now, I've taken the Parameterized source code and modified it so that if the test class has a getTestName() method the runner will call that to get the test name.  This is currently working and I'd be happy to share. However, I did have to bodge things more than I like to get it to work.  If I do the straightforward change, then the framework asks for the test name from the runner before the test object is created.  I'm currently dealing with this by creating the test object when the test runner is created, i.e. in the constructor of the test runner and keeping it around for the lifetime of the test runner.  This works - but may violate some design assumptions I don't know about and means that any exception that can be thrown creating a test object can cause an initialization exception. I think this is useful functionality - I know of others who have also wanted something like this.  There are suggestions on StackOverflow for example to use the first parameter of a parameterset as the test name.  I think letting the test specify a getTestName method and defaulting to the current mechanism if there isn't one is better as its more backward compatible and gives the test developer more control. So: parameterized tests? so that the test object is created before the test name is requested? bwm</body>
  </mail>
  <mail>
    <header>Re: Test names and Parmaterized</header>
    <body>bwm, Thanks for checking in.  The current implementation of Parameterized is a dead end, for several reasons.  I have plans for a completely different, much more flexible approach to the needs that Parameterized satisfies, but it will likely be months before these see the light of day.  In the meantime, have you seen JUnitParams? ( replacement schemes that I've seen so far. On Wed, Sep 28, 2011 at 6:25 PM, bwmplusuniquifier answer. foo[int]. foo[int] isn't very helpful e.g. in Jenkins logs. the test class has a getTestName() method the runner will call that to get the test name.  This is currently working and I'd be happy to share. do the straightforward change, then the framework asks for the test name from the runner before the test object is created.  I'm currently dealing with this by creating the test object when the test runner is created, i.e. in the constructor of the test runner and keeping it around for the lifetime of the test runner.  This works - but may violate some design assumptions I don't know about and means that any exception that can be thrown creating a test object can cause an initialization exception. something like this.  There are suggestions on StackOverflow for example to use the first parameter of a parameterset as the test name.  I think letting the test specify a getTestName method and defaulting to the current mechanism if there isn't one is better as its more backward compatible and gives the test developer more control. parameterized tests? so that the test object is created before the test name is requested?</body>
  </mail>
  <mail>
    <header>Re: Testing individual test cases from command line.</header>
    <body>David, Thanks very much for your suggestions. I got it sorted out which as you pointed out was a case of copying some build directories to another location which would then enable the classes to be added to the classpath and executed from the command line. Thanks again Lewis larger vision of improving code integrity as well as expanding our testing activities. Before I begin writing the tests I have been working (frustratingly) on this particular Jira issue [1]. In summary, the issue attempts to add the functionality to a script [2] that will enable us to test individual test cases from the command line rather than have to run every JUnit test case when we wish to review changes or review performance of new test cases. I am however not getting very far with setting the correct environment variable and could do with some guidance. The patch which I'm trying to apply would allow us to run problem is the export classpath environment variable which should point to the test case directory. I'm just not able to add the class  paths, therefore I get an exception and stack trace error (NoClassDef) whenever I try to run a test case. progress with writing and fixing some 20-30 test classes. If I can provide any more information please advise.</body>
  </mail>
  <mail>
    <header>JUnit 4.10 is released</header>
    <body>All, JUnit 4.10 has been released.  It fixes a bug in packaging that affected maven users who use up-to-date versions of hamcrest.  Thanks to the efforts of a full cast of contributors, it also contains a couple dozen new features and bugfixes. The github model is working well as a way of maintaining JUnit as a community.  If you've been waiting to jump in and fix that bug, now may be the time. As usual, you can download directly from  should already be up at Maven Central, assuming I've done it right this time. Release notes are at  and copied below. Thanks all, and keep it green, ## Summary of Changes in version 4.10 ## Thanks to a full cast of contributors of bug fixes and new features. A full summary of commits between 4.9 and 4.10 is on [github]( ### junit-dep has correct contents ### junit-dep-4.9.jar incorrectly contained hamcrest classes, which could lead to version conflicts in projects that depend on hamcrest directly.  This is fixed in 4.10 [@dsaff, closing gh-309] ### RuleChain ### The RuleChain rule allows ordering of TestRules: writes the log ### TemporaryFolder ### - `TemporaryFolder#newFolder(String... folderNames)` creates recursively deep temporary folders - `TemporaryFolder#newFile()` creates a randomly named new file, and `#newFolder()` creates a randomly named new folder ### Theories ### The `Theories` runner does not anticipate theory parameters that have generic types, as reported by github#64.  Fixing this won't happen until `Theories` is moved to junit-contrib. In anticipation of this, 4.9.1 adds some of the necessary machinery to the runner classes, and deprecates a method that only the `Theories` runner uses, `FrameworkMethod`#producesType(). The Common Public License that JUnit is released under is now included in the source repository. Thanks to `@pholser` for identifying a potential resolution for github#64 and initiating work on it. ### Bug fixes ### - Built-in Rules implementations directory if applying the rule fails AssumptionViolatedExceptions - Javadoc bugs - Miscellaneous junit.tests.framework.TestListenerTest [@stefanbirkner, fixing gh-225] message [@stefanbirkner, fixing gh-318] [@stefanbirkner, fixing gh-42] ### Minor changes ### - Description, Result and Failure are Serializable [@ephox-rob, closing gh-101] - FailOnTimeout is reusable, allowing for retrying Rules [@stefanbirkner, closing gh-265] - New `ErrorCollector.checkThat` overload, that allows you to specify a reason [@drothmaler, closing gh-300]</body>
  </mail>
  <mail>
    <header>Re: Test names and Parmaterized</header>
    <body>I'd really like yo know more about this, could you post more information on what you're doing? Thanks in advance!</body>
  </mail>
  <mail>
    <header>Overhauling exisiting JUnit tests</header>
    <body>Hi list, I'm attempting to overhaul our test source as per this Jira issue [1] and sub-issues. When looking at one existing test class [2] I see that instead of extending TestCase the case extends AbstractNutchTest. Apart from my initial thoughts that this was a previously used testing mechanism, I am pretty convinced that this has now been deprecated in favour of JUnit 4.5 test cases. This can also be seen in [3], which you will notice is also failing as documented in [1]. Further to this, I notice that there are a number of parameters that cannot be resolved e.g. in the case of TestInjector, testDir as shown below. This is consistent across 'all' four of the test cases I am trying to fix. I wonder if anyone can point me in the right direction to getting the configuration correct and getting these test cases working again. lewis@lewis-01:~/ASF/nutchgora/runtime/local$ bin/nutch junit org.apache.nutch.crawl.TestInjector .E Time: 0.003 There was 1 error: 1) testInject(org.apache.nutch.crawl.TestInjector)java.lang.Error: Unresolved compilation problem: testdir cannot be resolved at org.apache.nutch.crawl.TestInjector.setUp(TestInjector.java:57) FAILURES!!! Tests run: 1,  Failures: 0,  Errors: 1 [1] [2]  tch/crawl/TestInjector.java [3]  tch/crawl/TestGenerator.java</body>
  </mail>
  <mail>
    <header>Re: Copyright Statement</header>
    <body>Hi David, Thanks! Pat aware of any and have been unable to find one, but I need to double check.  Thanks!</body>
  </mail>
  <mail>
    <header>Re: JUnit 4.10 is released</header>
    <body>Corrected release notes URL is:</body>
  </mail>
  <mail>
    <header>Re: Overhauling exisiting JUnit tests</header>
    <body>Hi, I have a pretty significant update on this issue. My understanding of our existing test infrastructure was not sufficient enough and in my initial post I've provided a somewhat inaccurate description of the problem I'm trying to address. The AbstractNutchTest is in full use and does an excellent job of extending TestCase to provide a platform for many other tests to build from. The test case I have identified as being pretty hectic is TestGoraStorage [1]. The initial thing I found puzzling about this test case is that, if run as a java application without any arguments, it passes a usage message "Usage: TestGoraStore &amp;lt;id&amp;gt; &amp;lt;startKey&amp;gt; &amp;lt;numRecords&amp;gt;". I've never experienced anything like this is any previous JUnit test cases, can anyone explain this to me please? The errors I'm getting when I run the test class can be seen here [2]. I understand that the errors might not be JUnit specific, however if I was able to get a bit of guidance as to the nature of the test etc then it would be more than helpful. Thank you Lewis [1]  tch/storage/TestGoraStorage.java [2] sub-issues. When looking at one existing test class [2] I see that instead of extending TestCase the case extends AbstractNutchTest. Apart from my initial thoughts that this was a previously used testing mechanism, I am pretty convinced that this has now been deprecated in favour of JUnit 4.5 test cases. This can also be seen in [3], which you will notice is also failing as documented in [1]. resolved e.g. in the case of TestInjector, testDir as shown below. This is consistent across 'all' four of the test cases I am trying to fix. I wonder if anyone can point me in the right direction to getting the configuration correct and getting these test cases working again. org.apache.nutch.crawl.TestInjector compilation problem:  tch/crawl/TestInjector.java  tch/crawl/TestGenerator.java</body>
  </mail>
  <mail>
    <header>Re: Re: Test names and Parmaterized</header>
    <body>The essential idea is to make the ideas in Parameterized and Theories accessible without requiring custom runners, using something like Rules.  Call it, perhaps, a DataRule. The difference is that a Rule is a function that takes a Statement (what JUnit was going to do), and returns another Statement (what JUnit should do additionally/instead). A DataRule would take a Method, and return an (optionally empty) set of Statements. There's a lot of details to get right in the meantime: - Is it meaningful to have multiple DataRules? - How can DataRules override validation rules? - Should a DataRule be given the testcase object, or an API for constructing it? what you're doing?</body>
  </mail>
  <mail>
    <header>Re: Re: Overhauling exisiting JUnit tests</header>
    <body>Lewis, TestGoraStorage, if run as a Java application, does whatever its main() method tells it to, just like all Java classes do. The errors you're seeing seem specific to the database setup assumed by the tests, and are probably best diagnosed by people familiar with the application and test suite. existing test infrastructure was not sufficient enough and in my initial post I've provided a somewhat inaccurate description of the problem I'm trying to address. TestCase to provide a platform for many other tests to build from. The test case I have identified as being pretty hectic is TestGoraStorage [1]. The initial thing I found puzzling about this test case is that, if run as a java application without any arguments, it passes a usage message "Usage: TestGoraStore &amp;lt;id&amp;gt; &amp;lt;startKey&amp;gt; &amp;lt;numRecords&amp;gt;". I've never experienced anything like this is any previous JUnit test cases, can anyone explain this to me please? able to get a bit of guidance as to the nature of the test etc then it would be more than helpful.  tch/storage/TestGoraStorage.java sub-issues. When looking at one existing test class [2] I see that instead of extending TestCase the case extends AbstractNutchTest. Apart from my initial thoughts that this was a previously used testing mechanism, I am pretty convinced that this has now been deprecated in favour of JUnit 4.5 test cases. This can also be seen in [3], which you will notice is also failing as documented in [1]. be resolved e.g. in the case of TestInjector, testDir as shown below. This is consistent across 'all' four of the test cases I am trying to fix. I wonder if anyone can point me in the right direction to getting the configuration correct and getting these test cases working again. org.apache.nutch.crawl.TestInjector compilation problem:  tch/crawl/TestInjector.java  tch/crawl/TestGenerator.java</body>
  </mail>
  <mail>
    <header>Re: Re: Overhauling exisiting JUnit tests</header>
    <body>Hi David, Thanks for this. Yes his was where I thought it all went wrong as well. Thank you for confirming that this was nothing to do with the JUnit test, David Saff Lewis</body>
  </mail>
  <mail>
    <header>Logging start and end of tests &amp;amp; global rules</header>
    <body>Hi guys, A few years ago we have started using ClasspathSuite as our runner and we have modified it to suit our needs. One of the things that we do is logging for every test: - before the first setup (@Before method) or class setup (@BeforeClass method) is run - just before running the actual test method - right after running the actual test method - after the last teardown (@After method) or class teardown (@AfterClass method) is run This way for example, when we run a suite in a build node, we know exactly which logging statements belong to which test or if they happen in a setup. It's quite useful for debugging purposes when some tests break on a specific node. We rely on some deprecated code in order to do that, like BlockJUnit4ClassRunner.withBefores. So we were wondering if we can reimplement it with rules. It seems that the only way would be to retrofit every base test class and isolated test case class with the necessary rules. Is that correct? Or have some sort of global rules been implemented that apply for all tests? Thanks a lo Giuliano</body>
  </mail>
  <mail>
    <header>Re: Logging start and end of tests &amp;amp; global rules</header>
    <body>For this particular problem, you might want to consider: 1) Create your own subclass of RunListener that does the logging you want.  Call it MyRunListener 2) Create your own ClasspathSuite that overrides run like this: There's not an off-the-shelf way to add rules to a bunch of tests, but in this case, your use case is closer to listening than modification. Does that help? modified it to suit our needs. is run method) is run which logging statements belong to which test or if they happen in a setup. It's quite useful for debugging purposes when some tests break on a specific node. BlockJUnit4ClassRunner.withBefores. So we were wondering if we can reimplement it with rules. It seems that the only way would be to retrofit every base test class and isolated test case class with the necessary rules. Is that correct? Or have some sort of global rules been implemented that apply for all tests?</body>
  </mail>
  <mail>
    <header>Re: Logging start and end of tests &amp;amp; global rules</header>
    <body>Yep, thanks, we'll give it a try. Giuliano -- Piergiuliano Bossi Blog: Twitter: Twitter:</body>
  </mail>
  <mail>
    <header>i m Junit beginner</header>
    <body>Hi All , I am very new to JUnit. I would like to use Junit for Strust application. I am using Struts1.3 and wan to use jUnit for testing. Please guide, which jUnit ver framework i should use. Which book i should refer? Any reference material . Please suggest. Thanks, pmangate</body>
  </mail>
  <mail>
    <header>Re: i m Junit beginner</header>
    <body>Hi, Unfortunately without looking at the FAQ's and some 'light' reading from at least the JUnit site there is little hope of getting further with this. I'm reasonably new to JUit testing as well and found the FAQ's an excellent resource for beginners queries. HTH -- *Lewis*</body>
  </mail>
  <mail>
    <header>Junit Console output</header>
    <body>Hi Everyone, I am running a suite of tests from command line on Linux and when I ran the tests and as expected at run time an output is printed on the command line. This output isn't just the number of tests failed/successful/ignored and time lapse, but it is the output generated by the tests and junit at run time. I would like to redirect the output to a file, I am looking at the junit source code (as a good boyscout) and the only classes I could find that MAYBE print on the console is junit.textui.ResultPrinter but it prints the results of the tests. My question is: Are there any classes in the source code that prints output on the command line? (If yes, what are they?) Thank you for your time</body>
  </mail>
  <mail>
    <header>Runnable JAR, creating separate main()</header>
    <body>I'm trying to create a runnable JAR in eclipse using Junit 4.9 but I can't get it right. This website says it is necessary to create a separate class 'main'  I contacted him and he says to try something like this: But I get an error for 'run'. Am I forgetting to import something? Exporting the above code creates a 3MB JAR but it does nothing when I click it. any ideas?</body>
  </mail>
  <mail>
    <header>Re: Runnable JAR, creating separate main()</header>
    <body>You need a main class and point to the main class in the manifest. If your class has dependencies those need to be listed in the manifests classpath. The first hit on google when you search for runnable jar gives the details in a no nonsense form This is not really a JUnit question but more general java. HTH ----------------------------------------------------- Blog: johlrogge.wordpress.com Twitter: @johlrogge E-mail: joakim.ohlrogge@...</body>
  </mail>
  <mail>
    <header>Re: Junit Console output</header>
    <body>mdankan, Sorry for the long response time.  First, and most importantly, are you using the JUnit 3 runner (junit.*), or JUnit 4 (org.junit.core.JUnitCore)? tests and as expected at run time an output is printed on the command line. This output isn't just the number of tests failed/successful/ignored and time lapse, but it is the output generated by the tests and junit at run time. source code (as a good boyscout) and the only classes I could find that MAYBE print on the console is junit.textui.ResultPrinter but it prints the results of the tests. line? (If yes, what are they?)</body>
  </mail>
  <mail>
    <header>Re: Runnable JAR, creating separate main()</header>
    <body>I don't think it's really a JAVA question. I guess what I'm really asking is 'what goes goes in the class that has the main?' I've been reading the FAQ but I'm really confused. I've tried which works, but it's not the right way since the adapter is for junit3 cases? I also tried but I can't see anything happen when I run the JAR.</body>
  </mail>
  <mail>
    <header>Re: Re: Runnable JAR, creating separate main()</header>
    <body>Sorry, I was focusing too hard on this part: If you provide some more details such as what error you are getting (Exception with message and full stacktrace) and also what your test looks like would be helpful. I think that you are using JUnit3 legacy stuff. I think that you should use JUnitCore to run your tests:  I know this is a bit sketchy but I hope it will give you something to work with until someone who knows the JUint internals better can provide some assistance. /J</body>
  </mail>
  <mail>
    <header>Re: Runnable JAR, creating separate main()</header>
    <body>Ah yes, this looks done more properly. Thanks Joakim //////////////////////////////////////////////// /////////////////////////////////////////////// So for those trying to export as runnable jar, this is one way. The main thing is to create a separate class with a main() in it and export as runnable jar with required libraries packaged into the JAR.</body>
  </mail>
  <mail>
    <header>Re: Documentation</header>
    <body>I'm still migrating. See progress. junit.sourceforge.net and github. Additionally some information is missing or very hard to find (new features like rules, current version, how to contribute, ...) to find the information and JUnit would look more professional. IMHO the github pages are a good place for the JUnit documentation, because we can use all the git(hub) features for creating the documentation.</body>
  </mail>
  <mail>
    <header>Slightly modified behaviour of Parameterized Runner</header>
    <body>I just created a bugfix for the Parameterized runner. The pull request slightly modifies the behaviour of the runner. Today the @Parameter method is called when TestClassRunnerForParameters.createTest() is called(). After my change the method is called when the Parameterized runner is created. Does anybody know a reason, why we shouldn't do this modification. stefan</body>
  </mail>
  <mail>
    <header>Re: Slightly modified behaviour of Parameterized Runner</header>
    <body>To emphasize my concern, in the past, the Parameters runner would allow a "lazy" evaluation of parameters.  As long as you knew the number of rows in the table of parameter values, you could avoid computing/loading the actual values until they were needed to run.  I imagined this being useful if, for example, the parameter data was loaded from lines in a file. However, I'm not aware of anyone who's actually used this facility.  Is there? slightly modifies the behaviour of the runner. Today the @Parameter method is called when TestClassRunnerForParameters.createTest() is called(). After my change the method is called when the Parameterized runner is created.</body>
  </mail>
  <mail>
    <header>Re: UI tests in Eclipse on MAC</header>
    <body>Just as a followup for everyone on this... One issue seems to be that FEST handles certain things differently on OSX.  For example, we use customized JButtons in the toolbar to display drop-down menus, which works fine with FEST on Windows but there's this little extra part for Mac... @RunsInEDT which eventually results in an endless loop as FEST attempts to walk the component tree looking for a JMenu/Item parent - which it never finds in the case of our JButtons.</body>
  </mail>
  <mail>
    <header>Open up Description class to allow arbitrary test hierarchies?</header>
    <body>Hi everyone. My name is Dawid Weiss, I'm a committer to Apache Lucene/Solr. Lucene and Solr use a custom runner to randomize test execution extensively. This works great and I've decided to try to pull a custom JUnit runner out of Lucene so that it can be reused without relying on the rest of Lucene's infrastructure. So... I wrote a custom runner and on the way I came across a problem: I would really like to have a hierarchy of Descriptions to indicate something meaningful, in particular contain the random seed for a suite group, then for individual tests, etc. I believe a similar situation could also be useful for ParameterizedRunner... Unfortunately, the problem is that Description is sealed and does not allow much in terms of flexibility (the constructor is private, static factory methods). The design of this class leads me to believe that Description should be a contract (interface or a class, but with the possibility of subclassing) so that getDisplayName() returns something meaningful (as in the example above), but getTestClass(), getMethodName() and getClassName() can still point IDEs and report writers to the right place. Or at least allow a custom display name not related to the method name/ class of the test case? Another burning issue we have in Lucene is that Assume.* methods don't take any explanation message. Why is this so? I mean: an assumption can fail, but just like with failures it'd be nice to be actually able to explain why a given assumption wasn't met... Let me know what you think. I can provide a patch (several ones :), but I wanted to hear what people think first. Dawid</body>
  </mail>
  <mail>
    <header>Re: Open up Description class to allow arbitrary test hierarchies?</header>
    <body>Dawid, The design of Description has several challenges, and I welcome the chance to move towards a better solution.  I think that getTestClass(), getMethodName() and getClassName() are currently implemented wrong: see for how I'd rather approach it.  In short, I'd like for Description to remain a serializeable, final, value class, but allow for custom Runners to have full control over what data gets put into that value structure.  Would that work for you?  If so, want to produce a patch for this? Separate from this are the problems that arise from Description containing both the test structure graph, and the metadata for each node in that graph, but that doesn't seem to be your current challenge. On the subject of error messages for Assume.*:  Oops.  :-)  Patches definitely welcome.</body>
  </mail>
  <mail>
    <header>Re: REMOVE ME FROM THIS LIST</header>
    <body>To unsubscribe from this group, send an email to junit-unsubscribe@yahoogroups.com.  (From the standard footer)</body>
  </mail>
  <mail>
    <header>Re: Alphabetizing test method run order?</header>
    <body>Very nice observations Kevin. The first thing that I needed to learn was how to enforce the same execution order as on the test machines, when Jesse changed the NetBeans tests to run in a-z ordering. Indeed this required Ant build script specific knowledge (in our case). I agree with you, that this is a kind of knowledge JUnit project does not want to impose on its users. Your idea of using hashCode is an excellent one. It is going to be stable on the same JDK and it is random enough for anyone to depend on the order. This might balance Kent's rationalistic wish for tests to have no dependencies among each other and pragmatic need of reproducibility in case they accidentally have. Let's base the (default) execution order on hashCode of methods! -jt PS: I like the idea of 24h fixed random seed! It mitigates many of the above problems, if developers are not lazy. Still, it should not be the default, as far as I can say.</body>
  </mail>
  <mail>
    <header>Re: UI tests in Eclipse on MAC</header>
    <body>Shaun, since you seem to be using FEST you must be using Swing not SWT, right? Why would you want to run such a test as a JUnit plugin test? Marc Am 15.09.2011 um 16:58 schrieb shca08_junit: uses Java Robot to click on it. Works fine run in Eclipse on Mac as an application or JUnit test but fails when run as JUnit plugin test. Frame would show 1 out of 5 or so times. Removing all unneeded plugins resulted in frame always being shown but the click never seems to happen. runs as a JUnit Test but fails as a JUnit Plugin Test. One time the frame was shown, but nothing happened (so the test failed). The other times, the frame didn't even show. Tried removing all VM args and unnecessary plugins. the core plugins included to run the tests? Or...? testing and it works quite well on Windows. With or without FEST on the Mac, I can't seem to get any UI tests to run. The initial frame/window comes up in some cases but I can't do much more than that. When running JUnit tests (again with or without FEST), I don't even see the frame. blog/article but I can't figure it out. tests run. Neither version of the code does much, so there aren't many UI tests. The older one (which uses FEST) has more features and tests. I haven't tried it on Lion or Helios.</body>
  </mail>
  <mail>
    <header>Re: REMOVE ME FROM THIS LIST</header>
    <body>Wait. You mean, like it says right at the bottom of every mailing list letter from the beginning of time? Cool.</body>
  </mail>
  <mail>
    <header>Re: Alphabetizing test method run order?</header>
    <body>I like hashCode, then String compare.  That seems to have almost all of the benefits, but avoids the major drawback.</body>
  </mail>
  <mail>
    <header>Re: Result and testAssumptionFailure handling</header>
    <body>So, it would be up to individual runners to figure out how to fit into the overall scheme.  Right now, the Theories runner doesn't report up individual assumption failures.  If every single data point results in an assumption failure, then the test is marked as failing.  If at least one data point fails, the test is marked as failing.  If at least one data point succeeds, and none fail, it's marked passing. On Mon, Sep 19, 2011 at 4:23 PM, Stephen Connolly ABORTED? corresponding method is empty and there's a comment: // do nothing: same as passing (for 4.5; may change in 4.6) It's because Result doesn't provide any information, that a test is ignored because of a failing assumption.</body>
  </mail>
  <mail>
    <header>Re: Result and testAssumptionFailure handling</header>
    <body>Perhaps of interest is that we (the QA devs where I work) use a custom runner that slightly alters this behavior of Theories: if all of a Theory's assumptions fail, then we mark the test as skipped (as opposed to failed). This brings the semantics of the assume*() methods in the context of a @Test's and @Theory's much closer. (Background: this custom runner is used in a Selenium/WebDriver setup that is meant to test the UI of a system, irrespective of the system's underlying config/database. As such it is not uncommon that no suitable PotentialAssignments can be found for a given test setup. Yes, I am aware that this kind of test is anything but a unit test, but JUnit serves us very well regardless.) Stephan ABORTED? corresponding method is empty and there's a comment: // do nothing: same as passing (for 4.5; may change in 4.6) failure. It's because Result doesn't provide any information, that a test is ignored because of a failing assumption.</body>
  </mail>
  <mail>
    <header>Re: Alphabetizing test method run order?</header>
    <body>+10. I think this is a very good point. The ordering absolutely needs to be deterministic by default, so any problems are reproducible easily. I do use the ordering of junit tests, not because the tests are inter-dependent, but simply because I have slow tests and fast tests. I use junit for integration tests, so I run a batch from junit, and look at the results of the batch. Some tests have small datasets (10-15 seconds) and some have large datasets (10 minutes). I put the small ones first so I can either stop the test if the first fails, or do something else for ten minutes. If I have to run these tests using a different Runner, then that's fine, but I would rather not have to change anything (major). I would suggest we use the principle of least surprise here. If the hashCode is used as an ordering, yes it is deterministic, but it will seem random. If you use the test name, it is less surprising. People are used to tests being run in bytecode order. If you change the order then at least change it so that if people have problems due to ordering they can easily change the order. Yes, I know that their tests are broken, but they probably do too. If the order is based upon the hashCode, I have to either run that test with a custom Runner (and make sure that it's usable in Eclipse, Jenkins, maven, etc. etc.)[*]. If the order is simply the name, then all I have to do to 'fix' my problem is change the name. Matthew Farwell. [*] Or change the hashCode. For instance, I could have two tests: public void testStuff() public void testMoreStuff() These run in order as above. If the hashCode were used to order them, then we get testMoreStuff() then testStuff(). So to keep the original order we have to change testMoreStuff to testMoreStuffTextToIncreaseHashCode() :-)</body>
  </mail>
  <mail>
    <header>Re: Re: Result and testAssumptionFailure handling</header>
    <body>OK, All of this has convinced me that we have a fairly well-understood set of three statuses, and there's a definite drop-off in usefulness-per-unit-complexity beyond that.  So, back to the original question, Stefan: yes, I think we should increase the ignored tests count for an assumption failure. And Stephan, I'm definitely glad you've found it useful to implement different Theory semantics in a different Runner; I don't think there's a strong right-or-wrong about how to handle that particular case. that slightly alters this behavior of Theories: if all of a Theory's assumptions fail, then we mark the test as skipped (as opposed to failed). This brings the semantics of the assume*() methods in the context of a @Test's and @Theory's much closer. meant to test the UI of a system, irrespective of the system's underlying config/database. As such it is not uncommon that no suitable PotentialAssignments can be found for a given test setup. Yes, I am aware that this kind of test is anything but a unit test, but JUnit serves us very well regardless.) ABORTED? corresponding method is empty and there's a comment: // do nothing: same as passing (for 4.5; may change in 4.6) failure. It's because Result doesn't provide any information, that a test is ignored because of a failing assumption.</body>
  </mail>
  <mail>
    <header>Re: Re: Alphabetizing test method run order?</header>
    <body>deterministic by default, so any problems are reproducible easily. inter-dependent, but simply because I have slow tests and fast tests. I use junit for integration tests, so I run a batch from junit, and look at the results of the batch. Some tests have small datasets (10-15 seconds) and some have large datasets (10 minutes). I put the small ones first so I can either stop the test if the first fails, or do something else for ten minutes. would rather not have to change anything (major). is used as an ordering, yes it is deterministic, but it will seem random. If you use the test name, it is less surprising. People are used to tests being run in bytecode order. problems due to ordering they can easily change the order. Yes, I know that their tests are broken, but they probably do too. If the order is based upon the hashCode, I have to either run that test with a custom Runner (and make sure that it's usable in Eclipse, Jenkins, maven, etc. etc.)[*]. If the order is simply the name, then all I have to do to 'fix' my problem is change the name. That's a fair request.  Actually, I think the code has evolved to the point that adding a feature to ParentRunner to support this would be remarkably easy: @RunWith(Suite.class) Anyone want to take a crack at it? get testMoreStuff() then testStuff(). So to keep the original order we have to change testMoreStuff to testMoreStuffTextToIncreaseHashCode() :-)</body>
  </mail>
  <mail>
    <header>Re: UI tests in Eclipse on MAC</header>
    <body>Hi Marc, Our app uses OSGi - so the different components are plugins. The only way to test it is to use JUnit plugin tests. would you want to run such a test as a JUnit plugin test? uses Java Robot to click on it. Works fine run in Eclipse on Mac as an application or JUnit test but fails when run as JUnit plugin test. Frame would show 1 out of 5 or so times. Removing all unneeded plugins resulted in frame always being shown but the click never seems to happen. thing... runs as a JUnit Test but fails as a JUnit Plugin Test. One time the frame was shown, but nothing happened (so the test failed). The other times, the frame didn't even show. Tried removing all VM args and unnecessary plugins. the core plugins included to run the tests? Or...? testing and it works quite well on Windows. With or without FEST on the Mac, I can't seem to get any UI tests to run. The initial frame/window comes up in some cases but I can't do much more than that. When running JUnit tests (again with or without FEST), I don't even see the frame. blog/article but I can't figure it out. tests run. Neither version of the code does much, so there aren't many UI tests. The older one (which uses FEST) has more features and tests. Ganymede. I haven't tried it on Lion or Helios.</body>
  </mail>
  <mail>
    <header>JUnit 4.10: first beta snapshot</header>
    <body>All, I've pushed the first snapshot beta version of JUnit 4.10 to sonatype. Many thanks to a bright constellation of contributors.  Perhaps most notably, this release should fix the junit-dep jar contents issues that plagued maven users after the 4.9 release.  Combined release notes and acknowledgements are copied below. Maven users, to use this version, you'll need to add a dependency and repository in your pom.xml: Non-maven users, I didn't hear from any of you as potential beta testers, but I'm happy to support you if you speak up! If no regression errors are found over the next week, we will be pushing this as 4.10 final Share and Enjoy, ## Summary of Changes in version 4.10 [unreleased!] ## A full summary of commits between 4.9 and 4.10 is on [github]( ### junit-dep has correct contents ### junit-dep-4.9.jar incorrectly contained hamcrest classes, which could lead to version conflicts in projects that depend on hamcrest directly.  This is fixed in 4.10 [@dsaff, closing gh-309] ### RuleChain ### The RuleChain rule allows ordering of TestRules: writes the log ### TemporaryFolder ### - `TemporaryFolder#newFolder(String... folderNames)` creates recursively deep temporary folders - `TemporaryFolder#newFile()` creates a randomly named new file, and `#newFolder()` creates a randomly named new folder ### Theories ### The `Theories` runner does not anticipate theory parameters that have generic types, as reported by github#64.  Fixing this won't happen until `Theories` is moved to junit-contrib. In anticipation of this, 4.9.1 adds some of the necessary machinery to the runner classes, and deprecates a method that only the `Theories` runner uses, `FrameworkMethod`#producesType(). The Common Public License that JUnit is released under is now included in the source repository. Thanks to `@pholser` for identifying a potential resolution for github#64 and initiating work on it. ### Bug fixes ### - Built-in Rules implementations directory if applying the rule fails AssumptionViolatedExceptions - Javadoc bugs - Miscellaneous junit.tests.framework.TestListenerTest [@stefanbirkner, fixing gh-225] message [@stefanbirkner, fixing gh-318] [@stefanbirkner, fixing gh-42] ### Minor changes ### - Description, Result and Failure are Serializable [@ephox-rob, closing gh-101] - FailOnTimeout is reusable, allowing for retrying Rules [@stefanbirkner, closing gh-265] - New `ErrorCollector.checkThat` overload, that allows you to specify a reason [@drothmaler, closing gh-300]</body>
  </mail>
  <mail>
    <header>Re: Re: UI tests in Eclipse on MAC</header>
    <body>Can you please provide a minimal non-working example? Am 22.09.2011 um 17:12 schrieb shca08_junit &amp;lt;jacsmit09@...&amp;gt;: Hi Marc, Our app uses OSGi - so the different components are plugins. The only way to test it is to use JUnit plugin tests. Why would you want to run such a test as a JUnit plugin test? and uses Java Robot to click on it. Works fine run in Eclipse on Mac as an application or JUnit test but fails when run as JUnit plugin test. Frame would show 1 out of 5 or so times. Removing all unneeded plugins resulted in frame always being shown but the click never seems to happen. thing... runs as a JUnit Test but fails as a JUnit Plugin Test. One time the frame was shown, but nothing happened (so the test failed). The other times, the frame didn't even show. Tried removing all VM args and unnecessary plugins. Mac? Or the core plugins included to run the tests? Or...? our testing and it works quite well on Windows. With or without FEST on the Mac, I can't seem to get any UI tests to run. The initial frame/window comes up in some cases but I can't do much more than that. When running JUnit tests (again with or without FEST), I don't even see the frame. blog/article but I can't figure it out. (few) UI tests run. Neither version of the code does much, so there aren't many UI tests. The older one (which uses FEST) has more features and tests. Ganymede. I haven't tried it on Lion or Helios.</body>
  </mail>
  <mail>
    <header>Re: UI tests in Eclipse on MAC</header>
    <body>Mac OS 10.6.8 Eclipse Helios JDK 1.6_26 public class FrameTest extends TestCase @Override public void setUp() btn.addActionListener(new ActionListener() @Override public void actionPerformed(ActionEvent e) public void testShowFrame() throws AWTException If you add a main() method and run as an App, it works. If you run it as a JUnit testcase, it works. But if you run it as a plugin test (which requires it to be in a plugin project) using the default args, it always fails (in diff ways). Removing the args and any unnecessary plugins gets it mostly working. However, a couple other things don't always work - like trying to select submenus.</body>
  </mail>
  <mail>
    <header>Re: Re: UI tests in Eclipse on MAC</header>
    <body>Shaun, thanks for the example. Unfortunately, I couldn't get it to work either. Have you seen these Eclipse Bugzilla entries:  To me it seems like an unsolved problem, as frustrating as that is. Sorry for not being helpful at all. Marc Am 23.09.2011 um 19:28 schrieb shca08_junit: JUnit testcase, it works. But if you run it as a plugin test (which requires it to be in a plugin project) using the default args, it always fails (in diff ways). Removing the args and any unnecessary plugins gets it mostly working. However, a couple other things don't always work - like trying to select submenus.</body>
  </mail>
  <mail>
    <header>Re: UI tests in Eclipse on MAC</header>
    <body>Hi Shaun, You're calling methods that are described as not threadsafe. That is, while your method is running on one thread, some other thread (the Swing "event" thread) might come along and fiddle with the same component you're fiddling with. I wonder if that's part of the problem. If it is, the way to solve the problem is to invoke the non-threadsafe methods via SwingUtilities.invokeLater() or SwingUtilities.invokeAndWait().  okeLater Dale JUnit testcase, it works. But if you run it as a plugin test (which requires it to be in a plugin project) using the default args, it always fails (in diff ways). Removing the args and any unnecessary plugins gets it mostly working. However, a couple other things don't always work - like trying to select submenus. -- Dale Emery Consultant to software teams and leaders</body>
  </mail>
  <mail>
    <header>Re: UI tests in Eclipse on MAC</header>
    <body>Hi Shaun, I think Dale is right. I've done a fair share of Swing-JUnit-Tests and your code ought not work. The usual JUnit-Runner will run the tests in a "normal" Thread, while UI-Manipulation, including Frame creation, should be done in the AWT Eventqueue, even in a test. Also, if you interact with your GUI you need to wait for the events that you dispatch to be processed. Abbot, a ui test framework like FEST, provides a wait() method for that, which uses the invokeAndWait()-Method mentioned by Dale with an empty Runnable. regards murat  okeLater</body>
  </mail>
  <mail>
    <header>Using HTMLunit for first time</header>
    <body>Hi, I need to use htmlunit in my company and looking to have a start on this.. I have already downloaded html unit but I am not sure how can i get it running.. Do i need to get eclipse and then set the paths there and also have junit framework to write my test code.. can anybody please help me in getting started.. It would be a great help... Thanks Rajesh</body>
  </mail>
  <mail>
    <header>Error CreateProcess error=206 when trying to execute JUnit test from Eclipse</header>
    <body>Hi! I am trying to execute JUnit tests from Eclipse running on Windows Vista, and I am receiving message: Cannot run program "C:\Program Files (x86)\Java\jre6\bin\javaw.exe" (in directory "H:\Users\MyName\workspace\MyProject"): CreateProcess error=206, The filename or extension is too long My project includes lot of jars and so on, and it can be run on Application Server without errors. I searched Google and the found similar error in a bit different context:  They are saying that run configuration processes the list of libraries and add the result to the classpath but it becomes too long for Windows. So - I guess - this is more the problem of Eclipse "Run As..." plugin and not the JUnit, but btw - maybe someone can suggest how to remove this error. And, as I am JUnit newbies - can someone suggest how to run JUnit tests outside Eclipse. I guess it can be painfully, because one needs to transfer all the necessary configuration outside Eclipse to this new environment. Thanks in advance!</body>
  </mail>
  <mail>
    <header>Re: Error CreateProcess error=206 when trying to execute JUnit test from Eclipse</header>
    <body>Hi Thomas, Consider looking into Maven; it will manage your libraries for you. It supports JUnit, through the so-called maven-surefire-plugin. The most recent version of said plugin (2.9) includes a bugfix that sounds very relevant to your issue. At the risk of overloading you with links, have a look at the following:  l Good luck, Stephan I am receiving message: directory "H:\Users\MyName\workspace\MyProject"): Server without errors. I searched Google and the found similar error in a bit different context: the result to the classpath but it becomes too long for Windows. So - I guess - this is more the problem of Eclipse "Run As..." plugin and not the JUnit, but btw - maybe someone can suggest how to remove this error. outside Eclipse. I guess it can be painfully, because one needs to transfer all the necessary configuration outside Eclipse to this new environment.</body>
  </mail>
  <mail>
    <header>Re: JUnit 4.10: first beta snapshot</header>
    <body>I've given it a whirl on a reasonable sized project and had no problem.</body>
  </mail>
  <mail>
    <header>Re: Using HTMLunit for first time</header>
    <body>Rajesh, Hopefully someone here can help you.  If not, it looks like htmlunit itself has an active mailing list:  Good luck, running.. framework to write my test code..</body>
  </mail>
  <mail>
    <header>Testing individual test cases from command line.</header>
    <body>Hi list, I'm embarking on a pretty monumental JUnit test writing journey as part of a larger vision of improving code integrity as well as expanding our testing activities. Before I begin writing the tests I have been working (frustratingly) on this particular Jira issue [1]. In summary, the issue attempts to add the functionality to a script [2] that will enable us to test individual test cases from the command line rather than have to run every JUnit test case when we wish to review changes or review performance of new test cases. I am however not getting very far with setting the correct environment variable and could do with some guidance. The patch which I'm trying to apply would allow us to run bin/nutch junit org.apache.nutch.testCase This would then run the specified test case class. I'm positive that my problem is the export classpath environment variable which should point to the test case directory. I'm just not able to add the class  paths, therefore I get an exception and stack trace error (NoClassDef) whenever I try to run a test case. Finally, just to clarify, I'm using the TestRunner class to run the tests. Any help, guidance etc would be greatly appreciated as it will enable me to progress with writing and fixing some 20-30 test classes. If I can provide any more information please advise. Thank you in advance Lewis [1] [2]</body>
  </mail>
  <mail>
    <header>Re: Testing individual test cases from command line.</header>
    <body>Hi, Further to this, I thought it important to include reference to the two broken links in the FAQ. Under section 6.6 "Why do I get a NoClassDefFoundError when trying to test JUnit or run the samples?". Both of them unfortunately point to documents which no longer exist :0( -- *Lewis*</body>
  </mail>
  <mail>
    <header>Re: UI tests in Eclipse on MAC</header>
    <body>Thanks murat &amp;amp; Dale. I will investigate that further - I'm pretty sure that was covered during various iterations of trying to get this to work.  In fact, I started with a simple FEST example following exactly their instructions.  It worked with the JUnit testcase but not the JUnit Plugin one. Appreciate the replies.  okeLater</body>
  </mail>
  <mail>
    <header>Re: UI tests in Eclipse on MAC</header>
    <body>Hey Marc, Thanks for the reply - I did see the first bug, but you were quite helpful in confirming that at least it doesn't just fail here / for me. you seen these Eclipse Bugzilla entries: not being helpful at all. JUnit testcase, it works. But if you run it as a plugin test (which requires it to be in a plugin project) using the default args, it always fails (in diff ways). Removing the args and any unnecessary plugins gets it mostly working. However, a couple other things don't always work - like trying to select submenus. to in the times, for the comes tests.</body>
  </mail>
  <mail>
    <header>Re: Junit structure</header>
    <body>Hi David, thank you for your reply, It would be great to have more documentation about the structure and on how it all work at run time with examples, especially for people that want to contribute to the project, or even for novice people to start messing around with testing :) structure was designed and how the execution works. therefore here is my question:</body>
  </mail>
  <mail>
    <header>Re: UI tests in Eclipse on MAC</header>
    <body>Also note that the example below works fine on Windows (in all cases including the eclipse junit plugin test). was covered during various iterations of trying to get this to work.  In fact, I started with a simple FEST example following exactly their instructions.  It worked with the JUnit testcase but not the JUnit Plugin one. while fiddling  okeLater it as FEST on JUnit the Eclipse</body>
  </mail>
  <mail>
    <header>Re: Testing individual test cases from command line.</header>
    <body>Lewis, This seems several steps removed from JUnit in general, but I took a quick look.  In give the example: lewis@lewis-01:~/ASF/branch-1.4/runtime/local$ export CLASSPATH=$CLASSPATH:~/ASF/branch-1.4/src/test lewis@lewis-01:~/ASF/branch-1.4/runtime/local$ echo $CLASSPATH :/home/lewis/ASF/branch-1.4/src/test lewis@lewis-01:~/ASF/branch-1.4/runtime/local$ bin/nutch junit org.apache.nutch.fetcher.TestFetcher Class not found "org.apache.nutch.fetcher.TestFetcher" This appears to indicate that you are pointing CLASSPATH to a folder of source files.  If that's true, you're likely to be happier if you point CLASSPATH to a folder of .class files, or to a compiled .jar. Good luck, larger vision of improving code integrity as well as expanding our testing activities. Before I begin writing the tests I have been working (frustratingly) on this particular Jira issue [1]. In summary, the issue attempts to add the functionality to a script [2] that will enable us to test individual test cases from the command line rather than have to run every JUnit test case when we wish to review changes or review performance of new test cases. I am however not getting very far with setting the correct environment variable and could do with some guidance. The patch which I'm trying to apply would allow us to run problem is the export classpath environment variable which should point to the test case directory. I'm just not able to add the class  paths, therefore I get an exception and stack trace error (NoClassDef) whenever I try to run a test case. progress with writing and fixing some 20-30 test classes. If I can provide any more information please advise.</body>
  </mail>
  <mail>
    <header>Re: Documentation</header>
    <body>Stefan, If you're making any progress on this, this maven plugin is likely to be of great interest:</body>
  </mail>
  <mail>
    <header>Re: Feature request: @Assumes</header>
    <body>FYI, TestNG also supports "soft" dependencies (which are more like orderings). -- Cédric</body>
  </mail>
  <mail>
    <header>Re: Beta release preparation?</header>
    <body>[maven pmc hat]DO NOT EVER SET VERSION TO LATEST[/maven pmc hat]</body>
  </mail>
  <mail>
    <header>Re: Beta release preparation?</header>
    <body>On Fri, Sep 16, 2011 at 10:48 AM, Stephen Connolly So how do I recommend that people test a version not yet released?</body>
  </mail>
  <mail>
    <header>Re: Copyright Statement</header>
    <body>JUnit is distributed under the terms of the license at:  of any and have been unable to find one, but I need to double check.  Thanks!</body>
  </mail>
  <mail>
    <header>Re: Beta release preparation?</header>
    <body>On 16 September 2011 16:47, Stephen Connolly in this case 4.9.1-SNAPSHOT (that should more correctly be 4.10-SNAPSHOT if it is targeting 4.10... but doesn't really matter that much) Also they need to enable snapshot resolution from the sonatype repo otherwise they will be unable to resolve the -SNAPSHOT -Stephen</body>
  </mail>
  <mail>
    <header>Re: Beta release preparation?</header>
    <body>Tell them to set it to the version number that you have built. the (deprecated) tags LATEST and RELEASE were only for use in /project/build/(pluginManagement/)?plugins/plugin/version LATEST corresponded to the last version that was published (so if you publish, 1.0, 1.1, 2.0, 1.2, 3.0-SNAPSHOT, 1.0.1 then LATEST is 1.0.1!) RELEASE corresponded to LATEST excluding -SNAPSHOTs Both concepts are complete Arse! and completely unpredictable, hence DO NOT USE EVER. Never mind the case that they were only intended for plugins and a bug allowed them to "work" for dependencies on some versions of Maven -Stephen</body>
  </mail>
  <mail>
    <header>Re: Beta release preparation?</header>
    <body>On Fri, Sep 16, 2011 at 11:50 AM, Stephen Connolly 4.10-SNAPSHOT works for me.  I didn't know that worked.  I just didn't want to have to point to 4.10-9348230-3432-43-32432-9... Thanks,</body>
  </mail>
  <mail>
    <header>Re: UI tests in Eclipse on MAC</header>
    <body>Ok seems to be mostly related to this:  Removing all of the default jvm and prog args (especially -ws) got most of the tests working.  What still fails at this point is any time a pop-up is shown - like a button that has a drop-down or a context menu. I've posted elsewhere (like the Eclipse forums) but no replies there. tests in Eclipse with JUnit on Mac/OSX?  I have issues with the frame tested not being shown (when run as a JUnit test but it does otherwise) and errors like this... debug.</body>
  </mail>
  <mail>
    <header>Re: JUnit 4.9 released!</header>
    <body>Pls tell me more about this package ---------- Sent from my Nokia phone ------Original message------ Date: Wednesday, September 14, 2011 7:41:50 AM GMT-0000 Subject: [junit] Re: JUnit 4.9 released! Hi David, I confirmed that the most recent junit-dep snapshot does not contain hamcrest (whereas the most recent junit snapshot does). Thanks for taking care of this! I guess it should somewhere be documented that junit-dep is the preferred package for Maven users? Stephan following repository: access that repo. My colleague suggests asking for support in irc.codehaus.org.) indeed not available in Maven central; we had to manually deploy them to our corporate Nexus instance. contains org.hamcrest.* classes, similar to the issue described in  use a more recent version of Hamcrest (e.g. 1.2.1) to declare the Hamcrest dependency in front of JUnit; not very nice. I see that you did define the hamcrest-core dependency in the POM, but since the class files are also shipped this has no effect. the from I'm 4.9. needs to Central?</body>
  </mail>
  <mail>
    <header>Result and testAssumptionFailure handling</header>
    <body>Currently the Result class simply ignores testAssumptionFailure. The corresponding method is empty and there's a comment: // do nothing: same as passing (for 4.5; may change in 4.6) I would like to increase the ignored tests count for an assumption failure. It's because Result doesn't provide any information, that a test is ignored because of a failing assumption. Any objections?</body>
  </mail>
  <mail>
    <header>Packages for Tests</header>
    <body>Today I saw that the AssumptionTest is (still) part of the org.junit.tests.experimental package. Although this seems to be the wrong package, I cannot find out the right package. Therefore I would like to follow the common approach to use the same package for the class and for the test. Additionally the test's name is the class name with Test suffix. Therefore the AssumptionTest would be named AssumeTest and be part of the org.junit package. What do you think about my proposal?</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit 4.9 released!</header>
    <body>kkamasiani, What do you want to know? On Fri, Sep 16, 2011 at 2:59 AM, kkamasiani amasianikk hamcrest (whereas the most recent junit snapshot does). junit-dep is the preferred package for Maven users? following repository: access that repo. My colleague suggests asking for support in irc.codehaus.org.) were indeed not available in Maven central; we had to manually deploy them to our corporate Nexus instance. contains org.hamcrest.* classes, similar to the issue described in  use a more recent version of Hamcrest (e.g. 1.2.1) to declare the Hamcrest dependency in front of JUnit; not very nice. I see that you did define the hamcrest-core dependency in the POM, but since the class files are also shipped this has no effect. corrected? the from I'm 4.9. needs to Central?</body>
  </mail>
  <mail>
    <header>Re: Packages for Tests</header>
    <body>Stefan, I've found insisting on a one-to-one mapping between tested classes and test classes causes about as many problems as it solves.  However, it's not a bad first approximation, especially given that this test is obviously currently in the wrong place.  Go for it. org.junit.tests.experimental package. Although this seems to be the wrong package, I cannot find out the right package. for the class and for the test. Additionally the test's name is the class name with Test suffix. org.junit package.</body>
  </mail>
  <mail>
    <header>Re: Result and testAssumptionFailure handling</header>
    <body>Works for me, however... It's also been proposed (I think as an analogy to NUnit, and maybe TestNG) that there should be four categories of test reports: - PASSED - FAILED - IGNORED: The user asked the framework not to run this test. - ABORTED: The user asked the framework to run this test, but the framework couldn't. The difference between IGNORED and ABORTED would be that the user shouldn't be surprised by IGNORED tests (the user took an action, like adding an @Ignore annotation, that caused the framework to skip the test).  However, an ABORTED test might be a surprise to the user: the test assumes that it is connected to the network, and that assumption failed. Splitting out these states might allow tools depending on the test runs to take different actions based on the different results.  For example, ABORTED tests might be treated similarly to IGNORED tests during development, but would prevent check-in or deployment. This raises three very different questions: (1) Should we have these 4 states, or stick with our current 3? (2) If we choose to have 4 states, what's the best name for the new state? (3) Are assumption failures, by default, to be treated as IGNORED, or ABORTED? It might be good to get these decisions made, and move on. corresponding method is empty and there's a comment: // do nothing: same as passing (for 4.5; may change in 4.6) It's because Result doesn't provide any information, that a test is ignored because of a failing assumption.</body>
  </mail>
  <mail>
    <header>Beta release preparation, take 2</header>
    <body>All, I think this thread got buried in a valuable schooling about maven etiquette to me.  However, I'm still curious to know... I think we're ready to cut a 4.10 beta 1 release from head, including a raft of bug fixes, most notably the fix in the contents of junit-dep as released to maven.  Of those of you who plan on being beta-testers: 1) Is there anyone who plans to download the jar directly from github for testing? 2) Is there anyone who plans to set the junit version in their pom to 4.10-SNAPSHOT, and add as a snapshot repository, in order to test through maven? I'm happy to support both beta-release paths if it turns out people are using both.</body>
  </mail>
  <mail>
    <header>Re: Result and testAssumptionFailure handling</header>
    <body>I think there are a number of issues with this categorization... I think 4 might not be enough. Here is my straw-man Where do the @Theory assumption failure's get counted? and how do you differentiate them from regular assumption failures? -Stephen corresponding method is empty and there's a comment: // do nothing: same as passing (for 4.5; may change in 4.6) It's because Result doesn't provide any information, that a test is ignored because of a failing assumption.</body>
  </mail>
  <mail>
    <header>Re: Beta release preparation, take 2</header>
    <body>Getting the beta coverage is a tricky one isn't it, when probably less than 1% of JUnit usage is in any way exotic. It's a long time since I consumed JUnit through anything other than Maven, so I'd only be able go with the -SNAPSHOT approach for the snapshot builds of whirlwind-db. I like that this will be a short release cycle, as it gets a well defined set of changes out as a small release.  Perhaps JUnit might follow Selenium's path on small incremental releases :)</body>
  </mail>
  <mail>
    <header>Alphabetizing test method run order?</header>
    <body>All,  specification of the order in which test methods are selected to run within a test class using the default runner.  In the past, although under-documented, the policy has been that the order in which test methods within a test class are run is undefined.  In practice, it has been left to the JDK implementation, which has usually ended up meaning the tests are run in bytecode order, and almost always been a stable ordering. JDK 7 (and, I believe, upcoming releases of JDK 6) changes this, by having the methods returned from reflective queries in essentially random order. It will always be my belief that proper use of JUnit results in test methods whose passing or failure does not depend on ordering.  That said, it can be very frustrating to have a test break because the JDK selected a particular random ordering, and then have little or no tool support in recreating the order that triggers the failure. So, accepting this patch will mean that the ordering of methods will no longer change from run to run, even if you change or upgrade JDKs. Unfortunately, it may change the ordering once--if we put this change into 4.11, say, then teams using current versions of JDK 6 that upgrade from 4.10 to 4.11 may find their tests now running in a different stable ordering than before.  I think this is a small price as a one-time cost. More disconcerting to me would be if I started seeing test cases with method names like aaaRunMeFirst. Thoughts?</body>
  </mail>
  <mail>
    <header>Re: Result and testAssumptionFailure handling</header>
    <body>If four is not enough, then going back to two might be the best engineering answer. Kent ABORTED? corresponding method is empty and there's a comment: // do nothing: same as passing (for 4.5; may change in 4.6) It's because Result doesn't provide any information, that a test is ignored because of a failing assumption.</body>
  </mail>
  <mail>
    <header>Re: Alphabetizing test method run order?</header>
    <body>My strong preference is for no defined order in the sequence of test method execution by default. Now, if it will make people happy to be able to explicitly order tests through some kind of formal and approved extension that's fine, but I vote for the core behavior to stay unchanged. Simon (One of the normally quiet moderators around here. :-) -- simonpeter.org | simonpeter.com | newlife-upc.org</body>
  </mail>
  <mail>
    <header>Re: Alphabetizing test method run order?</header>
    <body>+1 keep ordering undefined. Allow ordering though a custom Annotation, a Runner or a Rule (or a combination thereof, whatever makes sense).</body>
  </mail>
  <mail>
    <header>Re: Alphabetizing test method run order?</header>
    <body>At present if you create a Request, the tests will be unsorted, but you can call to have the tests sorted. Additionally, a Runner has the ability to sort its tests initially, though IMHO there is a tad missing in terms of sorting if your Runner extends from ParentRunner as the entire list of tests is hidden from the Sortable interface and child classes of ParentRunner... thus you are relying on Collections.sort to establish your sorting with the comparator. i.e. Some sorting requirements may need as many as N*N/2 comparisons to establish the correct sorting, while Collections.sort will typically only perform N*log(N) comparisons. See Something similar to probably be needed if/as more people use the Request#sort(Comparator) method. On 20 September 2011 08:44, Malte Finsterwalder</body>
  </mail>
  <mail>
    <header>Re: Alphabetizing test method run order?</header>
    <body>Hmm... I think it would be even better to _ensure_ that the test cases are run in a random order but provide a summary at the end of the testrun where the order gets printed. In that way, people would be urged to create independent tests and if it happens that the tests are not independent (and this is discovered through a different ordering) they can diagnose the problem and fix their tests.</body>
  </mail>
  <mail>
    <header>Re: Result and testAssumptionFailure handling</header>
    <body>Yup.  Let's drop ignored for JUnit 4.10 ;)</body>
  </mail>
  <mail>
    <header>Re: Result and testAssumptionFailure handling</header>
    <body>The underlying problem with trying to come up with a fixed set of results is that we want to categorize tests on several axes... 1. Whether the test was or was not run. 2. Whether the test proved what it's designed to prove or not. 3. Whether the result is "good" or "bad" - or maybe "partly good" As far as I can see, the three axes are equatable only when a test passes - a passing test is "good" and was executed. Some combinations I can think of: not run + good: We didn't intend the test to run not run + bad: The test is poorly formed (but in a way that allows it to compile) not run + "kind of bad": The test is marked to be ignored (that's my interpretation anyway) run + bad: An assertion failed or an unexpected exception was thrown run + good: The test succeeded as designed run + neither good nor bad: The test failed an assumption There are lots of other possibilities and I imagine folks coming up with more that I can't preview. This has led me (in my own work) to move from an enumeration to an object in representing the result of a test. That object knows where it falls on each of the three axes. It bothers me that I have had to introduce this added complexity, but I'm fairly well convinced that it arises intrinsically from the problems I'm trying to solve. Whether that's the direction JUnit want's to go is, of course, an open question. Charlie On Tue, Sep 20, 2011 at 1:51 AM, Neale Upstone</body>
  </mail>
  <mail>
    <header>Re: UI tests in Eclipse on MAC</header>
    <body>Hi Shaun, uses Java Robot to click on it. Works fine run in Eclipse on Mac as an application or JUnit test but fails when run as JUnit plugin test. Frame would show 1 out of 5 or so times. Removing all unneeded plugins resulted in frame always being shown but the click never seems to happen. runs as a JUnit Test but fails as a JUnit Plugin Test. One time the frame was shown, but nothing happened (so the test failed). The other times, the frame didn't even show. Tried removing all VM args and unnecessary plugins. the core plugins included to run the tests? Or...? Alas, I've never worked on an Eclipse plugin. The closest I've come was an RCP app, and at the time (several years ago) I couldn't find a good way to run through-the-UI tests for that. Dale -- Dale Emery Consultant to software teams and leaders</body>
  </mail>
  <mail>
    <header>Re: Alphabetizing test method run order?</header>
    <body>-10 A number of projects I worked on used to do this. While this may initially seem like a good idea, it was problematic for us for a number of reasons. If the tests are run in a random order, then a small change to a test or a class under test could cause a completely unrelated test to fail. Many developers will assume that it is their change that caused the problem, leading them in a wild goose chase trying to see which of their changes caused the problems and why, and when they realize it is due to the test ordering, they need to do a big context switch back to their original task. This would be made worse by the fact that simply rerunning the tests would cause them to pass again (or worse, cause a different test to fail). Note that I don't think developers should be writing tests where the outcome depends on the ordering that the test methods were run. I just don't think we should assume that fixing the tests with this problem is necessarily as important as what the developer is trying to do. Making the test order random by default also does not necessarily make it easier to track down problems with ordering of tests, since if you ran the failing test suite again, you would get a different run order. JUnit could print out the random seed used for that particular run, but then developers would have to figure out how to pass the previous random seed back to the test (how to do this would depend on which IDE or build system they used). If developers want the ordering to be shuffled, they should use a custom runner that shuffles the tests. We used to do this in our JUnit3 tests with a custom subclass of TestSuite. It used a random seed based on the System.currentTimeMillis() at midnight, so if a particular ordering caused the tests to fail, it was reproducible for the rest of the day. Unfortunately, developers often assumed that the breakage was caused by one of the changes submitted since the most recent green run of the continuous build. Personally, I don't need the test ordering to be defined, but I need it to be deterministic. If I build the same code with the same JDK and run it in the same JRE on the same kernel on a different day, the tests should run in the same order. We often re-run tests that failed earlier in the day, using the same source code, to try to determine which failures were due to flaky tests. Having the tests run in a different order would make it much more difficult to do this analysis. I suggest that JUnit4 order the tests by the hash code of the test method name. If there is a tie, JUnit could compare the test names using the natural ordering defined by String.compareTo(String) (possibly in reverse :-) -- Kevin In that way, people would be urged to create independent tests and if it</body>
  </mail>
  <mail>
    <header>REMOVE ME FROM THIS LIST</header>
    <body>&lt;br/&gt;</body>
  </mail>
  <mail>
    <header>Re: UI tests in Eclipse on MAC</header>
    <body>app, and at the time (several years ago) I couldn't find a good way to run through-the-UI tests for that. Ok, thanks anyway. Just to clarify though - it's not a plugin for Eclipse - it's an app built using the osgi framework. It's easy to reproduce - just create a simple/empty plugin project on Eclipse on Mac and a Junit testcase that shows a frame and uses Robot - and run that as a plugin test.</body>
  </mail>
  <mail>
    <header>Re: Beta release preparation, take 2</header>
    <body>FYI: I started using 4.9.1-SNAPSHOT for a selected number of (Selenium) tests, i.c.w. a custom runner (extends Theories), a RunListener and several TestRules. No problems so far. Cheers, Stephan</body>
  </mail>
  <mail>
    <header>Re: Junit structure</header>
    <body>mdankan, For JUnit 3.x, there was the Cook's Tour:  For JUnit 4.x, no such document exists.  I'd love to write one, but I'm not sure if it's high enough priority to put managing the code on hold... structure was designed and how the execution works. therefore here is my question:</body>
  </mail>
  <mail>
    <header>Ongoing usefulness of acknowledgements.txt and bug fixes in release notes?</header>
    <body>All, To date, we've kept two pieces of documentary metadata along with JUnit: acknowledgements.txt and ReleaseNotes files.  In order: 1) acknowledgements.txt is an attempt at a log of everyone outside of the primary maintainers who has contributed in some way to JUnit.  It was, I believe, originally intended to serve two purposes: (a) for traceability, should any legal questions arise about the provenance of a piece of code, (b) before github, we often ended up massaging (or replacing) patches ourselves before committing them to CVS, and we wanted a way to genuinely thank and remember the original authors. GitHub now helps with both of these issues: since we can discuss pull requests before they're accepted, we can ask contributors to fix minor issues, and github keeps excellent track of what came from where.  In addition, distributed maintenance of the acknowledgements.txt file has become a pain, since as a linear document, there is often a race condition between appended items. 2) I've been asking committers to include updates to ReleaseNotes files as part of check-ins.  This has some of the same issues as above: it's no longer strictly necessary given GitHub support, and also leads to race conditions. So, my proposal is: 1) Drop further appends to acknowedgements.txt 2) Adopt a more formal approach to git commit messages, following along along release notes to be largely auto-generated at release time. Thoughts?</body>
  </mail>
  <mail>
    <header>Re: Ongoing usefulness of acknowledgements.txt and bug fixes in release notes?</header>
    <body>David Saff wrote on 9.9.2011 23:26: Good idea. That would reduce the work of both contributors and the one who makes the release. Auto-generating release notes would probably require some manual filtering, because the addition of one feature easily comprises of multiple commits. Or then there would need to be a very formal approach. Some options: 1. Each new feature must be rebased into one commit, whose message is used in release notes. 2. Each feature is developed in a topic branch and merged with the --no-ff option, and then the merge's commit message is used for release notes. -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Re: Ongoing usefulness of acknowledgements.txt and bug fixes in release notes?</header>
    <body>+1 for both</body>
  </mail>
  <mail>
    <header>Re: Re: Documentation</header>
    <body>Indeed. For those not initiated, here's an example of using Github to host a whatever static content you like -  So as well as that Maven generated info, there is other static content such as a public XSD I want available. From past emails, I think this is how junit.org is being hosted too. resources are good for (eg. source code repository ...) junit.org. Something like&amp;lt;if you aren't looking for the SOURCECODE REPOSITORY, you'll find more information at the main site junit.org junit.sourceforge.net and github. Additionally some information is missing or very hard to find (new features like rules, current version, how to contribute, ...) to find the information and JUnit would look more professional. IMHO the github pages are a good place for the JUnit documentation, because we can use all the git(hub) features for creating the documentation.</body>
  </mail>
  <mail>
    <header>Re: Re: Documentation</header>
    <body>On Fri, Sep 9, 2011 at 8:33 AM, Neale Upstone That would be news to me! resources are good for (eg. source code repository ...) junit.org. Something like&amp;lt;if you aren't looking for the SOURCECODE REPOSITORY, you'll find more information at the main site junit.org junit.sourceforge.net and github. Additionally some information is missing or very hard to find (new features like rules, current version, how to contribute, ...) to find the information and JUnit would look more professional. IMHO the github pages are a good place for the JUnit documentation, because we can use all the git(hub) features for creating the documentation.</body>
  </mail>
  <mail>
    <header>Re: Documentation</header>
    <body>I believe everyone concerned is on-board.  Once we have most of the content currently at junit.org copied over to  junit.org has agreed to flip the CNAME, and we'll be serving junit.org from github. So now, any volunteers to help port the docs?  :-) junit.sourceforge.net and github. Additionally some information is missing or very hard to find (new features like rules, current version, how to contribute, ...) to find the information and JUnit would look more professional. IMHO the github pages are a good place for the JUnit documentation, because we can use all the git(hub) features for creating the documentation.</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit 4.9 released!</header>
    <body>I believe I have a fixed version of junit-dep-4.9.1, and I'd like to test the whole round trip (but I'm not ready to release an official 4.9.1 jar yet).  Am I right that what I probably want to do is upload a snapshot?  Does anyone know how to upload a snapshot to sonatype? Their documentation seems to not be organized in a way most helpful to me. indeed not available in Maven central; we had to manually deploy them to our corporate Nexus instance. org.hamcrest.* classes, similar to the issue described in  more recent version of Hamcrest (e.g. 1.2.1) to declare the Hamcrest dependency in front of JUnit; not very nice. I see that you did define the hamcrest-core dependency in the POM, but since the class files are also shipped this has no effect.</body>
  </mail>
  <mail>
    <header>Re: JUnit 4.9 released!</header>
    <body>As promised by mail I consulted a colleague. He says you can use the following repository: (Note that you may have to update your setting.xml or pom.xml in order to access that repo. My colleague suggests asking for support in irc.codehaus.org.) Good luck, Stephan indeed not available in Maven central; we had to manually deploy them to our corporate Nexus instance. org.hamcrest.* classes, similar to the issue described in  more recent version of Hamcrest (e.g. 1.2.1) to declare the Hamcrest dependency in front of JUnit; not very nice. I see that you did define the hamcrest-core dependency in the POM, but since the class files are also shipped this has no effect. to Central?</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit 4.9 released!</header>
    <body>There, I fixed it...  This pull request updates the build machinery such that: - we can now push maven snapshots to the sonatype snapshot repository - junit-dep is uploaded correctly - We now have a test that will fail if junit-dep is ever uploaded incorrectly again I also uploaded a snapshot of the fixed junit-dep as 4.9.1-SNAPSHOT. Can someone (Stephan?)  point a pom at  set to LATEST, and make sure that the included classes are now correct?  Thanks, repository: access that repo. My colleague suggests asking for support in irc.codehaus.org.) indeed not available in Maven central; we had to manually deploy them to our corporate Nexus instance. contains org.hamcrest.* classes, similar to the issue described in  a more recent version of Hamcrest (e.g. 1.2.1) to declare the Hamcrest dependency in front of JUnit; not very nice. I see that you did define the hamcrest-core dependency in the POM, but since the class files are also shipped this has no effect. to Central?</body>
  </mail>
  <mail>
    <header>Changing the use of branches at github</header>
    <body>All, For a brief time, I was trying to maintain two different code branches, 4.9.1 with bug fixes, and 4.10 with new feature work.  I now believe that was mistakenly complex, given the size and agility that we should be able to maintain.  So, I have simplified matters.  All new pull requests, in general should go directly against KentBeck/master. When it comes time to cut a release branch, I will introduce a new branch with the release version number (i.e., 4.10).  The only pull requests that should go against the release branch should be for regression bugs found during beta testing. Thanks,</body>
  </mail>
  <mail>
    <header>Re: JUnit 4.9 released!</header>
    <body>Hi David, I confirmed that the most recent junit-dep snapshot does not contain hamcrest (whereas the most recent junit snapshot does). Thanks for taking care of this! I guess it should somewhere be documented that junit-dep is the preferred package for Maven users? Stephan following repository: access that repo. My colleague suggests asking for support in irc.codehaus.org.) indeed not available in Maven central; we had to manually deploy them to our corporate Nexus instance. contains org.hamcrest.* classes, similar to the issue described in  use a more recent version of Hamcrest (e.g. 1.2.1) to declare the Hamcrest dependency in front of JUnit; not very nice. I see that you did define the hamcrest-core dependency in the POM, but since the class files are also shipped this has no effect. the from 4.9. needs to Central?</body>
  </mail>
  <mail>
    <header>Feature request: @Assumes</header>
    <body>Note: I have also posted this to junit-devel@... but I think that wider input could be beneficial Consider the case where you are testing a List class... we have  @Test  @Test  @Test  @Test We now want to add some tests of the delete functionality... but the reality is that until/unless some of the preceding tests are passing, the tests for delete are meaningless. We could have a perfectly functional List.delete() method but until such time as the above tests are passing, there is no way to tell that the method does not work. Now I could code my tests like such  @Test But all that I am doing is repeating code from the preceding tests, having changed all those tests' assertThat(...)s into assumeThat(...)s That does not seem agile to me, copy &amp;amp; paste &amp;amp; search &amp;amp; replace... ban code smell there I would much rather be able to annotate the tests with an @Assumes annotation that indicates that the test assumes that the specified tests are passing, e.g.  @Test  @Assumes("newListIsEmpty")  @Test In fact in my initial example of tests, there are some additional assumptions that I didn't make explicit  @Test  @Assumes("newListIsEmpty")    ... and  @Test    ... Now you could get some of this functionality via a TestRule... You could watch tests to see if they pass, and skip tests annotated with the annotation if assumed functionality is failing, but that would result in sporadic failures of, e.g. deleteRemovesAnElement because of the failing newListIsEmpty being executed _after_ deleteRemovesAnElement rather than before. The simple point is that the test result of deleteRemovesAnElement is meaningless until its assumptions are true, and while I could code the assumptions with assumeThat(..)s C&amp;amp;P&amp;amp;S&amp;amp;R is even worse than C&amp;amp;P. Another alternative to @Assumes would be to invoke the assumed method(s) at the start of the test, e.g.  @Test    newListIsEmpty(); // verify assumed functionality    addPutsAnElementIntoAnEmptyList();  // verify assumed functionality    ... That gets rid of the C&amp;amp;P&amp;amp;S&amp;amp;R, but there are two issues with that:  1. We have to manually invoke any setup/tearDown methods, including all those of the rules that the test class has... very messy  2. The test fails when the assumed test fails. In actuality we can say nothing at all about whether deleteRemovesAnElement if a newListIsEmpty is not passing... yes we could code the test differently, but that is just moving our assumptions somewhere else. I am sure that there are others out there who feel there is a point 3...  3. We already ran those tests why waste time running them again? Well the answer to 3 is that these are UNIT tests which should be very fast, so what is the harm... So, in my view, best practice unit testing needs the ability to mark tests as assuming that other tests are passing, so that those tests can be skipped when the assumptions are known to be failing or skipped. [This is a deliberately loaded criteria... if the org.junit.runner.Request does not include the assumed test, then that test is neither known failing or known skipped, so we can run the test and output a warning that the failure may be because of assumed functionality... the use case of executing one and only one test repeatedly until you get that test passing] The annotation would have implications on test sorting, as any assumed tests would have to always happen before the assuming tests (as long as the assumed tests are in the org.junit.runner.Request) Also might have to be two annotations, e.g. @Assumes(methodNames) @AssumesClasses(classes) though in my view the @AssumesClasses is less critical, as these are UNIT tests and each test class should be independent to a large extent. However I am willing to consider that some people may have many test classes for one class under test, one test class containing all the tests of the constructors, another testing the Add methods, etc. in which case an @AssumesClasses annotation makes sense. Where tests contain a circular dependency, fail/error both tests Ok, let the critique begin! -Stephen P.S. I pinged Kent with an earlier version of this idea... but I think that he missed the point about eliminating C&amp;amp;P&amp;amp;S&amp;amp;R that this feature would provide because I didn't frame the idea correctly... ---------- Forwarded message ---------- From: "Kent Beck" Date: 13 Sep 2011 17:11 Subject: Re: JUnit and test dependencies To: "Stephen Connolly" Stephen, Thank you for articulating your idea so clearly. The short answer is that no, we don't plan to support dependencies. If I have tests that are slow enough that I care about dependencies, my most productive option is generally to work on the design of the software until the tests are fast enough that I no longer care. That said, my voice is only one of many. The longer answer is that I encourage you to post your idea on the JUnit mailing list for community discussion. Regards, Kent</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit 4.9 released!</header>
    <body>hamcrest (whereas the most recent junit snapshot does). junit-dep is the preferred package for Maven users? Yes.  I assume this would go in a "getting started" guide somewhere on the new website. following repository: access that repo. My colleague suggests asking for support in irc.codehaus.org.) were indeed not available in Maven central; we had to manually deploy them to our corporate Nexus instance. contains org.hamcrest.* classes, similar to the issue described in  use a more recent version of Hamcrest (e.g. 1.2.1) to declare the Hamcrest dependency in front of JUnit; not very nice. I see that you did define the hamcrest-core dependency in the POM, but since the class files are also shipped this has no effect. corrected? the from I'm 4.9. needs to Central?</body>
  </mail>
  <mail>
    <header>Re: Feature request: @Assumes</header>
    <body>It sound like a mock, isn't it? )</body>
  </mail>
  <mail>
    <header>Re: Feature request: @Assumes</header>
    <body>Nope not a mock at all. Say you have a class List (which is not java.util.List but looks a lot like it in terms of interface) This list class is something you are developing via TDD. You write a whole lot of unit tests for it. Now suppose it happens to be a linked list, and you decide to change from a null for end of list marker to a sentinel instead. All your methods are working now, except for the isEmpty() method, but yet 200+ test cases are failing because they all rely on isEmpty working. Which unit test do I try to fix first? with @Assumes, you would have 1 failing test and 199 skipped tests... No mocks involved at all</body>
  </mail>
  <mail>
    <header>Re: Feature request: @Assumes</header>
    <body>Stephen, I can see how this could be useful.  It shouldn't be too hard to try it out as a custom runner: - subclass BlockJUnit4ClassRunner - override computeTestMethods to order the methods based on assumptions - override methodBlock to notice when tests fail, and use that to mark assumption failures on later tests. Would you be interested in contributing something like this to junit.contrib? On Wed, Sep 14, 2011 at 6:02 AM, Stephen Connolly</body>
  </mail>
  <mail>
    <header>Re: Documentation</header>
    <body>Am Montag, den 12.09.2011, 11:40 -0400 schrieb David Saff: I started to move the content of junit.org to github. Will need one or two days.</body>
  </mail>
  <mail>
    <header>Re: Feature request: @Assumes</header>
    <body>As a proof of concept, implementing as a custom runner is fine, but ultimately it would need some hooks that can feed back to Request.sort(...) as, IIUC, that applies after the Runner's sorting and this would really be enforcing restrictions on the final order. Where do I git clone and send the pull request for junit.contrib or is that just a package space in the standard junit git repo? -Stephen</body>
  </mail>
  <mail>
    <header>Re: Feature request: @Assumes</header>
    <body>&lt;a href="https://github.com/junit-team/junit.contrib/pull/5"&gt;</body>
  </mail>
  <mail>
    <header>Copyright Statement</header>
    <body>Does anyone know if there is a copyright statement for JUnit?  I was not aware of any and have been unable to find one, but I need to double check.  Thanks!</body>
  </mail>
  <mail>
    <header>Re: UI tests in Eclipse on MAC</header>
    <body>Hi Dale, Thanks for your reply. Ok so I wrote a simple test that shows a JFrame and uses Java Robot to click on it. Works fine run in Eclipse on Mac as an application or JUnit test but fails when run as JUnit plugin test. Frame would show 1 out of 5 or so times. Removing all unneeded plugins resulted in frame always being shown but the click never seems to happen. I also tried Window Licker and the included Calculator test(s) - same thing... runs as a JUnit Test but fails as a JUnit Plugin Test. One time the frame was shown, but nothing happened (so the test failed). The other times, the frame didn't even show. Tried removing all VM args and unnecessary plugins. Is this related to the args that Eclipse uses to run plugin tests on Mac? Or the core plugins included to run the tests? Or...? Shaun. testing and it works quite well on Windows. With or without FEST on the Mac, I can't seem to get any UI tests to run. The initial frame/window comes up in some cases but I can't do much more than that. When running JUnit tests (again with or without FEST), I don't even see the frame. blog/article but I can't figure it out. tests run. Neither version of the code does much, so there aren't many UI tests. The older one (which uses FEST) has more features and tests. haven't tried it on Lion or Helios.</body>
  </mail>
  <mail>
    <header>Re: Feature request: @Assumes</header>
    <body>Hi Stephen and all, More like TestNG's "dependsOnMethods" feature. I understand your desire for this. I also understand the JUnit guys' reluctance to implement it. My intermediate-ish experience with TestNG leaves me with the conclusion that inter-test dependencies lead to madness. To be fair, I had already concluded that before working with clients who insisted on specifying inter-test dependencies. My first half-baked thought is to use a Rule to prevent running methods that depend on another method that has already failed. But that would work only if the tests were run in the appropriate order. So my next half-baked thought is to write a custom Runner that builds the dependency graph and sequences the tests accordingly. Then either the runner or a rule could decide whether to run a test. I'm confident that a runner could do what you want, but that requires delving into the arcane bits of JUnit. A final half-baked thought: What if you ran all the tests, then used the dependency graph only to mark the results somehow, so as to highlight the tests on which others depend. If you see a swarm of failures, and the display indicates that some common prerequisite test also failed, that would aid your investigation. I've seen situations where some prerequisite test fails, but some of the dependent tests pass. Sometimes the prerequisite test is lying to me (and I need to fix that). Sometimes the dependency is over-specified--the dependent test doesn't depend on everything that the prerequisite test tests (which means I need to refactor the prerequisite test and the dependency specifications). Sometimes it means that the prerequisite test fails intermittently (which means I need to track down the uncontrolled factors that affect the test). Skipping the dependent tests hides that information. Running them and marking them would highlight that Dale -- Dale Emery Consultant to software teams and leaders</body>
  </mail>
  <mail>
    <header>Re: Feature request: @Assumes</header>
    <body>Sound like TestNG dependsOn feature. But from what I know, JUnit is against any kind of test dependencies (there was a recent discussion on this mailing list, see quote from this discussion: "It has always been a deliberate design decision in JUnit that we would *not* guarantee the order of test execution." -- Regards / Pozdrawiam Tomek Kaczanowski  )</body>
  </mail>
  <mail>
    <header>Re: Feature request: @Assumes</header>
    <body>This is actually one of the main values of dependent tests: accurate reporting. Without dependencies, one test failing might result in "100 Failures", but when the testing framework knows your dependency graph, it will be "1 Failure, 99 Skips", which helps narrow down what's going on much faster. Another value is obviously with functional testing, so you avoid using mocks completely but you also don't spend your time recreating expensive state before each test method. And you're also testing the state created by your production code in the previous step, which is much more representative of what's actually going on. From what I can gather, dependent tests are also particularly useful for frameworks like Selenium, which need to test heavily dependent pathways ("Don't test this page if logging in failed", etc...). Anyway, different purposes. JUnit is for unit testing and you should most likely not use dependencies for that, but they are very useful for all the other kinds of tests. -- Cédric</body>
  </mail>
  <mail>
    <header>Re: Feature request: @Assumes</header>
    <body>Hi Dale, I think it's an overinterpretation to call this a dependency. The syntax merely says that the test makes an assumption. Given such an assumption, the framework might do a number of things, only one of which is to treat the connection as a dependency. In my own work - which of course is not junit-related - I'm looking ways to specify relations like this *without* calling for any specific behavior on the part of the framework. Of course, the "obvious" and perhaps simplest implementation is to run the "assumed" test first and skip the test using the assume in the case where it fails. But I like the idea that the user might express known or believed-to-be-true logical relations among tests while the framework would be free to make use of that information in ways not necessarily predictable by the user. As an example, imagine a framework that gave a message like "You stated that TestA assumes TestB but TestA passed even though TestB failed." Charlie</body>
  </mail>
  <mail>
    <header>Re: Feature request: @Assumes</header>
    <body>On 14 September 2011 18:25, Tomek Kaczanowski Ahem... *caugh*  *caugh* However as that relies on Collections.sort you are not guaranteed to have all the N*N/2 comparisons made that would be required for a true sort... hence</body>
  </mail>
  <mail>
    <header>Re: Feature request: @Assumes</header>
    <body>A bit, but not completely. I see dependsOnMethods as being a hard restriction, i.e. stating that you must run the depended on method first. Assumes acts of more of a hint that you should run the assumed method first. also that a failure of the assumed method should imply a failure of the assuming method (so Assumes does not say that you must not run the assuming method is the assumed method is failing... in fact you could if the method with the Assumes passes when it's assumed methods fail, then that turns the pass into an InvalidAssumptionError ;-) ) reluctance to implement it. My intermediate-ish experience with TestNG leaves me with the conclusion that inter-test dependencies lead to madness. To be fair, I had already concluded that before working with clients who insisted on specifying inter-test dependencies. I agree, which is why Assumes is a "should" and not a "must" depend on another method that has already failed. But that would work only if the tests were run in the appropriate order. dependency graph and sequences the tests accordingly. Then either the runner or a rule could decide whether to run a test. I'm confident that a runner could do what you want, but that requires delving into the arcane bits of JUnit. Already implemented: Some notes about the above, the sorting is not perfect, perfect sorting would require a full bubble sort (i.e. resort until no changes are made) the sorting just makes a "best effort" to get tests that Assume after the tests the assume. If you assume a test that makes other assumptions, there are cases where the assuming test might run first... I see nothing wrong with that other than I currently don't see a mechanism to catch the failure and mark it as less critical if the later run assumed test also fails. dependency graph only to mark the results somehow, so as to highlight the tests on which others depend. If you see a swarm of failures, and the display indicates that some common prerequisite test also failed, that would aid your investigation. I see merit in that too, like I said, Assumes is a weaker contract than Depends dependent tests pass. Sometimes the prerequisite test is lying to me (and I need to fix that). Sometimes the dependency is over-specified--the dependent test doesn't depend on everything that the prerequisite test tests (which means I need to refactor the prerequisite test and the dependency specifications). Sometimes it means that the prerequisite test fails intermittently (which means I need to track down the uncontrolled factors that affect the test). them would highlight that</body>
  </mail>
  <mail>
    <header>Re: Documentation</header>
    <body>Thank you, Stefan!</body>
  </mail>
  <mail>
    <header>Beta release preparation?</header>
    <body>All, I think we're ready to cut a 4.10 beta 1 release from head, including a raft of bug fixes, most notably the fix in the contents of junit-dep as released to maven.  Of those of you who plan on being beta-testers: 1) Is there anyone who plans to download the jar directly from github for testing? 2) Is there anyone who plans to set the junit version in their pom to LATEST, and add repository, in order to test through maven? I'm happy to support both beta-release paths if it turns out people are using both.</body>
  </mail>
  <mail>
    <header>UI tests in Eclipse on MAC</header>
    <body>Is there anything special/different that needs to be done when running UI tests in Eclipse with JUnit on Mac/OSX?  I have issues with the frame tested not being shown (when run as a JUnit test but it does otherwise) and errors like this... 2011-08-23 16:37:37.686 java[87274:10c03] *** -[NSConditionLock unlock]: lock (&amp;lt;NSConditionLock: 0x1006a5b90&amp;gt; '(null)') unlocked when not locked 2011-08-23 16:37:37.686 java[87274:10c03] *** Break on _NSLockError() to debug.</body>
  </mail>
  <mail>
    <header>Re: UI tests in Eclipse on MAC</header>
    <body>Are you using swing or SWT? A stab in the dark: Many GUI libraries such as SWT have mechanisms to protect from multiple thread access. When you start a GUI from JUnit I would assume you spawn the GUI in a separate thread (knowingly or not) and if you want to inspect elements in the GUI you may have to find a way to do that from the GUI thread. This generally means submitting an event to the GUI's event queue. Various GUI-testing frameworks such as abbot and help you with this. It was a long time since I tried any UI testing myself so pardon the vauge information. This blog seems to deal with similar issues in more detail_  ----------------------------------------------------- Joakim Ohlrogge Agical AB Västerlånggatan 79, 2 tr 111 29 Stockholm, SWEDEN Mobile: +46-708-754004 Blog: johlrogge.wordpress.com Twitter: @johlrogge E-mail: joakim.ohlrogge@...</body>
  </mail>
  <mail>
    <header>Re: UI tests in Eclipse on MAC</header>
    <body>Hi - thanks for your reply.  I'm actually using Alex Ruiz's FEST for our testing and it works quite well on Windows.  With or without FEST on the Mac, I can't seem to get any UI tests to run.  The initial frame/window comes up in some cases but I can't do much more than that.  When running JUnit tests (again with or without FEST), I don't even see the frame. I've gone through what docs there are for FEST and have read the blog/article but I can't figure it out.</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit 4.9 released!</header>
    <body>OK, I figured out what went wrong.*  It involved a subtle quirk in the ant script that was uploading to maven. How to make it right? (1) release a new junit-dep-4.9.jar with the correct contents, "on top of" the incorrect junit-dep-4.9.jar.  I'm not sure if the maven gatekeepers allow this, or whether it would be confusing for those downstream, but it's easy to do in a minute. (2) Call the fixed version 4.9.1.  This avoids confusion (maybe), but will probably take a few more days. Again, I am not a maven consumer, so I'd rather say "the customer is always right", and take the community's advice.  Well, community? indeed not available in Maven central; we had to manually deploy them to our corporate Nexus instance. org.hamcrest.* classes, similar to the issue described in  more recent version of Hamcrest (e.g. 1.2.1) to declare the Hamcrest dependency in front of JUnit; not very nice. I see that you did define the hamcrest-core dependency in the POM, but since the class files are also shipped this has no effect.</body>
  </mail>
  <mail>
    <header>Re: UI tests in Eclipse on MAC</header>
    <body>Hi whoever you are, testing and it works quite well on Windows. With or without FEST on the Mac, I can't seem to get any UI tests to run. The initial frame/window comes up in some cases but I can't do much more than that. When running JUnit tests (again with or without FEST), I don't even see the frame. but I can't figure it out. I've used FEST to test Swing code on a toy project:  Later I restarted the project and used WindowLicker instead:  It's been a while since I visited either project, but I think the (few) UI tests run. Neither version of the code does much, so there aren't many UI tests. The older one (which uses FEST) has more features and tests. I wrote all of this code on Macs running Snow Leopard and Eclipse Ganymede. I haven't tried it on Lion or Helios. Dale -- Dale Emery Consultant to software teams and leaders</body>
  </mail>
  <mail>
    <header>Re: UI tests in Eclipse on MAC</header>
    <body>Ok, so I wrote a simple test using the example here...  Outside Eclipse it runs fine as a Java App and as a JUnit test.  Inside Eclipse the latter fails.  I don't know where to begin on settings to adjust to make it work in the IDE. testing and it works quite well on Windows.  With or without FEST on the Mac, I can't seem to get any UI tests to run.  The initial frame/window comes up in some cases but I can't do much more than that.  When running JUnit tests (again with or without FEST), I don't even see the frame. but I can't figure it out. tested errors</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit 4.9 released!</header>
    <body>I don't think you'll be able to override an existing version in Maven Central, the best way is probably to release a 4.9.1. -- Cédric</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit 4.9 released!</header>
    <body>I agree. For releases, there is no ability to overwrite, as it's already 'in the wild'. 4.9.1 will have to be it. It's pretty similar to what happened in log4j 1.2.15, some unintended deps got in there.  the .16 release fixed it.</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit 4.9 released!</header>
    <body>Understood.  Unfortunately, the (admittedly not huge) work to issue a 4.9.1 release with consistent links and documentation will likely be prohibitive until I'm off paternity leave. 2011/9/3 Neale Upstone &amp;lt;neale.upstone@...&amp;gt;:</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit 4.9 released!</header>
    <body>You mean all that stuff that the Maven Site plugin does for you ;-) Enjoy your leave.  Def a priority. Prob not a bad thing to have a bit of a delay, as there may be the odd other issue that could go in that release.</body>
  </mail>
  <mail>
    <header>JUnit 4.9: How to get target object from TestRule?</header>
    <body>In JUnit pre-4.9, MethodRule#apply() supplied the FrameworkMethod and the target object (the instance of the test class currently executing). This allowed such tricks such as dependency injection into the test object, or performing pre-/post- validation on the state of the test object. In 4.9, TestRule#apply() only gives us the Description object. Now, maybe I haven't looked hard enough but looking at the Description object alone I can't figure out how to get the instance of the current test. Since MethodRule is deprecated, I suppose we should just use TestRule and Description from now on... so, how do we get a reference to the currently running test instance? - alistair --</body>
  </mail>
  <mail>
    <header>Re: JUnit 4.9: How to get target object from TestRule?</header>
    <body>You can alway pass the reference to the test into the constructor of the rule: @Rule public MyRule rule = new MyRule(this) At least I think this should work. Jens</body>
  </mail>
  <mail>
    <header>Re: JUnit 4.9: How to get target object from TestRule?</header>
    <body>Unless I misunderstand the example, that code would pass in an instance of the test *class*, which by itself is insufficient to determine which specific test method is being run. Stephan</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit 4.9: How to get target object from TestRule?</header>
    <body>No, no. That'd work. The `this` in the example does refer to the instance of the test class, and the Description object contains the testMethod. It's just... personally I find it ugly (and not too DRY). From entirely self-contained rules we now need to write rules that need a reference to the instance of the test as a constructor parameter. Furthermore, that technique means we can't use the rule as a class rule (which needs to be static, hence no `this`). - alistair --  test *class*, which by itself is insufficient to determine which specific test method is being run. rule:</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit 4.9: How to get target object from TestRule?</header>
    <body>I think this relates to the problems I was facing with  See David's comments and proposals for a solution:   ssues/198</body>
  </mail>
  <mail>
    <header>Re: JUnit 4.9: How to get target object from TestRule?</header>
    <body>I see what you mean. In the case of class rules the value of getClass() could be passed in. Still, this is far from elegant. It also doesn't play well with overloaded methods. (Arguably one shouldn't write overloaded test methods, but still...) Stephan the test *class*, which by itself is insufficient to determine which specific test method is being run. rule:</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit 4.9: How to get target object from TestRule?</header>
    <body>Thanks. Sounds exactly like what I'm looking for. Added a comment on issue #198 and will proceed to follow all issues earnestly. - alistair On Wed, Sep 7, 2011 at 11:39 PM, Neale Upstone  ssues/198</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit 4.9 released!</header>
    <body>I'm trying to write a test so this doesn't happen again.  Stephan, or anyone else, do you have an example of something that fails when junit-dep ships with the hamcrest classes, and passes when the jar contents are correct?  Thanks, indeed not available in Maven central; we had to manually deploy them to our corporate Nexus instance. org.hamcrest.* classes, similar to the issue described in  more recent version of Hamcrest (e.g. 1.2.1) to declare the Hamcrest dependency in front of JUnit; not very nice. I see that you did define the hamcrest-core dependency in the POM, but since the class files are also shipped this has no effect.</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit 4.9 released!</header>
    <body>Maybe just look into the jar and see th? indeed not available in Maven central; we had to manually deploy them to our corporate Nexus instance. org.hamcrest.* classes, similar to the issue described in  more recent version of Hamcrest (e.g. 1.2.1) to declare the Hamcrest dependency in front of JUnit; not very nice. I see that you did define the hamcrest-core dependency in the POM, but since the class files are also shipped this has no effect.</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit 4.9 released!</header>
    <body>Not really that easy.  In this case, the bug was that I was creating a jar named junit-dep-XXX.jar, with the correct contents, but due to an obscurity in ant, junit-XXX.jar was being uploaded to maven under the artifact id junit-dep.  So I'd like to automatically make sure that what's in the central repo has the right contents. On Thu, Sep 8, 2011 at 3:43 PM, Malte Finsterwalder indeed not available in Maven central; we had to manually deploy them to our corporate Nexus instance. org.hamcrest.* classes, similar to the issue described in  more recent version of Hamcrest (e.g. 1.2.1) to declare the Hamcrest dependency in front of JUnit; not very nice. I see that you did define the hamcrest-core dependency in the POM, but since the class files are also shipped this has no effect. to</body>
  </mail>
  <mail>
    <header>Documentation</header>
    <body>The information about JUnit is across three different places: junit.org, junit.sourceforge.net and github. Additionally some information is missing or very hard to find (new features like rules, current version, how to contribute, ...) I would like to have one site with all the information. This makes it easier to find the information and JUnit would look more professional. IMHO the github pages are a good place for the JUnit documentation, because we can use all the git(hub) features for creating the documentation. What do you think? Stefan Birkner</body>
  </mail>
  <mail>
    <header>Re: JUnit 4.9 released!</header>
    <body>Maybe it's not possible. If you use junit-dep with hamcrest classes and together with Hamcrest 1.2, the classloader decides, whether it uses the classes of the junit jar or the classes of the hamcrest jar. Therefore you get compilation errrors on one machine and on another machine everything is fine. I think automation of the upload procedure is the better solution for not having the junit-dep-4.9 problem again. Stefan Birkner indeed not available in Maven central; we had to manually deploy them to our corporate Nexus instance. org.hamcrest.* classes, similar to the issue described in  more recent version of Hamcrest (e.g. 1.2.1) to declare the Hamcrest dependency in front of JUnit; not very nice. I see that you did define the hamcrest-core dependency in the POM, but since the class files are also shipped this has no effect. to</body>
  </mail>
  <mail>
    <header>Re: JUnit 4.9 released!</header>
    <body>David, I just sent you an email on the address I found on your homepage. It contains an attachment with a maven project that fails if the JUnit JAR is shipped with hamcrest-core-1.1 classes. It's not optimal, but it's a start, I guess. Regards, Stephan indeed not available in Maven central; we had to manually deploy them to our corporate Nexus instance. contains org.hamcrest.* classes, similar to the issue described in  a more recent version of Hamcrest (e.g. 1.2.1) to declare the Hamcrest dependency in front of JUnit; not very nice. I see that you did define the hamcrest-core dependency in the POM, but since the class files are also shipped this has no effect. to Central?</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit 4.9 released!</header>
    <body>So could the test be: 1) Download file from repro 2) Check content Greetings, indeed not available in Maven central; we had to manually deploy them to our corporate Nexus instance. org.hamcrest.* classes, similar to the issue described in  more recent version of Hamcrest (e.g. 1.2.1) to declare the Hamcrest dependency in front of JUnit; not very nice. I see that you did define the hamcrest-core dependency in the POM, but since the class files are also shipped this has no effect. to Central?</body>
  </mail>
  <mail>
    <header>Re: Documentation</header>
    <body>I'd say that documentation is part of the product, and therefore should start in the same git repo as the Java sources, and be versioned with them. A simple approach would be to follow Mockito's approach, and make the Javadoc the full documentation (at least, I've never needed to look elsewhere). The process would then be a case generating the javadoc into the site repo on github, committing and publishing it. I think this should be as automated as possible.  JUnit is a bit off on it's founder's XP credentials, and part of that seems to be an allergy to Maven.  We should be able to release JUnit from a button on a build server :) junit.sourceforge.net and github. Additionally some information is missing or very hard to find (new features like rules, current version, how to contribute, ...) to find the information and JUnit would look more professional. IMHO the github pages are a good place for the JUnit documentation, because we can use all the git(hub) features for creating the documentation.</body>
  </mail>
  <mail>
    <header>Re: Documentation</header>
    <body>+1 I think junit.org should be that site it should have links to 'other resources' clearly definining what these resources are good for (eg. source code repository ...) All these other resources should link back in a very prominent way to junit.org. Something like &amp;lt;if you aren't looking for the SOURCECODE REPOSITORY, you'll find more information at the main site junit.org Jens junit.sourceforge.net and github. Additionally some information is missing or very hard to find (new features like rules, current version, how to contribute, ...) to find the information and JUnit would look more professional. IMHO the github pages are a good place for the JUnit documentation, because we can use all the git(hub) features for creating the documentation.</body>
  </mail>
  <mail>
    <header>Re: Documentation</header>
    <body>Yes.  This is a pain for me, as well. Sourceforge.net is purely vestigial.  The moment there's a great, authoritative master location to link to, I'll do what it takes to kill sourceforge and point it there. junit.org is an oddity.  For reasons that predate me and I only dimly understand, junit.org was registered back in 2000 by Object Mentor. To my knowledge, it has never been actively maintained by any of the active maintainers of the JUnit source.  The site currently there (developed by Ben Rady and a merry crew roughly four years ago) is one of the better incarnations of the site.  However, its design presupposed that the junit.org site itself would serve as an active community, and I think that never fully materialized, with this mailing list and, now, github, being the main points of vibrancy. To me, I think the ultimate solution would be a site accessible at   information available at the current junit.org site.  I'd have to talk to a couple of stakeholders to see if this can be made to happen. junit.sourceforge.net and github. Additionally some information is missing or very hard to find (new features like rules, current version, how to contribute, ...) to find the information and JUnit would look more professional. IMHO the github pages are a good place for the JUnit documentation, because we can use all the git(hub) features for creating the documentation.</body>
  </mail>
  <mail>
    <header>Re: Documentation</header>
    <body>On Fri, Sep 9, 2011 at 5:49 AM, Neale Upstone I'm open to any and all improvements to the javadoc that add to discoverability of features.  Mockito is interesting, in that the release notes, how-to doc, etc., are baked directly into the javadoc. This didn't immediately appeal to me, because I've found that long-form text and code samples in javadoc are a pain to maintain, because of the interaction of HTML and Java syntaxes.  Do you know if the mockito team uses tooling that makes it easier? Yes.  Of the code I have personally written for JUnit over the last 8 months, easily over half has been automation of build, release, and documentation. To be fair, to my knowledge, no one's getting paid to work 40-hour weeks on JUnit, so other XP practices also have to bend.  :-) I'm not sure about allergy.  JUnit predates the first glimmer of maven by at least three years, and we've been fairly enthusiastic about community contributions to make working with JUnit and maven easier. Donations toward acquiring cycles happily accepted.  ;-) junit.sourceforge.net and github. Additionally some information is missing or very hard to find (new features like rules, current version, how to contribute, ...) to find the information and JUnit would look more professional. IMHO the github pages are a good place for the JUnit documentation, because we can use all the git(hub) features for creating the documentation.</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit 4.9 released!</header>
    <body>together with Hamcrest 1.2, the classloader decides, whether it uses the classes of the junit jar or the classes of the hamcrest jar. Therefore you get compilation errrors on one machine and on another machine everything is fine. having the junit-dep-4.9 problem again. The upload procedure was automated.  It was automated wrong.  :-) indeed not available in Maven central; we had to manually deploy them to our corporate Nexus instance. org.hamcrest.* classes, similar to the issue described in  more recent version of Hamcrest (e.g. 1.2.1) to declare the Hamcrest dependency in front of JUnit; not very nice. I see that you did define the hamcrest-core dependency in the POM, but since the class files are also shipped this has no effect. to Central?</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit 4.9 released!</header>
    <body>I got it.  Thanks!` an attachment with a maven project that fails if the JUnit JAR is shipped with hamcrest-core-1.1 classes. It's not optimal, but it's a start, I guess. indeed not available in Maven central; we had to manually deploy them to our corporate Nexus instance. contains org.hamcrest.* classes, similar to the issue described in  a more recent version of Hamcrest (e.g. 1.2.1) to declare the Hamcrest dependency in front of JUnit; not very nice. I see that you did define the hamcrest-core dependency in the POM, but since the class files are also shipped this has no effect. from needs to Central?</body>
  </mail>
  <mail>
    <header>Re: Help: how to record execution trace?</header>
    <body>Dynamic analysis of Java code is an interesting research problem that is more general than JUnit or Eclipse.  For starters, you might want to look at projects like Daikon or Soot.  Good luck, tests¡¯fixing, I want to run existing test cases and record the track (the path and values of variables). How can I do that with JUnit and Eclipse. Thanks</body>
  </mail>
  <mail>
    <header>Concurrent assertions in JUnit</header>
    <body>Occasionally I come across the need to perform assertions from separate threads that are created during the course of a unit test. Typically, assertions performed from outside the context of the main test thread are meaningless since any failures/exceptions that occur go unnoticed by the main test thread. The solution involves setting up some shared state where failures are reported back to the main thread, then thrown, so that tests either pass or fail as expected. To make this a bit easier I created a simple JUnit extension, called ConcurrentUnit, which I wanted to share with the group:  Feedback is welcome and I hope that this is of some use to other JUnit users. Cheers, Jonathan</body>
  </mail>
  <mail>
    <header>Re: Concurrent assertions in JUnit</header>
    <body>Jonathon, Looks really nice.  Did you look into making it a JUnit Rule?  Would you be interested in contributing it to the junit.contrib project? On Fri, Aug 19, 2011 at 11:42 AM, jonathan_halterman threads that are created during the course of a unit test. Typically, assertions performed from outside the context of the main test thread are meaningless since any failures/exceptions that occur go unnoticed by the main test thread. back to the main thread, then thrown, so that tests either pass or fail as expected. To make this a bit easier I created a simple JUnit extension, called ConcurrentUnit, which I wanted to share with the group:</body>
  </mail>
  <mail>
    <header>Re: Concurrent assertions in JUnit</header>
    <body>I haven't tried it as a MethodRule yet, but it looks like that should actually work well. I'll take a stab at that when I get a chance. Jonathan threads that are created during the course of a unit test. Typically, assertions performed from outside the context of the main test thread are meaningless since any failures/exceptions that occur go unnoticed by the main test thread. reported back to the main thread, then thrown, so that tests either pass or fail as expected. To make this a bit easier I created a simple JUnit extension, called ConcurrentUnit, which I wanted to share with the group: users.</body>
  </mail>
  <mail>
    <header>Test order in a TestSuite random on JDK7</header>
    <body>Hi, I am not sure if this was noticed (I have not seen any related post in this forum yet), but it seems that the order of execution of testXYZ methods in a TestCase subclass is random on JDK7. I believe randomness in a test execution is not good, it hurts reproducibility. Do you think JUnit should do something to mitigate the JDK7 behavior? -jt PS: Detailed description of my inquiry is available at</body>
  </mail>
  <mail>
    <header>Re: Test order in a TestSuite random on JDK7</header>
    <body>Jaroslav, It should be very simple to create a custom runner: And then @RunWith(Ordered.class) where it is important. On Mon, Aug 22, 2011 at 8:45 AM, Jaroslav Tulach</body>
  </mail>
  <mail>
    <header>Re: Test order in a TestSuite random on JDK7</header>
    <body>Jaroslav, I reverse the causation: my tests will be more valuable if they are isolated so that random execution order cannot affect their reproducibility. It has always been a deliberate design decision in JUnit that we would *not* guarantee the order of test execution. Regards, Kent</body>
  </mail>
  <mail>
    <header>Re: Test order in a TestSuite random on JDK7</header>
    <body>Dne Po 22. srpna 2011 18:05:44 Kent Beck napsal(a): Kent, yes this is a valid approach and I outlined that as 2nd or 3rd alternative at  Do you believe that reproducibility is well supported in current version of JUnit? -jt</body>
  </mail>
  <mail>
    <header>Re: Test order in a TestSuite random on JDK7</header>
    <body>It sounds like you want JUnit to do more for you. Reproducibility is currently supported for tests with certain properties (i.e. isolation). If you want reproducibility for tests without that property, you can implement it yourself. I'm satisfied with the current situation but I hear that you aren't. Kent</body>
  </mail>
  <mail>
    <header>Re: Test order in a TestSuite random on JDK7</header>
    <body>Jaroslav Tulach wrote on 22.8.2011 21:34: You can create your own test runner which overrides org.junit.runners.BlockJUnit4ClassRunner#computeTestMethods to return the methods in a predictable order. A simple sorting order is to sort by method name. It's also possible to sort by line number, though it requires reading the debug information from the bytecode. I've created a utility  originally wrote it for JDave to sort its test methods, because when using method names as documentation their order matters (see  -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Javadoc down...</header>
    <body>All, Due to issues with github that I'm still working out, the "latest JavaDoc" link from junit.org is broken.  Hopefully this will only take 24 hours or less.  In the meantime, feel free to use  Thanks,</body>
  </mail>
  <mail>
    <header>Re: Test order in a TestSuite random on JDK7</header>
    <body>Thanks David for your "Ordered extends BlockJUnit4ClassRunner" solution. The problem however is that majority of our tests are still using JUnit3. Is there a suggested way to convince JUnit3 runner to order the tests? I'd like a way to reproduce the failure on a continuous build server locally to help me find problems in existing tests and make them properly isolated. Currently I see little support to help me analyze failures related to random execution order of test methods. Here in given advices may help for JUnit4, but not for our existing JUnit3 test suites harnessed by Ant. -jt</body>
  </mail>
  <mail>
    <header>JUnit 4.9 released!</header>
    <body>Hello, everyone.  We're happy to announce the release of JUnit 4.9. This release's theme is Test-class and suite level Rules.  More information linked from  release notes below. Note: please remember that until some website issues are cleared up, the direct path to the new JavaDoc is at  Share and enjoy, and please try it out and give us feedback.  Thanks, Your friendly neighborhood JUnit maintainers ## Summary of Changes in version 4.9, final ## Release theme: Test-class and suite level Rules. ### ClassRule ### The `ClassRule` annotation extends the idea of method-level Rules, adding static fields that can affect the operation of a whole class.  Any subclass of `ParentRunner`, including the standard `BlockJUnit4ClassRunner` and `Suite` classes, will support `ClassRule`s. For example, here is a test suite that connects to a server once before all the test classes run, and disconnects after they are finished: @RunWith(Suite.class) @ClassRule @Override @Override ### TestRule ### In JUnit 4.9, fields that can be annotated with either `@Rule` or `@ClassRule` should be of type `TestRule`.  The old `MethodRule` type, which only made sense for method-level rules, will still work, but is deprecated. Most built-in Rules have been moved to the new type already, in a way that should be transparent to most users.  `TestWatchman` has been deprecated, and replaced by `TestWatcher`, which has the same functionality, but implements the new type. ### Maven support ### Maven bundles have, in the past, been uploaded by kind volunteers.  Starting with this release, the JUnit team is attempting to perform this task ourselves. ### LICENSE checked in ### The Common Public License that JUnit is released under is now included in the source repository. ### Bug fixes ### - github#98: assumeTrue() does not work with expected exceptions - github#74: Categories + Parameterized - github#38: ParentRunner filters more than once - github#248: protected BlockJUnit4ClassRunner#rules method removed from 4.8.2 - github#187: Accidental dependency on Java 6 Thanks to `@kcooney` for: - github#163: Bad comparison failure message when using assertEquals(String, String) - github#227: ParentRunner now assumes that getChildren() returns a modifiable list ### Minor changes ### - Backed out unused folder "experimental-use-of-antunit", replaced by - Various Javadoc fixes Thanks to `@kcooney` for: - Made MultipleFailureException public, to assist extension writers. - github#240: Add "test" target to build.xml, for faster ant-driven testing. - github#247: Give InitializationError a useful message</body>
  </mail>
  <mail>
    <header>Re: JUnit 4.9 released!</header>
    <body>Nice one David! Many thanks for the diligent effort that has gone into this.</body>
  </mail>
  <mail>
    <header>Re: Test order in a TestSuite random on JDK7</header>
    <body>On Tue, Aug 23, 2011 at 6:58 AM, Jaroslav Tulach &amp;lt;jaroslav.tulach@... Try this. For each TestCase where it fails due to a changing of the test order, add a suite method that reorders the tests I'm note 100% sure that Ant will use the suite() methods, but it should.</body>
  </mail>
  <mail>
    <header>Re: JUnit 4.9 released!</header>
    <body>I just had to click the button, it turns out.  It should now be promoted.  Please let me know if it looks that way to you (since I'm still, obviously, new at this).</body>
  </mail>
  <mail>
    <header>Re: JUnit 4.9 released!</header>
    <body>Great! I see you've already staged it at oss.sonatype.org - what still needs to happen before that staging repository gets promoted into Maven Central? Max.</body>
  </mail>
  <mail>
    <header>Re: JUnit 4.9 released!</header>
    <body>Yes, that looks fine. You probably also want to either promote or drop - probably drop - the remaining active staging repositories containing 4.9 beta releases from oss.sonatype.org. Max.</body>
  </mail>
  <mail>
    <header>Re: JUnit 4.9 released!</header>
    <body>So, one minute--does this mean that the beta staging repositories that I closed, but didn't release, were not available to users for beta testing?</body>
  </mail>
  <mail>
    <header>Re: Javadoc down...</header>
    <body>FYI: javadoc is back up in its usual location.  Share and Enjoy.</body>
  </mail>
  <mail>
    <header>Re: Re: Javadoc down...</header>
    <body>am happy ________________________________ To: junit@yahoogroups.com Sent: Wednesday, August 24, 2011 12:50 PM Subject: [junit] Re: Javadoc down... Â  FYI: javadoc is back up in its usual location.  Share and Enjoy. David Saff</body>
  </mail>
  <mail>
    <header>Re: JUnit 4.9 released!</header>
    <body>Hi David, W.r.t. your last question: as far as I could tell the beta versions were indeed not available in Maven central; we had to manually deploy them to our corporate Nexus instance. Anyway, I just updated to JUnit 4.9 and noticed that the maven JAR contains org.hamcrest.* classes, similar to the issue described in  This is not the end of the world, but it requires people that want to use a more recent version of Hamcrest (e.g. 1.2.1) to declare the Hamcrest dependency in front of JUnit; not very nice. I see that you did define the hamcrest-core dependency in the POM, but since the class files are also shipped this has no effect. I wonder: is this bundling on purpose, and if not, will it be corrected? Kind regards, Stephan</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit 4.9 released!</header>
    <body>It was an accident, and will be corrected.  Unfortunately the next few days are personally very busy, so I can't give a firm ETA.  Looks like the risks of having a non-maven-expert administrator handling the maven jars were not overblown. indeed not available in Maven central; we had to manually deploy them to our corporate Nexus instance. org.hamcrest.* classes, similar to the issue described in  more recent version of Hamcrest (e.g. 1.2.1) to declare the Hamcrest dependency in front of JUnit; not very nice. I see that you did define the hamcrest-core dependency in the POM, but since the class files are also shipped this has no effect.</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit 4.9 released!</header>
    <body>Don't worry, David! You will soon be a "maven expert" enough, I'm sure. And it's probably still quicker to get junit into maven this way. Greetings,</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit 4.9 released!</header>
    <body>As far as I know, beta versions are never allowed in Maven Central, you need to use the beta repository (and tell your pom to point there). -- Cédric</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit 4.9 released!</header>
    <body>I think all it means is that Maven Central won't accept artifacts labeled "SNAPSHOT". -- CÃ©dric</body>
  </mail>
  <mail>
    <header>Re: JUnit 4.9 released!</header>
    <body>Interesting. My experience is that it depends on the project; when I run `mvn versions:display-dependency-updates` I frequently see alpha and beta versions. This is especially so for Jersey, but I also recall seeing it for Antlr. See e.g. these versions: Regards, Stephan</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit 4.9 released!</header>
    <body>That's an interesting one... I've got a project where I've pushed milestone releases into Maven Central in recent months (e.g. as 1.0.0.M1 , M2 ). I guess a beta is a different story as the beta releases and final release should only differ in any bugs being fixed, not in terms of features. It'll be interesting to when my beta cycle starts (with 1.0.0.RC1) :)</body>
  </mail>
  <mail>
    <header>Junit structure</header>
    <body>Hi Everyone, I have a simple question: I have downloaded the source of JUnit and I would love to learn how the structure was designed and how the execution works. I tried to read all the code but sometimes I get confused and frustrated, therefore here is my question: Where can I find documentation about the *structure* of Junit? Thank you all for your time</body>
  </mail>
  <mail>
    <header>Re: Help: how to record execution trace?</header>
    <body>What are you testing? PeterJ testsÂ¡Â¯fixing, I want to run existing test cases and record the track (the path and values of variables). How can I do that with JUnit and Eclipse. Thanks</body>
  </mail>
  <mail>
    <header>Hello JUnit mates !!!</header>
    <body>I am very new to JUnit and really want to learn it. So guys, could someone please help me out. I have been to the site junit.org and started with it. So I need tips and suggestions to improve myself....</body>
  </mail>
  <mail>
    <header>Re: Chaining of rules</header>
    <body>I would prefer to give rules in the order they are applied. How would I name the methods? Hmmm.... Maybe just: RuleChain.first(new FirstRule()).next(new SecondRule()).next(new ThirdRule()); ? Greetings, which is a rule itself: the inner rule:  b998c7</body>
  </mail>
  <mail>
    <header>Re: Hello JUnit mates !!!</header>
    <body>What are you looking for? A Book about Unit Testing? There is Kent Becks book: Test Driven Development: By Example or Steve Freeman and Nat Pryce: Growing Object-Oriented Software, Guided by Tests Greetings, please help me out. I have been to the site junit.org and started with it. So I need tips and suggestions to improve myself....</body>
  </mail>
  <mail>
    <header>Re: Chaining of rules</header>
    <body>The lack of order of rules is by design. Rules are intended to be composeable and order-independent. I would need a compelling use case to tighten this constraint. Kent which is a rule itself: the inner rule:  b998c7</body>
  </mail>
  <mail>
    <header>Re: Chaining of rules</header>
    <body>and order-independent. I would need a compelling use case to tighten this constraint. This makes total sense to me in general and I would not change it! But if I do have a problem that needs a specific order, I think the trick to use a chaining Rule sounds like the best workaround I can think of right now. And that's what it is to me: A workaround. For example in my current project: We have a "registry" for dependency lookup. This needs to be initiated before some other things can happen. We don't currently have a Rules problem here, but I can imaging, that such a quirky design can lead to such problems. And then a workaround might be helpful. (Yes, this really is a design flaw in the application and we are working on fixing it soon.) Greetings,</body>
  </mail>
  <mail>
    <header>Re: Chaining of rules</header>
    <body>Kent, I've seen several examples in the wild.  Easiest to explain is this: I have an ExternalResource that starts and stops an expensive server.  I also have a Timeout rule.  If the Timeout is applied around the ExternalResource, then I am asserting that server startup + test + server stopping all happens within the timeout.  If the ExternalResource is applied around the Timeout, then I am ignoring the server startup time, and just asserting about the test time. One possibility is to create specialized TimeoutExternalResource and ExternalResourceTimeout rules that bake-in the ordering.  I like the RuleChain approach better, because it encourages separation of concerns. and order-independent. I would need a compelling use case to tighten this constraint. which is a rule itself: the inner rule:  b998c7</body>
  </mail>
  <mail>
    <header>Re: Chaining of rules</header>
    <body>I agree with David. I am having the pretty much this scenario right now. I think it is related to rules doing fundamental different things: - doing setup/tear down work - doing runtime manipulation of the test execution, like executing it in parallel or in special thread (e.g. Swing EDT) - doing additional assertions like the mentioned Timeout Rule. If you have rules from different groups you need to control the order of things very often. Jens</body>
  </mail>
  <mail>
    <header>Re: Chaining of rules</header>
    <body>I don't like this idea. Using something like 'next' basically refers to the order in which the Rules are called. But for most Rules I have seen, the interesting stuff happens in the Statements. So people say Rule, but really mean Statement. And for Statements 'next' doesn't make sense, while 'enclosed' does. Jens ? RuleChain, which is a rule itself: with the inner rule:  b998c7</body>
  </mail>
  <mail>
    <header>Re: Chaining of rules</header>
    <body>+1 for the idea and +1 for the first variant. Jens which is a rule itself: the inner rule:  b998c7</body>
  </mail>
  <mail>
    <header>ErrorCollector Question</header>
    <body>Good Day. We are starting to use ErrorCollector with our Selenium test. What I wanted to do next was to dump the exception that the test is out putting at the end of the test to the db. I believe this is comming from the errorcollector. How can I get that? Thanks, Law</body>
  </mail>
  <mail>
    <header>Re: Chaining of rules</header>
    <body>A challenge in this naming is that if I want this ordering: Rule A has control Rule B has control Test method has control Rule B has control Rule A has control Then "first" and "next" are somewhat ambiguous: - A is "first" in the sense that it gets control first - B is "first" in the sense that, as somewhat of an implementation detail, it is wrapped around the test before A is wrapped around B. Or perhaps if I didn't know the implementation, I would find only the first meaning interesting? On Mon, Aug 1, 2011 at 3:56 AM, Malte Finsterwalder ? which is a rule itself: the inner rule:  b998c7</body>
  </mail>
  <mail>
    <header>Re: ErrorCollector Question</header>
    <body>Law, You might want to use your own subclass of ErrorCollector: Will that work? do next was to dump the exception that the test is out putting at the end of the test to the db. I believe this is comming from the errorcollector. How can I get that?</body>
  </mail>
  <mail>
    <header>Re: Chaining of rules</header>
    <body>Recently I had this kind of example: I have a AppRunner rule which is responsible for starting/stopping the application before/after its end-to-end tests. The AppRunner in turn uses the org.junit.rules.TemporaryFolder rule to create its temporary directories. At first I had code like this: But since that didn't work quite right, I had to embed the TemporaryFolder inside AppRunner and manually wrap it around AppRunner's execution. BTW, it would be better for TemporaryFolder to throw an exception if its getRoot/newFile/newFolder method is called before create() is called. When I was using it incorrectly, my tests were polluting the current working directory with temporary files, because new File(null, fileName) produces a relative path. I'll go file an issue about this... David Saff wrote on 4.8.2011 20:45: -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Re: Chaining of rules</header>
    <body>The separation of concerns is essential. If somebody needs to create a composition of two rules, we should provide the tool. Imagine a UserProviderRule and a ProductRule. The UserProviderRule creates a user and deletes it after the test. The ProductRule is configured with a user and adds a product to its shopping cart and deletes it after the test. Both rules work pretty for itself, but we could create a nice rule by combining the UserProviderRule and the ProductProviderRule. The new rule will create a user with a product and delete both after the test. composeable and order-independent. I would need a compelling use case to tighten this constraint. RuleChain, which is a rule itself: with the inner rule:  b998c7</body>
  </mail>
  <mail>
    <header>How could i get a Testname / Test status in JUnit</header>
    <body>I am new to JUnit . I am working on the ways to get a output like classname / function name / status / description. I figured that there is no other way to get success test name other than FrameworkMethod using Rule. Is it possible to set a Rule to a suite which s running with the help of JUnitCore/textui.Thx in advance.!! Edit:- I tried testwatchman with Junit 4.9b2 but executing suites is not working for me. Any help would be appreciated. ---------- e.getClass().getSimpleName() ---------- ---------- ----------</body>
  </mail>
  <mail>
    <header>Re: How could i get a Testname / Test status in JUnit</header>
    <body>murali, There is currently no even moderately easy way* to put something in a suite class that will cause a Rule to be applied to every method in every contained test class, which is what you appear to be doing.  If you're using JUnitCore, you should be able to use JUnitCore.addRunListener to get what you want, though.  Let me know if I've understood the problem right. * However, there is a way that you can write a subclass of Suite that _does_ enable this kind of functionality.  If someone wanted to write such a subclass, and submit it as a project in junit.contrib, I'd welcome it... FrameworkMethod using Rule. Is it possible to set a Rule to a suite which s running with the help of JUnitCore/textui.Thx in advance.!! working for me. Any help would be appreciated. e.getClass().getSimpleName()</body>
  </mail>
  <mail>
    <header>Re: Chaining of rules</header>
    <body>Back to naming, I think: 1) I like having the outermost rule first in the chain, because, among other reasons, if the ordering matters, it's because the inner rules are depending on the context provided by the outer rules, so outermost to innermost is the right conceptual ordering. 2) I like outerRule, or outermost, as the first method name.  I prefer "around" to "enclose", because the connotations are similar, but "around" will be familiar to users of Lisp's defadvice macro who are currently using JUnit (yes, both of us...) which is a rule itself: the inner rule:  b998c7</body>
  </mail>
  <mail>
    <header>Parameterization and Rules</header>
    <body>Hi I had some problem joining the mailing list earlier, but thanks to David i am able to post now. In the meantime I did a blog post regarding my concerns and got a comment from David. I did reply and I wont repeat myself here. You can read the full post on  can continue the discussion here. Comments? Cheers, -Kristoffer</body>
  </mail>
  <mail>
    <header>Introductory JUnit questions</header>
    <body>Hello group, As a novice JUnit user (I tried it briefly 5 years ago but never got very far with it), I want to use it for a work project.  We code in the latest version of Java using NetBeans 6.9.1.  I was able to generate the test class: AngleTest) and had some questions just from playing around with it for a few minutes yesterday: 1. It seems that since NB has built-in JUnit support (i.e. Run File), I don't need to have an associated Main class under the Test Packages. True or false? 2. If I do decide to use a Main class as my test harness for my JUnit classes, I assume I have to declare an instance of the test class.  True or false? 3. Furthermore, if I were to instantiate the test class and run it under my Main, wouldn't I basically have to make a call to each test* method explicitly?  It seems like "Run File" does that for me. 4. I was able to just do "Run File" on AngleTest.java and it ran for me in a split screen window at the bottom of NB.  Kind of cool - gives me pass/fail and TTE (time to execute) stats.  I noticed, however, that everything failed because JUnit by default puts in some boilerplate lines of code: - a line to compare the actual result with the expected result of a method invocation (this only happens sometimes, not on all methods such as a void print()) - a call to assertEquals() on both operands to make sure they match - a comment that tells me to review the generated code and remove the default call to fail() - the call to fail() all of the time The main questions I have about this arrangement are: 5. Am I supposed to go ahead and customize the values and/or code in the auto-generated test methods to test what I want?  What's the better approach: Add more code for more test cases inside the method, or keep changing the existing code and re-running it until I'm satisfied with the test results? Here's an example method from AngleTest (testing the rad2deg() method): 6. If I deliberately set the result and expResult to be two different things and also remove the call to fail(), will assertEquals() take care of raising a flag saying, "Hey dummy, your results didn't match!"? 7. What happens if I set a value for the angle in degrees and make a call to something like setDegrees(value)?  How can that even fail anyway (i.e. what's the point of having the test method)? 8. If I just remove the auto-generated calls to fail() as the comment suggests, then how am I going to know if my test is failing or not? Essentially what I'm seeing is that I can rig the test however I want, which is not entirely what I'd like to happen. My class under test (CUT) Angle is just that: A class that stores different representations of angles (degrees and radians) for my project.  (Please don't suggest that I use any such existing class already out there...I write all my code from scratch for several reasons.) Thanks for your patience...I can't find any other current appropriate forum to ask these questions.  I want to take full advantage of JUnit's capabilities to help me write unit test cases. Mike P.S. I realize it would probably be helpful to attach both Angle.java and AngleTest.java.  If anyone has a suggestion for what to do about that, I'll gladly post them.  (Neither class is proprietary.)</body>
  </mail>
  <mail>
    <header>Mixing parameterized and non-parameterized tests in the same test class</header>
    <body>I have a situation where I'm using the Parameterized runner in a test class, where some of the tests are parameterized but others are not. Here is the test class in question. The test class is checking the dependencies and contents of the Maven artifacts produced by the build. I have some special build requirements which require me to use Maven Shade Plugin to bundle external (and in one case also internal) dependencies into the same JAR, and these build tests have been extremely helpful (more details at the first episodes of   end-to-end-tests/src/test/java/fi/jumi/test/BuildTest.java The first two tests are parameterized. They check each artifact for its expected dependencies and contents. The third test is checking one of the artifacts which was checked already earlier, but this time a copy the JAR which which is embedded inside another JAR (it's used in bootstrapping the application). Since this test is slow (~150ms), I want to avoid running it many times. Logically it's related to the things checked by the parameterized tests, so I want to keep it close to them, but it itself is not parameterized. Right now I've solved the issue with a hack, so all but one parameterized execution skip the test. The fourth and fifth test are tests against all of the parameters. It's testing the test data, to make sure that some project-wide principles are followed (i.e. no visible dependencies to external libraries). These tests also are not parameterized. Fortunately they are quick, so I haven't tried to avoid running them many times. What are your suggestions for mixing parameterized and non-parameterized tests? Some creative use of nested classes? I've been thinking about extending Parameterized so that I can annotate which methods are parameterized and which are not, by adding either @ParameterizedTest or @NonParameterized annotations to the test methods. The non-parameterized methods would be run only once, probably using the first element in the test data (passing null to the constructor is another option; now it would fail in the constructor, but I should anyways relocate the couple of method calls which are now in the constructor). -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Re: Introductory JUnit questions</header>
    <body>Michael wrote on 11.8.2011 18:17: True. Nearly every testing and building tool out there finds all tests automatically. In the main method you would use  give it a list of all test classes (or suites which contain the test classes). JUnit will create the test class instances itself (actually once per test method) and call the test methods. It's NetBeans (or whichever tool you used) that generates the boilerplate, not JUnit. The best approach would be to write all tests manually. That way you can write meaningful tests which describe the features of the system. See  Try it. (The answer should be yes.) It won't fail. There is no point in testing things such as trivial setters/getters (and language features such as the `new` operator). Those will be tested indirectly when you write tests for features which use them. Write tests for (all) things which could possibly fail. To find out whether a test works, modify the production code so that it has a bug in the feature which is being tested by the test. Good tests fail: An even better way is to write the tests before the production code. First the test will fail because the system doesn't yet do the thing which is specified by the test. Write code until the test passes. Remove duplication and fix bad names ( Repeat. Here is a tutorial to get started:  I don't know whether this mailing list allows attachements, but whatever the case, it's always possible to use -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Re: Introductory JUnit questions</header>
    <body>What's a Main Class? I've never, ever used one ;-) No, you would bypass the main class, instantiate the specific class (Angle) directly and invoke methods on the instance. I don't use NB so I don't know how NB does it. Normally, JUnit calls the test method and the test method calls the method under test. No main involved anywhere. Just because some tool generated some code doesn't mean that the code is the right code; read an introductory book on writing unit tests, preferably using Test-Driven Development. Yes. You tell me! Your tests should specify what the software is supposed to do, not the other way around. See previous question. You would not need to ask all these questions if you had read the introductory tutorial on JUnit at least.. Just playing with the NB menu options doesn't teach you everything you need to know. Learning how to write good unit tests is something that will take more than a few minutes or hours. Best wishes, Gerard -- Gerard Meszaros 1-403-827-2967</body>
  </mail>
  <mail>
    <header>Re: Mixing parameterized and non-parameterized tests in the same test class</header>
    <body>end-to-end-tests/src/test/java/fi/jumi/test/BuildTest.java Don't. Put them in separate classes in the same (test) package. It is normal to have one class in the system under test verified by several test classes; there is no rule that says there has to be a 1:1 correspondence. You are over-complicating the problem. KISS! Best wishes, Gerard -- Gerard Meszaros 1-403-827-2967</body>
  </mail>
  <mail>
    <header>Re: Mixing parameterized and non-parameterized tests in the same test class</header>
    <body>On the other hand it doesn't feel great to separate tests based on a technical concern of the test framework. What should I name the classes? XTest and XParameterizedTest? I'd much rather sort my tests into logical groups based on some behavioural aspect if I separate them at all, If the grouping is according to behavioral aspects the testclasses can be named accordingly. I have never used ParameterizedTestCase but I half expected that the parameters would be passed as parameters to each test in which case it would be easy to separate them from non parameterized ones. I can see that the constructor approach has some maintanability benefits though... I'm not too keen on the idea of different annotations either. I think that there is no uncomplicated natural way to describe how a non parameterized test in a parameterized testcase works. Perhaps a variant of the parameterized testrunner that passes the parameters as arguments to each test? /J ----------------------------------------------------- Joakim Ohlrogge Agical AB Västerlånggatan 79, 2 tr 111 29 Stockholm, SWEDEN Mobile: +46-708-754004 Blog: johlrogge.wordpress.com Twitter: @johlrogge E-mail: joakim.ohlrogge@...  end-to-end-tests/src/test/java/fi/jumi/test/BuildTest.java</body>
  </mail>
  <mail>
    <header>Re: Mixing parameterized and non-parameterized tests in the same test class</header>
    <body>We've rather deliberately left Parameterized stunted.  Since you can't combine Runners, it wasn't end-user extensible in the usual ways. With the success of Rules, I hope to find a good extension hook that will let us do for data-driven tests what Rules have done for fixture preparation, so that everyone can drive data through their tests in their own ways. Until that happens, I think that Aviv Ben-Yosef's trick of using the Enclosed runner is the cleanest way to combine parameterized and non-parameterized tests:  On Fri, Aug 12, 2011 at 7:24 AM, Joakim Ohlrogge  end-to-end-tests/src/test/java/fi/jumi/test/BuildTest.java</body>
  </mail>
  <mail>
    <header>JUnit 4.9b4 (beta-)released</header>
    <body>Hello, everyone.  We're happy to announce the release of JUnit 4.9b4. This release's theme is Test-class and suite level Rules.  This beta release contains a number of community-authored fixes for regression errors in documentation and test class validation.  More information linked from  and release notes below.  Share and enjoy, and please try it out and give us feedback.  Thanks, Your friendly neighborhood JUnit maintainers ## Summary of Changes in version 4.9 [unreleased!] ## Release theme: Test-class and suite level Rules. ### ClassRule ### The `ClassRule` annotation extends the idea of method-level Rules, adding static fields that can affect the operation of a whole class.  Any subclass of `ParentRunner`, including the standard `BlockJUnit4ClassRunner` and `Suite` classes, will support `ClassRule`s. For example, here is a test suite that connects to a server once before all the test classes run, and disconnects after they are finished: @RunWith(Suite.class) @ClassRule @Override @Override ### TestRule ### In JUnit 4.9, fields that can be annotated with either `@Rule` or `@ClassRule` should be of type `TestRule`.  The old `MethodRule` type, which only made sense for method-level rules, will still work, but is deprecated. Most built-in Rules have been moved to the new type already, in a way that should be transparent to most users.  `TestWatchman` has been deprecated, and replaced by `TestWatcher`, which has the same functionality, but implements the new type. ### Maven support ### Maven bundles have, in the past, been uploaded by kind volunteers.  Starting with this release, the JUnit team is attempting to perform this task ourselves. ### LICENSE checked in ### The Common Public License that JUnit is released under is now included in the source repository. ### Bug fixes ### - github#98: assumeTrue() does not work with expected exceptions - github#74: Categories + Parameterized - github#38: ParentRunner filters more than once - github#248: protected BlockJUnit4ClassRunner#rules method removed from 4.8.2 - github#187: Accidental dependency on Java 6 Thanks to `@kcooney` for: - github#163: Bad comparison failure message when using assertEquals(String, String) - github#227: ParentRunner now assumes that getChildren() returns a modifiable list ### Minor changes ### - Backed out unused folder "experimental-use-of-antunit", replaced by - Various Javadoc fixes Thanks to `@kcooney` for: - Made MultipleFailureException public, to assist extension writers. - github#240: Add "test" target to build.xml, for faster ant-driven testing. - github#247: Give InitializationError a useful message</body>
  </mail>
  <mail>
    <header>Primitive types in method arguments: PrivilegedAccessor</header>
    <body>I added a method to Privileged accessor that makes it easier to call a function whose arguments are of primitive types. Hope this saves time for someone using it :) /** arguments.</body>
  </mail>
  <mail>
    <header>Re: Mixing parameterized and non-parameterized tests in the same test class</header>
    <body>I ended up creating a custom runner which subclasses Parameterized but filters the test methods so that methods annotated @NonParameterized are run only once. After figuring out how to hook into the Parameterized runner, it took only 15 minutes to write it. Here is the runner:  end-to-end-tests/src/test/java/fi/jumi/test/PartiallyParameterized.java And here is the test class which uses it:  end-to-end-tests/src/test/java/fi/jumi/test/BuildTest.java -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Help: how to record execution trace?</header>
    <body>I am a researcher at Beijing Institute of Technology. For my research in tests¡¯fixing, I want to run existing test cases and record the track (the path and values of variables). How can I do that with JUnit and Eclipse. Thanks</body>
  </mail>
  <mail>
    <header>How to ignore tests from MethodRule</header>
    <body>Hey I am trying to ignore tests from a MethodRule but the only way I have found to do that is to use AssumptionViolatedExcption which I don't really like. Is there a way to use a Statement that would cause the test to be ignored. Like e.g return new IgnoreTest(statement, "Reason") Best regards Rune</body>
  </mail>
  <mail>
    <header>Running the same test in different scenarios</header>
    <body>Hey all, I have a set of JUnit tests, that test the basic functionality of my services layer.  They're all coded against the interfaces, not the actual implementations.  Right now I have two different implementations.  I want to run the same set of tests against both implementations (in two different runs).  My question is how to arrange the test results so that reporting is useful?  I'm using Jenkins to run the tests and display the reports. Any idea would be appreciated, Thanks Andres</body>
  </mail>
  <mail>
    <header>Re:</header>
    <body>[This is a recording.] I'm on vacation July 1 - July 10. I'll be reading mail occasionally. Bill</body>
  </mail>
  <mail>
    <header>Re: Running the same test in different scenarios</header>
    <body>Andres, This sounds like a job for or "contract tests".  There's a couple patterns for implementing this--are you using JUnit 3 or 4?</body>
  </mail>
  <mail>
    <header>Re: Running the same test in different scenarios</header>
    <body>David, I'm using junit 4 with annotations. Would those patterns work? I looked briefly over the page you posted and will work. I was hoping to not have extra classes per each implementation, but I can deal with that. I'll try that tonight. Thanks</body>
  </mail>
  <mail>
    <header>JUnit 4.9b3 (finally) (beta-)released</header>
    <body>Five months and a dozen regression errors later, JUnit 4.9b3 is now ready for your testing pleasure. This release's theme is Test-class and suite level Rules.  For details and links, please see:  Thanks to everyone for the feedback and patches.  If no further regressions are found in the next week, this release will go final.</body>
  </mail>
  <mail>
    <header>Re: JUnit 4.9b3 (finally) (beta-)released</header>
    <body>Hi David, Can you elaborate on how MultipleFailuresException going public will help extension writers? I'm curious what the use cases were for this. Thanks. Bill -- Bill Venners Artima, Inc.</body>
  </mail>
  <mail>
    <header>Junit Testcase help</header>
    <body>Hello Group, Can any body give me rough code to test a method which returns list of objects.Actually it is a DAO method. class Dao public list A</body>
  </mail>
  <mail>
    <header>Re: Junit Testcase help</header>
    <body>It might help to give us more information about what it is you're actually trying to test.  Do you want to ensure the list has the correct entries in it?  What code have you got so far? -- Maybe she awoke to see the roommate's boyfriend swinging from the chandelier wearing a boar's head. Something which you, I, and everyone else would call "Tuesday", of course.</body>
  </mail>
  <mail>
    <header>Re: Junit Testcase help</header>
    <body>First of all, you want to test this DAO class, you MUST KNOW RETURN DATA (For this you can use dbunit,hsqldb...). And... your test class can be like this @Test Assert.assertEquals(1,alList.size());  //compare list size PS: When you know return data , you can compare your list contents -- *Musa YUVACI* *Yazýlým Geliþtirme Uzmaný / Bilgisayar Mühendisi* *Software Specialist / Computer Engineer* * musa.yuvaci@... * * www.musayuvaci.com *</body>
  </mail>
  <mail>
    <header>Why testMethod() should be void?</header>
    <body>Hello, I'm not sure I understand why this line code is needed in org.junit.runners.model.FrameworkMethod.validatePublicVoid(..). if (fMethod.getReturnType() != Void.TYPE) -- Regards, K. Gabriele --- unchanged since 20/9/10 --- P.S. If the subject contains "[LON]" or the addressee acknowledges the receipt within 48 hours then I don't resend the email. subject(this) â L(LON*) â¨ âx. (x â MyInbox â§ Acknowledges(x, this) â§ time(x) If an email is sent by a sender that is not a trusted contact or the email does not contain a valid code then the email is not received. A valid code starts with a hyphen and ends with "X". âx. x â MyInbox â from(x) â MySafeSenderList â¨ (ây. y â subject(x) â§ y â L(-[a-z]+[0-9]X)).</body>
  </mail>
  <mail>
    <header>Re: Junit Testcase help</header>
    <body>Thanks all for help. But my next doubt is how about if return data has many rows which I don't know how many.So how can I test these kind of methods.</body>
  </mail>
  <mail>
    <header>Re: Re: Junit Testcase help</header>
    <body>Hi, When you need to test this kind of dao class,  you create test area. You can do this way (It is my advice, you can do that another different way) , 1) Using hsqldb for database ( 2) Put some data in your database (you can use for that dbunit-  because you add them. 3) Finally you can test your dao. Because now you know your data You can reach informations about putting data to db before test. Shortly , you create a xml (dataset) file for your data and it is added to db by dbunit.  PS: I am not a native speaker, so that sorry for my english. -- *Musa YUVACI* *YazÄ±lÄ±m GeliÅtirme UzmanÄ± / Bilgisayar MÃ¼hendisi* *Software Specialist / Computer Engineer* * musa.yuvaci@... * * www.musayuvaci.com *</body>
  </mail>
  <mail>
    <header>Re: Why testMethod() should be void?</header>
    <body>Gabriele, It's mostly as a guide for users.  JUnit doesn't do anything with the return value (for example, if you saw a test method returning boolean, you might reasonably assume that the method could fail by returning "false").  The added return line would in most cases be noise. While there have been proposals for allowing a return type, and doing something with it, none have yet reached the levels of general usefulness and obvious syntax that would merit a change. On Sat, Jul 9, 2011 at 6:02 AM, Gabriele Kahlout â§ time(x) subject(x) â§ y â</body>
  </mail>
  <mail>
    <header>Re: Junit Testcase help</header>
    <body>These articles might be helpful as well:  e-part-1-one-to-rule-them/ e-part-2-the-mother-of-all-things/ e-part-3-cleaning-up-and-further-ideas/ They do use hibernate, but the principles still apply independently of your way to interface with the database kind regards Jens</body>
  </mail>
  <mail>
    <header>Re: JUnit 4.9b3 (finally) (beta-)released</header>
    <body>[+kcooney@...] Someone (I believe kcooney) wanted to write a Runner that needed to internally re-implement some of EachTestNotifier, but couldn't re-use all of it.  Kevin, can you recall the specific example?</body>
  </mail>
  <mail>
    <header>Re: Running the same test in different scenarios</header>
    <body>Andres, Sorry for the slow reply.  The patterns from that page should work. Did you give it a try?  Thanks,</body>
  </mail>
  <mail>
    <header>NoSuchMethodError: java.lang.String.isEmpty()</header>
    <body>Hi, I'm using JUnit 4.9b2 for a cross-platform project that needs to run on OS X 10.4, where the highest available version of Java is 1.5. When running JUnit tests with ant's junit task, I get the following error when a test fails: [junit] Exception in thread "main" java.lang.NoSuchMethodError: java.lang.String.isEmpty()Z String.isEmpty() was added in Java 1.6, so I guess I need to find an older version of JUnit that doesn't call that method. Can anyone tell me the newest version of JUnit that's compatible with Java 1.5? Thanks, Michael</body>
  </mail>
  <mail>
    <header>Re: Running the same test in different scenarios</header>
    <body>David, Yes,  I tried and it worked perfectly.  Thanks a lot.</body>
  </mail>
  <mail>
    <header>Re: Running the same test in different scenarios</header>
    <body>An interesting proposition, though, and something for the JUnit 4 crowd to consider: Contract Tests generally give rise to a group of abstract creation methods responsible for initialising the object under test into a particular state. We write one test subclass per implementation primarily to implement these abstract creation methods, effectively Factory methods, for each implementation. Could we do this in JUnit without n compile type classes? Would we prefer it? -- J. B. (Joe) Rainsberger ::  Your guide to software craftsmanship JUnit Recipes: Practical Methods for Programmer Testing 2005 Gordon Pask Award for contribution Agile Software Practice</body>
  </mail>
  <mail>
    <header>Re: Why testMethod() should be void?</header>
    <body>aha..it seemed to me that the reason was 'political/artificial'. By waiting it to 'reach the levels of general usefulness and obvious syntax' I think we are just sacrificing power users productivity/value in favor of  beginners - a classic struggle for interface designers. I'm strongly in favor of removing this limitation. I often  refactor functionality of tests in other helper methods, but sometimes all I really need (at that stage) is return some value created in a smaller test. Instead of wrapping it verbatim in a helper method, i'd just return it from the test. Thank you for the answer. â§ subject(x) â§ y â -- Regards, K. Gabriele --- unchanged since 20/9/10 --- P.S. If the subject contains "[LON]" or the addressee acknowledges the receipt within 48 hours then I don't resend the email. subject(this) â L(LON*) â¨ âx. (x â MyInbox â§ Acknowledges(x, this) â§ time(x) If an email is sent by a sender that is not a trusted contact or the email does not contain a valid code then the email is not received. A valid code starts with a hyphen and ends with "X". âx. x â MyInbox â from(x) â MySafeSenderList â¨ (ây. y â subject(x) â§ y â L(-[a-z]+[0-9]X)).</body>
  </mail>
  <mail>
    <header>Re: NoSuchMethodError: java.lang.String.isEmpty()</header>
    <body>Sorry for the noise - I see this was reported and fixed in 4.9b3, which works fine with Java 1.5. Thanks! Michael 10.4, where the highest available version of Java is 1.5. When running JUnit tests with ant's junit task, I get the following error when a test fails: java.lang.String.isEmpty()Z version of JUnit that doesn't call that method. Can anyone tell me the newest version of JUnit that's compatible with Java 1.5?</body>
  </mail>
  <mail>
    <header>Re: NoSuchMethodError: java.lang.String.isEmpty()</header>
    <body>Michael, Glad the new beta works for you.  Thanks, 10.4, where the highest available version of Java is 1.5. When running JUnit tests with ant's junit task, I get the following error when a test fails: java.lang.String.isEmpty()Z version of JUnit that doesn't call that method. Can anyone tell me the newest version of JUnit that's compatible with Java 1.5?</body>
  </mail>
  <mail>
    <header>Re: Why testMethod() should be void?</header>
    <body>Note that power users have a fairly easy out: you can create your own subclass of BlockJUnit4ClassRunner (KahloutRunner, say), which overrides validateTestMethods with the logic you want, and then opt-in to this logic by annotating your classes with @RunWith(KahloutRunner.class).  If you find yourself using this a lot, please consider contributing it to junit.contrib, so others can use it. On Fri, Jul 15, 2011 at 9:44 AM, Gabriele Kahlout "() this) â§ subject(x) â§ y â â§ time(x) subject(x) â§ y â</body>
  </mail>
  <mail>
    <header>Re: Running the same test in different scenarios</header>
    <body>So, you can use Paramterized or Theories in many cases.  Neither maps precisely onto every way that people often want to carry out this idea of "the same test in different scenarios", which is, in one way or another, a popular request.  I'd like to find a way to expose a hook that would make it easier for people to fine-tune what to do in these scenarios.</body>
  </mail>
  <mail>
    <header>Doubles Vs Floats Test</header>
    <body>Hello, I recently created and submitted a working patch for JUnit having to do with Assert.assertArrayEquals(float[],float[],delta) throwing exceptions with doubles instead of floats. It turns out that the floats were being casted to doubles, so I modified the code so that the floats remained as floats. At the request of David Saff, I attempted to write a test that would cause either the previous implementation that printed out thrown exceptions with doubles, or my new implementation that does the same with floats instead, to fail. So far, I have only been able to write tests with wide varieties of input that cause both implementations to fail, but not just one, just because of the messy nature of floats and doubles. I have run out of ideas of input to use (two float arrays to be compared against each other and a maximum delta when comparing the floats in the two arrays) that would cause only one implementation to fail. Any ideas? Regards, Juan</body>
  </mail>
  <mail>
    <header>Re: JUnit 4.9b3 (finally) (beta-)released</header>
    <body>Here are the related changes:  d2/src/main/java/org/junit/runners/model/MultipleFailureException.java 7#src/main/java/org/junit/runners/ParentRunner.java Prior to these changes, custom runners could not support MultipleFailureException (or ErrorCollector, which throws MultipleFailureException) without using internal classes (EachTestNotifier is an internal class). In addition, you could not easily test code that threw MultipleFailureException without depending on internal classes. -- Kevin</body>
  </mail>
  <mail>
    <header>Re: Doubles Vs Floats Test</header>
    <body>Hi Juan, Where can we find your patch?  Do you have a test that exhibits the original exception bug that you describe below? Assert.assertArrayEquals(float[],float[],delta) throwing exceptions with doubles instead of floats. It turns out that the floats were being casted to doubles, so I modified the code so that the floats remained as floats. At the request of David Saff, I attempted to write a test that would cause either the previous implementation that printed out thrown exceptions with doubles, or my new implementation that does the same with floats instead, to fail. So far, I have only been able to write tests with wide varieties of input that cause both implementations to fail, but not just one, just because of the messy nature of floats and doubles. I have run out of ideas of input to use (two float arrays to be compared against each other and a maximum delta when comparing the floats in the two arrays) that would cause only one implementation to fail. Any ideas? -- Björn Gustafsson</body>
  </mail>
  <mail>
    <header>Re: Doubles Vs Floats Test</header>
    <body>Hello Bjorn, Everything can be found on my pull request on GitHub:  Regards, Juan</body>
  </mail>
  <mail>
    <header>Chaining of rules</header>
    <body>Hello, sometimes you care about the order of rules. Therefore I created a RuleChain, which is a rule itself: @Rule public TestRule chain = RuleChain.outerRule(new FirstRule()).enclose(new What do you thing about the naming outerRule and enclose? What do you think about starting with the outer rule instead of starting with the inner rule: @Rule public TestRule chain = RuleChain.innerRule(new SecondRule()).enclosedBy(new If you want to see the code, look at  b998c7 The issue is ciao, stefan</body>
  </mail>
  <mail>
    <header>Re: Not knowing the tests in advance when providing a test runner</header>
    <body>I had the same issue with Specsy and used the workaround of running the tests when the Runner's getDescription() or run() method is called the first time. [1] This causes the issue that for example IDEA's test runner cannot report the test progress in real time - the tests are executed before the progress bar is even started. As a long-term solution I'm developing a new test runner [2] which solves this issue and has also a bunch of other improvements. The first release of that test runner should be some time later this summer. [1]  csy/junit/SpecsyJUnitRunner.scala [2] huntchrisalias wrote on 17.6.2011 15:43: -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Re: Not knowing the tests in advance when providing a test runner</header>
    <body>Jumi looks very interesting. It would be great with "one API to run them all and in darkness bind them" so to speak :) Basically talk to one API to get access to all the different test frameworks out there. I had an idea along those lines that focused on the other end sort of. To "just" be a rosetta stone, but not be the smallest common denominator between all test frameworks but rather embrace their differences. One of the big challenges was statuses and I think my thoughts were along the lines of RDF where one could express that things that "pending" is a kind of "ignored" for reporting purposes but differs in that it is yet to be implemented. Basically I approached things from the reporting side rather than the running side since most test frameworks seem to not want to deal with guis, ide integraton and such but focus on what a test looks like when it is written. When I read about Jumi I sort of hoped that Jumi could become this rosetta stone... but a more ambitious one. ----------------------------------------------------- Joakim Ohlrogge Agical AB Västerlånggatan 79, 2 tr 111 29 Stockholm, SWEDEN Mobile: +46-708-754004 Blog: johlrogge.wordpress.com Twitter: @johlrogge E-mail: joakim.ohlrogge@...  csy/junit/SpecsyJUnitRunner.scala</body>
  </mail>
  <mail>
    <header>Re: Not knowing the tests in advance when providing a test runner</header>
    <body>Joakim Ohlrogge wrote on 23.6.2011 0:20: Yes, that's the plan. :) The initial version of the testing framework facing public API can be viewed at  al/jumi/api That's one thing that I've also been wondering that what would be the best way to do it. There are quite many different reasons for having a skipped/ignored/pending test, and also with some testing frameworks they are marked pending during the execution of the test (e.g. ScalaTest's pendingUntilFixed) whereas some mark them before executing any test code (e.g. JUnit's @Ignore). At first I'll create the simplest possible solution and have just one concept of skipped tests. Later, once I get some feedback from users and framework developers, I'll gather the different use cases for skipping tests and think about supporting them better. -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Re: Not knowing the tests in advance when providing a test runner</header>
    <body>I think this is where my idea was different. I planned to delegate the running completely to other frameworks and just be flexible about what they can report back. So it becomes more of a presentation-issue (it seems to me that you are also focusing on running the tests, especially being clever about ordering the run sequence for high probability of catching failing tests fast). Being the requester for pending until fixed in scalatest I often miss the explicit pending in test-frameworks. The inspiration here is rspec. As you say, the difference between pending in this sense and just ignoring is that pending tests are run anyway but failures do not give a "red bar" since they are expected, it works well for "mockless to down" where you can flesh out tests from the top and pend until you can get something working. Once one of your initial tests work they change status from pending to fixed (or in scalatest, fail because a successful test is marked as pending) It also looks very promising with focus on performance. Have you looked into incremental running alá SBT or is that left to tools like SBT? I'm watching your repo now, got a bit tempted to support Jumi in poju4s (but first change the name of that project). /J</body>
  </mail>
  <mail>
    <header>Re: Not knowing the tests in advance when providing a test runner</header>
    <body>Joakim Ohlrogge wrote on 23.6.2011 11:48: Yes, I'm focusing on running the tests. From a testing framework's point of view, Jumi provides a similar interface as JUnit's @RunWith annotation and the related APIs. Jumi will also include things such as test discovery and starting up the JVM instance, which previously have been taken care of build tools and IDEs. There will also be a graphical UI, so that it would be usable even without IDE integration. My goal is to solve some cross-cutting concerns which affect the full tool chain of running tests. It will also try to minimize the small differences between running tests in a build tool vs IDE, and protect from the effects of bugs in IDEs' support for running tests (I've encountered many such issues). I know about SBT's incremental compiler. Does it also do something smart related running tests? SBT and FSC were my inspirations for class loader caching: Jumi will use a separate class loader for library JARs and cache it, so that when running tests there would not be the overhead of loading a large library's classes (for example on my C2Q6600 it takes over 200ms to load Guice the first time). With Java 6 and before, class loading is single threaded (Java 7 will have parallel classloading), so that has been a bottleneck for running tests in parallel. JUnit Max's way of reordering tests, so that those which fail the most likely are run first, is also one thing that I'll include. I have a habit of waiting for the tests to finish executing before typing more, so the UI will also give some feedback about when the most-likely-to-fail tests have been run, so that I could resume typing faster. And running tests in parallel is of course a must - finally some use for my 4 CPU cores. :) The above optimizations are especially aimed for speeding up test suites which run in a matter of seconds. If it takes 3 seconds to run all tests, a speedup of 0.5 seconds is big. I'll also provide something for big companies which are full of mediocre developers writing slow tests. Running tests in a cluster is outside the scope of Jumi's core functionality, but I'll create a commercial plugin for that. (Who wouldn't want to get a living from writing open source? ;) I'm not sure how much running tests in a cluster would speed up already fast test suites, because of network latency, but I'll try and see what I can do about it. -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Re: Not knowing the tests in advance when providing a test runner</header>
    <body>Sounds awesome. Will be following your progress with interest. Regarding SBT, there is the ~test-quick action that attempts to run only the tests relevant for what you have changed (my interpretation from using it, don't know /exactly/ how it optimizes). It seems SBT has quite excellent dependency analysis that allows for these kinds of features. Also, SBT's console really is such an obvious thing to do given hot spot optimizers etc so it's almost weird that maven, ant et al did not do this. Why wouldn't one keep the build/test-tool running? (given how long it takes to start a JVM and how much things can accelerate once the hotspot kicks in and does it's magic; usually several seconds into execution if I understand things correctly). I s this what you are after with class loader caching? to be able to keep a JVM-instance running over time and just swap in changed classes? ----------------------------------------------------- Joakim Ohlrogge Agical AB Västerlånggatan 79, 2 tr 111 29 Stockholm, SWEDEN Mobile: +46-708-754004 Blog: johlrogge.wordpress.com Twitter: @johlrogge E-mail: joakim.ohlrogge@...</body>
  </mail>
  <mail>
    <header>Re: Unable to test creation of XML document</header>
    <body>Mohan, It's been a while since I've done much with the xerces DOM.  While there may be those here that can answer your question, you may want to also ask on a list more specific to xerces, since the JUnit environment seems to be having little relevance to your results.  Good luck, exception a node where it is not permitted. com.fss.maps.security.xml.EncryptedData.getEncryptedData(EncryptedData.java:56) com.fss.maps.security.test.XMLEncryptionTestCase.testDocument(XMLEncryptionTestC\ ase.java:85) sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:25) org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java\ :44) org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:\ 15) org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:4\ 1) org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20\ ) org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28) org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76\ ) org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50\ ) com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunne\ r.java:97) com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter\ .java:192) com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:60) sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)</body>
  </mail>
  <mail>
    <header>Re: Not knowing the tests in advance when providing a test runner</header>
    <body>I'd encourage you to define a very clear separation between the static and dynamic model of your tests. Anything specified with an annotation (such as @Test(disabledUntilFixed = true)) is part of the static model. At runtime, a test that is "pending" is one that's in the worker pool but that hasn't been scheduled yet. TestNG supports skipped test in its static model (a skipped test method is a method that depends on another test that failed) but not in the runtime model, which I think is less interesting (maybe just for cute IDE progress display?). -- Cédric</body>
  </mail>
  <mail>
    <header>Re: Not knowing the tests in advance when providing a test runner</header>
    <body>Joakim Ohlrogge wrote on 23.6.2011 17:12: I'll look into it. I think Jumi should be able to find out to some degree that what are the dependencies between classes. I've got an idea that while idling Jumi would analyze the classes and do experimental test runs. For example it's possible to find out what classes a test depends on by running that test in a fresh class loader and monitoring that which classes get loaded. Yes. The class loader caching has two benefits: 1. The overhead of class loading of external libraries goes away. This is expected to speed up the test run by hundreds of milliseconds - maybe even a couple of seconds if there are lots of big libraries being used. 2. The JVM's is able to do JIT optimizations on the external libraries, and they will persists between test runs. This should speed up consistently by some percentage. Application code's class loaders will need to be thrown away between test runs [1], so those won't benefit from this optimization. Though it might be possible to keep some optimizations of the application code when working on a multi-module project and changing only some of the modules. My plan is that each module will have its own class loaders; one for production and one for test classes. This is also to make sure that the modules don't access classes to which they don't have access, and to allow different modules to use different versions of external libraries. If necessary, Jumi will launch one JVM per module - that would also enable module-specific working directories, to improve compatibility with Maven. [1] Unless doing something like JRebel and patching the classes on the fly, but I think that is a bit too risky. I value reliability more than performance. -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Implement "Rerun Tests - Failures First" in a custom runner</header>
    <body>Hi, I have implemented a custom JUnit runner to enable running tests from a legacy testing framework within Eclipse. I would like for this runner to support the "Rerun Tests - Failures First" feature in Eclipse, in order to make it easier to rerun failing tests without waiting for the passing tests before them. However, I wasn't able to find any hint in the APIs or on the Web how could my runner know that it is invoked in such a mode. I am looking mainly at the classes Runner ( RunNotifier ( Any ideas? Regards, Stoyan</body>
  </mail>
  <mail>
    <header>Re: Not knowing the tests in advance when providing a test runner</header>
    <body>Hi Esko, I also had to try and abstract over the various kinds of not-run tests in ScalaTest given I wanted to be able to run JUnit and TestNG tests through ScalaTest as well as ScalaTest tests. One thing I didn't implement was a notion of skipped tests, but I'm considering adding that, because it means something different than ignored or pending tests. What these mean in ScalaTest are: ignored: test used to work, but I broke it and don't have time to fix it now. Don't want to delete it, so marking it ignored and have a good intention of coming back and fixing it later pending: fleshing out the "specification" of code I likely haven't written yet, but for sure the test I haven't written yet (pendingUntilFixed is a subset of this, for a bug I haven't fixed yet.) skipped: test skipped due to some assumption needed by the test not being met, such as a database being available on the network. The skipped concept shows up in JUnit as assumptions, and in TestNG as dependent tests, I think. Bill  al/jumi/api -- Bill Venners Artima, Inc.</body>
  </mail>
  <mail>
    <header>Running each @Test in a separate ClassLoader</header>
    <body>Hi, How can I tell JUnit to run @Test methods in parallel with each method running in a separate Classloader for better isolation? The existing mechanism of running methods in the same Classloader results in race-conditions in slf4j, Guice and Grizzly because of the use of static variables. I'm working with the authors on getting this fixed but ultimately running in separate Classloaders is the best way to go because it guarantees isolation. Any ideas? Thanks, Gili</body>
  </mail>
  <mail>
    <header>Re: Running each @Test in a separate ClassLoader</header>
    <body>I don't know if there's a turn-key solution, just yet.  But you might be able to get there by (1) Creating a ClassLoaderPerTestRunner that overrides createTest:  JUnit4ClassRunner.java#L199 (2) Either: (2a) Annotating all the test classes that matter with @RunWith(ClassLoaderPerTestRunner.class), or (2b) Creating a custom RunnerBuilder and Suite that default to ClassLoaderPerTestRunner (let me know if you try this path and get stuck) Don't forget also: (3) Log a feature request at github to make this easier. Good luck, in a separate Classloader for better isolation? The existing mechanism of running methods in the same Classloader results in race-conditions in slf4j, Guice and Grizzly because of the use of static variables. I'm working with the authors on getting this fixed but ultimately running in separate Classloaders is the best way to go because it guarantees isolation. Any ideas?</body>
  </mail>
  <mail>
    <header>Re: Implement "Rerun Tests - Failures First" in a custom runner</header>
    <body>Stoyan, One first place to look for inspiration is MaxCore:  max/MaxCore.java Good luck, testing framework within Eclipse. I would like for this runner to support the "Rerun Tests - Failures First" feature in Eclipse, in order to make it easier to rerun failing tests without waiting for the passing tests before them. However, I wasn't able to find any hint in the APIs or on the Web how could my runner know that it is invoked in such a mode. I am looking mainly at the classes Runner ( RunNotifier (</body>
  </mail>
  <mail>
    <header>Re: Not knowing the tests in advance when providing a test runner</header>
    <body>Bill Venners wrote on 25.6.2011 0:36: Thanks for a good list of different use cases. I'm tempted to think of an abstraction to cover all those. Maybe it would be good to choose a new word... *opens up thesaurus* [1] How about "overlook" or "suppress"? :) One option would be to allow testing frameworks to use any terms they wish, and the test runner would just report a free-form string provided by the testing freamework. [1] -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Re: Not knowing the tests in advance when providing a test runner</header>
    <body>I think that JUnit marks tests that fail their assumption as "Failed", while TestNG marks them as "Skipped" (a status which doesn't exist in JUnit AFAIK). -- Cédric</body>
  </mail>
  <mail>
    <header>Re: Not knowing the tests in advance when providing a test runner</header>
    <body>For NUnit 3.0, I took a page from the Gallo project and defined four fundamental test statuses: Passed, Failed, Skipped and Inconclusive.  These can be extended by use of an arbitrary text field, e.g.: Skipped:Ignored. This allows a test runner/reporter to at least give some basic info without being extended. Extended runners could recognize specific test outcomes and report them separately. Note that in this design, Skipped and Inconclusive carry no notion of being a GoodThing, a BadThing or just neutral. In practice, for example, we might color the testing bar yellow for Skipped.Ignored but just plain Skipped doesn't have any effect on the test outcome. Charlie</body>
  </mail>
  <mail>
    <header>Re: Not knowing the tests in advance when providing a test runner</header>
    <body>JUnit reports tests that fails their assumption as "Assumption Failed".  Most runners translate this into "Passed", since most of the runners haven't grown new UI for the new status. 2011/6/27 CÃ©dric Beust â &amp;lt;cedric@...&amp;gt;:</body>
  </mail>
  <mail>
    <header>Re: Not knowing the tests in advance when providing a test runner</header>
    <body>Just to make it clear, the statuses translate as: 1) Passed: We know it works 2) Failed: We know it doesn't work. 3) Skipped: We _could_ know if it works, but have asked not to be told (because the information is redundant, or to save time, for example) 4) Inconclusive: We _can't_ know if it works Is that right?  I can dig that. I'm in favor of a categorization that we believe will serve without alteration for five years or so: there's too many runners to say "Oh, yeah, we thought of a fifth status!" and expect them all to catch up.</body>
  </mail>
  <mail>
    <header>Re: Not knowing the tests in advance when providing a test runner</header>
    <body>Hi David, The devil is of course in the details... see inline... Yes Yes, but we don't know why without further info. For example, an assertion may have failed or an unexpected exception may have been thrown. I currently recognize 'Failed', 'Failed:Error' and 'Failed:Cancelled'. The last one could equally well be treated as a sub-category of Inconclusive but I made it a failure because the cancellation is not something the test can control. No... The test never ran... OR we are treating it as if it never ran (since tests can be ignored dynamically in their setup. This is the most interesting category with options 'Skipped', 'Skipped:Ignored' and 'Skipped:Invalid' showing up in the Gui as grey, yellow and red respectively. I'm considering adding a 'Severity' field to the result so that this coloring (or other text display) is automatic. Yes. This is the one we use in Theories. My intent is that Inconclusive should have no effect on the success of a theory _unless_ all results are Inconclusive. I can't make up my mind what it should mean in a normal test. :-)</body>
  </mail>
  <mail>
    <header>Re: Running each @Test in a separate ClassLoader</header>
    <body>I implemented a TestSuite that runs each test in a separate class loader. It doesn't run them in parallel, however, but it might help you get started. You can find it here:  /sun/mail/test?rev=374 You'll find sample uses of it nearby, including here:  /sun/mail/util?rev=374 and here:  ax/mail/internet?rev=374 cowwoc2001 wrote on 06/25/11 10:44 AM: is</body>
  </mail>
  <mail>
    <header>Re: Not knowing the tests in advance when providing a test runner</header>
    <body>Hi All, This is all very interesting. One difference I see from ScalaTest is that a "theory" is not treated as a special kind of test. J/NUnit "theories" map to ScalaTest "properties." J/NUnit "assumptions" (when used with theories) map to ScalaTest "conditions." And J/NUnit "data points" map to a ScalaTest "table." So for this example from the JUNit 4.4 release notes: @RunWith(Theories.class) You might do this in ScalaTest: A false "whenever" expression is a failed "condition," that causes a "property evaluation" to be "discarded." But the test encompasses all property evaluations. Here there's just two property evaluations, one of which gets discarded, but usually there would be a table of many example usernames, otherwise it isn't worth using a table. So what's missing from ScalaTest at this point is some way to do something like this, also taken from the JUnit 4.4 release notes: That's actually a use of an assumption disconnected with a theory, and it seems useful. I haven't put anything like that into ScalaTest because no one has asked for it, and I wanted to make sure that if I put something in it is based on real requirements. It seems to me that TestNG's dependencies are a similar concept, except instead of an assumption expression (like File.separatorChar is ('/') here) deciding whether a test is "skipped", it is the failure of a dependent test. So one thing I'd like to hear about from JUnit, NUnit, and TestNG users are use cases. How have theoryless assumptions actually been used in practice? What are they good for in reality? The other thing is the naming. To Esko I'd say that I think "skipped" sounds to me most like the generic term that would encompass all of these concepts, so maybe that would not be a good term for me to use in ScalaTest if I end up adding this feature. I hadn't thought of "canceled" until Charlie mentioned it, but that sounds like a clear way to describe a test that for this run is being skipped because of some unmet "assumption." Another word you could consider for your runner, Esko, is "discarded," which is what I use for properties thrown out during a property check in ScalaTest. In case you're curious, the details on table-driven property checks in ScalaTest is here:  hecks Bill well Gui extended without being -- Bill Venners Artima, Inc.</body>
  </mail>
  <mail>
    <header>Re: Not knowing the tests in advance when providing a test runner</header>
    <body>Hi Bill, The concept of a Theory is quite different from a normal (example) test and even from a set of examples. That said the implementation, in J/NUnit lags the concept a bit and J/N-users don't generally seem to grok it (yet). The general idea is that a Theory makes a statement that is true for all values meeting a set of criteria. It invites the framework to supply any values that meet those criteria - without any special intervention on the part of the user. The individual test cases are not relevant except in the case of a failure, since the user should be viewing the Theory as a single test. Of course, the syntactic similarity to data-driven tests tends to hide the fact that this is a completely different way of looking at a test. IME, Theories work best when I start out with a theory in mind. Standard tests work best when I only have a collection of examples. The J/NUnit implementation, where the 'givens' are provided within the tests themselves through Assume.That, is not necessarily the only way to do it. We could construct some sort of DSL that instructed the framework about what our assumptions are and allowed the data to be generated. In .NET that's quite difficult because of the limitations of attribute syntax and I suspect it's also true for Java. Charlie  hecks</body>
  </mail>
  <mail>
    <header>Re: Not knowing the tests in advance when providing a test runner</header>
    <body>Hi Charlie, Thanks for explaining the theory behind theories. I think my own theory that this concept is like a property in Scala-land still holds, though. Let me run this past you and see if you agree. Basically a "property" is a statement about something that should be true for all values meeting a certain criteria. The way that is expressed is as a function. The inputs to the function provide one set of values (I.e., to check 100 data points, you'd call the function 100 times, passing in a different data point each time.) If the function returns normally, the property evaluation "passes". If it throws an exception, it "fails." So given a Fraction class, you could have a property like: So whenever the n and d inputs are valid numerators and denominators for the Fraction constructor, the assertions made here (like f.denom should be &amp;gt; 0) should hold. That sounds exactly what you mean by theory, is that correct? And if so, that's called a property in Scala-land, probably because it was called a property in QuickCheck in Haskell, which inspired ScalaCheck in Scala. The idea is you're defining a "property of the Fraction class" that you're testing. So then the question becomes how do you check it. One way is to use the tables approach that I showed earlier. You define some tables with data points in them, and give both the table and the property to forAll: This says that for all the example numerator/denominator pairs given in the table, the property should hold. But you also just say this: That says for all integers, n and d, the property should hold. In that case you'll be using ScalaCheck generators to get the data. So instead of you providing a table of datapoints, the generators will provide them for you, and ScalaCheck provides generators for common data points such as integers. You can create your own generators for your own data types, or to make generators for numerators and denominators that only generate valid values. So I think the difference may be more that theories are methods in J/NUnit and properties are functions in ScalaTest and ScalaCheck. There may be another difference in how theories are mapped to tests in results. Does one "theory check" of 100 data points show up as one test that succeeds or fails, or as 100 tests that succeeded or failed? To see both table- and generator-driven property checks, look at the examples on this page:  Bill  hecks -- Bill Venners Artima, Inc.</body>
  </mail>
  <mail>
    <header>Re: Not knowing the tests in advance when providing a test runner</header>
    <body>Cedric, I'm sure it's important to both of us that people get the best information about the testing options available to them.  In general, I'm not sure how many people asking how to do something in JUnit want to hear about how to do it in another framework, but I'll go along with the idea that it's worth mentioning it. However, if you're unclear on any part of how _JUnit_ works, and want to be helpful to users, feel free to run it past me personally before accidentally misinforming the whole list. Thanks, 2011/6/27 CÃ©dric Beust â &amp;lt;cedric@...&amp;gt;:</body>
  </mail>
  <mail>
    <header>Re: Not knowing the tests in advance when providing a test runner</header>
    <body>All, I'm not sure how I sent this to the entire list.  My sincere apologies to Cedric and the list for giving this signficantly more airtime than I intended for what I intended as a personal mail.</body>
  </mail>
  <mail>
    <header>unsubscribe</header>
    <body>unsubscribe</body>
  </mail>
  <mail>
    <header>Survey on software developers</header>
    <body>Hi, Freddy Munoz, a PhD working with me, has just ran a survey about developers and the first results have just come out. I hope you find it interesting.  You can also answer a new survey about software developers at  networks Thanks for sharing :) Michael Attia</body>
  </mail>
  <mail>
    <header>Re: @Rule TestName not available in @Before methods...</header>
    <body>This still doesn't seem to be supported (see  introduce @BeforeRule and have them executed before @Before. Regards, Stevo.</body>
  </mail>
  <mail>
    <header>Re: Re: @Rule TestName not available in @Before methods...</header>
    <body>Stevo, Barry's original use case benefited from refactoring to a @Rule.  Do you have a different use case in which this isn't the right thing to do?  introduce @BeforeRule and have them executed before @Before.</body>
  </mail>
  <mail>
    <header>Re: How to prioritize test cases and run using specific prioroty?</header>
    <body>Priorities != Dependencies. Charlie</body>
  </mail>
  <mail>
    <header>Re: How to prioritize test cases and run using specific prioroty?</header>
    <body>I call priorities "soft dependencies" in TestNG: you want methods run in a certain order but failures should not have any impact on what methods are running. In contrast, if b() has a hard dependency on a() and a() fails, then b() won't be run and marked "skipped" in the report. -- Cédric</body>
  </mail>
  <mail>
    <header>Re: How to prioritize test cases and run using specific prioroty?</header>
    <body>FWIW, I only use the term "dependency" when b() actually depends on some side effect of a() in order to run successfully. Dependencies can only be implemented by running the tests in a certain order. Calling something a "priority" means that it's more important than another test, for whatever reason reasons. Prioritization may be implemented by ordering the tests but don't have to be. For example, the high priority tests might be given more visibility in the report. Note that I'm not talking about a particular implementation but about a general way of looking at dependency/priority/ordering. However, it is the logical structure I'm trying to use in my own work. Ideally, I don't think we should tell test frameworks how to order tests, but should give indicators of true dependencies and priorities, letting the framework decide how to run the tests most appropriately. Charlie</body>
  </mail>
  <mail>
    <header>Re: How to prioritize test cases and run using specific prioroty?</header>
    <body>Both options are useful, and TestNG also supports explicit priorities, so you can specify the ordering either by: Overall, I find that depending on groups is more flexible: you don't say that b() depends on a() but that it depends on the group "init", so that any method that belongs to the group init will always be run before b(). It's much more flexible when you want to add methods down the line. -- Cédric</body>
  </mail>
  <mail>
    <header>Need assistance with jUnit integration with eclipse</header>
    <body>Hello happy testers, I'm not sure if this will be the best forum where to ask this question, if not I apologize before hand and appreciate if you can point me to the right direction. Do you know if is there a way to fork the JVM while executing the test cases in eclipse similarly to the way ant does it? Thanks, --Aaron.</body>
  </mail>
  <mail>
    <header>Re: How to prioritize test cases and run using specific prioroty?</header>
    <body>Hi Bikash, I am in need of prioritizing test cases such as p0, p1, p2, and p3. Then we Do you mean that if the system fails even one p1 test, you don't want to know whether it would pass /any/ of the p2 and p3 tests? Dale -- Dale Emery Consultant to software teams and leaders Web:</body>
  </mail>
  <mail>
    <header>Re: Eclipse debugger only stops in static method breakpoints with JUnit4 runner</header>
    <body>I believe Helios release is Eclipse 3.6 Using the standard "Run As JUnit Test", nothing EE_specific. The JUnit tests send http requests to a couple of services that were also launched in Eclipse. Leo</body>
  </mail>
  <mail>
    <header>Re: @BeforeClass not being executed</header>
    <body>How foolish of me! Thanks a lot, I've always used JUnit 3 and didn't notice I was doing that wrong. Thanks again everyone.</body>
  </mail>
  <mail>
    <header>Re: Need assistance with jUnit integration with eclipse</header>
    <body>Hi Aaron, I don't think this is possible, although I would love to be proved wrong. You can run an Ant build from within Eclipse though. Regards, Ben -- Dr Ben Waugh                                   Tel. +44 (0)20 7679 7223 Dept of Physics and Astronomy                  Internal: 37223 University College London London WC1E 6BT</body>
  </mail>
  <mail>
    <header>Re: How to prioritize test cases and run using specific prioroty?</header>
    <body>Bikash, How are you running the tests?  For example, if you're using ant, there's some promising directions. would like to run p0 testcases whenever there's a new build and then only rest of the testcases if p0 passes fully. So, I was wondering if JUnit has such a feature out of the box. If not, could somebody point me how I can achieve this? Any help would be highly appreciated.</body>
  </mail>
  <mail>
    <header>Re: Eclipse debugger only stops in static method breakpoints with JUnit4 runner</header>
    <body>I'm flummoxed.  I've never seen anything like it.  Anyone? Release 1 Build id: 20100917-0705. setUpBeforeClass(), tearDownAfterClass(), etc. I also set breakpoints in non-static methods annotated with @Test and when I debug the test, only the breakpoints in the static methods are hit. None of breakpoints in the @Test methods are hit. another suggested using JVM option -XX:+UseParallelGC but neither one worked for me. testXXX() methods are hit.</body>
  </mail>
  <mail>
    <header>Re: Eclipse debugger only stops in static method breakpoints with JUnit4 runner</header>
    <body>Are you sure that the methods @Test and so on are executed? That is at least what I would check at first. I guess, that this is not a debugger problem, I assume that the methods are simply not executed. You could check if the methods are called at all with some logging or simply withÂ  system.out.println("check method ... blabla "). Good Luck Monika from Munich --- David Saff &amp;lt;david@...&amp;gt; schrieb am Fr, 10.6.2011: Betreff: Re: [junit] Eclipse debugger only stops in static method breakpoints with JUnit4 runner An: junit@yahoogroups.com Datum: Freitag, 10. Juni, 2011 16:47 Uhr Â  David Release 1 Build id: 20100917-0705. setUpBeforeClass(), tearDownAfterClass(), etc. I also set breakpoints in non-static methods annotated with @Test and when I debug the test, only the breakpoints in the static methods are hit. None of breakpoints in the @Test methods are hit. another suggested using JVM option -XX:+UseParallelGC but neither one worked for me. testXXX() methods are hit.</body>
  </mail>
  <mail>
    <header>Re: Eclipse debugger only stops in static method breakpoints with JUnit4 runner</header>
    <body>Ok, a long shot, there are other libraries with @Test annotations, could it be that simply the wrong @Test annotation is imported? That would the kind of thing that could bite me with some unattentive import completion. (The imports are usually folded in eclipse). I have never experienced any debugger issues myself with eclipse so it doesn't seem highly likely (though I don't uses the debugger much). I also believe that the tests are never run for some reason. Put some sysouts in the tests just to make sure they are actually run and then take it from there is what I would do. /J ----------------------------------------------------- Joakim Ohlrogge Agical AB Västerlånggatan 79, 2 tr 111 29 Stockholm, SWEDEN Mobile: +46-708-754004 Blog: johlrogge.wordpress.com Twitter: @johlrogge E-mail: joakim.ohlrogge@...</body>
  </mail>
  <mail>
    <header>Re: How to prioritize test cases and run using specific prioroty?</header>
    <body>Could't you create a Category for each priority and then use an ant script that runs each Category in turn as long as all the tests pass? These two links might help get you started:  ertain-category-in-junit-4 ory-suite-with-ant Gerard -- Gerard Meszaros Lean/Agile Coach/Mentor/Trainer  1-403-827-2967 Author of the Jolt Productivity Award winning book "xUnit Test Patterns - Refactoring Test Code" and winner of the "Programming with the Stars" competition at Agile 2009. Learn more at</body>
  </mail>
  <mail>
    <header>Using Parameters to inject data into static field</header>
    <body>Hi all, I'm currently trying to use JUnit to run a number of tests using two different sets of input. However, I need this input to be static fields and it seems I can't change them if they're static. Any way around this? ex.) @RunWIth(Parameterized.class)</body>
  </mail>
  <mail>
    <header>Re: Using Parameters to inject data into static field</header>
    <body>Willie, What happens when you run the test?  I'm surprised that doesn't work. sets of input. However, I need this input to be static fields and it seems I can't change them if they're static. Any way around this?</body>
  </mail>
  <mail>
    <header>Re: Using Parameters to inject data into static field</header>
    <body>The parameters I'm trying to set remain null. If I change the variables to be non-static then it works, but I wanted them to be static so they could be used in a static method I'm using. different sets of input. However, I need this input to be static fields and it seems I can't change them if they're static. Any way around this?</body>
  </mail>
  <mail>
    <header>Junit logger</header>
    <body>Hi All, I hope someone can help me...  ;-p I need to log more info into the Junit4 report, so I would like to know how to do it at run time. There is any way to attach the junit listener and inject additional info? Cheers!</body>
  </mail>
  <mail>
    <header>Re: Junit logger</header>
    <body>It depends a lot on how you're running your tests. On Tue, Jun 14, 2011 at 3:43 AM, turturiellomartino do it at run time.</body>
  </mail>
  <mail>
    <header>Re: Junit logger</header>
    <body>Hi, Can you elaborate on what kind of info you need to add? Thanks. Bill -- Bill Venners Artima, Inc.</body>
  </mail>
  <mail>
    <header>Re: Re: Using Parameters to inject data into static field</header>
    <body>What happens if you assert in the constructor that the values are non-null, and then again at the top of your test?  Which assertion fails? non-static then it works, but I wanted them to be static so they could be used in a static method I'm using. different sets of input. However, I need this input to be static fields and it seems I can't change them if they're static. Any way around this?</body>
  </mail>
  <mail>
    <header>Re: Junit logger</header>
    <body>Hi there, I am running  selenium tests, and I would like to add to the Junit log file status info like, opening page www.xxx.com, clicking on xxx, and so on. So, when a test fails I can get all the info that I need to know the status of the failed test. Thanks guys!</body>
  </mail>
  <mail>
    <header>Not knowing the tests in advance when providing a test runner</header>
    <body>Hi there, I'm writing a custom test runner that is not easily able to determine how many tests will be executed in advance. The runner extends ParentRunner and its getChildren method is called prior to tests being executed via runChild. Each test is also described via describeChild. During runChild execution, if I create child descriptions of each child as each unforeseeable test occurs, then I get "unrooted" output. My actual use-case is that I have a test runner executing a series of tests within an html file. I would have to parse the html and its associated JavaScript to determine how many tests will be run. This would be tricky. Is there a recommended means of reporting the results of tests that are not determinable in advance? Kind regards, Christopher</body>
  </mail>
  <mail>
    <header>Re: Not knowing the tests in advance when providing a test runner</header>
    <body>I've had this feature in the back of my head for some time.  The challenge is that some runners (Eclipse, for example) really want names of all the tests you're going to run before you run them.  One current possibility is to actually run the tests during the getChildren phase, and then just report the results during the runChild phase.  That likely delays any output until all tests have run.  Will that work for you? The alternative is an extended listener framework.  Which test runner are you using? tests will be executed in advance. tests being executed via runChild. Each test is also described via describeChild. each unforeseeable test occurs, then I get "unrooted" output. within an html file. I would have to parse the html and its associated JavaScript to determine how many tests will be run. This would be tricky. determinable in advance?</body>
  </mail>
  <mail>
    <header>Re: Re: Junit logger</header>
    <body>turturiellomartino, How are you running the Selenium tests?  Sorry for all the questions--JUnit does not have a built in notion of a "log file", so the way to affect which logs you're capturing depends on how the tests are being run.  Thanks, On Fri, Jun 17, 2011 at 4:18 AM, turturiellomartino status info like, opening page www.xxx.com, clicking on xxx, and so on. the failed test.</body>
  </mail>
  <mail>
    <header>Re: Re: Junit logger</header>
    <body>Hi there, we had the same requirement. We solved the problem by creating a wrapper class arround selenium, which writes a log message and then delegates to the original selenium. We also handle failure cases and create a screenshot. In our case we wrote the wrapper by hand. It's probably better to use a generic approach with AspectJ, dynamic proxies, generated subclasses or whatever. Greetings,</body>
  </mail>
  <mail>
    <header>Re: Junit logger</header>
    <body>Hello, I have a similar request. I want to log the Junit assertion messages with log4j. Is there a way to do this? I execute my tests with ant: pura vida. -- Â¡paz y baile!</body>
  </mail>
  <mail>
    <header>Re: Junit logger</header>
    <body>Yes, I ma running selenium tests from Jenkies... So, as I said I would like to log few info in the log file produced by junit. Cheers status info like, opening page www.xxx.com, clicking on xxx, and so on. of the failed test. how</body>
  </mail>
  <mail>
    <header>Re: Not knowing the tests in advance when providing a test runner</header>
    <body>Thanks for the reply. I've now worked around the issue by having the leaf tests consolidate their findings into the master test in a textual manner. A master test is represented by the URL of the page describing all of the tests. JUnit knows about the URLs to invoke in advance. I think what would have been nice here is to fire results as being children of the description originally provided (the master test in my scenario). Having them reported as unrooted isn't technically correct as they are children of a description provided already. Thanks.</body>
  </mail>
  <mail>
    <header>Unable to test creation of XML document</header>
    <body>I suspect that this could be a mistake in my code or a race condition. My test is this. I create a org.w3c.dom.Document using my class EncryptedData This is EncryptedData.java. org.w3c.dom.DOMException: HIERARCHY_REQUEST_ERR: An attempt was made to insert a node where it is not permitted. at org.apache.xerces.dom.CoreDocumentImpl.insertBefore(Unknown Source) at org.apache.xerces.dom.NodeImpl.appendChild(Unknown Source) at com.fss.maps.security.xml.EncryptedData.getEncryptedData(EncryptedData.java:56) at com.fss.maps.security.test.XMLEncryptionTestCase.testDocument(XMLEncryptionTestC\ ase.java:85) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:25) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java\ :44) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:\ 15) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:4\ 1) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20\ ) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76\ ) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50\ ) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184) at org.junit.runners.ParentRunner.run(ParentRunner.java:236) at org.junit.runner.JUnitCore.run(JUnitCore.java:157) at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunne\ r.java:97) at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter\ .java:192) at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:60) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at com.intellij.rt.execution.application.AppMain.main(AppMain.java:115)</body>
  </mail>
  <mail>
    <header>Re: junit install fails</header>
    <body>what have you set your JUNIT_HOME environment variable to? When you change to INSTALL_DIR is that the name of your directory? Shouldn't that be an absolute path? I generally do not use the CLASS_PATH environmnet variable, I simply do this: java -cp junit.jar org.junit.runner.JUnitCore org.junit.tests.AllTests (Or actually, I just run JUnit via Mave,Ant, Eclipse, Gradle, Sbt, Buildr, IntelliJ or some other IDE/Build tool I happen to be using for my current project so I pretty much never start the runner from the command line but if I would do that I would specify the CLASS_PATH on the command line. Windows used to have a pretty retareded limitation on a command line not being able to be more than 255 characters long so if you exceed that you may need to specify an environment variable) Don't know if this helps. JUnit is like any other java program, specify your classpath, point to your main class, provide the arguments for main and off you gol. So there is no magic involved. /J ----------------------------------------------------- Joakim Ohlrogge Agical AB Västerlånggatan 79, 2 tr 111 29 Stockholm, SWEDEN Mobile: +46-708-754004 Blog: johlrogge.wordpress.com Twitter: @johlrogge E-mail: joakim.ohlrogge@...</body>
  </mail>
  <mail>
    <header>Re: junit install fails</header>
    <body>Joakin, I'm brand new to java and junit. I'll try and answer as best I can your questions in order asked! JUNIT_HOME environment variable? I have no idea what that is or where. INSTALL_DIR? I'm guessing C:\%JUNIT_HOME%\junit4.9b2\junit-4.9b2.jar absolute path? Sorry don't know what "absolute path" is or means. I tried: java -cp junit.jar org.junit.runner.JUnitCore org.junit.tests.AllTests And got this. C:\&amp;gt;java -cp junit.jar org.junit.runner.JUnitCore org.junit.tests.AllTests Exception in thread "main" java.lang.NoClassDefFoundError: org/junit/runner/JUni tCore Caused by: java.lang.ClassNotFoundException: org.junit.runner.JUnitCore Could not find the main class: org.junit.runner.JUnitCore.  Program will exit. TIA Randy</body>
  </mail>
  <mail>
    <header>jUnit Test case generator</header>
    <body>Hi ALL:This is Kalyan here from India.I got this group id from jUnit site.Its my pleasure to write to you.First of all I know to know if there is any automated testcase generator for jUnit(both 3 and 4)?If it is there it is OK nothing to say.Otherwise I am telling you for experimental purposes to serve my  own requirement, I wrote one framework that I will generate the tesecases automatically for the classes provided in a directory in a package structure. I will take two parameters 1. folder where classses are stored 2. jUNit version (3.0 to 4.9) and the output directory.It will generate the testcasses for the specified folder.The generated code if fully compiled.For private method I used reflection to invoke. I am not supposed to provide the input parameters because it can vary.But I have kept the provision to provide it. It will look like following:- String ret = object.invokeOriginalMethod(args1, Now null will be filled up by the original tester. It will run in all 1.3 to 1.6 environment. Is it at all useful to generate testcase? Eagerly waiting for your reply. Thanks and Regards,Kalyan Kundu. Subject: Fw: Re: jUnit Test case generator To: smartu14@... Date: Friday, May 13, 2011, 11:44 AM FYI. Subject: Re: jUnit Test case generator Date: Friday, 13 May, 2011, 5:58 AM I don't really have time to give you extended replies. I recommend you write a message demonstrating your tool and post it to the JUnit mailing list  Best regards, Kent For example I am saying I can not assume what can be the method characteristics.How it can fail or pass.From outside, I can do to test the api it provides at least by jUnit, may be it is private may be public, may be it is a method or may be constructor, does not matter.But apart from this, what did you exactly mean?Please tell me, I can try for you to implement it. Thanks and Regards,Kalyan Kundu.  Subject: Re: jUnit Test case generator Date: Thursday, 12 May, 2011, 7:17 AM Several people have written test case generators. The problem I have seen so far is that they can only test the semantics that are already latent in the code, so the resulting tests always pass. This can tell you if you accidentally change the semantics, which can be useful. Best regards, Kent Hi KentBeck,This is Kalyan here from India.I got your mailid from jUnit site.Its my pleasure to write to you.First of all I know to know if there is any automated testcase generator for jUnit(both 3 and 4)?If it is there it is OK nothing to say.Otherwise I am telling you for experimental purposes to serve my  own requirement, I wrote one framework that I will generate the tesecases automatically for the classes provided in a directory in a package structure. I will take two parameters 1. folder where classses are stored 2. jUNit version (3.0 to 4.9) and the output directory.It will generate the testcasses for the specified folder.The generated code if fully compiled.For private method I used reflection to invoke. I am not supposed to provide the input parameters because it can vary.But I have kept the provision to provide it. It will look like following:- String ret = object.invokeOriginalMethod(args1, Now null will be filled up by the original tester. It will run in all 1.3 to 1.6 environment. Now I am confused what to do with this tool.Somebody is suggesting that no such tool has been invented so far that generates automated jUnit test so make it a costly testing tool and sell.Someone is saying to make it open source. I don't know anything about this.Could you please advise me what are all those and should I do anything with it. Eagerly waiting for your reply. Thanks and Regards,Kalyan Kundu.</body>
  </mail>
  <mail>
    <header>Re: Fw: Re: jUnit Test case generator</header>
    <body>Hi All. I have got the following mail from Kent Beck. Can someone answer the questions in his/her leisure? Thanks in advance. Kalyan Kundu. Subject: Fw: Re: jUnit Test case generator To: smartu14@... Date: Friday, May 13, 2011, 11:44 AM FYI. Subject: Re: jUnit Test case generator Date: Friday, 13 May, 2011, 5:58 AM I don't really have time to give you extended replies. I recommend you write a message demonstrating your tool and post it to the JUnit mailing list  Best regards, Kent For example I am saying I can not assume what can be the method characteristics.How it can fail or pass.From outside, I can do to test the api it provides at least by jUnit, may be it is private may be public, may be it is a method or may be constructor, does not matter.But apart from this, what did you exactly mean?Please tell me, I can try for you to implement it. Thanks and Regards,Kalyan Kundu.  Subject: Re: jUnit Test case generator Date: Thursday, 12 May, 2011, 7:17 AM Several people have written test case generators. The problem I have seen so far is that they can only test the semantics that are already latent in the code, so the resulting tests always pass. This can tell you if you accidentally change the semantics, which can be useful. Best regards, Kent Hi KentBeck,This is Kalyan here from India.I got your mailid from jUnit site.Its my pleasure to write to you.First of all I know to know if there is any automated testcase generator for jUnit(both 3 and 4)?If it is there it is OK nothing to say.Otherwise I am telling you for experimental purposes to serve my  own requirement, I wrote one framework that I will generate the tesecases automatically for the classes provided in a directory in a package structure. I will take two parameters 1. folder where classses are stored 2. jUNit version (3.0 to 4.9) and the output directory.It will generate the testcasses for the specified folder.The generated code if fully compiled.For private method I used reflection to invoke. I am not supposed to provide the input parameters because it can vary.But I have kept the provision to provide it. It will look like following:- String ret = object.invokeOriginalMethod(args1, Now null will be filled up by the original tester. It will run in all 1.3 to 1.6 environment. Now I am confused what to do with this tool.Somebody is suggesting that no such tool has been invented so far that generates automated jUnit test so make it a costly testing tool and sell.Someone is saying to make it open source. I don't know anything about this.Could you please advise me what are all those and should I do anything with it. Eagerly waiting for your reply. Thanks and Regards,Kalyan Kundu.</body>
  </mail>
  <mail>
    <header>Re: jUnit Test case generator</header>
    <body>Kalyan Kundu wrote on 13.5.2011 11:07: There is at least this one:  Personally I wouldn't use any test generation, because a human is needed to write tests which communicate well the intent of the behaviour being specified by the code [1]. Neither could it be used to drive the design of the production code. Also I have my doubts that how useful such tools would be in dealing with legacy code [2], when the code to be tested has non-trivial dependencies. If the class is easy enough to cover with tests, that even a program can do it, it would be easy for a human to write the same tests. It would be a bit slower, but at the same time his understanding of the code would increase and he would be able to write more meaningful tests. Generating the production code based on the tests would be more interesting... [3] [1] [2]  [3] -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Re: jUnit Test case generator</header>
    <body>Esko: Many thanks. I will answer you after some tests. Please wait until then. Thanks and Regards, Kalyan Kundu. Subject: Re: [junit] jUnit Test case generator To: junit@yahoogroups.com Date: Saturday, May 14, 2011, 3:00 AM Â  There is at least this one:  Personally I wouldn't use any test generation, because a human is needed to write tests which communicate well the intent of the behaviour being specified by the code [1]. Neither could it be used to drive the design of the production code. Also I have my doubts that how useful such tools would be in dealing with legacy code [2], when the code to be tested has non-trivial dependencies. If the class is easy enough to cover with tests, that even a program can do it, it would be easy for a human to write the same tests. It would be a bit slower, but at the same time his understanding of the code would increase and he would be able to write more meaningful tests. Generating the production code based on the tests would be more interesting... [3] [1] [2]  [3] -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Re: jUnit Test case generator</header>
    <body>Hi Esko, It's not clear to me whether Kalyan wants to generate tests or test cases, or even whether you, he and I have the same meaning for those words. I will use "test case" to mean a set of data for an already existing parametrized test and "test" for the method itself, which has already been written by the developer in the normal way - that is using TDD. Using that terminology, I can see some benefit in generating additional test cases for the preexisting test, since there might be some situations that have been missed in course of writing them. I think such an approach would always be secondary to regular TDD - at least in my own work - but it could be useful. This is something like the effect one gets already from "surprising" combinations of Datapoints using Theories and it's easy to imagine a program that generated additional "surprises." Charlie</body>
  </mail>
  <mail>
    <header>Re: jUnit Test case generator</header>
    <body>Charlie, I wanted to mean about the test (method) not the test case(data) according to you. Thanks and Regards, Kalyan Kundu. Subject: Re: [junit] jUnit Test case generator To: junit@yahoogroups.com Date: Sunday, May 15, 2011, 2:04 AM Hi Esko, It's not clear to me whether Kalyan wants to generate tests or test cases, or even whether you, he and I have the same meaning for those words. I will use "test case" to mean a set of data for an already existing parametrized test and "test" for the method itself, which has already been written by the developer in the normal way - that is using TDD. Using that terminology, I can see some benefit in generating additional test cases for the preexisting test, since there might be some situations that have been missed in course of writing them. I think such an approach would always be secondary to regular TDD - at least in my own work - but it could be useful. This is something like the effect one gets already from "surprising" combinations of Datapoints using Theories and it's easy to imagine a program that generated additional "surprises." Charlie</body>
  </mail>
  <mail>
    <header>Re: Re: junit install fails</header>
    <body>Randy, Sorry for a late response on this. questions in order asked! org.junit.tests.AllTests This should work, if "junit.jar" is a valid filename from the directory where you're running it.  For example, if you actually see junit.jar when you type "dir".  Otherwise, you'll need to type in the full path to junit.jar. org/junit/runner/JUni</body>
  </mail>
  <mail>
    <header>PODAM 2.3.4.RELEASE released</header>
    <body>This is a major release to which you should upgrade to. This release makes PODAM very fault-taulerant. PODAM will create a POJO no matter which constructor type you declared (public no-arg, private no-arg, public with args, non-public with args). The difference between 2.3.3 is that while before non-public, non- default constructors were not covered now they are; additionally while before in case of non JavaBean standard constuctors PODAM created an instance but did not populate its attributes, now it both creates an instance and populates its attributes. Regards, Marco</body>
  </mail>
  <mail>
    <header>missing junit.jar in Ant1.8.2</header>
    <body>Hi list, Having read the content here [1] I realise that I am missing 'junit.jar' from my ant dist. I am unsure of what to package to download and add to my /lib dir within ant. Any suggestions please? Thanks Lewis [1]</body>
  </mail>
  <mail>
    <header>Re: missing junit.jar in Ant1.8.2</header>
    <body>&lt;a href="https://github.com/downloads/KentBeck/junit/junit-4.8.2.jar"&gt; work fine.  Good luck! my ant dist. I am unsure of what to package to download and add to my /lib dir within ant.</body>
  </mail>
  <mail>
    <header>Testing for Spring MVC Portlet</header>
    <body>Hi All, I've setup a project for portlet using Spring MVC Portlet application. Now I need to add testing capabilites using JUnit, my goal is so I don't need to deploy every time I make some changes e.g in the Controller. Thanks</body>
  </mail>
  <mail>
    <header>Re: Testing for Spring MVC Portlet</header>
    <body>need to add testing capabilites using JUnit, my Controller. Whether using Spring 2.x or 3.x, unit testing MVC controllers shouldn't be that hard. This is a testament to the highly decoupled design of the Spring framework.  In Spring 3.x, they take non-intrusiveness even further by relying heavily on annotations and letting you use POJOs wherever possible. In general, you just need to write a JUnit test class that'll perform the responsibilities of the Spring container and provide test scaffolding for your controller's dependencies. Now, if you follow the principle of "design by contract" (also evident throughout the Spring framework) then your controller should be depending upon interfaces, not concrete classes. If so, then personally I prefer mocking those dependency interfaces at test time (using a convenient mocking framework such as Mockito). To a large extent you can still mock concrete classes but using actual dependencies usually introduces transitive dependencies which just makes your test scaffolding more complicated or bloated. As a general example, take a 2.x SimpleFormController that calls an EJB to update an entity. 1. Mock the EJB interface 2. Instantiate the controller 3. Supply the mock to the controller 4. Mock the request &amp;amp; response parameters 5. Call doSubmitAction() 6. Verify that the proper ModelAndView are returned 7. Verify that the mock EJB's update method was called with the proper parameters Like I said, Spring 2.5.x and above simplifies the above greatly by letting you call your controller methods directly with the actual parameters they'll need (you don't have to mock the request or response interfaces). Without specifics as to your controllers, forms and views then this is as much as I can give you. Hope this helps! - alistair --</body>
  </mail>
  <mail>
    <header>Re: Testing for Spring MVC Portlet</header>
    <body>For controllers in particular, you should have no trouble simply instantiating the controller in a JUnit test, invoking its handleRequest() method (or whatever they call it these days--I'm offline so I can't check) and checking the content of the ModelAndView object that it returns. If you need to run your container to run your controller method, then you've broken the principle of context independence: you've made your controller depend on the container, rather than the other way around. If your controller depends on something from the container, or from Spring, then I recommend changing the controller to depend on an interface that that thing can implement. If you pass that dependency in through your controller's constructor, then you'll easy be able to use method stubs or expectations to check that your controller interacts with its immediate dependencies correctly, and be able to run the tests entirely in memory. I hope this helps, and if you need to know more, I'm sure we'll help you. -- J. B. Rainsberger ::</body>
  </mail>
  <mail>
    <header>AUTO: Gerald W Winkler is out of the office. (returning 05/31/2011)</header>
    <body>I am out of the office until 05/31/2011. I will be out of the office from May 27th to the 31st. I will be returning to the office on May 31st. I can be reached for critical issues via cell phone at 616-836-9030. Note: This is an automated response to your message  "Re: [junit] Testing for Spring MVC Portlet" sent on 5/28/2011 6:04:04 PM. This is the only notification you will receive while this person is away.</body>
  </mail>
  <mail>
    <header>mock javax.naming.InitialContext</header>
    <body>Hello, in my source code, including following code: so i wonder, in my junit test case, how to mock the InitialContext to look up and return a mock service? Thanks.</body>
  </mail>
  <mail>
    <header>Re: mock javax.naming.InitialContext</header>
    <body>and return a mock service? The simplest thing I found that worked was to write a StubContext (implements Context) and a StubContextFactoryBuilder (implements InitialContextFactoryBuilder) that returns instances of my StubContext. Not quite a dynamic mock, but I suppose you can use the same techniques with a Mockito-synthesized mock Context. I wasn't interested in mocking the JNDI context per se, anyway. I just needed a convenient way for JNDI client code to be able to resolve names at test time. Anywayâin my test's setup method I call NamingManager.setInitialContextFactoryBuilder() passing it an instance of my StubContextFactoryBuilder(). I also added a check to hasInitialContextFactoryBuilder() to avoid an exception when setInitialContextFactoryBuilder() is called more than once. You're welcome to look at StubJndiContext.java on junit-rules for the code that packages up the above as a @Rule:  les/jndi/StubJndiContext.java Hope this helps! - alistair --</body>
  </mail>
  <mail>
    <header>Re: mock javax.naming.InitialContext</header>
    <body>I would wrap the context behind my own interface and stub/mock/whatever testdouble technique you prefer that. Then I would add just enough system level tests to make sure it works with a JNDI context in place and use my own interface in the rest of my code. The instance of my interface would be injected something like this: Then you don't have to worry about JNDI anywhere in our code except of course in the JNDI service implementation which would look something like the code you provided internally. When it comes to mocking frameworks, unless you are interested in verifying interactions then roll your own stubs. That way your stub code will be in one place and not spread out and duplicated all over your tests and become an unmaintainable mess of expectations that you don't really care about except as a way to make mocks return the proper values for invocations that happen to occur in your tests. If on the other hand you believe that interactions between roles are important to verify then pick a good mock framework like JMock and learn how to use it properly. I have not read the book yet but I hear good things about Growing Object Oriented systems. I would assume, given who wrote it, that you will find everything you need to understand about mock frameworks and how to use them properly and efficiently without making a mess. I hope this helps some. Good luck! ----------------------------------------------------- Joakim Ohlrogge Agical AB Västerlånggatan 79, 2 tr 111 29 Stockholm, SWEDEN Blog: johlrogge.wordpress.com Twitter: @johlrogge E-mail: joakim.ohlrogge@...</body>
  </mail>
  <mail>
    <header>Re: mock javax.naming.InitialContext</header>
    <body>Two things. 1. Look for MockEJB, which I used years ago, and does what you want right now. 2. Stop trying to do this as soon as you can. Read these:  Enjoy. -- J. B. Rainsberger ::</body>
  </mail>
  <mail>
    <header>@BeforeClass not being executed</header>
    <body>I have a static method with the @BeforeClass annotation, and it is not being run at all before my JUnit tests. My class extends TestCase and is a JUnit 4 test. I simply have: @BeforeClass Any ideas why this shouldn't be working?</body>
  </mail>
  <mail>
    <header>Re: @BeforeClass not being executed</header>
    <body>Try adding "throws Exception" to the declaration. Also, correct my if I'm wrong but I believe extending TestCase was only part of JUnit 3.</body>
  </mail>
  <mail>
    <header>Re: @BeforeClass not being executed</header>
    <body>JUnit 4 tests don't need to extend the JUnit 3 class TestCase. Try not extending any classes and including at least one method annotated with @Test. Gerard test. -- Gerard Meszaros Lean/Agile Coach/Mentor/Trainer  1-403-827-2967 Author of the Jolt Productivity Award winning book "xUnit Test Patterns - Refactoring Test Code" and winner of the "Programming with the Stars" competition at Agile 2009. Learn more -- Gerard Meszaros Lean/Agile Coach/Mentor/Trainer  1-403-827-2967 Author of the Jolt Productivity Award winning book "xUnit Test Patterns - Refactoring Test Code" and winner of the "Programming with the Stars" competition at Agile 2009. Learn more at</body>
  </mail>
  <mail>
    <header>Re: @BeforeClass not being executed</header>
    <body>As some already hinted, when you extend TestCase the test is run as a JUnit3 tests and the annotations have no effect. ----------------------------------------------------- Joakim Ohlrogge Agical AB Västerlånggatan 79, 2 tr 111 29 Stockholm, SWEDEN Mobile: +46-708-754004 Blog: johlrogge.wordpress.com Twitter: @johlrogge E-mail: joakim.ohlrogge@...</body>
  </mail>
  <mail>
    <header>How to prioritize test cases and run using specific prioroty?</header>
    <body>Hi, I am in need of prioritizing test cases such as p0, p1, p2, and p3. Then we would like to run p0 testcases whenever there's a new build and then only rest of the testcases if p0 passes fully. So, I was wondering if JUnit has such a feature out of the box. If not, could somebody point me how I can achieve this? Any help would be highly appreciated.</body>
  </mail>
  <mail>
    <header>Re: How to prioritize test cases and run using specific prioroty?</header>
    <body>Hello Bikash, It sounds like what you want is a test suite.  Hi, I am in need of prioritizing test cases such as p0, p1, p2, and p3. Then we would like to run p0 testcases whenever there's a new build and then only rest of the testcases if p0 passes fully. So, I was wondering if JUnit has such a feature out of the box. If not, could somebody point me how I can achieve this? Any help would be highly appreciated. -- Best regards, Chet Hendrickson                          mailto:lists@... Check out our upcoming CSM Plus courses @</body>
  </mail>
  <mail>
    <header>Re: How to prioritize test cases and run using specific prioroty?</header>
    <body>Not really, it looks like he's asking for test . -- Cédric</body>
  </mail>
  <mail>
    <header>Eclipse debugger only stops in static method breakpoints with JUnit4 runner</header>
    <body>I am running Eclipse Java EE IDE for Web Developers. Version: Helios Service Release 1 Build id: 20100917-0705. I set breakpoints in static methods in a JUnit4 test, e.g. in setUpBeforeClass(), tearDownAfterClass(), etc. I also set breakpoints in non-static methods annotated with @Test and when I debug the test, only the breakpoints in the static methods are hit. None of breakpoints in the @Test methods are hit. I found a couple of posts, one suggested rebuilding Eclipse projects and another suggested using JVM option -XX:+UseParallelGC but neither one worked for me. Running the debugger with a JUnit3 test worked fine. Breakpoints set in testXXX() methods are hit. Does anybody have any suggestions on how to resolve this problem? Thanks, Leo</body>
  </mail>
  <mail>
    <header>Re: How to prioritize test cases and run using specific prioroty?</header>
    <body>Thanks for the replies. Our test harness is already implemented using JUnit. So, converting it to TestNG can be a hassle. If I want to keep JUnit but implement the Priorities, what could be the best way? It looks like I would need to override the runner method where we can check the priority and decide whether to execute or not. Any alternate way? BikuDAA</body>
  </mail>
  <mail>
    <header>Re: Eclipse debugger only stops in static method breakpoints with JUnit4 runner</header>
    <body>Breakpoints in @Test methods work for me, so it's not universally broken.  I don't use EE, so that might be one data point.  What version of Eclipse are you on? My guess is that this has something to do with classloading.  Are you using the standard "Run As JUnit Test" shortcuts, or something EE-specific? Release 1 Build id: 20100917-0705. setUpBeforeClass(), tearDownAfterClass(), etc. I also set breakpoints in non-static methods annotated with @Test and when I debug the test, only the breakpoints in the static methods are hit. None of breakpoints in the @Test methods are hit. another suggested using JVM option -XX:+UseParallelGC but neither one worked for me. testXXX() methods are hit.</body>
  </mail>
  <mail>
    <header>Re: Is stress test with junit possible?</header>
    <body>Neale, I was thinking something simpler, such as just using ErrorCollector.checkThat directly. On Thu, Apr 7, 2011 at 7:42 PM, Neale Upstone  llector.java</body>
  </mail>
  <mail>
    <header>Re: Is stress test with junit possible?</header>
    <body>That should be simple to encapsulate as a Rule.  I'm not likely to get to it immediately (there's higher-voted feature requests to get to first), but I'd welcome a patch to JUnit contrib. Mind you, it wouldn't actually solve the OP's problem, since he wants different data on each thread. 2011/4/7 CÃ©dric Beust â &amp;lt;cedric@...&amp;gt;:</body>
  </mail>
  <mail>
    <header>Re: Rules on Class level</header>
    <body>It is as of 4.9b1:  a Share and Enjoy, which I have found so far ?</body>
  </mail>
  <mail>
    <header>Re: Is stress test with junit possible?</header>
    <body>Maybe you can use the Parameterized runner wired with your preferred RunnerScheduler (you have complete control on statement schedule). An example could be this: Indrit ________________________________ To: junit@yahoogroups.com Sent: Thu, April 7, 2011 12:02:36 PM Subject: [junit] Is stress test with junit possible? Hi, I'm new to java and Junit, I need to stress test a set of web services, now for each web service I have a test like this: @Test List&amp;lt;GeoArea&amp;gt; sampleList = kitDAO.myWebServiceToTest(firstParameter, Is there a way to call this test 100 time simultaneously with different parameters? I would create 100 thread, pass to them 100 different set of parameters and start the thread simultaneously. Do you think this is possible? How would you do it?</body>
  </mail>
  <mail>
    <header>Github has stopped displaying vote counts...</header>
    <body>All, I've got good news and bad news.  The good news is that GitHub has released Issues 2.0, which, among other things, fixes the sorting options in the issues display, among other goodies.  The bad news is that they've not only removed the ability to vote on bugs, they've eliminated the ability to display or sort by existing votes.  As you may know, I was using votes as a way of prioritizing future development (and was getting excited about getting to the end of our recent round of red tape, so we could start closing more of them down!) I currently have a request in to github to at least let us know what the final count was.  Moving forward, it seems that the new interface can sort by comment count.  I'll probably use that as a proxy for community interest (feel free to make simple "+1" comments if you feel the need) for the time being, but I'm open to other suggestions. Thanks,</body>
  </mail>
  <mail>
    <header>Report "to implement" tests.</header>
    <body>Hi, I would like to see progress in (acceptance) tests not yet implemented. I want these reported differently than normal failures. Is there a way in JUnit to distinct between expected failing tests and "normal" failing tests? So in a report I would like to see something like: Tests: 42 Failures:0 Errors: 0 Ignored: 0 To implement: 12 Regards, Lars</body>
  </mail>
  <mail>
    <header>Re: Report "to implement" tests.</header>
    <body>Hi, perhaps can you have a look at HtmlUnit's @NotYetImplemented annotation. This is what we use for tests that are known not yet to work. These tests are still executed and the result is inverted (a test error is reported as success because it is what is expected whereas a success is reported as error to indicate that the feature has been implemented). The @NotYetImplemented tests appear with the suffix "(NYI)" in the reports but aren't counted differently. I've proposed for some time to add such a feature in JUnit but the encountered enthusiasm was quite limited ;-) Cheers, Marc -- HtmlUnit support &amp;amp; consulting from the source Blog: Le 14/04/2011 21:26, lars.vonk a écrit : these reported differently than normal failures. Is there a way in JUnit to distinct between expected failing tests and "normal" failing tests?</body>
  </mail>
  <mail>
    <header>Re: Report "to implement" tests.</header>
    <body>My current feeling is that the best thing to do is to somehow allow custom categories of test results.  I'm very reluctant to increase the number of built-in result categories, since such a change is one of the most likely to break, or at least be under-implemented, in IDEs and build frameworks. I'm open to ideas about the best way to do this. these reported differently than normal failures. Is there a way in JUnit to distinct between expected failing tests and "normal" failing tests?</body>
  </mail>
  <mail>
    <header>Re: Report "to implement" tests.</header>
    <body>Hi David, In NUnit 3.0, I'm using the following as a field of TestResult, to represent the overall outcome of the test. It was inspired by the Gallio folks. Perhaps it will give you some useful ideas. [Code is C#, obviously] TestStatus is an enumeration with values Inconclusive, Skipped, Passed and Failed. These are fixed but the string label can be used to tailor the particular result. The following ResultStates are predefined: ResultStates are displayed using the status plus label or just the status if no label as provided. For example: "Passed", "Skipped:Ignored", "Skipped:Explicit" The limitation of this approach is that users cannot define entirely new kinds of results as there are only four fixed statuses. My experience, however, is that folks generally only want \ to define new subcategories within the categories. I'm considering adding a third field, Severity, since some "skipped" results are as serious as outright errors at runtime. I'm not yet sure if it's needed. Charlie</body>
  </mail>
  <mail>
    <header>Re: Report "to implement" tests.</header>
    <body>Hi David, I usually see this concept called "pending" in other test frameworks. It is a useful concept, especially when testing in a BDD style. People like to sometimes "flesh out their ideas" by writing descriptive test names for which neither the test code nor the code under test as yet exists. I do support pending tests in ScalaTest, and when running through JUnit call them ignored tests. That's the closest thing to pending already understood by tools that integrate with JUnit. So if you add something called pending, you could still possibly report it as an ignored test. To see an example, look on line 80 of RunNotifierReporter:  est/junit/RunNotifierReporter.scala Basically I do this: // Closest thing we can do with pending is report an ignored test runNotifier.fireTestIgnored(Description.createSuiteDescription(testDescriptionNa\ me(suiteName, suiteClassName, testName))) So what you could do as a JUnit enhancement is for a pending test call fireTestIgnored with perhaps a subclass of Description called PendingDescription. So existing tools would still understand it is a Description, but newer versions could detect it is a PendingDescription and act accordingly. Or just add some state to Description that old tools would ignore and new ones could use to differentiate pending tests from ignored ones. Something like that would allow you to add the new functionality in a backwards compatible way. In ScalaTest, for example, I could later change the code above so it sends such a PendingDescription notification (though it would be a good long time before I did that because I wouldn't want to force people to upgrade their JUnit for a good while.) Bill -- Bill Venners Artima, Inc.</body>
  </mail>
  <mail>
    <header>Re: Report "to implement" tests.</header>
    <body>Hi, Thanks for the pointers everyone. I will look into it. I like Bill's suggestion. Since this concept is becoming more popular imho it would be nice if it is supported by junit. Lars  est/junit/RunNotifierReporter.scala runNotifier.fireTestIgnored(Description.createSuiteDescription(testDescriptionNa\ me(suiteName,</body>
  </mail>
  <mail>
    <header>Re: Re: Report "to implement" tests.</header>
    <body>I'll add another scenario into this mix:  assumptions. Tools currently don't have the ability to report failed assumptions separately either. Given the tooling support required, perhaps there is scope to outline something called JUnit 5, and to collect up all the features that are clearly popular, but would require tooling support..? Cheers, Neale suggestion. supported by junit.  est/junit/RunNotifierReporter.scala runNotifier.fireTestIgnored(Description.createSuiteDescription(testDescriptionNa\ me(suiteName,</body>
  </mail>
  <mail>
    <header>How to create a new suit with only selected tests from other suite</header>
    <body>Hi, I have been searching abt this for a while now. Could not find any good answer. I'm using JUnit 4.8.1 but can go to JUnit 3 if I have too. Here is my problem: I have 3 test suites each containing 11, 12, 13 tests in it. CarTestSuite, CycleTestSuite, BoatTestSuite Now I wish to create a new suite SanityReverseTestSuite containing only 3 tests. These tests are handpicked from the each of the above suites. I know one I include all 3 suites into one using @Suite.SuiteClasses annotation but it would include *ALL* tests from these suite whereas I'm looking for including only one test from each of these suite. Any tips/suggestions? @Before @Test @Test @Test .... @Before @Test @Test @Test .... @Before @Test @Test @Test .... // include only one test CarTestSuite.testCarGearDown() // include only one test CycleTestSuite.testCyclePaddleBackward() // include only one test BoatTestSuite.testBoatBack() also posted in  Cheers! Swapnil</body>
  </mail>
  <mail>
    <header>How to create Progress Bar for JUnit?</header>
    <body>I write a siple program convert user's input to test case and invoke JUnit to run it. In Eclipse and Netbeans, you can see a progress bar when you run several test cases, so how to do a similar thing in my program? Thanks!</body>
  </mail>
  <mail>
    <header>assertEquals is not calling my custom equals method on a template class</header>
    <body>I have a template class and I have written an equals method to ensure that the proper logic is used when testing equality. However assertEquals never calls this method (I have put a Sytem.out.println call in my equals, but nothing is printed). Is there anything special I would have to do to make assertEquals call my method?</body>
  </mail>
  <mail>
    <header>Re: assertEquals is not calling my custom equals method on a template class</header>
    <body>First thing to do is to make double-sure that your equals method overrides Object.equals(Object).  I've several times ended up writing a method that _overloads_ equals, like MyFoo.equals(MyFoo), and that will not be picked up.  It needs to be MyFoo.equals(Object). Hope that helps, proper logic is used when testing equality. However assertEquals never calls this method (I have put a Sytem.out.println call in my equals, but nothing is printed). method?</body>
  </mail>
  <mail>
    <header>Re: assertEquals is not calling my custom equals method on a template class</header>
    <body>That was exactly the problem. No I have another (smaller) problem. Thanks, Stefan the proper logic is used when testing equality. However assertEquals never calls this method (I have put a Sytem.out.println call in my equals, but nothing is printed). method?</body>
  </mail>
  <mail>
    <header>Re: How to create a new suit with only selected tests from other suite</header>
    <body>Hi! You could look at how unofficialjunit (project at sourceforge) does this (or just use it at is): it creates a suite matching package/classnames against regular expressions from anywhere in the classpath (excluding jars) and executes them. Cheers,</body>
  </mail>
  <mail>
    <header>Re: Sometimes my tests fail, sometimes not - why?!</header>
    <body>David Saff wrote on 30.3.2011 16:11: I've been getting that on Windows 7 every now and then. Though it would usually happen less often than in the OP's case - maybe once in a hundred test executions. The NTFS file system has a thing called pending delete and it sometimes prevents the file from being deleted right away, for example if another process accessed it concurrently.  ete-to-complete I've managed to work around the problem by repeatedly trying to delete the file within a time limit. Here is a utility class that I'm using in one of my projects:  rfjackal/dimdwarf/testutils/Sandbox.java#L41-66 -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>How to log junit test run results to a database. Easy way to create a hook?</header>
    <body>Hi! I posted this question on stackoverflow. Below you can see the original link. We use junit for integration tests. The tests are being run in Eclipse and Jenkins. Now i would like to log all junit test run results to a database for easy reporting (i want to log test class / method name, environment, duration and success). I had thought about parsing the junit result xmls but to log it directly to a database sounds good to me, too. It sounds intrusive but also pretty elegant. Normally we just annotate a test method with the @Test annotation and voila, we have our junit test method. That means we have no additional framework around junit and i want to keep it that way! I fear that means that if i want to implement that kind of logging i will probably have to hack into junit. Has anybody done so and can give advice if that works nicely? Maybe you have an idea on how/where to place the hook in junit. Or are there easier approaches to my problem? Thanks! edit: To clarify, we already have junit test results of single test runs. You can get them out of eclipse (export junit result) or out of jenkins. Running our junit test suites in Jenkins also allows us to track test failure rates of test suites over time. It shows you a nice chart that tracks how many tests of passed over time. In each jenkins build you can see which tests passed, also in comparison to the last run. We need a bit more. We want to be able to analyse the performance (duration) of certain testcases over time, over multiple runs, maybe also how they behave differently in different environments. Extract trends. Do some data mining.  a-database cheers!</body>
  </mail>
  <mail>
    <header>Re: How to log junit test run results to a database. Easy way to create a hook?</header>
    <body>Personally I would prefer to parse the XMLs in order to keep another dependency (the log database) out of the way of the tests being run. If you don't want to do that, hacking the JUnit jar should not be necessary in any case.  If you can live with adding an annotation for a custom runner or a rule. I don't know if there is a way in recent JUnit versions to add global rules or your own default runner so that you don't have to annotate every test but that is perhaps something that can be added and contribute. HTH ----------------------------------------------------- Joakim Ohlrogge Agical AB Västerlånggatan 79, 2 tr 111 29 Stockholm, SWEDEN Mobile: +46-708-754004 Blog: johlrogge.wordpress.com Twitter: @johlrogge E-mail: joakim.ohlrogge@...  a-database</body>
  </mail>
  <mail>
    <header>PODAM 1.0.0.RELEASE released</header>
    <body>Dear all, I'm proud to announce that PODAM 1.0.0.RELEASE was released and that it is now available from Maven Central ( PODAM is a Java tool to auto-fill POJOs/JavaBeans with data. Although PODAM's default strategy is to assign random values, users can implement their own Data Provider Strategies to fill data. PODAM provides the following functionalities: - Auto-filling of simple/complex graphs of POJOs/JavaBeans with data (default strategy is random data but you can provide your own) - Inheritance (e.g. POJOs extending other [abstract] POJOs) - Immutable-like classes (e.g. no setters, all final fields and full constructor) - Singleton-like classes (e.g. private constructor, public static factory method) PODAM home page can be found here: PODAM source code can be downloaded from here:  PODAM community can be joined here: Bugs and RFEs can be filed here: JIRA account) It would be nice to hear feedback from you.</body>
  </mail>
  <mail>
    <header>JUnitMatchers: assert that expected message occurs N times</header>
    <body>May I suggest adding a static method in JUnitMatchers for the purpose of asserting that string appears N times. My current case of usability is as follows: I am expecting an exception which should contain a certain message N times so I use: expectedException.expectMessage(JUnitMatchers.containsString("the However this does not ensure that the message is present N times, so I have to create my own matcher: Now I can use: expectedException.expectMessage(JUnitMatchers.containsString("the to check that "the expected message" appears 5 times in the exception message body</body>
  </mail>
  <mail>
    <header>Re: JUnitMatchers: assert that expected message occurs N times</header>
    <body>iv, I'm really glad that the matchers framework was flexible enough to allow you to define your own matcher in this way.  In general, I would encourage authors of new matchers to consider contributing them directly to the hamcrest project, where they can be used for more purposes than just JUnit.  Thanks, asserting that string appears N times.</body>
  </mail>
  <mail>
    <header>Re: [scalatest-users] Re: Mark failed assumptions as ignored?</header>
    <body>Hi Joakim, I just released a snapshot that includes a new ScalaTest "shell" that was inspired primarily by your work on poju4s. A blog about it is here:  The snapshot works with Scala 2.8. You can download the snapshot release via the scala-tools.org Maven repository with: group id: org.scalatest artifact id: scalatest_2.8.1 version: 1.5-SNAPSHOT Or you can just grab the jar file from:  SHOT/scalatest_2.8.1-1.5-SNAPSHOT.jar I put the Scaladoc for this snapshot release up here:  I didn't do the dots (i.e., outputting one green dot for each passed test instead of the test name). It is something I could add later, but I wanted to see how users actually used this first. If they don't use it to run large suites, then probably dots aren't necessary. Also I don't yet offer a way to run JUnit and TestNG tests that aren't a JUnitSuite, JUnit3Suite, or TestNGSuite. Again I'm not sure people would want to do that, so I left it out and will listen for grumbling. It will be easy to add if that's actually something people want. Give it a try and let me know what you think. Thanks. Bill On Thu, Mar 17, 2011 at 1:33 PM, Joakim Ohlrogge -- Bill Venners Artima, Inc.</body>
  </mail>
  <mail>
    <header>Re: [scalatest-users] Re: Mark failed assumptions as ignored?</header>
    <body>Very good timing since I'm about to talk a little bit about scala test in a scala user group meeting here in Stockholm soon. I'm of course very happy that my experiment with poju4s sparked some inspiration for you and that it became something "real". I'll see if I can show some shell stuff given the mention (thanks) andd everything :) My current ideas i want to try for poju4s seems like they will probably branch off and focus more on integrating the REPL even tighter into the workflow than on enabling JUnit for scala. But right now there are too many ideas and too little time. Cheers! /J ----------------------------------------------------- Joakim Ohlrogge Agical AB Västerlånggatan 79, 2 tr 111 29 Stockholm, SWEDEN Mobile: +46-708-754004 Blog: johlrogge.wordpress.com Twitter: @johlrogge E-mail: joakim.ohlrogge@...  SHOT/scalatest_2.8.1-1.5-SNAPSHOT.jar</body>
  </mail>
  <mail>
    <header>Re: How to create Progress Bar for JUnit?</header>
    <body>i6941, Sorry to be so long in getting back to you.  There was a GUI shipped with JUnit 3, which you might be able to re-use.  You might also be able to write your program as a custom Runner, so that you can run the tests directly in Eclipse or NetBeans themselves.  Good luck, run it. In Eclipse and Netbeans, you can see a progress bar when you run several test cases, so how to do a similar thing in my program?</body>
  </mail>
  <mail>
    <header>Re: Report "to implement" tests.</header>
    <body>Lars, Have you created a feature request at github to track our progress toward this goal? these reported differently than normal failures. Is there a way in JUnit to distinct between expected failing tests and "normal" failing tests?</body>
  </mail>
  <mail>
    <header>Re: How to create Progress Bar for JUnit?</header>
    <body>Hi i6941, I didn't realize you were looking for a GUI runner from your initial post. ScalaTest has one, and it can run JUnit tests. You just pass -j  s.Runner$ You'd need to put scala-library.jar on the class path, but wouldn't need to use Scala to just run JUnit tests. Bill -- Bill Venners Artima, Inc.</body>
  </mail>
  <mail>
    <header>junit install fails</header>
    <body>downloaded junit4.9b2.zip Followed this. To install JUnit on Windows, follow these steps: 1.Unzip the junit.zip distribution file to a directory referred to as %JUNIT_HOME%. 2.Add JUnit to the classpath: set CLASSPATH=%CLASSPATH%;%JUNIT_HOME%\junit.jar so now i have a c:\%JUNIT_HOME% directory and here is result of setting classpats and test, it fails **** Microsoft Windows [Version 6.1.7600] Copyright (c) 2009 Microsoft Corporation.  All rights reserved. C:\Users\rrosebrock&amp;gt;set CLASSPATH=%CLASSPATH%;%JUNIT_HOME%\junit.jar C:\Users\rrosebrock&amp;gt;classpath /? 'classpath' is not recognized as an internal or external command, operable program or batch file. C:\Users\rrosebrock&amp;gt;set CLASSPATH=%CLASSPATH%;%JUNIT_HOME%\junit.jar C:\Users\rrosebrock&amp;gt;java org.junit.runner.JUnitCore org.junit.tests.AllTests Exception in thread "main" java.lang.NoClassDefFoundError: org/junit/runner/JUni tCore Caused by: java.lang.ClassNotFoundException: org.junit.runner.JUnitCore Could not find the main class: org.junit.runner.JUnitCore.  Program will exit. C:\Users\rrosebrock&amp;gt;set classpath=%classpath%;INSTALL_DIR\junit-4.6.jar;INSTALL_ DIR C:\Users\rrosebrock&amp;gt;java org.junit.runner.JUnitCore org.junit.tests.AllTests Exception in thread "main" java.lang.NoClassDefFoundError: org/junit/runner/JUni tCore Caused by: java.lang.ClassNotFoundException: org.junit.runner.JUnitCore Could not find the main class: org.junit.runner.JUnitCore.  Program will exit. what am i doing wrong? TIA</body>
  </mail>
  <mail>
    <header>Re: Sometimes my tests fail, sometimes not - why?!</header>
    <body>I have had several issues when working with a the filesystem from unit tests. In theory you cannot expect the tests to be run sequencially as in test A has always run before test B (someone may request to run just one of them by rightclicking on the test in eclipse for instance) so that is a bad assumption. I don't think that is your problem in this case though. I don't know about all the magic that goes on with the filesystem behind the scenes but especially on windows I have seen issues when files are occationaly not deleted properly. I don't remember how I solved it but I would look for things like wether the files are properly closed and flushed before you try to delete them (could be a race condition where the the write stream is almost always GC:ed and closed in that process but sometimes not) that would lock the file for deletion occationall (when the the output stream has not yet been GC:ed). Make sure everything is explicitly closed. It has happened that I think everything looks fine but I have problems anyway. That is when I start imagining that there the issue is related to pounding on the filesystem too fast...  I don't think that has ever been the case though but one gets paranoid. In general when I have to tests against the file system I tend to to the setup a bit in reverse. I use an empty target directory and recusrively delete every file in it both in my setUp (@Before) and my tearDown (@After). This way, in case a run gets interupted midway and the directory is left dirty it is cleaned prior to the next run. This is not a JUnit issue in any case. In general avoid using the filesystem from your tests will spare you lots of grief. Perhaps most of what you want to test could be done in memory with ByteArrayOutputStream/ByteArrayInputStream and only touch the filesystem in that last case when you know everything works, you just want to see that you can replace ByteArrayInput/OutputStream with FileInputOutputStream. A neat sideeffect by coding this way is that it's very simple to change sources/targets (like reading from any URL instead of the filesystem) or filtering (like GZipping everything that is written to the target) which is not as elegant to do if you pass around File objects. By all means make your API able to take a filename/File instance but make usre that the first thing you do with it is creat a FileInputStream/FileOutputStream and pass it on to the next method (using try finally of course). By running in memory you are also better prepared to run tests in prallell etc. No rock solid advice in here but hopefully something that helps some... ----------------------------------------------------- Joakim Ohlrogge Agical AB Västerlånggatan 79, 2 tr 111 29 Stockholm, SWEDEN Mobile: +46-708-754004 Blog: johlrogge.wordpress.com E-mail: joakim.ohlrogge@...</body>
  </mail>
  <mail>
    <header>Re: Sometimes my tests fail, sometimes not - why?!</header>
    <body>Is there any need to share a 'static' directory across tests at all? May I suggest establishing a separate location for each test would ensure they don't ever clash, perhaps include the test name in the folder naming? If at some point in the future your tests are run in parallel, distinct testing folders would support this. I suspect you have a timing issue or race conditions, so I would try and avoid any clashes and  aim to build a set of completely isolated tests. -- Mark</body>
  </mail>
  <mail>
    <header>Re: Sometimes my tests fail, sometimes not - why?!</header>
    <body>Hi Mark, thanks for your mail. Am 30.03.2011 10:49, schrieb Mark Salter: Thanks for the suggestion. Sure, that is a requirement for parallel testing. But i thought it should work if i have just one source and one target directory. I will get to this later if my problem can't be solved. Ok, i will check this. Maybe a reader-thread is not closed. Best regards, Nils</body>
  </mail>
  <mail>
    <header>Re: Sometimes my tests fail, sometimes not - why?!</header>
    <body>I have done similar tests, where I write a particular file to a directory and then did some processing on it. I never had a problem with this setup. And I did reuse the same directory location for all my tests. I did clean the directory in the @Before-method and in the @After-method (Using jakarta FileUtils). Standard JUnit does not spawn any threads, as far as I know. So the tests are run sequentially. Other runners could change this, of course. If your code spawns threads, that's a different matter of course. And from afar I would also suggest to check for files that where not properly closed. Greetings,</body>
  </mail>
  <mail>
    <header>Re: Sometimes my tests fail, sometimes not - why?!</header>
    <body>Hi Joakim, thanks for your mail. Am 30.03.2011 08:56, schrieb Joakim Ohlrogge: I don't expected test A to run before test B. But i am not sure if two tests can run at the same time or if one test runs, ends and after that the next tests starts. Can you give me an answer to this? As you said i will check if all streams are closed. Maybe this is the point. I use the finally clause. I check if the created files exist and delete them. So the next test can expect the source and target folder to be empty. That's a good point. Thank's!</body>
  </mail>
  <mail>
    <header>Re: Sometimes my tests fail, sometimes not - why?!</header>
    <body>Hi Malte, thanks for your mail. I found the problem: i missed one thread.join() call. So one writer thread has not died before the backups ends -&amp;gt; there was a stream that was not closed -&amp;gt; the file could not deleted. But now i know that JUnit definitely does not spawn threads... :-) Thank you all for your help! Best regards, Nils Am 30.03.2011 11:31, schrieb Malte Finsterwalder:</body>
  </mail>
  <mail>
    <header>Re: Sometimes my tests fail, sometimes not - why?!</header>
    <body>Nils, Just to come in late.  It looks like the test failures were actually highlighting a threading problem in either your test or code, which you were able to fix, so that's a happy outcome, and you may not need the rest of this message. Like Joakim, I have found that on some platforms (older versions of Windows are foremost in my memory), it seems that deleting a file from Java sometime simply doesn't, and sometimes does, but only after a surprising delay.   One possibility is to use the TemporaryFolder rule in JUnit 4.7 and above.  This creates a new temporary folder for each test, and deletes it afterward.  Since each test automatically gets a different folder, you're protected against any filesystem oddities in deletion. Good luck,</body>
  </mail>
  <mail>
    <header>Re: Sometimes my tests fail, sometimes not - why?!</header>
    <body>It seems from your later mails that you figured out the JUnit internals and eliminated the possibility of threading in JUnit. So, yes, as you know by now A ends before B starts with the standard runner. It seems like you ran into a race condition with the GC, the funny thing is that many resources are closed in the finalize method so it happens that an application that is sloppy with closing resources actually behaves properly most of the time since the GC collects the resources and implicitly closes them. Sometimes the GC is fast enough, sometimes not. When running unittests you generally pound the code quite fast so its way more likely that you run into this kind of problems in your tests than if you run the application under normal conditions. I'm happy you were able to solve your problem. Sounds like it was not a simple one to find. ----------------------------------------------------- Joakim Ohlrogge Agical AB Västerlånggatan 79, 2 tr 111 29 Stockholm, SWEDEN Mobile: +46-708-754004 Blog: johlrogge.wordpress.com E-mail: joakim.ohlrogge@...</body>
  </mail>
  <mail>
    <header>Is Reflection The best way of accessing private member variables and methods?</header>
    <body>If there are any other ways please let me know. many thanks, Joseph</body>
  </mail>
  <mail>
    <header>Re: Unit Testing best practices</header>
    <body>Hi, doing just small personal projects and practice exercises for a course I'm taking, I think that much level of detail is a bit overkill for my needs. Thanks you !! Daniel input parameters, providing defaults if the parameters are not valid" will make "the number of testing methods" skyrocket quickly when you want to "test all variations of invalid input on all three constructors". problems myself and the fruit is a JUnit-extension for parameterized tests - CallbackParams couple of months ago. When using CallbackParams for your Account example - a "best practice" could be ... OwnerName / enum Balance) the svn-repo:  ts/src/test/java/org/callbackparams/demo/TestAccount.java?revision=18&amp;amp;view=marku\ p and has this general structure: - instead they are enum constants, which each has one @Given-method - for setting up the constructor argument that the enum class concerns - and one @Then-method - for verifying the resulting account. (There is no test-method that calls these methods - that is taken care of under-the-hood by BddRunner.) Please note that it is possible for individual enum-constants to override methods and this is what the constants OWNER_NULL and BALANCE_NULL do in order to verify that the null-argument results in the proper default value. values tested for each constructor parameter. Each test will pick exactly one enum-constant from each of its nested enum-classes. This means that Constructor_1 will produce four tests - one for each AccountId-constant. Constructor_2 produces 16 tests - one for each combination of OwnerName and AccountId, where the enum AccountId will be available since it is nested by the super-class! Thereafter Constructor_3 will produce one test for each possible combination of AccountId, OwnerName and Balance etc ... This will result in a total of 84 tests, which will be named like this: single thing in each enum-constant~ and no test-method. For the "all variations of invalid input on all three constructors"-thing - CallbackParams handles it by combining the enum-constants. CallbackParams is what fits your needs.  is expected to cause an exception. It is part of a Rule-based pattern that is further described here: the net and some attempts on my own, I still have doubts, hope this is a right place to ask. ownerName and balance. This class has three constructors: parameters, providing defaults if the parameters are not valid. three constructors, for example: unit test. If I write my test as. practice to test all variations of input values ? multiple constructors and data sets in one unit testing class, or must I spread it into one class for each constructor and data array definition ?</body>
  </mail>
  <mail>
    <header>Re: Is Reflection The best way of accessing private member variables and methods?</header>
    <body>There is an easier way: Don't access them at all. ;-) The default answer regarding privates and testing: You should not need to access private members during a test, since testing goes through the public interface. If there are too many functions, that are private, but should be tested, then maybe they belong into their own class an be public there. But if you do need to access private members, I don't know of any other way then to use reflection. Wait: In the back of my head I remember a project that had a feature that one can access privates just normally from tests. I don't remember the project, though... And I can't find a link in my bookmarks either. Anyone any ideas? Greetings,</body>
  </mail>
  <mail>
    <header>Re: Is Reflection The best way of accessing private member variables and methods?</header>
    <body>Joseph, Either using reflection, or using a framework that does the reflection for you. Before using tricks to access a private member, I will often take a moment to reflect if there's a change that will both: 1) Allow the functionality to be tested without needing private access, and 2) Improve the design overall. With practice, I find it surprisingly common that I can do both. However, it can cause friction if: 1) You're in a codebase where large, multi-responsibility classes are the norm, or 2) You're on a team where the responsibility for writing the tests is not joined, temporally or socially, to authorization to improve the design of the code under test. Good luck, On Thu, Mar 31, 2011 at 7:22 AM, josephjohnallen</body>
  </mail>
  <mail>
    <header>Re: Is Reflection The best way of accessing private member variables and methods?</header>
    <body>maybe you are thinking of dp4j.com , also listed  in junit's tools With it the reflection api is injected for you at compile-time, seeing that you are using JUnit's 4 @Test annotation. -- Regards, K. Gabriele --- unchanged since 20/9/10 --- P.S. If the subject contains "[LON]" or the addressee acknowledges the receipt within 48 hours then I don't resend the email. subject(this) â L(LON*) â¨ âx. (x â MyInbox â§ Acknowledges(x, this) â§ time(x) If an email is sent by a sender that is not a trusted contact or the email does not contain a valid code then the email is not received. A valid code starts with a hyphen and ends with "X". âx. x â MyInbox â from(x) â MySafeSenderList â¨ (ây. y â subject(x) â§ y â L(-[a-z]+[0-9]X)).</body>
  </mail>
  <mail>
    <header>Re: Is Reflection The best way of accessing private member variables and methods?</header>
    <body>Yes, that was the tool that I was thinking of. Thanks! Greetings,</body>
  </mail>
  <mail>
    <header>Re: Is Reflection The best way of accessing private member variables and methods?</header>
    <body>Hi Malte, ScalaTest also has a PrivateMethodTester trait:  I agree private methods rarely need to be tested directly, but sometimes it is more practical to do so. An specific example is in ScalaTest I have a private method that parses command line arguments to the Runner application's main method into a nice data structure. This method is used by main only, so I stuck it in the same "class" (actually an object in Scala). To test that method through the public interface, I'd need to invoke main and figure out if arguments had their intended effect by capturing all kinds of side effects. That wasn't worth it to me, and that method really feels like a private helper method of the Runner class, not some general utility I'd factor out into its own class. Being marked private communicates something important about the programmer's intent to later readers of the code. So rather than make it package access or factor it out to make it more easily testable by giving it in my view a less appropriate design, I just tested it via PrivateMethodTester. Bill -- Bill Venners Artima, Inc.</body>
  </mail>
  <mail>
    <header>Re: Is Reflection The best way of accessing private member variables and methods?</header>
    <body>To add to the good advice that's been given so far: you might also want to consider making your method more visible for testing and use an annotation or a comment to say so (e.g. Google uses an annotation called @VisibleForTesting). -- Cédric -- Cédric</body>
  </mail>
  <mail>
    <header>Re: Is Reflection The best way of accessing private member variables and methods?</header>
    <body>thanks</body>
  </mail>
  <mail>
    <header>Re: Is Reflection The best way of accessing private member variables and methods?</header>
    <body>Reflection is always the best way.  Reflect on why the design lacks convenient testability.</body>
  </mail>
  <mail>
    <header>Re: Re: Is Reflection The best way of accessing private member variables and methods?</header>
    <body>+1 with extra awesome. Simon -- simonpeter.org | simonpeter.com | newlife-upc.org</body>
  </mail>
  <mail>
    <header>Re: Re: Is Reflection The best way of accessing private member variables and methods?</header>
    <body>I think it's important to reduce the burden of TDD and having to worry about privates by trying to test them through public interfaces/wrappers is just not agile/ value-adding effort. Testing through a public method is in the direction of integration testing since the public methods will have a different interface, and/or perform side effects, not intended unit testing the private method. And I don't like the idea of changing production code just for testing. Put another way, I'd prefer to reflect on my domain problem/solution, and if I could, I'd prefer not to reflect at all =) P.S. I really don't want this to grow into yet another argument on private unit testing, for there are enough elsewhere. On Sat, Apr 2, 2011 at 5:38 PM, Simon Chappell &amp;lt;simonpeterchappell@... -- Regards, K. Gabriele --- unchanged since 20/9/10 --- P.S. If the subject contains "[LON]" or the addressee acknowledges the receipt within 48 hours then I don't resend the email. subject(this) â L(LON*) â¨ âx. (x â MyInbox â§ Acknowledges(x, this) â§ time(x) If an email is sent by a sender that is not a trusted contact or the email does not contain a valid code then the email is not received. A valid code starts with a hyphen and ends with "X". âx. x â MyInbox â from(x) â MySafeSenderList â¨ (ây. y â subject(x) â§ y â L(-[a-z]+[0-9]X)).</body>
  </mail>
  <mail>
    <header>Re: Is Reflection The best way of accessing private member variables</header>
    <body>Ok, I think I finally get that the argument against testing private methods is a preference to push them down into finer grained classes where they are appropriately "public".  I put "public" in quotes because so far we have considered only the inward perspective, looking "in" toward their declarations. Next, looking outward, I'd like to hear how one prevents them from creeping into the public interface of the system as a whole, which was presumably the point of their being private in the first place. Thanks, Lance Sent from my iPhone</body>
  </mail>
  <mail>
    <header>Re: Re: Is Reflection The best way of accessing private member variables and methods?</header>
    <body>The argument: "I don't like the idea of changing production code just for testing" would not rub me the wrong way if the changes generally introduced for testing would not have other benefits as well (hence, the changes are not just for testing at all). It would also not rub me the wrong way if it was not he case that code that is written in a TDD manner turns out to be testable pretty much by definition. Perhaps when I feel that I do something "just for testing" it is a good idea for me to reflect upon if there is some way that I can achieve the testability with other benefits as well. Perhaps now is not a good time to reflect so I write a note to myself to get back to the problem and reflect later. The whole testing private methods discussion would never rub me the wrong way either if I didn't feel that we chose to resort to technical voodoo in order to avoid changing how we generally approach problems and IMO are more or less guaranteed to miss out on an oportunity to learn. The "its not agile" argument always rubs me the wrong way because it's pointless. Frankly I don't care about being agile unless it works better than something else I would be doing. I do the things I do because I know no better way of doing them right now. If I could do less testing I would, since having lots of tests is also quite pointless in itself. It is the effects of having them that I am after. Or seemingly it is the effect of writing them that I am after. I write lots of tests because I know no better way of ensuring that my code has quality and of driving me to reflect daily about design that helps me improve as a programmer. If the point was lots of coverage and exercise every single method as a unit I would probably make all methods public... but it's not... By the way, I have come to find that the private keyword is pretty overrated :) Sorry for the rant... I just need to do that at least once every year :) Anyone is free to disagree and it may very well be because they are smarter or better programmers than I am. If there is anything worth reflecting on in what I wrote then it would be "don't follow the rules, go after the effects" /J ----------------------------------------------------- Joakim Ohlrogge Twitter: @johlrogge Blog: johlrogge.wordpress.com</body>
  </mail>
  <mail>
    <header>Re: Unit Testing best practices</header>
    <body>Hi Daniel, Your email two weeks ago made me realize that testing combinations of invalid data is another use case for table-driven property checks in ScalaTest, which will be in its next release (and is currently in a snapshot release). If you'd like to see what it would look like, I documented it here:  TableDrivenPropertyChecks.html#invalidArgCombos In short, you create a table of the various combinations of invalid data, then run a property check with that table, where the property states that the method should throw an expected exception when passed values taken from each row of data. If you're curious. I described the entire property checks API here:  Thanks. Bill -- Bill Venners Artima, Inc.</body>
  </mail>
  <mail>
    <header>Re: Re: Is Reflection The best way of accessing private member variables and methods?</header>
    <body>On Mon, Apr 4, 2011 at 10:51 AM, Joakim Ohlrogge neither do i same here..and because i look for the highest value from my tests/coding I try to integration/higher-level/emperical test as much as possible. However there I sometimes need access to private methods to get the testing environment/parameters i need. +1. I'd summarize my point with: "lazyness is a virtue" [1] "except for the compiler", but I'd also be wrong! [1] -- Regards, K. Gabriele --- unchanged since 20/9/10 --- P.S. If the subject contains "[LON]" or the addressee acknowledges the receipt within 48 hours then I don't resend the email. subject(this) â L(LON*) â¨ âx. (x â MyInbox â§ Acknowledges(x, this) â§ time(x) If an email is sent by a sender that is not a trusted contact or the email does not contain a valid code then the email is not received. A valid code starts with a hyphen and ends with "X". âx. x â MyInbox â from(x) â MySafeSenderList â¨ (ây. y â subject(x) â§ y â L(-[a-z]+[0-9]X)).</body>
  </mail>
  <mail>
    <header>Re: Re: Is Reflection The best way of accessing private member variables</header>
    <body>I've generally found that it's nearly impossible to get "public" and "private" to mean everything I'd like them to mean: - Whether or not accessing the structure improperly is likely to cause other functionality to break. - Whether or not I am committing to document the structure. - Whether or not I am committing to maintain the structure in future versions. - Whether or not the structure should be accessible to structures in other packages. This is especially the case if you like (as I do) to use packages to group similar functionality, and not just as visibility barriers. So I generally find that, even before considering testability, it's worth having different ways of communicating to clients that not all "publics" are created equal.  JUnit uses "internal" and "experimental" packages to hint at these qualities.  On other projects, I've tried to do the opposite, having the classes I intend to be stable and published in packages that contain the name "api", leaving all others "use at your own risk".  Google encourages a @VisibleForTesting tag, although I prefer to have designs and viewabilities that make sense as outgrowths of a particular design philosophy without considering testing specifically. I believe that while it's important to allow clients that want the safest experience to easily find ways of doing so, it's also possible to make life too hard for clients who want to move forward at their own risk.  (for example,  le-diy-repair.ars I'm sure others have interesting takes on this as well, a preference to push them down into finer grained classes where they are appropriately "public".  I put "public" in quotes because so far we have considered only the inward perspective, looking "in" toward their declarations.  Next, looking outward, I'd like to hear how one prevents them from creeping into the public interface of the system as a whole, which was presumably the point of their being private in the first place.</body>
  </mail>
  <mail>
    <header>Is stress test with junit possible?</header>
    <body>Hi, I'm new to java and Junit, I need to stress test a set of web services, now for each web service I have a test like this: @Test List&amp;lt;GeoArea&amp;gt; sampleList = kitDAO.myWebServiceToTest(firstParameter, Is there a way to call this test 100 time simultaneously with different parameters? I would create 100 thread, pass to them 100 different set of parameters and start the thread simultaneously. Do you think this is possible? How would you do it?</body>
  </mail>
  <mail>
    <header>Re: Is stress test with junit possible?</header>
    <body>I don't have a built-in solution for running the multi-threading--you could probably do that with basic built-in Java threading primitives. (Let us know if you were hoping for help on that, as well.)  However, if you want to easily collect all the errors from the various threads, and fail the test if any of the assertions from the various threads fail, take a look at ErrorCollector:  llector.java Good luck, now for each web service I have a test like this: parameters? I would create 100 thread, pass to them 100 different set of parameters and start the thread simultaneously. Do you think this is possible? How would you do it?</body>
  </mail>
  <mail>
    <header>Re: Is stress test with junit possible?</header>
    <body>The ErrorCollector rule is interesting, in that assertThat(...) should be sufficient to add items without a change from Assert.assertThat(). How that would work is either to make Assert methods non-static and operate on an instance, or (assuming single test at a time execution), allow ErrorCollector to inject an ExceptionHandler strategy. The default strategy would be: The error handler approach would install the ErrorCollector rule instance as the handler before the test, and verify afterwards, and add to ErrorCollector.  llector.java</body>
  </mail>
  <mail>
    <header>Re: Is stress test with junit possible?</header>
    <body>FYI, this is how you do it with TestNG: @Test(invocationCount = 1000, threadPoolSize = 20) Maybe something to consider for future versions of JUnit. -- Cédric -- Cédric</body>
  </mail>
  <mail>
    <header>Rules on Class level</header>
    <body>Is it possible to define rules to be run BeforeClass and not on Method level which I have found so far ?</body>
  </mail>
  <mail>
    <header>Re: Mark failed assumptions as ignored?</header>
    <body>Hi Bill, Glad my poking around with this was somewhat inspiring. Technically I haven't done anything that can't already be done with ScalaTest and my hopes are that rather than spawning off a new framework, the good ideas are adopted in other frameworks and the bad ones die with this one. Right now I'm primarily interested in running tests and poking around in the results rather than easing the testwriting itself. I'm also curious where I can go with JUnit as a primary foundation, basically conforming to rather than just interfacing with JUnit. Mostly for fun. I decided to make it all public in case it would be interesting to anyone else and for reference when blogging etc. How I "solved" pending and pendingUntilFixed was to use an AssumptionFailed exception since it is the closest thing to an ignored exception in JUnit. Since the existing runners don't treat the assumption-errors as ignored I simply output "pending &amp;lt;reason&amp;gt;" messages on the console when being run. It would be better to have the tests marked as ignored in eclipse but works as a workaround. Quite early I got an idea about some primary goals when running from the REPL and the most important one was: minimize typing - completion is not always available in the REPL (from eclipse, intellij and to my surprise even emacs (though there must be some way to pass the tab along down to the repl?)) Examples of where this has led me: * Only one import * short package name even if it violates javas recommendations * package object with shortcuts to common stuff and a few implicits I really wanted scala tests easy executing of tests from the REPL. The JUnitCore approach is less elegant IMO and it seems like a System.exit in the the cores main shuts down the REPL. That could be worked around of course by instatiation JUnitCore and passing the classes to run. A problem here from a scala perspective is that Java's way to get a Class instance classOf[ClassName] (habit I guess). Long story short, I much prefer scalatests way and I think it's not strange that a language with a REPL inspires more thought in this department. My solution here was dynamic mixins (or static if one prefers). So with a simple "with Basics" you can run any JUnit compatible test from the REPL. Now came the issue with customizing the output. I decided to put that outside the TestCase completely. It feels like a runtime decision. This is when "run" changed to really mean "select" (but the method on interaction is still called run). Basically, the run method just returns a list of Callable[Result]-instances and the BriefReport calls the one by one and prints out the result. This way, the running and the reporting is nicely separated and which testing style you choose has no bearing on the output you see. The brief method could be paired with a verbose method if one wishes more verbose output. Now came the color/no color issue. Color feels like an aspect of reporting. This might be a case of golden hammer but to represent this aspect as a stackable trait felt quite nice. Especially when creating instances of a report: new Brief with Color. One could easily imagine expanding in this direction: new Brief with Color with Summary with SourceDump with StackTraceFiltering with LongRunningTestTopList ExecutionTimeStatistics ... The only problem (ok there are several probably by the obvious problem anyway) is keeping the default as elegant as ScalaTest's spec.execute hence the package object in the poju4s package that allows me to write brief(spec) instead. If I want to run just a few tests that can be done like this (here I assume I have already renamed the run-method to select): brief(spec.select('example1, 'example2)) The fun part comes when I add glob: biref(glob("package/*/*Spec")) or with an implicit: brief("package/*/*Spec"). I agree that named parameters also makes sense, or a combination: spec.execute(color=FunkyScheme, options=List[StackTraceFiltering, SourceDump, ExecutionTimeStatistics]) I also tought about some sort of parameter dsl: spec.select('example1, 'example2) &amp;gt;&amp;gt;: StackTraceFiltering &amp;gt;&amp;gt;: Color &amp;gt;&amp;gt;: SourceDump &amp;gt;&amp;gt;: StdOut (not sure that would work or that I would like it but... as long as we're tossing up ideas) As you say, when something fails what one really wants to see is which tests failed. That is a missing part from my output, just effectively managed to clear those pesky succeeding tests out of the way while still mantaining some feedback that they were actually run. I intend to address that as you suggested, list the failing pending and ignored tests in the summary. I also intend to let the run return some sort of Gist or Summary object that allows one to poke around a bit more in the result (after all it is a REPL so why shouldn't one be able to interact with the result?). Examples of what one could do "post"-running is to dump captured std-out, stacktraces, executiontimes etc, list all the names of all tests of a given status or what have you. I think the best is to leave the information sort of naked and then scalas excellent collection API can do it's magic of filtering, grouping and mapping to the users desire. Why not conveniently allow rerun just failed tests in this way? There is really no reason why these things need to be isolated to just JUnit, in fact it feels like my original idea is much less interesting then to actually explore running and reporting from the REPL in general. For now it is convenient to focus on just one framework but perhaps in the future the good parts can be distilled into a more framework agnostic run/report framework or the most sensible thing is to just leave the ideas out there with a liberal license so that the ones that work can be adopted by framework-vendors as they please... I'm not sure what is best yet but the license is chosen to not be an issue for this to happen :). Long story short: one import seems to be a good idea, separating running and reporting seems to be a good idea, and there seems to be some room for innovating when running tests from the REPL... Thanks for listening to my ramblings! It's so much fun to play with these things without the worries of actually maintaining it for years and years :) ----------------------------------------------------- Joakim Ohlrogge Agical AB Västerlånggatan 79, 2 tr 111 29 Stockholm, SWEDEN Mobile: +46-708-754004 Blog: johlrogge.wordpress.com E-mail: joakim.ohlrogge@...  more-scala-friendly/</body>
  </mail>
  <mail>
    <header>Re: Mark failed assumptions as ignored?</header>
    <body>oh by the way, I can't claim any credit for the "dot"-representation since this is how it was done way back in JUnit 3's textrunner (and I think even earlier than that). ----------------------------------------------------- Joakim Ohlrogge Agical AB Västerlånggatan 79, 2 tr 111 29 Stockholm, SWEDEN Mobile: +46-708-754004 Blog: johlrogge.wordpress.com E-mail: joakim.ohlrogge@... On Sat, Mar 12, 2011 at 2:07 PM, Joakim Ohlrogge &amp;lt;joakim.ohlrogge@...  more-scala-friendly/</body>
  </mail>
  <mail>
    <header>Re: Mark failed assumptions as ignored?</header>
    <body>Hi Joakim, It is good to have experimental projects, because I don't want to put anything experimental into ScalaTest. If it turns out to be the wrong thing to do, I'd have to break code to take it out. I always deprecate and leave it in for a good long while, but even that's ultimately a code break, just a nicer way to do it. I did always have in mind I'd like to support use cases of doing things in the interpreter, but am not sure yet how people actually use it. I tend to flesh out working code one bit at a time, with little "tests" I guess you could call them. But they aren't formal tests. After I get it working I put it into the source and then write a more formal test for it. What I'll do initially is format the output of TDD traits, enable color by default when using execute(), provide a way to turn color off when using execute(), and add a summary at the end. That I'm sure about. Bill On Sat, Mar 12, 2011 at 5:07 AM, Joakim Ohlrogge &amp;lt;joakim.ohlrogge@...  more-scala-friendly/ -- Bill Venners Artima, Inc.</body>
  </mail>
  <mail>
    <header>Is it the best method to unit-test for Divide class...PLS Help</header>
    <body>Divide Class if (y == 2) else DivideTest Class @Before @Test @Test(expected=ArithmeticException.class)</body>
  </mail>
  <mail>
    <header>Re: Is it the best method to unit-test for Divide class...PLS Help</header>
    <body>Sandeep, That strikes me as an unexpected definition of divide (the y == 2 check seems to have no effect).  What is the context?</body>
  </mail>
  <mail>
    <header>Is Junit good enough for web application testing(server code in java)</header>
    <body>Hi Seniors, I am a newbie in using Junit. Please let me know if JUnit will be good enough for web application  testing(server code in java). Is it true that "The JUnit code will be complex and hard to maintain. You will have to reproduce all of the interactions between code and user within the Junit test, which very quickly becomes complex. If all you are doing is testing one single entry point, then this could well work, but if you are testing multiple screens (a wizard or something like that), then it can quickly become fragile and unmanageable."? I will be moving to watij if Junit is not good enough for web app testing. Suggestions cordially invited. -- Thanks and Regards Jyotirmoy Sundi</body>
  </mail>
  <mail>
    <header>Unit Testing best practices</header>
    <body>Hi all, net and some attempts on my own, I still have doubts, hope this is a right place to ask. and balance. This class has three constructors: Account(String accountId) Account(String accountId, String ownerName) Account(String accountId, String ownerName, Double balance) providing defaults if the parameters are not valid. constructors, for example: Account(null) Account("", null, 1575.0) test. If I write my test as. testConstructor1AccountIdNull testConstructor1AccountIdEmpty testConstructor1AccountIdExampleValue etc, practice to test all variations of input values ? constructors and data sets in one unit testing class, or must I spread it into one class for each constructor and data array definition ? Thanks in advance, Daniel</body>
  </mail>
  <mail>
    <header>Re: Is Junit good enough for web application testing(server code in java)</header>
    <body>Hi, As with many frameworks, JUnit has its' sweet spot. What JUnit does well is automate the testing. It is very widely supported by many frameworks that leverage it. For example, for Spring applications, there's the Spring Test Framework which is part of the Spring Framework, and also Unitils, which supports Spring, mocking and databases - see However, for your application, you're looking for something that is tuned towards automating UI tests. Selenium is probably the most widely used. We find Selenium to be very easy to create modular and powerful tests suites. We run it from within JUnit. Regards, Neale Neale Upstone Open Credo Ltd  Excellence in Enterprise Software Development Certified SpringSource Delivery Partner</body>
  </mail>
  <mail>
    <header>Re: Is Junit good enough for web application testing(server code in java)</header>
    <body>Hi, Selenium is a good choice for Web UI testing. Depending on your use case, you might also want to have a look at WebTest. It's used by Grails and we've been using it to our satisfaction.  Regards, Murat 2011/3/16 Neale Upstone &amp;lt;neale.upstone@...&amp;gt;:</body>
  </mail>
  <mail>
    <header>How to stop junit testing till certain key is entered?</header>
    <body>I'm newbie for Junit. I have an question. I just wanted to stop junit testing until certain key input is entered. So, I programmed just like below : public void testManual() throws NumberFormatException, IOException, // If intput is '1', test is ended. But There is an error. com.example.calculator.test.CalculatorTest.testManual(CalculatorTest.java:34) android.test.AndroidTestRunner.runTest(AndroidTestRunner.java:169) android.test.AndroidTestRunner.runTest(AndroidTestRunner.java:154) android.test.InstrumentationTestRunner.onStart(InstrumentationTestRunner.java:52\ 0) android.app.Instrumentation$InstrumentationThread.run(Instrumentation.java:1447) Do you let me know what i want to do? Thanks.</body>
  </mail>
  <mail>
    <header>Re: Unit Testing best practices</header>
    <body>Hi Daniel, you are right on track, I would say. Having lots of tests is a natural consequence from intense testing, which is generally a good thing. @Parameterized tests have their own advantages and disadvantages. For the case you describe, I would not use them. They are usefull if you have a tests that needs to be executed the same way a lot of times, just with different data. Then @Paremeterized may come in handy. In particular, if the dataset comes from an external souce, like a file or a database. Generally, I don't use them often. Greetings, the net and some attempts on my own, I still have doubts, hope this is a right place to ask. and balance. This class has three constructors: providing defaults if the parameters are not valid. constructors, for example: test. If I write my test as. practice to test all variations of input values ? multiple constructors and data sets in one unit testing class, or must I spread it into one class for each constructor and data array definition ?</body>
  </mail>
  <mail>
    <header>Re: How to stop junit testing till certain key is entered?</header>
    <body>JUnit is about automated testing. If you try to bold some interactiveness on, you're probably using it wrong. Are you using JUnit3 tests on purpose? Even if you do, you don't need to override these methods if you just call the base class' implementation. Maybe ant messes with stdin. Seriously, I don't know what you want to do, but without knowing your background it seems like a bad idea. Robert -- Empfehlen Sie GMX DSL Ihren Freunden und Bekannten und wir belohnen Sie mit bis zu 50,- Euro!</body>
  </mail>
  <mail>
    <header>Re: Is Junit good enough for web application testing(server code in java)</header>
    <body>Watij is for driving Internet Explorer. Â It can be used to write automated tests, but driving IE and doing testing are two different things. Â JUnit could call a test driver that used Watij to drive IE. I've used Watij and Google Web Driver for load testing and for web scraping. Â Web Driver is the better tool for web scraping. I tried Selenium a couple of years ago and at that time it could not handle anything but the simplest AJAX. Â Maybe it's gotten better at it. Â I ended up using Web Driver. So, yes you can use JUnit as a test framework for web testing with a suitable web scraping API like Google Web Driver or (ugh) Watij. Selenium might give you everything you need in one package. Subject: [junit] Is Junit good enough for web application testing(server code in java) To: junit@yahoogroups.com Date: Wednesday, March 16, 2011, 12:26 AM Â  I am a newbie in using Junit. Please let me know if JUnit will be good enough for web application  testing(server code in java). Is it true that "The JUnit code will be complex and hard to maintain. You will have to reproduce all of the interactions between code and user within the Junit test, which very quickly becomes complex. If all you are doing is testing one single entry point, then this could well work, but if you are testing multiple screens (a wizard or something like that), then it can quickly become fragile and unmanageable."? I will be moving to watij if Junit is not good enough for web app testing. Suggestions cordially invited. -- Thanks and Regards Jyotirmoy Sundi</body>
  </mail>
  <mail>
    <header>Re: Is Junit good enough for web application testing(server code in java)</header>
    <body>If your goal is testing through the browser, I think that WebDriver is the current best of breed tool: as a matter of fact, Selenium is absorbing WebDriver in order to use WebDriver's superior API. However, there are advantages to also making sure that you have a way of testing the classes that don't need to know about your web stack in order to function.  There's also advantages to increasing the percentage of your code base that is web-stack-independent.  For those classes, JUnit should work swimmingly.  Good luck, tests, but driving IE and doing testing are two different things.  JUnit could call a test driver that used Watij to drive IE.  Web Driver is the better tool for web scraping. anything but the simplest AJAX.  Maybe it's gotten better at it.  I ended up using Web Driver. web scraping API like Google Web Driver or (ugh) Watij. in java)</body>
  </mail>
  <mail>
    <header>Re: [scalatest-users] Re: Mark failed assumptions as ignored?</header>
    <body>I just pushed an update to the poju4s wiki. Now all the basic-basic stuff is there (and some fancy coloring for fun). I think a direction to move this project is to fork of the run-stuff to another project and leave the JUnit specifics in poju4s. I'm not totally happy with it yet. Some solutions can definitely bi improved but it should be rather straight forward to add support for other frameworks. All that /should/ be needed is to implement an Intreaction and a Global for the new framework and then it should be possible to run and report in the same way from the new one. It is of course far from perfect I have a pretty good feeling about this way of finding, running and reporting on tests. If you want to play with it the latest is in the develop-branch. /Cheers!</body>
  </mail>
  <mail>
    <header>Re: Unit Testing best practices</header>
    <body>Daniel, You're right that every class that uses Parameterized uses the same input data set.  If you'd like to gather several such uses of Parameterized into the same file, you can express them as static inner classes of an outer class that uses the Enclosed runner: @RunWith(Enclosed.class) Good luck, the net and some attempts on my own, I still have doubts, hope this is a right place to ask. and balance. This class has three constructors: providing defaults if the parameters are not valid. constructors, for example: test. If I write my test as. practice to test all variations of input values ? multiple constructors and data sets in one unit testing class, or must I spread it into one class for each constructor and data array definition ?</body>
  </mail>
  <mail>
    <header>Unit Testing with Spring</header>
    <body>I'm working with a client who're using Spring extensively. When I look at their Unit Test code I realize that I'm looking at a heap of integration tests and not real Unit Tests. In part it seems to come from the autowiring of Spring. In addition I've been told that creating new contexts on the fly in Spring can (in their case) really slow the running of the unit tests. I realize that we can bypass Spring completely but the point was made that in that case we're testing without the Spring Security Context and other rules, which means we're not really testing how the code behaves in real life. I'm wondering if any one has good writing on Unit Testing with Spring so I can get my head wrapped around what it looks when its done well? Cheers Mark Levison Certified Scrum Trainer Recent Entries: Story Slicing How Small is Small mall-is-enough.html Why use an Agile</body>
  </mail>
  <mail>
    <header>Re: Unit Testing with Spring</header>
    <body>Yes it's ironic that testing spring stuff is so painful given that testability is one of the selling points (but it seems that applies to the parts, not the wireing of the parts). The biggest issues I have had are: 1) Contexts are slow to load 2) Programatically replacing stuff in an already loaded conext is not straight forward 3) Having different xml-setups for testing and production soon becomes a nightmare. When it comes to 1 I have come to break the rule of test isolation. I basically load the context beforeClass or even as a *gasp* singleton to only be hit once by the load time. This makes it crucial to be careful about mutable state and side effects in the tests for obvious reasons. It is a bit like juggling with knives but reloading the context for each test is simply not practical. The funny part is that spring sort of encourages mutability by prefering setters over constructors. To some extent you can have a "global" parent context and programatically create child contexts on top of that but I have forgotten how but it's a problem that is solvable within a day or so. If you keep the parts immutable and involve an in memory DB running tests in transactions really help. When it comes to 2 it is difficult, not impossible but if you go with the global context approach it quickly becomes nasty. Again for obvious reasons... When it comes to 3 it sort of forces you to solve 2 and deal with the consequences in combination with 1. This is one of the reasons why people have started considering dependency injection to be evil. Guice however is a completely different story. Modules are lightning fast to load and while guice solves the same problem as spring it does it in a completely different way. Guice is more about defining the rules of wiring rather than the actual wiring and it makes a world of difference. I understand you're stuck with spring now and that guice is not really an option for you. I just mention that so that you see that the experience with dependency injection frameworks doesn't have to be very similar at all to the spring experience we you will later advice people to avoid DIP frameworks entirely when you really mean avoid Spring :) In contrast to spring guice is actually very helpful when unittesting and it becomes much easier to add and remove dependencies. In spring the philosophy is more to be explicit about stuff and that XML stuff... well, I rest my case. Long story short: loading times of contexts is the biggest issue IMO. My workaround for them is to break test isolation and load once, not many. To deal with that I try to eliminate or at least isolate side effects as much as possible. I can imagine that in an existing system that is not really the state of things... Spring has a lot of good stuff in it too like JDBCTemplates etc, I still use those but I wire manually, or if motivated with guice. I don't think, but hope, this helps some :) ----------------------------------------------------- Joakim Ohlrogge Agical AB Västerlånggatan 79, 2 tr 111 29 Stockholm, SWEDEN Mobile: +46-708-754004 Blog: johlrogge.wordpress.com E-mail: joakim.ohlrogge@...  -enough.html</body>
  </mail>
  <mail>
    <header>Re: Unit Testing with Spring</header>
    <body>Joakim - thanks for the reply you confirm what I was thinking. As long as they test within a single context its all good. Basically that means that Mocking goes out the window because I will have to dirty the context and reload. In addition they claim (and I can't disprove) that an in memory DB isn't viable. As for Guice - no such luck. I'm here providing technical advice for a few days, I'm not going to overturn their use of Spring. Cedric - Junit isn't the problem. They're writing too many integration tests and not enough Unit Tests. Your tool may be good but its orthogonal to the problem at hand. Cheers Mark Levison Certified Scrum Trainer Recent Entries: Story Slicing How Small is Small mall-is-enough.html Why use an Agile</body>
  </mail>
  <mail>
    <header>Re: Unit Testing with Spring</header>
    <body>In one project we were using lots of batches from oracle to MySQL. By the nature of batching there were some DB-specific SQL going on, especially when it comes to "insert or update" logic in combination with jdbc-batch. The SQL was sort of the main part of the logic in this application so not testing it was not an option. Our solution here was to use DB deploy to update the schema to the latest version as part of the test run and run all tests within a transaction. Running "full integration" within transactions. Running within a transaction that was rolled back after the test was fairly fast even if the target DB was a local MySQL and not an in memory DB. And using DB deploy made it really easy to get a developer going. Basically install mysql once, create a DB and grant rights for a user. Then run the testsuite and everything was kept up to date automatically. We actually had some in memory DB tests stuff where we needed to test a lot of different combianations and we could do without DB-sepcific SQLs So my secret weapon here is DB Deploy that in all it's simplicity actually works wonders. Good luck! /J ----------------------------------------------------- Joakim Ohlrogge Agical AB Västerlånggatan 79, 2 tr 111 29 Stockholm, SWEDEN Mobile: +46-708-754004 Blog: johlrogge.wordpress.com E-mail: joakim.ohlrogge@...  -enough.html</body>
  </mail>
  <mail>
    <header>Re: Unit Testing best practices</header>
    <body>Thanks Malte and David for your help !! Cheers, Daniel the net and some attempts on my own, I still have doubts, hope this is a right place to ask. and balance. This class has three constructors: parameters, providing defaults if the parameters are not valid. constructors, for example: test. If I write my test as. practice to test all variations of input values ? multiple constructors and data sets in one unit testing class, or must I spread it into one class for each constructor and data array definition ?</body>
  </mail>
  <mail>
    <header>JUnitRunner that can execute methods in unloadable child classloaders?</header>
    <body>I have a JUnit class that I would NOT call a unit test. Each method connects to a database and allocates a lot of memory. If I run the entire test class in Eclipse, by the second test method it gets an OutOfMemory error. If I run each test method individually, however, I can successfully run all of the test methods. I've set Eclipse to run with just about the max -Xmx setting it can take without failing on startup (although that's probably irrelevant to this). I've set the -Xmx value in the run configurations for the class and individual methods as high as they will go without killing Eclipse (too high and I get an infinite number of "SWT handle" errors). I've scanned through all the relevant run configuration, project, and preference settings, and I don't see anything that will help me be able to run the entire test class, as opposed to running each test method manually. It occurred to me that perhaps this is something a custom JUnitRunner class might help with.  What if it could somehow set up a classloader hierarchy, where each test method is executed in a child classloader, which is unloaded at the end of the method?  I briefly looked at one JUnitRunner implementation, and it didn't look like this was possible, but I'll ask, just in case.</body>
  </mail>
  <mail>
    <header>Structure of junit.contrib</header>
    <body>All, As you may have heard, I'm planning to start a junit.contrib project. In this mail, I'll first review the reasons for such a project, and secondly, I have a proposal for its structure, and I'd like feedback. === BACKGROUND: REASONS FOR junit.contrib === JUnit has always officially strived to be "the intersection of all useful Java testing frameworks".  Thus, the goals for code that gets into the junit repository include that it should: 1) Minimize dependencies on external libraries or particular JDK versions beyond a widely-used minimum. 2) Be very unlikely to change API moving forward. 3) Emphasize opportunities for extension over the richness of core features. 4) Have potential usefulness to all Java developers, regardless of their application domain. 5) Match in style to the current JUnit codebase. Many people have made JUnit extensions that would be useful to a healthy portion of Java developers, but do not meet all of the above criteria.  For example, the extension may target a particular IDE, or data that is stored in a SQL database, or in XML, or it may be experimental, and likely to change API, or it may require an external dependency.  Also, as the popularity of non-Java languages on the JVM has grown, some people have made extensions to JUnit that make it easier to use JUnit's core functionality in ways idiomatic to those other languages. It has always been an option for developers of these extensions to publish them on their own repositories.  However, having a central clearing-house as an option for extension developers has some advantages, including discoverability, documentation, and dependency management. The goal is for junit.contrib (just started on  All Java classes in this project should be in packages prefixed with org.junit.contrib. Now, the === PROPOSAL === The root structure of the project will contain: / Thus, a folder for overall documentation, and then a folder per-language.  I haven't thought about how non-java language extensions should be organized. Under java, there should be a folder per "subproject" (names chosen, with apologies, by java/ Each subproject should be organized as its own maven project: java/brewmasters/ As potential users and contributors to such a repository, are there pitfalls in this organization that I should be aware of in advance? Thanks,</body>
  </mail>
  <mail>
    <header>Re: Progress on JUnit issues...</header>
    <body>[re-adding list] there are big and important enhancements to be made. Note that the release frequency and pace of enhancements are only loosely connected. testing tools, such as mocking frameworks, BDD tools, tools for integration/functional testing, etc. There are literally dozens of other tools which today provide some form of JUnit integration, usually in the form of base test classes or custom runners for use in @RunWith annotations. Some examples include jMock, Mockito, JMockit (my own tool), PowerMock, JBehave, Spock, Spring Test. just so another tool can integrate itself to the JUnit test execution process. For example, a user shouldn't have to add a specific rule to each test class, or to annotate potentially hundreds of test classes with @RunWith. Instead, better integration hooks should be provided in the form of test run listeners, combined with a mechanism to install such listeners transparently at startup (see issue 80). Would this help in all of the cases above?  I can see how it might help for JMockit, which uses a static API accessed through constructors.  However, other frameworks, like jMock, use a local container like a Mockery or Context to protect tests in different threads from each other, and so it makes sense to use something like Rules to provide both the test hook and access to the container, so a generic listener framework helps little there. I just wanted to be sure how broad you believe the applicability of issue 80 is. parameters in test methods (JMockit already does this, by modifying the JUnit implementation at runtime - not a clean solution, of course), and to obtain access to test class instances so that field injection can occur (this could be added into Description). only be able to provide the best user experience if integration can be made seamless. I've long been a fan of the principle (imported from Perl) that "All's fair if you predeclare".  I think that if using an extension requires more than one line per extended class, that's a place the framework can improve.  However, if users will give us that one line per class, whether as a Rule, @RunWith, or base class (in my current order of preference), it has a big pay-off for both the framework and the user. For example, it allows IDEs and continuous integration frameworks to run individual classes or methods or subsets without having to keep an eye on a global configuration.  It also gives people who land in the source code an easily-followable hint about what's going on. I'd be happy to see an example where these goals (subset running and local code understanding) can be met while not requiring even one line of per-class predeclaration.</body>
  </mail>
  <mail>
    <header>chain runners</header>
    <body>Hello, Is there a way to chain multiple runners? I was thinking of creating an issue for this, but wanted to ask first if I'm missing something. Here's the motivation: SWTBot includes a runner that automatically saves screenshots on failures. I also wrote a runner that works around Eclipse showing failed assumptions as passed tests. In order to use both, I made my own @MyRunWith annotation. So my test class looks a little like this: @MyRunWith(SWTBotJunit4ClassRunner.class) @RunWith(IgnoreFailedAssumptionRunner.class) ... IgnoreFailedAssumptionRunner is based on ideas from  nore/src/programmatically/speaking/dynamicignore/RuntimeIgnoreable.java gnore/src/programmatically/speaking/dynamicignore/RuntimeIgnoreable.java\  Now I'd like to use theories or parameterized tests in combination with both SWTBotJunit4ClassRunner and IgnoreFailedAssumptionRunner, but I can't see how to do this. Thanks, William Kilian</body>
  </mail>
  <mail>
    <header>Re: chain runners</header>
    <body>These both sound excellent as Rules.  A Google search for "JUnit Rules" gives a couple good intros.  Does that make sense?</body>
  </mail>
  <mail>
    <header>Re: Unit Testing best practices</header>
    <body>Hi Daniel I think you are right on track when you recognize that "validations on the input parameters, providing defaults if the parameters are not valid" will make "the number of testing methods" skyrocket quickly when you want to "test all variations of invalid input on all three constructors". During the past ten years I have spent some time thinking over similar problems myself and the fruit is a JUnit-extension for parameterized tests - CallbackParams couple of months ago. When using CallbackParams for your Account example - a "best practice" could be ... ... one test-class per constructor (similar to David's suggestion) ... one enum(!) per constructor parameter (e.g. enum AccountId / enum OwnerName / enum Balance) ... one enum-constant for each value you would like to test To demonstrate this I have made the class "TestAccount", which is committed to the svn-repo:  ts/src/test/java/org/callbackparams/demo/TestAccount.java?revision=18&amp;amp;view=marku\ p The test uses BddRunner (one of two JUnit-runner offered by CallbackParams) and has this general structure: @RunWith(Suite.class) TestAccount.Constructor_1.class, TestAccount.Constructor_2.class, Unlike traditional parameterized tests the parameter values are not primitive - instead they are enum constants, which each has one @Given-method - for setting up the constructor argument that the enum class concerns - and one @Then-method - for verifying the resulting account. (There is no test-method that calls these methods - that is taken care of under-the-hood by BddRunner.) Please note that it is possible for individual enum-constants to override methods and this is what the constants OWNER_NULL and BALANCE_NULL do in order to verify that the null-argument results in the proper default value. My test-example has four constants per enum, i.e. there are four different values tested for each constructor parameter. Each test will pick exactly one enum-constant from each of its nested enum-classes. This means that Constructor_1 will produce four tests - one for each AccountId-constant. Constructor_2 produces 16 tests - one for each combination of OwnerName and AccountId, where the enum AccountId will be available since it is nested by the super-class! Thereafter Constructor_3 will produce one test for each possible combination of AccountId, OwnerName and Balance etc ... This will result in a total of 84 tests, which will be named like this: Test-class TestAccount$Constructor_1$BDD$ (4 tests) Test-class TestAccount$Constructor_2$BDD$ (16 tests) Test-class TestAccount$Constructor_3$BDD$ - (64 tests) So instead of having "one single thing in each unit test" we now have ~one single thing in each enum-constant~ and no test-method. For the "all variations of invalid input on all three constructors"-thing - CallbackParams handles it by combining the enum-constants. I may be somewhat biased :-) but from how you describe your intentions I think CallbackParams is what fits your needs. For more information on BddRunner:  The annotation @ValidationFailure is used to annotate each enum-constant that is expected to cause an exception. It is part of a Rule-based pattern that is further described here:  Greetings /Henrik Kaipe the net and some attempts on my own, I still have doubts, hope this is a right place to ask. and balance. This class has three constructors: parameters, providing defaults if the parameters are not valid. constructors, for example: test. If I write my test as. practice to test all variations of input values ? multiple constructors and data sets in one unit testing class, or must I spread it into one class for each constructor and data array definition ?</body>
  </mail>
  <mail>
    <header>running junit test case packaged in a jar</header>
    <body>I want to execute all my junit test cases which are packaged in a jar file. Is that possible to run this jar from command prompt by some command like java org.junit.runner.JUnitCore -jar allTests.jar What is the correct way to execute this? If it is possible to execute then would i need some changes in manifest file for specifying the test class (like main class in java) Thanks in advance.</body>
  </mail>
  <mail>
    <header>Re: running junit test case packaged in a jar</header>
    <body>Arpit, There is not a built-in way to do what you want.  You can: 1) Create a Suite class that references all of the test classes you want to run. 2) Use something like 3) Use ant There's a feature request for including this in core junit:  Good luck, that possible to run this jar from command prompt by some command like for specifying the test class (like main class in java)</body>
  </mail>
  <mail>
    <header>Sometimes my tests fail, sometimes not - why?!</header>
    <body>Hi there, i have written a simple backup tool and 10 tests. They all have the same structure: 1. Create some test files and directories in an directory called "source" 2. Start the backup process (to backup the files/dirs in "source" to a directory called "target") 3. Check whether all files in "source" exist also in "target" 4. Remove all files from the "source" and "target" directory so that the directories are empty for the next test. If i execute the whole test set ten times, i have 6-7 successes and 3-4 failures. The error messages say that files in the target directory could not be created or deleted (in the last step of the tests, see above) if there is a failure. One possibility i could think of is that the tests are not run sequentially, so they could have influence at each other. But as far as i know JUnit runs all tests in separate threads and those sequentially. Is that correct? Does anybody have any suggestions? I use eclipse helios, JUnit 4.8.1, Java 1.6 and AspectJ Best regards, Nils</body>
  </mail>
  <mail>
    <header>Testing a helper class with a factory method</header>
    <body>Hi I'm refactoring and I've created a helper class that I'm trying to test. The code I end up with is this: this.password, this.driver) and my test looks a little like this: It all works and passes but my question is this.  The helper class uses "newInstance" which unless given a correct url and a valid driver will throw an exception.  So in providing this information it's making me think this is more an integration test rather than a unit test.  Am I off course here? Best DF</body>
  </mail>
  <mail>
    <header>Re: Unit testing a private method??</header>
    <body>I have always wondered how to test a method that is I've just released a new tool that should solve that problem for you. After several patches =), your java interface is that you can test private methods (i.e. just access it as you would would it have been public) and then behind the scenes at compile-time your 'illegal access' is replaced with the equivalent Reflection API calls, i.e. your test will compile and run. You can check it out at www.dp4j.com Feedback is welcome.</body>
  </mail>
  <mail>
    <header>Re: Re: Unit testing a private method??</header>
    <body>Well, in my opinion it does not make sense for you to test an private method! If  you feel like doing it, it's a matter that your class is doing more than it should, without cohesion. Extract Class for this responsibility and your good to go. On Fri, Feb 25, 2011 at 5:27 PM, gabriele.kahlout</body>
  </mail>
  <mail>
    <header>Mark failed assumptions as ignored?</header>
    <body>Hi I have not followed JUnit for a while. I have mostly been using ScalaTest and Midje. Today I felt that using JUnit with scala might not be the worst idea. I feel that the scala tools are lacking in... inderstanding of the TDD/BDD approach (which is just a feeling). Long story short, I want to do something like scalaTests pendingUntliFixed which basically makrs a failing test as ignored until it stops failing where pendingUntilFixed will start failing the test saying that "test was marked as pending but did not throw an exception"  (so that you will not accidentally leave pendingUntilFixed in for code tests that work. I realized that this is very easy to do in JUnit from scala. Something like this: The problem is that pending tests are marked as succeding when they fail. It would be cool if I could somehow mark them as Ignored instead. Is there some exception I could throe that would accomplish this? I sort of thought that AssmptionError would be logical to be displayed as ignored instead of succeeding hence the title. Ideas? ----------------------------------------------------- Joakim Ohlrogge Agical AB Västerlånggatan 79, 2 tr 111 29 Stockholm, SWEDEN Mobile: +46-708-754004 Blog: johlrogge.wordpress.com E-mail: joakim.ohlrogge@...</body>
  </mail>
  <mail>
    <header>is there any way to stop the exection of the Junit Test programatically</header>
    <body>Hi folks, i would like to know if there is any way to stop the execution of the JUnit test programmatically</body>
  </mail>
  <mail>
    <header>is there any way to log meessge in the repot</header>
    <body>HI Folks, I would like to know if there is any way to log the message in the report as there is in RerpotNG.</body>
  </mail>
  <mail>
    <header>Re: is there any way to log meessge in the repot</header>
    <body>Â  What are you using to create the report? Ant? The Ant JUnit tasks logs all output to the xml test result files. You can adaptÂ Ant's JUnitReport stylesheet to include logging in your report. Regards, Jan ________________________________ To: junit@yahoogroups.com Sent: Monday, February 28, 2011 8:48:38 Subject: [junit] is there any way to log meessge in the repot Â  HI Folks, I would like to know if there is any way to log the message in the report as there is in RerpotNG.</body>
  </mail>
  <mail>
    <header>Re: Re: Unit testing a private method??</header>
    <body>Folks... I only ever test a private function when I'm attacking some legacy code. That desire to test is evidence for me of a Large Class smell.  Sometimes in a legacy world, a given class will have broken out the functionality poorly, and it can be dauntingly expensive to re-arrange the entire -- typically testless -- class. When I'm tdd'ing, I only ever create a private while refactoring from an adequately tested public. Cheers, Hill  Real Advise For Real Coaches</body>
  </mail>
  <mail>
    <header>Re: is there any way to stop the exection of the Junit Test programatically</header>
    <body>In some cases, yes.  Two questions: 1) Are you using the JUnit 3 runner or JUnit 4 runner? 2) Do you want to stop the execution from inside a test class, or using an outside interface/GUI? test programmatically</body>
  </mail>
  <mail>
    <header>Re: Mark failed assumptions as ignored?</header>
    <body>Joakim, Welcome back.  :-) The idea always was to have assumption failures be treated the same as ignored tests.  Unfortunately, there was no way to make that happen in Eclipse without changing Eclipse, and we lost momentum on the feature. If you have some energy to push matters forward, or patience to wait until I do, or tenacity to keep reminding me, I'd appreciate any or all. On Sat, Feb 26, 2011 at 10:30 AM, Joakim Ohlrogge</body>
  </mail>
  <mail>
    <header>Re: Testing a helper class with a factory method</header>
    <body>Doug, I've found that discussions about what constitutes a "unit test" vs a "developer test" can often be improved by focusing on the goals. If your current implementation is sufficient to catch the bugs you care about, and it runs fast enough in the situations you wish it did, then you're good to go.  There's several situations in which you might want to consider redesigning to provide more isolation and flexibility: 1) You want to hypothetically test situations which are difficult to simulate with a real database (for example, what if the initial connection works, but subsequent calls to the database time out?) 2) Connections to the database are slow enough that your personal development rhythm stalls. 3) The test database you want to use is not reliable enough, or is not available everywhere you wish you could run the tests. In those cases, you might consider using a test double for the database, to isolate the behavior of SQLHelper from the behavior, performance, and availability of the underlying database. Does that help? this.password, this.driver) "newInstance" which unless given a correct url and a valid driver will throw an exception.  So in providing this information it's making me think this is more an integration test rather than a unit test.  Am I off course here?</body>
  </mail>
  <mail>
    <header>Re: Re: Automatic parallel- (aka regression-) testing in JUnit</header>
    <body>Julian, Have you looked at Vise, by Michael Feathers?  It might be a starting point.  Please let us know what you come up with! On Wed, Feb 23, 2011 at 10:11 PM, julianbutnotassange how to achieve the core bits, i.e. the generic comparison (ideally picking out floats that are to be compared according to the given tolerance) and the generic persistence of arbitrary objects. here because I'd love to hear that someone has already done this, or anyway if there is general interest in this kind of extension in the JUnit community.</body>
  </mail>
  <mail>
    <header>Re: Howto set a proper description name for a Request created for a list of classes?</header>
    <body>Rene, Sorry for the late reply.  I've been on vacation.  The most important question is: is it OK if the display name is the name of an existing Java class?  The framework is built in a way that makes things much easier if that restriction can be satisfied.  Thanks, Request.classes(SOME_VALID_CLASSES).getRunner().getDescription().getDisplayName(\ ) via: the description name in the overwritten method to use it in its XML output:</body>
  </mail>
  <mail>
    <header>Re: Howto set a proper description name for a Request created for a list of classes?</header>
    <body>Hi David, I dunno where I should put another class when calling: Request.classes(SOME_VALID_CLASSES).getRunner().getDescription().getDisplayName(\ ) But why not. I am looking forward to seeing nice solutions. What also confuses me is that testCount() is returning 1 in case no these methods have been found when calling: Request.classes(SOME_VALID_CLASSES).getRunner().testCount() I already have seen the implementation and other threads talking about it. But I don't understand why it should be as it is. Looks like it is always necessary to perform a: new JUnitCore().run(request).getRunCount() to get the test count. Regards, René Scheibe Request.classes(SOME_VALID_CLASSES).getRunner().getDescription().getDisplayName(\ )</body>
  </mail>
  <mail>
    <header>Re: Howto set a proper description name for a Request created for a list of classes?</header>
    <body>Request.classes(SOME_VALID_CLASSES).getRunner().getDescription().getDisplayName(\ ) Rene, Yeah, with the current implementation of JUnit, it's not that simple. Your best bet is to replace your original code with: Will that work for you? That sounds like a bug.  Would you mind opening it at  compilable test case that demonstrates the problem?  There's been a lot of activity on JUnit recently, and that will be a big help in making sure the issue doesn't get lost.  Thanks! Request.classes(SOME_VALID_CLASSES).getRunner().getDescription().getDisplayName(\ )</body>
  </mail>
  <mail>
    <header>Tooling feedback please: JUnit @Test, @RunWith etc annotations as meta-annotations proposal</header>
    <body>I'm currently pursuing a number of proposal to enhance the DRYness and clarity of JUnit based tests. One valuable improvement in this area would be to allow common annotations to be specified and documented in one place as meta-annotations. For example, the @Category annotation can be applied to classes or test methods to mark the suite or test as belonging to one or more categories. Without meta-annotations, you can end up with something like: @Category(SmokeTests.class, PerformanceTests.class) and @Test(timeout=100) @Category(PerformanceTests.class) or, for Spring users, you get: @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration("classpath:/repositoryMocks.xml, classpath:/service-context.xml") @TransactionConfiguration(defaultRollback=true) @Test(timeout=1000) @Transaction(readOnly=true) With meta-annotations: /** * Description of the general approach to service layer test and why these specific contexts are used */ @Documented @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.TYPE) @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration("classpath:/repositoryMocks.xml, classpath:/service-context.xml") @TransactionConfiguration(defaultRollback=true) /** * This is used to test user interactions where services can be running against read-only repository slaves... etc. * The default timeout is according to our quality of service requirements...etc. */ @Documented @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.METHOD) @ServiceLayerTests @ReadOnlyUserInteractionTest As shown, the ability to allow JUnit annotations to be specified as meta-annotations adds a big win to development teams working on large projects where common approaches and centralised documentation will benefit. With changes as proposed in  to recognise meta-annotations. For those of you who work on tools based on JUnit, it would be great to get some feedback on this, as you may be looking for the @Test etc annotations yourself, but not as meta-annotations. -- Neale Upstone Open Credo Ltd  Excellence in Enterprise Software Development Certified SpringSource Delivery Partner</body>
  </mail>
  <mail>
    <header>Progress on JUnit issues...</header>
    <body>All, Over the last week or so, I've triaged almost 200 JUnit issues that have accumulated over the last year, closing about 80 truly invalid issues that were fixed, duplicates, or no longer made sense. I tagged the rest with: - regression bugs (9): there was an implementation of the feature that worked prior to the 4.9 beta (although potentially earlier than 4.8.x)) - nonregression bugs (15): it is likely the feature has always failed in the documented way. - features (~95): additions to the (implicit) spec, with implementations to provide the additions. Thanks to everyone who has been submitting problems, proposals, and patches.  I'm sorry that some of you have been waiting so long for a response. The next part of the development plan, in order: - Fix the regression bugs - Release a 4.9 beta 3 - Hopefully 4.9b3 can become the final release.  (I am not planning any nonregression bug fixes or new features to get into the 4.9 release.  We need to steer this ship back toward frequent releases.) - Create a github project for junit.contrib. - Go through the backlog of pull requests, to see which can be accepted as is, and which either need changes, or should be redirected into junit.contrib. - Work through non-regression bugs for further releases in the 4.9.x series - Choose a number of highly-rated feature requests to be the scope for 4.10, and begin (patch acceptance / implementation) I'm excited to see this project keep moving forward,</body>
  </mail>
  <mail>
    <header>Maven help for JUnit</header>
    <body>All, Looks like junit-dep is not being uploaded to maven:  It may finally be time for me to just take over running the script that makes the magic happen, since this seems to be a major obstacle for many people trying to get new features and bug fixes from JUnit. Can I ask again for help from the maven-initiated?  Best thing would be a pull request with a shell script that I can run on release, without needing to understand too much about what it does.  Thanks,</body>
  </mail>
  <mail>
    <header>Re: Progress on JUnit issues...</header>
    <body>David, There is a problem in parking feature requests for 4.9 in that 4.9 is a feature release and introduces API changes e.g. TestRule, which are subject to debate over API (e.g. the desire from the Spring point of view to have Object target in there to allow us to replace SpringJUnit4ClassRunner with a Rule). If TestRule is released as is in 4.9, then it's setting a very constrained direction which will be difficult to change in 4.10. -- Neale Upstone Open Credo Ltd  Excellence in Enterprise Software Development Certified SpringSource Delivery Partner</body>
  </mail>
  <mail>
    <header>Re: Progress on JUnit issues...</header>
    <body>Neale, Excellent point.  However, I think the Open/Closed Principle should guide us here.  TestRule is a distillation of a subset of MethodRule. That subset of MethodRule has already had dozens of uses in open source code accessible to Google Code Search, without need for enhancement.  I consider TestRule a fairly well-tested API addition. I'm looking forward to releasing 4.9 with TestRule as currently specified, and then, in the 4.10 cycle, figuring out new extension points that will have a similar bang-for-buck.  See, for example,  influenced by some of your feature suggestions.  I'm hoping it will go a long way toward solving the Spring extensibility problem among many others. It's been over a year since 4.8.  I don't intend for 4.9 to spend nearly as long as the most recent feature release. On Sat, Mar 5, 2011 at 3:59 AM, Neale Upstone</body>
  </mail>
  <mail>
    <header>Re: Maven help for JUnit</header>
    <body>It wasn't being reliably done for a while, but I backfilled all obtainable versions of both flavours when I assisted with uploads of 4.8.2 in October 2010. This was handled under At the time I wasn't aware of: or it need not have remained open. Since then it seems to have exploded into discussion beyond the initial remit of the issue. Reading the cover letter of makes it sound as if all necessary scripting work has already been done. (Someone would then take the output of the script and upload it through the oss.sonatype.org web interface) Max.</body>
  </mail>
  <mail>
    <header>Re: Maven help for JUnit</header>
    <body>Max, Thanks for all of your help on that.  It made a big difference for many users.  With 4.9, I want to try something new: after posting the jars on github, I'll also try to immediately upload them to maven central.  I'm asking for help automating that process from people who have more familiarity with the concepts.  You're right that the discussion doesn't necessarily make sense underneath that issue any more. Yep, I think we're almost there.</body>
  </mail>
  <mail>
    <header>Re: Maven help for JUnit</header>
    <body>I'm not sure I entirely understand this, but the guidelines from sonatype for deploying to central with ant  +Repository+Usage +Guide#SonatypeOSSMavenRepositoryUsageGuide-7c.StageArtifactswithAnt Seem to be just what is required here ? I see there is a shell-script in a pull request, there's probably some complication I don't understand here ? Given that junit builds with ant (well mostly...) and the problem is easily solved with ant, why not just use ant ? Whoever makes the release just runs a few extra ant steps, closes the staging repo on oss.sonatype.org and voila ? Kristian fr., 11.03.2011 kl. 09.21 -0500, skrev David Saff:</body>
  </mail>
  <mail>
    <header>Re: Mark failed assumptions as ignored?</header>
    <body>Thanks for the update (and the welcome back). Yes, it seems like there is a bit of a problem that eclipse has gone a bit stale. I can imagine that it puts constraints on the JUnit development. I am currently loosing myself in Ensime-land (silly I know) so it will be a while before I come to my senses and decide that it's a good idea to make stuff work in eclipse. Meanwhile, here is my latest yak-shaving effort related to JUnit. Poju4s:  more-scala-friendly/ Enjoy! :) /J</body>
  </mail>
  <mail>
    <header>Re: Mark failed assumptions as ignored?</header>
    <body>Joakim, Not silly at all.  I'm looking forward to a future where the lessons of Eclipse bear fruit in more Emacs-like environments.  I wish I had more time to play with Scala, but I appreciate your efforts there.  If you'd like to contribute any of it to a future junit.contrib project, let us know. On Fri, Mar 11, 2011 at 1:54 PM, Joakim Ohlrogge &amp;lt;joakim.ohlrogge@...  more-scala-friendly/</body>
  </mail>
  <mail>
    <header>Re: Mark failed assumptions as ignored?</header>
    <body>Not sure I'd describe Eclipse as having gone stale.  Is there anything on bugzilla for this feature? Last time I did something around this (which was adding support for did a patch.  The feature got added. I'm sure a decent patch would also be true of marking an assumption as ignored.  What's the score in CI systems?  I've not used assumptions there.  Do they too just register a failed assumption as a passed test?  more-scala-friendly/</body>
  </mail>
  <mail>
    <header>Re: Mark failed assumptions as ignored?</header>
    <body>If anything useful comes out of it it can be contributed for sure. I've chosen a quite liberal license (Beerware :)) in case someone else feels inspired to borrow/steal or contribute. Lets see where it goes. Right now it's mostly for fun. /J ----------------------------------------------------- Joakim Ohlrogge Agical AB Västerlånggatan 79, 2 tr 111 29 Stockholm, SWEDEN Mobile: +46-708-754004 Blog: johlrogge.wordpress.com E-mail: joakim.ohlrogge@...  more-scala-friendly/</body>
  </mail>
  <mail>
    <header>Re: Mark failed assumptions as ignored?</header>
    <body>Careless phrasing from my side. My apologies. My perception is that there has been a slowdown in the eclipse development when it comes to exciting surprises from version to version. I have not payed as close attention during the recent year or so as I used to and my focus have been more specifically on the scala support than anything else. I prefer Eclipse over other IDE's for java work. I guess I just don't get blown away by new stuff much lately. So "gone stale" could probably just mean "matured". On the other hand, assumptions have been around for a while... I don't know how CI-systems handle assumptions but I've had chance play with the JUnit runner enough lately to see that failed assumptions are reported as assumption-failures via the RunListener so there is no reason why they couldn't treat assumptions specifically (but I think that team city at least did not do that). I think with assumptions the situation is a little bit that support is not added because people in general don't use it much and people don't use it much because it's not well supported... (and maybe not well known... but what comes first..) /J On Fri, Mar 11, 2011 at 8:12 PM, Neale Upstone  more-scala-friendly/</body>
  </mail>
  <mail>
    <header>Re: Mark failed assumptions as ignored?</header>
    <body>Hey. No need for apols. I've committed... ooh... about 10 lines, but do enjoy seeing my feature requests and bugs get sorted. I think you're right about 'matured' esp on Java front. It'll be intesting to see what comes of good support for other languages. Andrew Eisenberg and Andrew Clement have blazed a bit of a trail leveraging their experience on AJDT to provide Groovy tooling. Scala is surely then next big thing for the enterprise IMO. Beerware... absolutely!  more-scala-friendly/ -- Neale Upstone Open Credo Ltd  Excellence in Enterprise Software Development Certified SpringSource Delivery Partner</body>
  </mail>
  <mail>
    <header>Re: Mark failed assumptions as ignored?</header>
    <body>Hi Joakim, On Fri, Mar 11, 2011 at 3:18 PM, Joakim Ohlrogge ScalaTest to make writing JUnit tests in Scala more productive. And perhaps you're aware you can run ScalaTest tests in the Scala interpreter by invoking execute on them. So for example given this test: import org.scalatest.junit.JUnitSuite import scala.collection.mutable.ListBuffer import _root_.org.junit.Test import _root_.org.junit.Before You could run it in the interpreter like this (both ScalaTest and JUnit need to be on the classpath): user-64-9-237-191:scalatest-1.3 bv$ scala -cp scalatest-1.3.jar:junit-4.4.jar Welcome to Scala version 2.8.0.final (Java HotSpot(TM) 64-Bit Server VM, Java 1.6.0_22). Type in expressions to have them evaluated. Type :help for more information. scala&amp;gt; :load HowSuite.scala Loading HowSuite.scala... import org.scalatest.junit.JUnitSuite import scala.collection.mutable.ListBuffer import _root_.org.junit.Test import _root_.org.junit.Before defined class HowSuite scala&amp;gt; (new HowSuite).execute() Test Starting - line5$object$$iw$$iw$HowSuite: verifyEasy Test Succeeded - line5$object$$iw$$iw$HowSuite: verifyEasy Test Starting - line5$object$$iw$$iw$HowSuite: verifyFun Test Succeeded - line5$object$$iw$$iw$HowSuite: verifyFun Just create a new instance and call execute on it and it will run. (This is a JUnit 4 test class, so JUnit can run it jut fine. In this case you're asking ScalaTest to run it, though what ScalaTest does is turn around and ask JUnit to run it, capturing and displaying the results.) If you want to run just one of those tests you can specify it by name: scala&amp;gt; (new HowSuite).execute("verifyFun") Test Starting - line5$object$$iw$$iw$HowSuite: verifyFun Test Succeeded - line5$object$$iw$$iw$HowSuite: verifyFun And you can pass in config map of configuration information to execute if you want. It works, but it is ugly. The output has two problems. One is that because I loaded the class with :load into the interpreter, instead of compiling it, I get very long names for the class name with lots of dollar signs. So one enhancement would be to drop everything to the left of the first dollar sign. I'm pretty sure I'm doing that somewhere else in ScalaTest, so I could do it here. The other annoyance is you get info on both TestStarting and TestSucceeded, two lines of info for each test. What I originally did was only format the output of BDD style test traits, because BDD was in part about output that looks like a spec, and TDD was not. But I've gotten clear feedback that people using the non-BDD traits would like pretty output too, so I've already decided to change that. So it should soon look something like: scala&amp;gt; (new HowSuite).execute() HowSuite - verifyEasy - verifyFun Another thing I did originally was not show color when you use execute(), because I wasn't sure how to let people turn color off, and I felt it was worse to force color on people whose terminals didn't support it than the other way around. But people really like color. It is pretty and makes it more readable. So what I'd like to do is figure out some way to let people configure color, full stack traces, and durations when using execute. Now that Scala has default params, that's probably the right way to do it. So color would be the default, and to turn it off you'd say: scala&amp;gt; (new HowSuite).execute(color = false) And lastly, your dots idea is interesting. Whenever I run with a standard out reporter, I get lots and lots and lots of green test names that passed. And what I really care about is the ones that failed. So I think it may make sense to add one more option to the standard out/err and file reporters that just shows one dot for each passed test. And then that could possibly be the default for execute, maybe. And lastly lastly, maybe execute should show a summary line at the end, like the runner does. As far as getting JUnit to do something like pending and pendingUntilFixed, that will be tough until JUnit can treat some kind of exception specially. Be nice to have a TestIgnoredException that gets reported as an ignored test in JUnit someday. Bill  more-scala-friendly/ -- Bill Venners Artima, Inc.</body>
  </mail>
  <mail>
    <header>Re: Adding Junit to Eclispe</header>
    <body>Greg, Just to be clear, you're hoping to see New &amp;gt; JUnit Test Case on the right-click list, right? Are you sure your Eclipse version is 1.3.1.20100916-1201?  Eclipse 3 was many years ago.  Just a first check.  Good luck, the drop down menu on eclipse. I have right click on the project and clicked on New and was expecting to see Junit as an option here which it wasn't.  It also is not showing as an option under the Other selection either. This for:</body>
  </mail>
  <mail>
    <header>Re: Need BeforeSuite and AfterSuite functionality</header>
    <body>Dean, Sorry this has gone on so long without a conclusion.  I think we may be working from different assumptions.  Let's see if an example helps. Given this code: @RunWith(Suite.class) Given the current implementation of JUnit, there will never be any instances of the class AbSuite created.  There will be three instances of A created, right before the execution of a1, a2, and a3, and likewise for B.  I believe that you are assuming that one instance of AbSuite gets created, and it should be possible to store data and execute methods against that instance.  I think that could be an elegant way to get what you want, although there are design issues to think through, to make sure that all the existing functionality makes sense in that world.  Would you be interested in opening a feature request to discuss that? In the meantime, here's a more complicated way to get what you want with today's codebase: @RunWith(WrappedSuite.class) This takes advantage of the fact that a new Runner is constructed each time AbTests is run, and hangs the behavior and data off that runner instance.  Will that work for now?  Good luck, write a record to the database.  Each instance will have its own uuid which will be stored in the record in the database and then stored in an instance variable for use by the AfterClass method.  The AfterClass method will update that same record referred to by the uuid.  If the BeforeClass is static I have to store the uuid in a static variable - which would result in the uuid being overwritten if multiple instances ran simultaneously.  AfterClass could update the wrong record because the uuid had changed.  I definitely don't want a static method if there is a chance the TestSuite could be executed simultaneously. in Before / After class methods, make those methods non-static and they can call a static method for the static functionality.  Forcing them to be static creates concurrency issues if more than one instance runs concurrently. static methods. TestSuite was created.  I don't know how JUnit creates its instances - I was just guessing.) end the collection of performance metrics.  I definitely don't want them called concurrently. AfterClass can just call static methods if static functionality is desired. not once per test.  It is possible (but not likely) that my test suite could be executed concurrently in the same JVM, so static methods could be a problem. suites.  The javadocs are confusing: class have been run." not clear what will happen with a suite. suite. @Test in the Suite itself.  It is not clear to me that AfterClass would be called in this case (a Suite with no @Test in it). need to implement is once per instance, not once for all instances.</body>
  </mail>
  <mail>
    <header>RE: Adding Junit to Eclispe</header>
    <body>Hi, David Sorry I gave the version number for the Eclipse ID for Javascript Developers. Below are the installation details.  The Eclipse version is 3.6.1: Eclipse IDE for Javascript Developers 1.3.1.20100916-1202 epp.package.javascript org.eclipse.platform.feature.group org.eclipse.help.feature.group org.eclipse.rcp.feature.group org.eclipse.equinox.p2.user.ui.feature.group Thanks, Greg To: junit@yahoogroups.com From: david@... Date: Mon, 14 Feb 2011 11:53:49 -0500 Subject: Re: [junit] Adding Junit to Eclispe Greg, Just to be clear, you're hoping to see New &amp;gt; JUnit Test Case on the right-click list, right? Are you sure your Eclipse version is 1.3.1.20100916-1201? Eclipse 3 was many years ago. Just a first check. Good luck, David Saff the drop down menu on eclipse. I have right click on the project and clicked on New and was expecting to see Junit as an option here which it wasn't.  It also is not showing as an option under the Other selection either. This for:</body>
  </mail>
  <mail>
    <header>Re: Adding Junit to Eclispe</header>
    <body>Greg, If your project is recognized as a Java project by Eclipse, then you should indeed see New &amp;gt; JUnit Test Case.  Have you tried with a non-milestone version? On Mon, Feb 14, 2011 at 3:23 PM, Gregory Cooper  Below are the installation details.  The Eclipse version is 3.6.1: epp.package.javascript org.eclipse.platform.feature.group org.eclipse.help.feature.group org.eclipse.rcp.feature.group org.eclipse.equinox.p2.user.ui.feature.group the drop down menu on eclipse. I have right click on the project and clicked on New and was expecting to see Junit as an option here which it wasn't.  It also is not showing as an option under the Other selection either. This for:</body>
  </mail>
  <mail>
    <header>Re: Adding Junit to Eclispe</header>
    <body>Hi Gregory, Sorry if this is a stupid question, but are you sure your version of Eclipse has support for Java as well as Javascript development? The JDT (Java Development Tools) package is not included in the version list you provide here. Cheers, Ben -- Dr Ben Waugh                                   Tel. +44 (0)20 7679 7223 Dept of Physics and Astronomy                  Internal: 37223 University College London London WC1E 6BT</body>
  </mail>
  <mail>
    <header>RE: Adding Junit to Eclispe</header>
    <body>Hi, Ben It appeared to, it had java plug in options, but when I uninstalled the javascript and installed the java version, I was able to see the Junit Test Case option. I appreciate the help, thanks.</body>
  </mail>
  <mail>
    <header>RE: Adding Junit to Eclispe</header>
    <body>H, David I have uninstalled the javascript version and installed the java version.  I can see the Junit Test Case option now. Thanks for your help To: junit@yahoogroups.com From: david@... Date: Mon, 14 Feb 2011 16:37:06 -0500 Subject: Re: [junit] Adding Junit to Eclispe Greg, If your project is recognized as a Java project by Eclipse, then you should indeed see New &amp;gt; JUnit Test Case. Have you tried with a non-milestone version? David Saff On Mon, Feb 14, 2011 at 3:23 PM, Gregory Cooper Below are the installation details.  The Eclipse version is 3.6.1: epp.package.javascript org.eclipse.platform.feature.group org.eclipse.help.feature.group org.eclipse.rcp.feature.group org.eclipse.equinox.p2.user.ui.feature.group the drop down menu on eclipse. I have right click on the project and clicked on New and was expecting to see Junit as an option here which it wasn't.  It also is not showing as an option under the Other selection either. This for:</body>
  </mail>
  <mail>
    <header>Re: Re: Misc improvements</header>
    <body>David, how many votes has the issue with the most votes? As far as I can check: 17. This is clearly nothing compared to the JUnit user community what clearly demonstrate for me that it is not the appropriate way to evaluate an improvement (I'm quite sure that I could quickly motivate far more than 17 users to vote for one issue but it would be biased). Currently you "are" JUnit therefore I'd like to know from *you* what *you* think of these suggestions. Or don't you use JUnit? ;-) Cheers, Marc. -- HtmlUnit support &amp;amp; consulting from the source Blog: Le 14/02/2011 17:50, David Saff a écrit : long enough to have an idea of what happens there, therefore I will use my time for other activities. features below for integration in JUnit. If yes, I would look at providing patches and if not, I'll find an other way to waste my time ;-) test effect of command line JVM switches for instance runner running tests in parallel configure usage per method (a bit like TestNG) and for different types fail. A failure should be reported as success whereas a success should be reported as failure. This has proven to be far more interesting than @Ignore which is just a little better than removing a test: @NotYetImplemented allows to write tests for "accepted" bugs or future features and to get notified when they are fixed as side effect of other changes what allows IDE like Eclipse to better display differences between expected and actual result.</body>
  </mail>
  <mail>
    <header>Re: Re: Misc improvements</header>
    <body>Marc, Actually, that would be a really interesting experiment.  I hope you're right that the current voting at github drastically undercounts the number and passion of JUnit users. I do use JUnit, and each of these suggestions looks potentially useful.  However, each of them also could work just fine as an extension to JUnit.  If I create a junit-contrib project soon for extensions outside the JUnit core, would you like to be one of the first contributors?  Thanks, long enough to have an idea of what happens there, therefore I will use my time for other activities. features below for integration in JUnit. If yes, I would look at providing patches and if not, I'll find an other way to waste my time ;-) test effect of command line JVM switches for instance runner running tests in parallel configure usage per method (a bit like TestNG) and for different types fail. A failure should be reported as success whereas a success should be reported as failure. This has proven to be far more interesting than @Ignore which is just a little better than removing a test: @NotYetImplemented allows to write tests for "accepted" bugs or future features and to get notified when they are fixed as side effect of other changes comparison what allows IDE like Eclipse to better display differences between expected and actual result.</body>
  </mail>
  <mail>
    <header>Any Junit tutorial class in California?</header>
    <body>Do you know any Junit class in California (Class room or online)?</body>
  </mail>
  <mail>
    <header>Re: Newcommers Problem with junit 4, jmock 2 and hamcrest.</header>
    <body>If you're new, I wouldn't start with our book, it's intended for people with some experience. Off the top of my head, I still recommend Dave Astels' book for getting the concepts (I'm sure there are others). Then Kent Beck's. S. Steve Freeman  Winner of the Agile Alliance Gordon Pask award 2006</body>
  </mail>
  <mail>
    <header>Re: Re: Misc improvements</header>
    <body>David, please be serious, everybody knows that it is an other order of magnitude! I have the unpleasant impression that you didn't really read the suggested improvements. At least one (probably two) of my propositions surely can't work as an extension to JUnit. of course (if we spend time discussing about the content rather than about the form). Cheers, Marc. -- HtmlUnit support &amp;amp; consulting from the source Blog:</body>
  </mail>
  <mail>
    <header>Re: Re: Misc improvements</header>
    <body>Marc, Yes, surely they can: ForkingVMTestRunner: additional runner ParameterizedRunner: additional runner NotYetImplemented: an additional annotation enabled by an additional Runner or additional Rule. assertEquals &amp;amp; IDE integration: an additional static assert method (when we change the built-in assertEquals, it breaks tests that have been running fine for years.  This tends to cause Bad Days for already over-worked people.  A separate static method is an easy way for people to opt-in to the new behavior) Most interesting is ParallelRunner.  From your description, this appears to be a Runner that exposes the work already latent in the ParallelComputer class and others.  It would be interesting if you had to make any changes to the existing classes in order to produce this new Runner without duplication.  Thanks, ? a runner executing the unit tests in a forked virtual machine allowing to test effect of command line JVM switches for instance - ParrallelRunner JUnit already contains nearly the whole code for that but not available as runner running tests in parallel - ParameterizedRunner a runner far more flexible than JUnit's Parameterized runner allowing to configure usage per method (a bit like TestNG) and for different types - @NotYetImplemented this is an annotation allowing to indicate that a unit test is expected to fail. A failure should be reported as success whereas a success should be reported as failure. This has proven to be far more interesting than @Ignore which is just a little better than removing a test: @NotYetImplemented allows to write tests for "accepted" bugs or future features and to get notified when they are fixed as side effect of other changes - assertEquals &amp;amp; IDE integration small improvement to throw ComparisonFailure not only for String comparison what allows IDE like Eclipse to better display differences between expected and actual result.</body>
  </mail>
  <mail>
    <header>Re: Re: Misc improvements</header>
    <body>Le 21/02/2011 16:44, David Saff a écrit : yes it could but it doesn't makes sense. As runners can't be composed, it should be handled at the root like @Ignored this doesn't make sense for me at all. First who will call Assert.assertEquals in some cases and SomeUtils.assertEquals in other cases? Second, I'm quite sure that changing to wouldn't have the drawbacks you describe. Even better it would align the code to what is currently done for Strings. just make the anonymous RunnerScheduler in ParallelComputer.parallelize reusable and it's done. This was my last email on this subject. This is clear to me that you are not interested in what I propose. I'm not really surprised as it confirms the experience made by others in the past. This is sad because I still think that a lot of JUnit users would love improvements but at the end, it is your decision. Cheers, Marc. -- HtmlUnit support &amp;amp; consulting from the source Blog:</body>
  </mail>
  <mail>
    <header>Re: Re: Misc improvements</header>
    <body>Marc, But Rules can be composed. Changing AssertionFailedException to AssertError as part of the upgrade from JUnit 3 to JUnit 4 internally to Google broke dozens of test suites.  People write custom assertion packages, and then write tests for those packages.  I'm quite sure that this change would have a similar effect, multiplied by a much wider user base.  It would be odd to me to assert both that this change is so useful, it's worth the potential breakage, but so useless, no one would be willing to change their static imports to use it. If we were to make this available in junit-contrib, we could see how wide its usage was, and then have data to add to the discussion, not just the force of our convictions. I'd welcome a patch to do this. Marc, I invited you to submit your ideas to the same process that everyone else's ideas are evaluated.  You responded that responsiveness in that arena was lacking.  I spent a long time thinking about that, and sent a long response entitled "JUnit issue responsiveness", where I tried to directly discuss the "experience made by others in the past", and my plans for improving it.  I have invited you to contribute to those plans.  I have, in total, spent several hours addressing these ideas of yours, at no cost to yourself, not even the time it would have taken you to copy and paste your ideas over to github. Every addition into the core JUnit jar has a cost, as well as a benefit, to future maintainers, extenders, and users.  At this point, I do not think that changing to a model in which someone mails five one-line ideas to a mailing list, and I simply say "sure, I'll accept all of those patches if you write them" would be beneficial to everyone involved.  Please, try to convince me otherwise, ideally over at the thread "JUnit issue responsiveness", so I can learn from your experiences. I'm sorry if this does not appear to you to be "interest".  I truly hope that you, or other interested users, can partner with me to take JUnit forward, and welcome your contributions in the future.</body>
  </mail>
  <mail>
    <header>How to run JUNIT Test suite from ANT</header>
    <body>Hi All, Am struck with Running JUnit Test suite from Ant. Could some one help me by providing tutorial in integrating JUnit Test suite with Ant . Thanks. -- _______________________ Satheesh.J 99012 00778 _______________________</body>
  </mail>
  <mail>
    <header>need help combining UML with the Junit</header>
    <body>hey everyone, i need help combining the UML with the Junit, i need to know how to create the unit tests from the UML diagram, please do help me, i'm really all alone in my project and i'm in a very short timestamp...... i appreciate you taking time to read this and i'm very thankful for any help you can give me...</body>
  </mail>
  <mail>
    <header>Re: need help combining UML with the Junit</header>
    <body>roua, I'm sorry for the short timeframe you've been given.  There's no automatic way to create unit tests from a UML diagram.  You want to think through what the classes and methods in your program do, and how you can check them.  Usually this requires more information about the behavior of your code than can be gleaned from a UML diagram, which usually just indicates structure.  I hope you can negotiate a more realistic assignment.  Good luck, unit tests from the UML diagram, timestamp...... you can give me...</body>
  </mail>
  <mail>
    <header>Re: How to run JUNIT Test suite from ANT</header>
    <body>Satheesh, There is some good documentation if you Google for "junit ant".  Can you be more specific about what you're trying, and what's happening in response?   Thanks, On Tue, Feb 22, 2011 at 1:26 AM, Satheesh Jayabalan</body>
  </mail>
  <mail>
    <header>Re: need help combining UML with the Junit</header>
    <body>dear professor david, u have no idea how much i'm happy with your answer, what about using the JML with the Junit???? the JML gives the needed info for the code generation and the Junit specification. do u think it can work with the UML ????</body>
  </mail>
  <mail>
    <header>Re: need help combining UML with the Junit</header>
    <body>roua, Generating JUnit test cases from JML has been done on a research basis.  I'm not aware of an enterprise-ready tool to do it automatically.  Good luck,</body>
  </mail>
  <mail>
    <header>Re: Re: Misc improvements</header>
    <body>Hi Marc, I don't see, that David does not have any interest in accepting your changes. I too feel, that he is trying hard to find a way to accomodate your changes. But yes, this accomodation is not: We will build it all into JUnit. And that's ok for me (as a JUnit user). If that's the only acceptable answer for you, than I feel sorry, that we all can't benefit from your contributions. Kent Beck and David Saff work hard not to break existing usage of JUnit. That's a deliberate decision and it's quite reasonable, considering the large user base, that JUnit has. They also work hard to keep JUnit itself small (lean and mean), so it can be maintained and developed easily. They built lots of extension mechanisms to allow for the type of contributions, that you would like to make. If these extension mechanisms are not quite enough yet, then I would work to improve those in the JUnit core. (Combinable Runners might be one of those things, that are missing yet.) Greetings,</body>
  </mail>
  <mail>
    <header>Howto set a proper description name for a Request created for a list of classes?</header>
    <body>If I perform the below, it returns null. Request.classes(SOME_VALID_CLASSES).getRunner().getDescription().getDisplayName(\ ) How can I achieve to set a proper description name? I want to run some tests via: The attached RunListener (it creates the default JUnit XML output) should get the description name in the overwritten method to use it in its XML output:</body>
  </mail>
  <mail>
    <header>Automatic parallel- (aka regression-) testing in JUnit</header>
    <body>Hi there, I hope this is the right group to ask. Terminology in the literature is a bit all over the place so please be patient and let me try to clarify. (I'm also coming from a different language.) What I'm about to describe could potentially be done continuously, but it is drifting away from Unit testing into Integration/Story testing that I would do e.g. every day, or every week. Say I have a method that outputs an object of type MyClass. I have a version of this method in production, and I know it outputs an acceptable object. When I have a release candidate, I would like to calculate the object with the new code and compare against the object calculated with the production code, ideally according to a user-defined tolerance for floats. Let's say I have an integration test which simply calculates the value and performs some intrinsic tests on the output. I would imagine that with some generic, recursive reflection and persistence it would be possible to extend JUnit so that I can just add one line to my integration test, so that 1. if the test is run in "integration mode", that line is ignored 2. if the test is run in "regression_base mode" against production, it persists the output value (expected) somewhere 3. if the test is run in "regression_compare" mode, it loads back the expected and automatically and generically compares it against the actual that I already have in memory at that point and this would work for an arbitrary object of an arbitrary type, without requiring the test writer to write anything else. Something like this running in. Do you think this can be achieved in Java? Perhaps something has already been done? Thank you</body>
  </mail>
  <mail>
    <header>Re: Automatic parallel- (aka regression-) testing in JUnit</header>
    <body>Apologies, I just realised that I used 3 different identifiers for the same thing: myOutput, output, myObject Obviously the code does not compile :) Cheers, Julian and let me try to clarify. (I'm also coming from a different language.) drifting away from Unit testing into Integration/Story testing that I would do e.g. every day, or every week. acceptable object. new code and compare against the object calculated with the production code, ideally according to a user-defined tolerance for floats. performs some intrinsic tests on the output. it would be possible to extend JUnit so that I can just add one line to my integration test, so that persists the output value (expected) somewhere and automatically and generically compares it against the actual that I already have in memory at that point requiring the test writer to write anything else. Something like this running in. done?</body>
  </mail>
  <mail>
    <header>How to test inner exception with @Rule</header>
    <body>Hia all, I'm setting up an expected exception in a JUnit test. In the class I have: However, the exception contains an inner exception which I also want to check. Anyone know how I go about this? Thanks in advance Dave</body>
  </mail>
  <mail>
    <header>Re: How to test inner exception with @Rule</header>
    <body>Dave - you can use ExpectedException.expect(Matcher) [1] to supply a custom Hamcrest matcher that checks the inner exception of the exception. [1]  n.html#expect ) Best regards, Marc</body>
  </mail>
  <mail>
    <header>Re: How to test inner exception with @Rule</header>
    <body>Cheers Ken, The solution I came used was this: It's a bit of a mouth-full, but seems to do the trick. (I'm too scared to try and write a custom Hamcrest matcher)  Exception.html#expect to</body>
  </mail>
  <mail>
    <header>Re: Automatic parallel- (aka regression-) testing in JUnit</header>
    <body>Hi Julian, Let's say I have an integration test which simply calculates the value and I think so, though I haven't tried it. Here's an approach that occurs to me: - Declare the mode via a property on the command line. - Do assertions using objects rather than static methods. One asserter object does nothing. Another saves the actual result without comparing. The third compares actual to saved. - Use a factory to supply the appropriate asserter object, depending on the mode. Dale -- Dale Emery Consultant to software teams and leaders Web:</body>
  </mail>
  <mail>
    <header>Re: Automatic parallel- (aka regression-) testing in JUnit</header>
    <body>Thanks Dale, To be honest I'm not too concerned about how to implement the plumbing, but how to achieve the core bits, i.e. the generic comparison (ideally picking out floats that are to be compared according to the given tolerance) and the generic persistence of arbitrary objects. I guess it's more a Java question than it is a JUnit question, but I posted it here because I'd love to hear that someone has already done this, or anyway if there is general interest in this kind of extension in the JUnit community. Cheers, Julian</body>
  </mail>
  <mail>
    <header>Re: Need BeforeSuite and AfterSuite functionality</header>
    <body>I suppose per instance of test class. If your suite contains ATest.class twice, the @BeforeClass methods will only be run once, even though there are two instances. Also, @BeforeSuite/@AfterSuite is a pretty common need. -- Cédric</body>
  </mail>
  <mail>
    <header>Re: Need BeforeSuite and AfterSuite functionality</header>
    <body>Malte, I need to execute functionality once per instance of the test suite class, not once per test.Â  It is possible (but not likely) that my test suite could be executed concurrently in the same JVM, so static methods could be a problem. Thanks for clearing up how @BeforeClass, @AfterClass, and @Test work in suites.Â  The javadocs are confusing: "Annotating a public static void method with @AfterClass causes that method to be run after all the tests in the class have been run." That doesn't apply when I'm running a suite so based on the javadocs it's not clear what will happen with a suite. The javadocs for @Suite and @Test don't say the you can't have @Test in a suite. Subject: Re: [junit] Need BeforeSuite and AfterSuite functionality To: junit@yahoogroups.com Date: Monday, February 7, 2011, 1:36 AM Â  I'm not quite sure, I understand what you want. Putting @BeforeClass and @AfterClass into a suite will execute the @BeforeClass method once before the suite and the @AfterClass method once after the suite is done. in the Suite itself. Â It is not clear to me that AfterClass would be called in this case (a Suite with no @Test in it). Suites don't containt @Test methods. Suites gather Tests suites, but don't contain tests themselves. @Test methods in a suite don't get executed, since a suite is not a test. need to implement is once per instance, not once for all instances. Here is what I don't quite understand: Once per instance of what? Do you mean once before every test-method that is executed and once after every test method that is executed? Or do you mean once before the suite and once after the suite? The pattern I know of is: @BeforeClass and @AfterClass in the Suite-class. If you want to execute once before every test method and once after every test method, you need @Before-methods and @After-methods in the tests. Or use JUnit 4.8 @Rule Greetings,</body>
  </mail>
  <mail>
    <header>Re: Need BeforeSuite and AfterSuite functionality</header>
    <body>2011/2/7 CÃ©dric Beust â &amp;lt;cedric@...&amp;gt;: Actually, it will be run twice. What would this do that BeforeClass/AfterClass does not?</body>
  </mail>
  <mail>
    <header>Re: Re: Title: JUnit 4.9b2 (beta-)released</header>
    <body>While we're at it, can people who have written tests using MethodRule and its subtypes comment about whether they've found the public nature of the existing MethodRule.apply confusing or a nuisance in the past? Thanks, abstract classes. But I do not always use interfaces. Interfaces and abstract classes both have their place. It's hard to find simple rules to decide what to use where. for competent developers. Since TestRule has only one method, it's very easy to use delegation to share code. You could have your Rule have many methods that delegate to another object, or your Rule could have a single accessor to get the delegate, or you could create the Rule by calling a method on another object. making TestRule an abstract class has caused problems? Let's get them out now, before 4.9 releases.</body>
  </mail>
  <mail>
    <header>Re: Need BeforeSuite and AfterSuite functionality</header>
    <body>Dean, once per test.  It is possible (but not likely) that my test suite could be executed concurrently in the same JVM, so static methods could be a problem. Can you share a little more about what these methods will be doing? I'm trying to construct an example where I would want BeforeClass, but still be worried about concurrent execution, and my imagination is failing me.  Thanks! suites.  The javadocs are confusing: class have been run." I agree that the javadoc could be clearer.  @BeforeClass and @AfterClass on Suites is a decently well-known trick, but it isn't called out as much in the javadocs as it potentially should be. Good luck, clear what will happen with a suite. suite. in the Suite itself.  It is not clear to me that AfterClass would be called in this case (a Suite with no @Test in it). need to implement is once per instance, not once for all instances.</body>
  </mail>
  <mail>
    <header>Problems using @BeforeClass with parallel methods</header>
    <body>Hi, It is my understanding that @BeforeClass is supposed to run before any of the @Test methods contained in the same class. When I run my code in sequential mode, everything works fine, but when I enable parallel mode I am seeing that @BeforeClass no longer runs before the tests. I am using JUnit 4.8.1 using this POM configuration under Maven: Any ideas? Thank you, Gili</body>
  </mail>
  <mail>
    <header>Re: Problems using @BeforeClass with parallel methods</header>
    <body>Hi, I think, you must  use @Before annotation for run before any of the @Test methods contained in the same class. @BeforeClass annotated method runs once at the class initialize. -- *Musa YUVACI Yazýlým Geliþtirme Uzmaný / Bilgisayar Mühendisi* * musa.yuvaci@... www.musayuvaci.com * * * *CAN EROÐLU BÝLGÝ SÝSTEMLERÝ* *musa.yuvaci@...* *(0216) 358 29 96* ***www.enlil.com.tr * * *</body>
  </mail>
  <mail>
    <header>Re: Problems using @BeforeClass with parallel methods</header>
    <body>Gili, I'm not sure about the implementation of the maven surefire plugin. There might be a maven expert on this list who knows more.  You might also want to try the maven list.  If you uncover that Maven needs a bugfix or new feature in JUnit in order to handle this situation correctly, please let us know!  Thanks, @Test methods contained in the same class. When I run my code in sequential mode, everything works fine, but when I enable parallel mode I am seeing that @BeforeClass no longer runs before the tests.</body>
  </mail>
  <mail>
    <header>Re: Problems using @BeforeClass with parallel methods</header>
    <body>on., 09.02.2011 kl. 09.35 -0500, skrev David Saff: We're here. The plugin does little more than scan the classpath and forward to JUnitCore, so I think Musa has the correct solution.  nit47/src/main/java/org/apache/maven/surefire/junitcore/JUnitCoreProvider.java?v\ iew=markup Kristian</body>
  </mail>
  <mail>
    <header>Customizing generated test scaffolding in Netbeans 6.9</header>
    <body>The first thing I do when I begin testing a class is use the tools/Create Junit tests function that netbeans provides to layout a scaffolding of the junit tests. I could save a lot of time in my testing if I knew of a way to customize the output of this function (beyond the given "customization" options).  Does anyone know of a way that I can do this?</body>
  </mail>
  <mail>
    <header>Re: Customizing generated test scaffolding in Netbeans 6.9</header>
    <body>I'm not a NetBeans user.  Hopefully some here are, and can chime in! If not, please also consider NetBeans forums. Junit tests function that netbeans provides to layout a scaffolding of the junit tests. I could save a lot of time in my testing if I knew of a way to customize the output of this function (beyond the given "customization" options).  Does anyone know of a way that I can do this?</body>
  </mail>
  <mail>
    <header>Re: Need BeforeSuite and AfterSuite functionality</header>
    <body>In this case BeforeClass and AfterClass write to the database to start and end the collection of performance metrics. Â I definitely don't want them called concurrently. What is the rational for making them static? Â A non-static BeforeClass and AfterClass can just call static methods if static functionality is desired. Subject: Re: [junit] Need BeforeSuite and AfterSuite functionality To: junit@yahoogroups.com Date: Monday, February 7, 2011, 9:50 AM Â  once per test.Â  It is possible (but not likely) that my test suite could be executed concurrently in the same JVM, so static methods could be a problem. Can you share a little more about what these methods will be doing? I'm trying to construct an example where I would want BeforeClass, but still be worried about concurrent execution, and my imagination is failing me.  Thanks! suites.Â  The javadocs are confusing: class have been run." I agree that the javadoc could be clearer.  @BeforeClass and @AfterClass on Suites is a decently well-known trick, but it isn't called out as much in the javadocs as it potentially should be. Good luck, David Saff clear what will happen with a suite. suite. in the Suite itself. Â It is not clear to me that AfterClass would be called in this case (a Suite with no @Test in it). need to implement is once per instance, not once for all instances.</body>
  </mail>
  <mail>
    <header>Re commendation to pre-fill databases with data? SQL INSERTs?</header>
    <body>Before I run certain jUnit tests for java applications with database access it is often required to have already some specific data in these databases. What is the recommended way to "pre-fill" these databases? Do I really have to code all these SQL statements with INSERTs? Do I have to execute sql scripts with INSERTs before? How do I call these external sql scripts from junit test classes? Is there e.g. a command like dbunit does not help at this step Ben -- View this message in context:  s--tp30892007p30892007.html Sent from the JUnit - User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Misc improvements</header>
    <body>Hi, I would be interested to know if JUnit team would have interest in the features below for integration in JUnit. If yes, I would look at providing patches and if not, I'll find an other way to waste my time ;-) - ForkingVMTestRunner a runner executing the unit tests in a forked virtual machine allowing to test effect of command line JVM switches for instance - ParrallelRunner JUnit already contains nearly the whole code for that but not available as runner running tests in parallel - ParameterizedRunner a runner far more flexible than JUnit's Parameterized runner allowing to configure usage per method (a bit like TestNG) and for different types - @NotYetImplemented this is an annotation allowing to indicate that a unit test is expected to fail. A failure should be reported as success whereas a success should be reported as failure. This has proven to be far more interesting than @Ignore which is just a little better than removing a test: @NotYetImplemented allows to write tests for "accepted" bugs or future features and to get notified when they are fixed as side effect of other changes - assertEquals &amp;amp; IDE integration small improvement to throw ComparisonFailure not only for String comparison what allows IDE like Eclipse to better display differences between expected and actual result. Cheers, Marc.</body>
  </mail>
  <mail>
    <header>Parse HTMLSuite results into Junit style report files?</header>
    <body>Hi, friends, I am dealing with a bunch of HTMLsuite result files, and I want to convert them into Junit style reports. Does anybody know if there are any existing tools or any parser libraries that can help? I need to parse out the required fields and generate the XML output files for junitreport, and then produce the summary report in HTML. Any one can provide instructions or docs on how to customize the JUnit style report (i.e. the required schema for the XML output files)? Your helps are appreciated. Mike.</body>
  </mail>
  <mail>
    <header>Re: Problems using @BeforeClass with parallel methods</header>
    <body>This won't work. I am trying to initialize a database (initialize the schema, remove existing data) once before running a collection of tests. I do not wish to initialize it before each test because all tests access the same database and this will lead to other race conditions. Are you suggesting I should somehow use a separate database instance per test? Thanks, Gili</body>
  </mail>
  <mail>
    <header>Re: Re commendation to pre-fill databases with data? SQL INSERTs?</header>
    <body>Ben, why doesn't dbUnit help? That's pretty much exactly what it does for you. Are you using JPA? If so you can just use the EntityManager to insert your data  s--tp30892007p30892007.html -- Maybe she awoke to see the roommate's boyfriend swinging from the chandelier wearing a boar's head. Something which you, I, and everyone else would call "Tuesday", of course.</body>
  </mail>
  <mail>
    <header>Re: Misc improvements</header>
    <body>Seems like more interesting ,, Hope Junit teams consider his effort.. All the best mguillemot - M</body>
  </mail>
  <mail>
    <header>Re: Misc improvements</header>
    <body>Marc, After the release of 4.9 (hopefully soon), my plan is to concentrate development and patching activity on GitHub issues with high vote counts.  I recommend posting these as GitHub issues ( to encourage votes.  Thanks, features below for integration in JUnit. If yes, I would look at providing patches and if not, I'll find an other way to waste my time ;-) effect of command line JVM switches for instance runner running tests in parallel configure usage per method (a bit like TestNG) and for different types fail. A failure should be reported as success whereas a success should be reported as failure. This has proven to be far more interesting than @Ignore which is just a little better than removing a test: @NotYetImplemented allows to write tests for "accepted" bugs or future features and to get notified when they are fixed as side effect of other changes what allows IDE like Eclipse to better display differences between expected and actual result.</body>
  </mail>
  <mail>
    <header>Re: Parse HTMLSuite results into Junit style report files?</header>
    <body>Mike, The XML format that has become most popular for storing JUnit reports is the one that happened to be chosen by ant's &amp;lt;junit&amp;gt; task.  To the best of my knowledge, there's no official standardization for the format.  I'm not aware of tools that are customized to produce that format, but a good XML toolkit in your language of choice should get you more than halfway there.  Good luck! them into Junit style reports. Does anybody know if there are any existing tools or any parser libraries that can help? junitreport, and then produce the summary report in HTML. report (i.e. the required schema for the XML output files)?</body>
  </mail>
  <mail>
    <header>Re: Need BeforeSuite and AfterSuite functionality</header>
    <body>Dean, The methods are static because they are called before the first instance of the class is created, and after the last instance is released to garbage collection. I'm still a little confused about in what scenario the BeforeClass could be called concurrently, and what JUnit features you would like in order to prevent it.  Good luck, the collection of performance metrics.  I definitely don't want them called concurrently. AfterClass can just call static methods if static functionality is desired. not once per test.  It is possible (but not likely) that my test suite could be executed concurrently in the same JVM, so static methods could be a problem. suites.  The javadocs are confusing: class have been run." clear what will happen with a suite. suite. in the Suite itself.  It is not clear to me that AfterClass would be called in this case (a Suite with no @Test in it). need to implement is once per instance, not once for all instances.</body>
  </mail>
  <mail>
    <header>Re: Need BeforeSuite and AfterSuite functionality</header>
    <body>But that still doesn't explain why they have to be static. If they were non static, you could just create an instance and invoke these methods on that instance. That's what TestNG does, by the way, although it makes more sense for TestNG since it's that same instance that will be used to invoke all the test methods afterwards, thereby allowing you to share fields between your @BeforeClass/@AfterClass and @Test methods. It might not be as useful for JUnit, but encouraging people to use statics in their test classes is problematic, in my opinion. -- Cédric</body>
  </mail>
  <mail>
    <header>Re: Need BeforeSuite and AfterSuite functionality</header>
    <body>2011/2/11 CÃ©dric Beust â &amp;lt;cedric@...&amp;gt;: But that won't be the same instance on which the tests are invoked, so the method would make no sense without global side effects.  And if you're going to do global side effects, you might as well make the method static. Yes, and also allowing users to never be sure that changes to instance methods in one method won't corrupt results in a different method.  If a user that is not an author of either framework is truly fascinated about the differences in design philosophies between the two frameworks, my guess is that they will create a thread with an appropriate title, so that those people just trying to get their work done can mute it and move on. I don't encourage it.  JUnit encourages people to think about ways to push their designs in tests in directions so that most of their tests do not require setup that is so expensive they have to wring their hands about how often it runs.  When that fails, JUnit allows users to easily separate the static state, which they _want_ to think about maintaining between tests, from the instant state, which they are glad to let the framework set up and teardown for them.</body>
  </mail>
  <mail>
    <header>Re: Need BeforeSuite and AfterSuite functionality</header>
    <body>I need a method that is called when each TestSuite instance is created to write a record to the database. Â Each instance will have its own uuid which will be stored in the record in the database and then stored in an instance variable for use by the AfterClass method. Â The AfterClass method will update that same record referred to by the uuid. Â If the BeforeClass is static I have to store the uuid in a static variable - which would result in the uuid being overwritten if multiple instances ran simultaneously. Â AfterClass could update the wrong record because the uuid had changed. Â I definitely don't want a static method if there is a chance the TestSuite could be executed simultaneously. Making these methods static is poor design. Â If you need static functionality in Before / After class methods, make those methods non-static and they can call a static method for the static functionality. Â Forcing them to be static creates concurrency issues if more than one instance runs concurrently. If this still doesn't make any sense to you look up concurrency issues with static methods. (I tried using a no-arg constructor, but it never got called when the TestSuite was created. Â I don't know how JUnit creates its instances - I was just guessing.) Â Â If the method is like a static initializer block Subject: Re: [junit] Need BeforeSuite and AfterSuite functionality To: junit@yahoogroups.com Date: Friday, February 11, 2011, 11:35 AM Â  The methods are static because they are called before the first instance of the class is created, and after the last instance is released to garbage collection. I'm still a little confused about in what scenario the BeforeClass could be called concurrently, and what JUnit features you would like in order to prevent it.  Good luck, David Saff the collection of performance metrics. Â I definitely don't want them called concurrently. AfterClass can just call static methods if static functionality is desired. not once per test.Â  It is possible (but not likely) that my test suite could be executed concurrently in the same JVM, so static methods could be a problem. suites.Â  The javadocs are confusing: class have been run." clear what will happen with a suite. suite. in the Suite itself. Â It is not clear to me that AfterClass would be called in this case (a Suite with no @Test in it). need to implement is once per instance, not once for all instances.</body>
  </mail>
  <mail>
    <header>Adding Junit to Eclispe</header>
    <body>Not sure if this is the right forum, but I am trying to get Junit to show in the drop down menu on eclipse. I have right click on the project and clicked on New and was expecting to see Junit as an option here which it wasn't.  It also is not showing as an option under the Other selection either. This for: Eclipse version 1.3.1.20100916-1201 Junit4.9b2 Junit4.5 Junit3.8.2 Any help would be appreciated. Thanks, Greg</body>
  </mail>
  <mail>
    <header>Re: Problems using @BeforeClass with parallel methods</header>
    <body>Can someone please confirm whether you can reproduce this problem on your end? Here is a simple testcase: public class Testcase @BeforeClass public static void beforeClass() @Test public void one() @Test public void two() @Test public void three() if you run this with &amp;lt;parallel&amp;gt;methods&amp;lt;/parallel&amp;gt; you should see tests executing before "beforeClass". Gili  nit47/src/main/java/org/apache/maven/surefire/junitcore/JUnitCoreProvider.java?v\ iew=markup</body>
  </mail>
  <mail>
    <header>Re: Parse HTMLSuite results into Junit style report files?</header>
    <body>Thanks, David. I'll give it a try these days. them into Junit style reports. Does anybody know if there are any existing tools or any parser libraries that can help? for junitreport, and then produce the summary report in HTML. report (i.e. the required schema for the XML output files)?</body>
  </mail>
  <mail>
    <header>Re: Misc improvements</header>
    <body>Hi David, not really the most motivating answer :-( Providing a clean patch requires time. I follow JUnit GitHub issues since long enough to have an idea of what happens there, therefore I will use my time for other activities. Cheers, Marc. features below for integration in JUnit. If yes, I would look at providing patches and if not, I'll find an other way to waste my time ;-) test effect of command line JVM switches for instance runner running tests in parallel configure usage per method (a bit like TestNG) and for different types fail. A failure should be reported as success whereas a success should be reported as failure. This has proven to be far more interesting than @Ignore which is just a little better than removing a test: @NotYetImplemented allows to write tests for "accepted" bugs or future features and to get notified when they are fixed as side effect of other changes what allows IDE like Eclipse to better display differences between expected and actual result.</body>
  </mail>
  <mail>
    <header>JUnit issue responsiveness (was: Re: Re: Misc improvements)</header>
    <body>Marc, In your position, I'd be frustrated, too.  I'll respond to the direct situation on the original thread, but I wanted to talk here about the larger context. For those not aware of the context of Marc's comment, the highest-voted issue on github is now over a year old, and there are 140 open issues.  By reducing the time to resolve issues, we wouldn't lose the effort of motivated developers like Marc. Here's a first couple of steps. 1) For several years now, issue triage and patch acceptance has been one of several priorities that have competed for time during pair programming sessions between the developers.  One benefit was that the project didn't get away from either of us, and we were able to evaluate proposed changes from multiple perspectives.  I'm going to try taking solo point on these activities, with Kent as advisor.  Give me a couple months to get a routine going, and then let me know if the project seems like a more appealing place to contribute. 2) As part of this, I'll try to provide feedback within a week on new issues and patches.  This may mean that feature requests we are unlikely to incorporate will get closed quickly, rather than left open and abandoned.  Let me know if it starts feeling like too much pushback. While this will apply to new issues and patches, there's still a backlog to get through.  I can't estimate how quickly I'll be able to get through it, nor am I sure in advance whether I will prioritize the communication backlog above all new development activities.  If you've read this far, and would like to bump your issue or patch up in the queue with a reminder message, I should see it. JUnit will likely continue to grow more slowly than your average open source project.  This has had advantages in maintaining a coherent core of concepts and limited churn in the core.  There are things like reporting and data parsing that the core junit.jar file is unlikely to ever do, as it strives to be "the intersection of all useful test frameworks, not their union".  The Runners and Rules included in junit.jar have always been intended as examples and starting points for further extension outside of the core. I think there could be value in a bundling of JUnitUnion: the JUnit Core, plus a set of very useful and reusable extensions managed by people outside the core JUnit team.  I'd love suggestions on the technical and managerial ways such a super-package could be maintained and distributed. Thanks for sticking around.  Share and Enjoy. enough to have an idea of what happens there, therefore I will use my time for other activities. features below for integration in JUnit. If yes, I would look at providing patches and if not, I'll find an other way to waste my time ;-) test effect of command line JVM switches for instance runner running tests in parallel configure usage per method (a bit like TestNG) and for different types fail. A failure should be reported as success whereas a success should be reported as failure. This has proven to be far more interesting than @Ignore which is just a little better than removing a test: @NotYetImplemented allows to write tests for "accepted" bugs or future features and to get notified when they are fixed as side effect of other changes what allows IDE like Eclipse to better display differences between expected and actual result.</body>
  </mail>
  <mail>
    <header>Re: Re: Misc improvements</header>
    <body>Marc, Thanks for giving me incentive to write up the current state of the JUnit community, which I've posted under a different subject heading. If you have a chance to look there, and give thoughts on the general state, I hope you'll be able to see general change that will be less discouraging. In terms of these specific ideas, I had in mind that you could simply copy and paste each bullet line into a feature request, and post links to each feature here on the list, encouraging readers to vote.  That way, we could start with the most popular ideas, and iterate on clean patches for those, once you could be sure that the effort wouldn't be wasted. I hope that addresses your concerns.  Let me know, enough to have an idea of what happens there, therefore I will use my time for other activities. features below for integration in JUnit. If yes, I would look at providing patches and if not, I'll find an other way to waste my time ;-) test effect of command line JVM switches for instance runner running tests in parallel configure usage per method (a bit like TestNG) and for different types fail. A failure should be reported as success whereas a success should be reported as failure. This has proven to be far more interesting than @Ignore which is just a little better than removing a test: @NotYetImplemented allows to write tests for "accepted" bugs or future features and to get notified when they are fixed as side effect of other changes what allows IDE like Eclipse to better display differences between expected and actual result.</body>
  </mail>
  <mail>
    <header>Re: How to make JUnit work with own test format</header>
    <body>for some reason, my reply wasn't showing up in the mailinglist: ---snip--- Hello David, thanks for your reply. I've managed to successfully implement the runner and get our existing tests working. I've packaged the extension up through maven and included it in our new projects. To get the tests in the new project executed, I need to create an almost empty class, like this @RunWith(QuercusRunner.class) Is there a way I can automatically execute a fake test with this runner in every project that includes my jar? So that users don't have to create such a dummy test. Like specifying it in META-INF/some-file so that JUnit picks it up automatically? Thanks a lot, Dominik --snip-- that's the preferred way to extend test running behavior, but I don't see how since you need a test for each file. that I'm able to include our test files in a maven build and let them be run through junit (and all the nice junit plugins for IDEs). implementation of comparison line by line with the &amp;lt;compare&amp;gt; block. possible to run such tests with JUnit (by extending it?) or not. the project and junit would then pickup the files and run them as tests. -- Dominik Dorn  Tausche Deine Lernunterlagen auf</body>
  </mail>
  <mail>
    <header>Re: How to avoid running a test class multiple times</header>
    <body>I set out to give Categories a shot, and ran into issues using them in Eclipse/JUnit. Wouldn't you know it...I ran into a post from you in bugzilla that knocked the wind out of that sail.  John</body>
  </mail>
  <mail>
    <header>Re: How to avoid running a test class multiple times</header>
    <body>Ah, thanks for the reminder on that.  We decided to release 4.9 without a full-fledged replacement for Categories, but it should probably go back on the list for 4.10.</body>
  </mail>
  <mail>
    <header>Re: How to avoid running a test class multiple times</header>
    <body>Hi John, I doubt you'll want to add another dependency, but were you to use a ScalaTest Suite of some kind with an @RunWith(classOf[JUnitRunner]) annotation on it, JUnit would ask ScalaTest to run those test classes. In ScalaTest, you could override the run method such that it would only run the class if it hadn't been run before. The good thing is it would solve your problem. The bad thing is you'd need to add the Scala jar and ScalaTest jar on your class path, and that may not be possible or desirable for you. Moreover, you'd need to write the runOnlyOnce test classes in Scala. Actually it occurs to me just now that you should be able to create a JUnit runner in Java that does what you want: just executing each test class only once. Then annotate your test classes with your own runner: @RunWith(RunOnlyOnceRunner.class). I think that should be a possible way to do what you want. If you want to try the ScalaTest way, let me know and I can help further. Bill -- Bill Venners Artima, Inc.</body>
  </mail>
  <mail>
    <header>Re: How to avoid running a test class multiple times</header>
    <body>OK, here's a crazy hack (haven't tested it) at a solution.  Let me know if you try it and it works... @RunWith(OnceOnlySuite.class)</body>
  </mail>
  <mail>
    <header>Re: accessing JUnit runner/suite objects at runtime (or... rule for a suite)</header>
    <body>Thanks David, this is very helpful. -Steve</body>
  </mail>
  <mail>
    <header>Re: How to make JUnit work with own test format</header>
    <body>Oops, I appear to have dropped the list in there somehow.  This is definitely where you want to reach out to the list: I have no idea what magic may or may not exist in mvn test that would support what you want.  Here's hoping there's ummm... maven mavens on the list who can help.  If you end up needing to go to a maven-specific list, please do report back with your findings.  Good luck! src/test/java/com/caucho/quercus/lib/filter/FilterTest.java that's the preferred way to extend test running behavior, but I don't see how since you need a test for each file. so that I'm able to include our test files in a maven build and let them be run through junit (and all the nice junit plugins for IDEs). implementation of comparison line by line with the &amp;lt;compare&amp;gt; block. is possible to run such tests with JUnit (by extending it?) or not. the to the project and junit would then pickup the files and run them as tests.</body>
  </mail>
  <mail>
    <header>Re: How to avoid running a test class multiple times</header>
    <body>Correction. The Set needs to be a *static* field of OnceOnlySuite since you are not allowed to reference an instance field while explicitly invoking a constructor.</body>
  </mail>
  <mail>
    <header>Re: How to avoid running a test class multiple times</header>
    <body>Nice! Thanks Bill for coming up with the idea of a custom suite runner, and thanks David for writing such a runner! There were a couple of minor snags with your attempt below, but with some minor tweaks, it seems to be working nicely. 1. [compile time issue] The @RunWith needs to fully qualify OnceOnlySuite (i.e., prefix it with 'All.') I decided to just make it a public top-level class since its use will not be tied to a particular suite. 2. [runtime issue] The collection (Set) has to be a instance field of OnceOnlySuite, not the anonymous inner RunnerBuilder(), since the latter's instances are ephemeral. John</body>
  </mail>
  <mail>
    <header>Re: How to avoid running a test class multiple times</header>
    <body>What happened to #1? Have you tested it as written?  There should only ever be one of the internal RunnerBuilders constructed, if my brain's on right, so it should work.  If it doesn't, please let me know so I can adjust my brain.</body>
  </mail>
  <mail>
    <header>Re: How to make JUnit work with own test format</header>
    <body>Hello David, thanks for your reply. I've managed to successfully implement the runner and get our existing tests working. I've packaged the extension up through maven and included it in our new projects. To get the tests in the new project executed, I need to create an almost empty class, like this @RunWith(QuercusRunner.class) Is there a way I can automatically execute a fake test with this runner in every project that includes my jar? So that users don't have to create such a dummy test. Like specifying it in META-INF/some-file so that JUnit picks it up automatically? Thanks a lot, Dominik that I'm able to include our test files in a maven build and let them be run through junit (and all the nice junit plugins for IDEs). of comparison line by line with the &amp;lt;compare&amp;gt; block. possible to run such tests with JUnit (by extending it?) or not. the project and junit would then pickup the files and run them as tests.</body>
  </mail>
  <mail>
    <header>Re: How to avoid running a test class multiple times</header>
    <body>Sstrange. The response that preceded that one didn't get posted. The missing post contained the following: Nice! Thanks Bill for coming up with the idea of a custom suite runner, and thanks David for writing such a runner! There were a couple of minor snags with your attempt below, but with some minor tweaks, it seems to be working nicely. 1. [compile time issue] The @RunWith needs to fully qualify OnceOnlySuite (i.e., prefix it with 'All.') I decided to just make it a public top-level class since its use will not be tied to a particular suite. I tested it as written in that the Set was an instance field of the RunnerBuilder, and it didn't work because multiple RunnerBuilders are instantiated. That's because multiple OnceOnlySuite runners instantiated. In my example, I annotated A and B to each run with OnceOnlySuite. I did not annotate 'All' to use OnceOnlySuite because in my real-world scenario, the All suite does have tests that we want to run multiple times (against different targets).</body>
  </mail>
  <mail>
    <header>Re: Re: How to avoid running a test class multiple times</header>
    <body>post contained the following: thanks David for writing such a runner! There were a couple of minor snags with your attempt below, but with some minor tweaks, it seems to be working nicely. (i.e., prefix it with 'All.') I decided to just make it a public top-level class since its use will not be tied to a particular suite. RunnerBuilder, and it didn't work because multiple RunnerBuilders are instantiated. That's because multiple OnceOnlySuite runners instantiated. In my example, I annotated A and B to each run with OnceOnlySuite. I did not annotate 'All' to use OnceOnlySuite because in my real-world scenario, the All suite does have tests that we want to run multiple times (against different targets). Ahh.  That explains it.  Glad it worked--share and enjoy!</body>
  </mail>
  <mail>
    <header>Suite of suites</header>
    <body>Hi All! I am having a problem with JUnit4.8.2 that I can't solve. I have tons of tests in my project. In each package I have a suite class called AllTests like the following: I would like to create a "super" suite class containing all the suites of my project. Can anyone please tell me how to do that? Thanks a lot!</body>
  </mail>
  <mail>
    <header>Re: Suite of suites</header>
    <body>JUnit itself can't help you there, as far as I know. Did you check out cpsuite?  Otherwise you could use ant or maven or alike. They can use file patterns to find tests. Eclipse can run all tests in a package/directory, but has problems with suites, such that it executes the tests and the suites, executing the tests at least twice. Greetings, On 31 January 2011 06:29, marcelo_javier_ruiz project. Can anyone please tell me how to do that?</body>
  </mail>
  <mail>
    <header>Re: Suite of suites</header>
    <body>Marcelo, I seem to have interpreted your question differently than Malte, but you can create a suite of suites: @RunWith(Suite.class) On Mon, Jan 31, 2011 at 12:29 AM, marcelo_javier_ruiz project. Can anyone please tell me how to do that?</body>
  </mail>
  <mail>
    <header>Re: Suite of suites</header>
    <body>Oh right, David. I was thinking "automatic" and forgot about "manual". Greetings, project. Can anyone please tell me how to do that?</body>
  </mail>
  <mail>
    <header>Re: Suite of suites</header>
    <body>@David @Malte Thank you both for the answers! Unfortunately I am using Netbeans, so the Eclipse plug-in won't work in this case. Also, one of the reasons I am trying to build the suite of suites is because I am trying the concurrent runner ( execute part of my tests (the ones that don't interfere with each other) concurrently: I have some test suites annotated with @RunWith(Suite.class) and the rest with @RunWidth(ConcurrentSuite.class). Before posting my question, I tried to create the suite of suites as David suggested, but I couldn't: JUnit gave me errors and did not execute the tests (maybe the @SuiteClasses annotation didn't behave as expected with suite of tests... I can't remember). I am travelling right now, but in a few days I will give it a try again and post back the outcome. Thanks again, Marcelo. my project. Can anyone please tell me how to do that?</body>
  </mail>
  <mail>
    <header>Call from junit to another junit test possible</header>
    <body>Hi, I am using Junit 4.7 and I have the following in my test class A: @BeforeClass //Here I want to class another test class, called Setup, that sets preconditions for all tests in my test class A. I want to keep it as a test since the I know if any of the setup steps fail. How can I call Setup and execute methods from my class A? Setup ===== @Test @Test</body>
  </mail>
  <mail>
    <header>Re: Re: Suite of suites</header>
    <body>Hi Marcelo, On 2 February 2011 04:40, marcelo_javier_ruiz case. cpsuite is not an eclipse plugin. Its just a java library. Suite of suites worked for me, but I didn't use ConcurrentSuites and don't know if there is anything special you need to look after. Greetings,</body>
  </mail>
  <mail>
    <header>Re: Call from junit to another junit test possible</header>
    <body>Extending TestCase is JUnit 3.x and is wrong for JUnit 4. Don't mix annotations (@Test, @Before, ...) which are JUnit 4 with extends TestCase, which is JUnit 3. It actually harms, since Runners get confused etc. Your Setup-Class doesn't need to be a test. You can write assertions in any class/method. It doesn't need to be an @Test-method. It needs to be called from an @Test-method or @Before method for JUnit to catch a failing assert, of course. You could also write a class with several @Before methods and subclass it. And you might want to look into JUnit Rules in JUnit &amp;gt;=4.8. That might solve you problem nicely. Enough food for thought? Any questions? Greetings,</body>
  </mail>
  <mail>
    <header>Suite peculiarity</header>
    <body>Hi, I have two test classes. I am using Junit 4.7. When I excute each test separately they execute ( each @Test method) nicely ( implementation is they execute in order written in class). If I put my classes in a suite: /** * The AllTests class. */ @RunWith(value = Suite.class) I can see that the tests within each class ( annotated @Test is not executed in order). Why is the implemenation not the same as for when you execute each Test class ( eg. only TestA or TestB)? I know that each test should be independent but I am only concerned that the implementations are different. br, //mike</body>
  </mail>
  <mail>
    <header>Re: Title: JUnit 4.9b2 (beta-)released</header>
    <body>[everyone, be sure to reply-all to be sure the list is included (the sourceforge lists seem to have less reliable Reply-To fields.)] an interface? This is so much of a pain. In your position, I'd also be frustrated. The idea was to guide people away from an improper usage of Rules. For example, calling Timeout.apply in the middle of a test method is so likely to be the wrong thing to do, that we wanted to make it difficult.  If there were some way for a rule to expose one interface to the framework, and another to test writers, that would be ideal. This seemed like the next-best solution. Can you go into more details about this case, and how hard it would be to adapt your code to use TestRule? as I don't add another rule to the test. silently ignored. This isn't what should be happening.  The ordering of multiple rules is undefined.  What this means is that if you have a Rule (whether TestRule or MethodRule) that sometimes or always blocks or interrupts the call to base.evaluate(), then it may prevent other rules from starting or completing. There's been recent discussion on a way to be explicit about the ordering of rule application.  If that would be helpful here, let me know. So, I now have 1 user (kcooney) on record for preferring the abstract superclass (because it prevents confusion and improper usage), and one (dgageot) on record preferring the interface (because it frees up the superclass slot).  If anyone else has opinions, please chime in by this time Monday, so we can make a decision and lock it in.  Thanks, `@ClassRule` sense implements `RunRules`</body>
  </mail>
  <mail>
    <header>Re: Suite peculiarity</header>
    <body>Mike, JUnit simply uses the order in which methods are reported by the Java Reflection API, which is undefined and implementation-dependent.  I'm not sure what circumstances cause the reflection API to report methods in different orders. implementation is they execute in order written in class). in order). Why is the implemenation not the same as for when you execute each Test class ( eg. only TestA or TestB)? implementations are different.</body>
  </mail>
  <mail>
    <header>Re: How to avoid running a test class multiple times</header>
    <body>Strange. My response that preceeded that one didn't get posted. The missing text is thus: Nice! Thanks Bill for coming up with the idea of a custom suite runner, and thanks David for writing such a runner! There were a couple of minor snags with your attempt below, but with some minor tweaks, it seems to be working nicely. 1. [compile time issue] The @RunWith needs to fully qualify OnceOnlySuite (i.e., prefix it with 'All.') I decided to just make it a public top-level class since its use will not be tied to a particular suite. Have you tested it as written? There should only ever be one of the I tested it as written in that the Set was an instance field of the RunnerBuilder, and it didn't work because multiple RunnerBuilders are instantiated. That's because there's multiple OnceOnlySuite runners instantiated. In my example, I annotated A and B to *each* run with OnceOnlySuite. I did not annotate 'All'</body>
  </mail>
  <mail>
    <header>Re: Re: Title: JUnit 4.9b2 (beta-)released</header>
    <body>I would rather use an interface and not an abstract class. My reasoning: I see the tradeoff between: Give the most power and flexibility to the competent programmer that knows what he is doing: Interface Prevent stupid misuse errors: Abstract class. I would always prefer the first solution, so I would like the interface version much better. Prevent the stupid misuse through good documentation. I know, that this is less strict, but the best I can come up with. Greetings,</body>
  </mail>
  <mail>
    <header>Re: Title: JUnit 4.9b2 (beta-)released</header>
    <body>That's true. And I do prefer 'cannot inherit sometimes' than 'cannot inherit ever'. Seems logical to me. Didn't realize that the benefit was hidden in the 'protected' keyword :-) We could check at runtime that the method is being called properly but that would be less elegant and could be tricky. The class I inherit from has dozens of methods. That's not the best use case of delegation. However, I ended up doing exactly that. Overall when I design code, I prefer interfaces over inheritance, but I Agree 100%. Thanks for the insights, David.</body>
  </mail>
  <mail>
    <header>Need BeforeSuite and AfterSuite functionality</header>
    <body>I have a test suite and need BeforeSuite and AfterSuite functionality. I probably could make BeforeClass and AfterClass work, but there is no @Test in the Suite itself.  It is not clear to me that AfterClass would be called in this case (a Suite with no @Test in it). BeforeClass and AfterClass are also static methods and the functionality I need to implement is once per instance, not once for all instances. It's unlikely that my test suite would ever be run more than once in the same JVM so I could probably make BeforeClass and AfterClass work - if AfterClass is guaranteed to be run after the Suite is finished. Is there a pattern in JUnit for BeforeSuite and AfterSuite functionality? Thanks.</body>
  </mail>
  <mail>
    <header>Re: Title: JUnit 4.9b2 (beta-)released</header>
    <body>I agree that design is a tradeoff. And I also often prefer interfaces over abstract classes. But I do not always use interfaces. Interfaces and abstract classes both have their place. It's hard to find simple rules to decide what to use where. I personally don't see having TestRule as an abstract class causing a burdon for competent developers. Since TestRule has only one method, it's very easy to use delegation to share code. You could have your Rule have many methods that delegate to another object, or your Rule could have a single accessor to get the delegate, or you could create the Rule by calling a method on another object. In any case, what we could use is data. Can someone give concrete cases were making TestRule an abstract class has caused problems? Let's get them out now, before 4.9 releases. -- Kevin</body>
  </mail>
  <mail>
    <header>Re: Need BeforeSuite and AfterSuite functionality</header>
    <body>Hello Dean, I'm not quite sure, I understand what you want. Putting @BeforeClass and @AfterClass into a suite will execute the @BeforeClass method once before the suite and the @AfterClass method once after the suite is done. in the Suite itself.  It is not clear to me that AfterClass would be called in this case (a Suite with no @Test in it). Suites don't containt @Test methods. Suites gather Tests suites, but don't contain tests themselves. @Test methods in a suite don't get executed, since a suite is not a test. need to implement is once per instance, not once for all instances. Here is what I don't quite understand: Once per instance of what? Do you mean once before every test-method that is executed and once after every test method that is executed? Or do you mean once before the suite and once after the suite? The pattern I know of is: @BeforeClass and @AfterClass in the Suite-class. If you want to execute once before every test method and once after every test method, you need @Before-methods and @After-methods in the tests. Or use JUnit 4.8 @Rule Greetings,</body>
  </mail>
  <mail>
    <header>cannot find symbol constructor TestCase()</header>
    <body>Eclipse 3.3.2: cannot find symbol I add the src.jar to the source path to project in Eclipse by the menu Project-&amp;gt;Properties-&amp;gt;Source-&amp;gt;Link Source I add the junit.jar to the build path to project in Eclipse by the menu Project-&amp;gt;Properties-&amp;gt;Libraries-&amp;gt;Add External JARs I select the build.xml by right clicking to execute "Run As"-&amp;gt;"Ant build" menu. build.xml is as follows: -- View this message in context:  0733068.html Sent from the JUnit - User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: cannot find symbol constructor TestCase()</header>
    <body>Albert, Have you tried the debugging steps from my last e-mail?  Thanks,  0733068.html</body>
  </mail>
  <mail>
    <header>Title: JUnit 4.9b2 (beta-)released</header>
    <body>Hello, everyone.  We're happy to announce the release of JUnit 4.9b2. This release's theme is Test-class and suite level Rules. More information linked from  and release notes below. Share and enjoy, and please try it out and give us feedback.  Thanks, Your friendly neighborhood JUnit maintainers ## Summary of Changes in version 4.9 [unreleased!] ## Release theme: Test-class and suite level Rules. ### ClassRule ### The `ClassRule` annotation extends the idea of method-level Rules, adding static fields that can affect the operation of a whole class.  Any subclass of `ParentRunner`, including the standard `BlockJUnit4ClassRunner` and `Suite` classes, will support `ClassRule`s. For example, here is a test suite that connects to a server once before all the test classes run, and disconnects after they are finished: @RunWith(Suite.class) @Rule @Override @Override ### TestRule ### In JUnit 4.9, fields that can be annotated with either `@Rule` or `@ClassRule` should be of type `TestRule`.  The old `MethodRule` type, which only made sense for method-level rules, will still work, but is deprecated. Most built-in Rules have been moved to the new type already, in a way that should be transparent to most users.  `TestWatchman` has been deprecated, and replaced by `TestWatcher`, which has the same functionality, but implements the new type. `TestRule` is an abstract base class, and its abstract `apply` method is protected.  In order to apply `TestRule`s to a `Statement`, use the `RunRules` class in `org.junit.rules` (thanks to `@kcooney`) ### LICENSE checked in ### The Common Public License that JUnit is released under is now included in the source repository. ### Bug fixes ### - github#98: assumeTrue() does not work with expected exceptions - github#74: Categories + Parameterized - github#163: Bad comparison failure message when using assertEquals(String, String) ### Minor changes ### - Backed out unused folder "experimental-use-of-antunit", replaced by - Made MultipleFailureException public, to assist extension writers.</body>
  </mail>
  <mail>
    <header>Re: Custom ANT selector for JUnit</header>
    <body>Sounds interresting.  You should push that forward in the ant community mailing list [1] and provide the patch on the bug/enhacement tracking tool [2] [1] [2] Thanks, Gilles Scokart</body>
  </mail>
  <mail>
    <header>Problem when installation of a last version âjunit4.9b2â!!</header>
    <body>Â Problem when installation of a last version "junit4.9b2"!! Â I have install in the C:\TOOL_TEST\JUnit\junit4.9b2 Â This is my set enviroment for CLASSPATH: C:\TOOL_TEST\JUnit\junit4.9b2;C:\TOOL_TEST\JUnit\junit4.9b2\javadoc;C:\TOOL_TEST\ \JUnit\junit4.9b2\junit\tests exit. Is possible help me, Â Thank you Emanuela</body>
  </mail>
  <mail>
    <header>accessing JUnit runner/suite objects at runtime (or... rule for a suite)</header>
    <body>I have created a custom JUnit 4.8 category (and an associated suite to run this category), as well as an associated annotation which must be set. I need to verify that for each class with the custom category, the custom annotation is set properly. I'm trying to find a way to do this in JUnit, without forcing all my test classes to have a common base-class. So far, the only way I can think of handling this is to create a Rule.  However, since a Rule does not seem to work with a Suite (and therefore Categories), I believe that would require a common base-class for all my tests, which is something I'm trying to avoid. It seems if I could access the JUnit objects directly-- either via a singleton/static API, or via fetching annotation objects, I could fetch my category, find its list of test classes, and iterate over them verifying the annotations. Has anyone tackled this before?  Any ideas? Thanks -Steve</body>
  </mail>
  <mail>
    <header>Re: Problem when installation of a last version âjunit4.9b2â!!</header>
    <body>Hi Emanuela, you have a problem in your CLASSPATH, in the name of your JAR file. You typed "junit4.9b2.jar" but it must be "junit-4.9b2.jar". Once you fix this in your CLASSPATH variable and restart all the command line consoles (in case you have any of them opened while you do the fix), you should be up and running. Bogdan C:\TOOL_TEST\JUnit\junit4.9b2;C:\TOOL_TEST\JUnit\junit4.9b2\javadoc;C:\TOOL_TEST\ \JUnit\junit4.9b2\junit\tests</body>
  </mail>
  <mail>
    <header>Re: Problem when installation of a last version âjunit4.9b2â!!</header>
    <body>Now work!!! tahnk you so much:-)))))) But there is again an error.......... sorry see: C:\TOOL_TEST\JUnit\junit4.9b2&amp;gt;"C:\Program Files (x86)\Java\jdk1.6.0_23\bin\java. exe" org.junit.runner.JUnitCore org.junit.tests.AllTests JUnit version 4.9b2 ................................................................................ ..............................................................E................. ..............................I.I............................................... ................................................................................ .....................................I.......................................... .... Time: 5,008 There was 1 failure: 1) initializationError(org.junit.tests.junit3compatibility.OldTests) java.lang.NoClassDefFoundError: junit/tests/AllTests (wrong name: org/junit/test s/AllTests) Â  ________________________________ Cc: junit@yahoogroups.com Inviato: Mar 25 gennaio 2011, 10:06:26 Oggetto: Re: [junit] Problem when installation of a last version âjunit4.9b2â!! Why did you changed the call in the command line? Why did you added the "-cp" parameter? That sets a custom classpath and it makes you env CLASSPATH to be ignored. Remove that parameter, run the command line as: "C:\Program Files (x86)\Java\jdk1.6.0_23\bin\java.exe" org.junit.runner.JUnitCore org.junit.tests.AllTests and it should work as expected. Bogdan Thank for your quickly help (x86)\Java\jdk1.6.0_23\bin;C:\TOOL_TEST\JUnit\junit4. . e c 2 . (x86)\Java\jdk1.6.0_23 (x86)\Java\jdk1.6.0_23\bin\java. org/junit/tests/AllTe ________________________________ âjunit4.9b2â!! of changeâ¦. .9 es es 32 2. exit. ________________________________ âjunit4.9b2â!! should rg;C:\TOOL_TEST\JUnit\junit4.9b2;C:\TOOL_TEST\JUnit\junit4.9b2\javadoc;C:\TOOL_T\ EST\JUnit\junit4.9b2\junit\tests</body>
  </mail>
  <mail>
    <header>Re: Problem when installation of a last version âjunit4.9b2â!!</header>
    <body>Why did you changed the call in the command line? Why did you added the "-cp" parameter? That sets a custom classpath and it makes you env CLASSPATH to be ignored. Remove that parameter, run the command line as: "C:\Program Files (x86)\Java\jdk1.6.0_23\bin\java.exe" org.junit.runner.JUnitCore org.junit.tests.AllTests and it should work as expected. Bogdan 9b2\junit-4.9b2.jar;C:\TOOL_TEST\JUnit\junit4.9b2\org;C:\TOOL_TEST\JUnit\junit4. 9b2;C:\TOOL_TEST\JUnit\junit4.9b2\javadoc;C:\TOOL_TEST\JUnit\junit4.9b2\junit\te sts;C:\TOOL_TEST\JFunc\lib;C:\TOOL_TEST\JFunc\javadoc\junit;C:\TOOL_TEST\EasyMoc Path=C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32 \WindowsPowerShell\v1.0\;C:\Python27\Scripts;C:\TOOL_TEST\Marathon\marathon-1.2. 9b2junit-4.9b2.jar;C:\TOOL_TEST\JUnit\junit4.9b2\org;C:\TOOL_TEST\JUnit\junit4.9 b2;C:\TOOL_TEST\JUnit\junit4.9b2\javadoc;C:\TOOL_TEST\JUnit\junit4.9b2\junit\tes ts;C:\TOOL_TEST\EasyMock\easymock-3.0;C:\TOOL_TEST\EasyMock\easymock-3.0\objenes Path=C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32 \WindowsPowerShell\v1.0\;C:\Python27\Scripts;C:\TOOL_TEST\Marathon\marathon-1.2. C:\TOOL_TEST\JUnit\junit4.9b2;C:\TOOL_TEST\JUnit\junit4.9b2\javadoc;C:\TOOL_TEST\ \JUnit\junit4.9b2\junit\tests</body>
  </mail>
  <mail>
    <header>Re: Problem when installation of a last version âjunit4.9b2â!!</header>
    <body>Thank for your quickly help Â you were right ... I corrected the error but still doesn't work see below Â  C:\TOOL_TEST\JUnit\junit4.9b2&amp;gt;set ALLUSERSPROFILE=C:\ProgramData APPDATA=C:\Users\ebertell\AppData\Roaming CLASSPATH=C:\Program Files (x86)\Java\jdk1.6.0_23\bin;C:\TOOL_TEST\JUnit\junit4. 9b2\junit-4.9b2.jar;C:\TOOL_TEST\JUnit\junit4.9b2\org;C:\TOOL_TEST\JUnit\junit4. 9b2;C:\TOOL_TEST\JUnit\junit4.9b2\javadoc;C:\TOOL_TEST\JUnit\junit4.9b2\junit\te sts;C:\TOOL_TEST\JFunc\lib;C:\TOOL_TEST\JFunc\javadoc\junit;C:\TOOL_TEST\EasyMoc k\easymock-3.0;C:\TOOL_TEST\EasyMock\easymock-3.0\objenesis-1.2 CommonProgramFiles=C:\Program Files\Common Files CommonProgramFiles(x86)=C:\Program Files (x86)\Common Files CommonProgramW6432=C:\Program Files\Common Files COMPUTERNAME=ESP1416 ComSpec=C:\Windows\system32\cmd.exe configsetroot=C:\Windows\ConfigSetRoot FP_NO_HOST_CHECK=NO HOMEDRIVE=U: HOMEPATH=\ HOMESHARE=\\itbo32-w001\home\ebertell LOCALAPPDATA=C:\Users\ebertell\AppData\Local LOGONSERVER=\\SRV32A2K3 NUMBER_OF_PROCESSORS=2 OS=Windows_NT Path=C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32 \WindowsPowerShell\v1.0\;C:\Python27\Scripts;C:\TOOL_TEST\Marathon\marathon-1.2. 1.1;C:\Program Files (x86)\Java\jre6\bin;C:\Program Files (x86)\Java\jdk1.6.0_23 \bin PATHEXT=.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC PROCESSOR_ARCHITECTURE=AMD64 PROCESSOR_IDENTIFIER=Intel64 Family 6 Model 23 Stepping 10, GenuineIntel PROCESSOR_LEVEL=6 PROCESSOR_REVISION=170a ProgramData=C:\ProgramData ProgramFiles=C:\Program Files ProgramFiles(x86)=C:\Program Files (x86) ProgramW6432=C:\Program Files PROMPT=$P$G PSModulePath=C:\Windows\system32\WindowsPowerShell\v1.0\Modules\ PUBLIC=C:\Users\Public SESSIONNAME=Console SystemDrive=C: SystemRoot=C:\Windows TEMP=C:\Users\ebertell\AppData\Local\Temp TMP=C:\Users\ebertell\AppData\Local\Temp USERDNSDOMAIN=CARRARO.NET USERDOMAIN=CARRARO_NT USERNAME=ebertell USERPROFILE=C:\Users\ebertell windir=C:\Windows C:\TOOL_TEST\JUnit\junit4.9b2&amp;gt;"C:\Program Files (x86)\Java\jdk1.6.0_23\bin\java. exe" -cp org.junit.runner.JUnitCore org.junit.tests.AllTests Exception in thread "main" java.lang.NoClassDefFoundError: org/junit/tests/AllTe sts Caused by: java.lang.ClassNotFoundException: org.junit.tests.AllTests Â Â Â Â Â Â Â  at java.net.URLClassLoader$1.run(URLClassLoader.java:202) Â Â Â Â Â Â Â  at java.security.AccessController.doPrivileged(Native Method) Â Â Â Â Â Â Â  at java.net.URLClassLoader.findClass(URLClassLoader.java:190) Â Â Â Â Â Â Â  at java.lang.ClassLoader.loadClass(ClassLoader.java:307) Â Â Â Â Â Â Â  at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301) Â Â Â Â Â Â Â  at java.lang.ClassLoader.loadClass(ClassLoader.java:248) Could not find the main class: org.junit.tests.AllTests.Â  Program will exit. Â  ________________________________ Cc: junit@yahoogroups.com Inviato: Mar 25 gennaio 2011, 08:54:07 Oggetto: Re: [junit] Problem when installation of a last version âjunit4.9b2â!! For me it looks like you still have problems with the CLASSPATH. Please pay attention to what you write in that variable. For example, instead of ...C:\TOOL_TEST\JUnit\junit4.9b2junit-4.9b2.jar;...Â Â Â Â  you should have ...C:\TOOL_TEST\JUnit\junit4.9b2\junit-4.9b2.jar;...Â Â Â Â  (there is a backslash missing there). Bogdan Hi Bodan and everyone, I have fix my CLASSPATH, but the result donât changeâ¦. This installation of Junit doesnât work, see below: (x86)\Java\jdk1.6.0_23\bin;C:\TOOL_TEST\JUnit\junit4. 9 s s 2 . (x86)\Java\jdk1.6.0_23 org.junit.tests.A org/junit/runner/JUni ________________________________ âjunit4.9b2â!! g;C:\TOOL_TEST\JUnit\junit4.9b2;C:\TOOL_TEST\JUnit\junit4.9b2\javadoc;C:\TOOL_TE\ ST\JUnit\junit4.9b2\junit\tests</body>
  </mail>
  <mail>
    <header>Re: Problem when installation of a last version âjunit4.9b2â!!</header>
    <body>Hi Bodan and everyone, I have fix my CLASSPATH, but the result donât changeâ¦. This installation of Junit doesnât work, see below: Â  C:\TOOL_TEST\JUnit\junit4.9b2&amp;gt;set ALLUSERSPROFILE=C:\ProgramData APPDATA=C:\Users\ebertell\AppData\Roaming CLASSPATH=C:\Program Files (x86)\Java\jdk1.6.0_23\bin;C:\TOOL_TEST\JUnit\junit4. 9b2junit-4.9b2.jar;C:\TOOL_TEST\JUnit\junit4.9b2\org;C:\TOOL_TEST\JUnit\junit4.9 b2;C:\TOOL_TEST\JUnit\junit4.9b2\javadoc;C:\TOOL_TEST\JUnit\junit4.9b2\junit\tes ts;C:\TOOL_TEST\EasyMock\easymock-3.0;C:\TOOL_TEST\EasyMock\easymock-3.0\objenes is-1.2 CommonProgramFiles=C:\Program Files\Common Files CommonProgramFiles(x86)=C:\Program Files (x86)\Common Files CommonProgramW6432=C:\Program Files\Common Files COMPUTERNAME=ESP1416 ComSpec=C:\Windows\system32\cmd.exe configsetroot=C:\Windows\ConfigSetRoot FP_NO_HOST_CHECK=NO HOMEDRIVE=U: HOMEPATH=\ HOMESHARE=\\itbo32-w001\home\ebertell LOCALAPPDATA=C:\Users\ebertell\AppData\Local LOGONSERVER=\\SRV32A2K3 NUMBER_OF_PROCESSORS=2 OS=Windows_NT Path=C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32 \WindowsPowerShell\v1.0\;C:\Python27\Scripts;C:\TOOL_TEST\Marathon\marathon-1.2. 1.1;C:\Program Files (x86)\Java\jre6\bin;C:\Program Files (x86)\Java\jdk1.6.0_23 \bin PATHEXT=.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC PROCESSOR_ARCHITECTURE=AMD64 PROCESSOR_IDENTIFIER=Intel64 Family 6 Model 23 Stepping 10, GenuineIntel PROCESSOR_LEVEL=6 PROCESSOR_REVISION=170a ProgramData=C:\ProgramData ProgramFiles=C:\Program Files ProgramFiles(x86)=C:\Program Files (x86) ProgramW6432=C:\Program Files PROMPT=$P$G PSModulePath=C:\Windows\system32\WindowsPowerShell\v1.0\Modules\ PUBLIC=C:\Users\Public SESSIONNAME=Console SystemDrive=C: SystemRoot=C:\Windows TEMP=C:\Users\ebertell\AppData\Local\Temp TMP=C:\Users\ebertell\AppData\Local\Temp USERDNSDOMAIN=CARRARO.NET USERDOMAIN=CARRARO_NT USERNAME=ebertell USERPROFILE=C:\Users\ebertell windir=C:\Windows Â  C:\TOOL_TEST\JUnit\junit4.9b2&amp;gt; java org.junit.runner.JUnitCore org.junit.tests.A llTests Exception in thread "main" java.lang.NoClassDefFoundError: org/junit/runner/JUni tCore Caused by: java.lang.ClassNotFoundException: org.junit.runner.JUnitCore Â Â Â Â Â Â Â  at java.net.URLClassLoader$1.run(Unknown Source) Â Â Â Â Â Â Â  at java.security.AccessController.doPrivileged(Native Method) Â Â Â Â Â Â Â  at java.net.URLClassLoader.findClass(Unknown Source) Â Â Â Â Â Â Â  at java.lang.ClassLoader.loadClass(Unknown Source) Â Â Â Â Â Â Â  at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source) Â Â Â Â Â Â Â  at java.lang.ClassLoader.loadClass(Unknown Source) Could not find the main class: org.junit.runner.JUnitCore.Â  Program will exit. Â  Â  Â  Â  Have you other idea to solve my problem? Â  I will be very grateful for you help.. Emanuela ________________________________ A: junit@yahoogroups.com Inviato: Lun 24 gennaio 2011, 20:49:07 Oggetto: Re: [junit] Problem when installation of a last version âjunit4.9b2â!! Hi Emanuela, you have a problem in your CLASSPATH, in the name of your JAR file. You typed "junit4.9b2.jar" but it must be "junit-4.9b2.jar". Once you fix this in your CLASSPATH variable and restart all the command line consoles (in case you have any of them opened while you do the fix), you should be up and running. Bogdan Â  ;C:\TOOL_TEST\JUnit\junit4.9b2;C:\TOOL_TEST\JUnit\junit4.9b2\javadoc;C:\TOOL_TES\ T\JUnit\junit4.9b2\junit\tests</body>
  </mail>
  <mail>
    <header>Re: accessing JUnit runner/suite objects at runtime (or... rule for a suite)</header>
    <body>Hi Steve, singleton/static API, or via fetching annotation objects, I could fetch my category, find its list of test classes, and iterate over them verifying the annotations. It isn't clear to me whether you're trying to test your test classes, filter them, or something else. If you're trying to filter them, perhaps my Runtime Suite stuff would help:  and filter test classes and methods. (Sorry it's a Maven project. I hate myself. And it still uses the soon-to-be-obsolete MethodRule interface instead of the new TestRule abstract class.) At very least, it might give you some ideas of how to do what you're trying to do. Dale</body>
  </mail>
  <mail>
    <header>Re: Problem when installation of a last version junit4.9b2!!</header>
    <body>Emanuela, This will likely resolve itself if you replace this element of your classpath: C:\TOOL_TEST\JUnit\junit4.9b2\junit\tests With this: C:\TOOL_TEST\JUnit\junit4.9b2 Good luck, (x86)\Java\jdk1.6.0_23\bin\java. ................................................................................ ..............................................................E................. ..............................I.I............................................... ................................................................................ .....................................I.......................................... org/junit/test junit4.9b2!! makes 4. te oc 32 2. junit4.9b2!! of 4.9 tes nes m32 .2. exit. should org;C:\TOOL_TEST\JUnit\junit4.9b2;C:\TOOL_TEST\JUnit\junit4.9b2\javadoc;C:\TOOL_\ TEST\JUnit\junit4.9b2\junit\tests</body>
  </mail>
  <mail>
    <header>Re: accessing JUnit runner/suite objects at runtime (or... rule for a suite)</header>
    <body>Thanks Dale. Actually, I want to test my test class annotations. For example, I have a category called FailingTests.   I have created an annotation called BugNumber (with a string). I want to verify that all the tests annotated with category FailingTests must have a BugNumber annotation, and the BugNumber annotation must have a valid string value. For example, this would pass the test: @Category(FailingTests.class) @BugNumber("1234") @Test And this should failing the test check, because the BugNumber is not valid (missing in this case): @Category(FailingTests.class) @Test Based on the recent JUnit 4.9b2 release notes, it seems I might be able to use rules with suites in the near future.  I'm hoping that approach may let me do this.</body>
  </mail>
  <mail>
    <header>Re: Re: accessing JUnit runner/suite objects at runtime (or... rule for a suite)</header>
    <body>Steve, Do you have a custom Suite class?  You could use that to loop through the included test cases and validate each one. annotation called BugNumber (with a string). have a BugNumber annotation, and the BugNumber annotation must have a valid string value. (missing in this case): rules with suites in the near future.  I'm hoping that approach may let me do this.</body>
  </mail>
  <mail>
    <header>Setting up Junit</header>
    <body>Hello, ( Had to re-post, I joined but didn't subscribe. ) I am new to JUnit, and I am having trouble getting it to work. I read the prior posts on this topic and was able to duplicate what the OP did which was the following: From the dir the jar file is in:  I typed: org.junit.runner.JUnitCore the output was:  JUnit vesion 4.8.1  ect. However, I cannot get it to work as it does in the read me file, I must not have my environment variables set properly. Here is what I have: CLASSPATH             .;C:\Program Files (x86)\Java\jre6\lib\ext\QTJava.zip JUNIT_HOME C:\jUnit\junit4.8.1\junit-4.8.1.jar;C:\jUnit\junit4.8.1 Path                       C:\Program Files\Common Files   ....  ect JUnit -4.8.1.jar is in    C:\jUnit\junit4.8.1 I can't seem to get any further with this. Thank You, Jeff. P.S. I for got to add this: When I issue the following command: java org.junit.runner.JUnitCore org.junit.tests.AllTests I get the following error: java.lang.NoClassDefFoundError: org/runner/JunitCore  ect... -- View this message in context:  Sent from the JUnit - User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: accessing JUnit runner/suite objects at runtime (or... rule for a suite)</header>
    <body>Yes, I have a custom Suite class.  That approach sounds great. But how can I access the test cases within the suite? This is my Suite class: /** * Test suite to run all tests annotated with * @Category(FailingTests.class) */ @IncludeCategory(FailingTests.class) @RunWith(Categories.class) @SuiteClasses(AllTests.class) and the AllTests Suite is: @RunWith(ClasspathSuite.class)</body>
  </mail>
  <mail>
    <header>Re: Setting up Junit</header>
    <body>Jeff, Try adding %JUNIT_HOME% to your CLASSPATH, instead of your PATH.</body>
  </mail>
  <mail>
    <header>Re: Re: accessing JUnit runner/suite objects at runtime (or... rule for a suite)</header>
    <body>Ah, I meant a custom suite runner.  Here's something you could do: @IncludeCategory(FailingTests.class) @RunWith(MyCategories.class) @SuiteClasses(AllTests.class) It could be prettier, but this should work.</body>
  </mail>
  <mail>
    <header>Re: Setting up Junit</header>
    <body>Excellent, I got that. How do I make these changes persistent? Thanks, Jeff. Â ect -- View this message in context:  Sent from the JUnit - User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: Setting up Junit</header>
    <body>This is probably where someone who remembers Windows better than I do speaks up.  :-/  Sorry,</body>
  </mail>
  <mail>
    <header>Re: Setting up Junit</header>
    <body>I got it. Thanks again. Â ect -- View this message in context:  Sent from the JUnit - User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: Problem when installation of a last version âjunit4.9b2â!!</header>
    <body>For me it looks like you still have problems with the CLASSPATH. Please pay attention to what you write in that variable. For example, instead of ...C:\TOOL_TEST\JUnit\junit4.9b2junit-4.9b2.jar;...     you should have ...C:\TOOL_TEST\JUnit\junit4.9b2\junit-4.9b2.jar;... (there is a backslash missing there). Bogdan 9b2junit-4.9b2.jar;C:\TOOL_TEST\JUnit\junit4.9b2\org;C:\TOOL_TEST\JUnit\junit4.9 b2;C:\TOOL_TEST\JUnit\junit4.9b2\javadoc;C:\TOOL_TEST\JUnit\junit4.9b2\junit\tes ts;C:\TOOL_TEST\EasyMock\easymock-3.0;C:\TOOL_TEST\EasyMock\easymock-3.0\objenes Path=C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32 \WindowsPowerShell\v1.0\;C:\Python27\Scripts;C:\TOOL_TEST\Marathon\marathon-1.2. C:\TOOL_TEST\JUnit\junit4.9b2;C:\TOOL_TEST\JUnit\junit4.9b2\javadoc;C:\TOOL_TEST\ \JUnit\junit4.9b2\junit\tests</body>
  </mail>
  <mail>
    <header>Re: Setting up Junit</header>
    <body>'My Computer', right mouse, Properties, 'Advanced' tab, "Environment Variables" button, Edit User of System variable, Ok, Ok, Ok ... .. persisted. Caveat - there are probably slight variations depending on which windows you run (this in for XP), but I hope you reach the right location and result. -- Mark</body>
  </mail>
  <mail>
    <header>Fast Code Eclipse Plugin</header>
    <body>You can generate junit tests and testng as well with this plugin. You just have select a method and create unit test. Let me know how you like it. You need configure it only once. Thanks, --Gautam</body>
  </mail>
  <mail>
    <header>How to avoid running a test class multiple times</header>
    <body>Is there a way to tell JUnit to execute a class only once no matter how many times it appears in an invoked test suite? E.g., say SomeTestClass.java is included in both test suite 'A' and test suite 'B'. But I have a higher-level suite call 'All' which includes both 'A' and 'B'. Running 'All' will thus run SomeTestClass.java twice. Is there a way to prevent that?</body>
  </mail>
  <mail>
    <header>How to make JUnit work with own test format</header>
    <body>Hi, I'm working on Quercus, a PHP implementation in Java. To test our implementation, we have a huge amount of tests. Each test is contained in a text file someName.qa which is a sort-of XML file. These tests are currently run through a self-made test-runner. I would like to replace this custom test-runner with a JUnit-extension, so that I'm able to include our test files in a maven build and let them be run through junit (and all the nice junit plugins for IDEs). our test layout currently looks like the following module/ module/module.xml &amp;lt;- a file containing ranges for test-sections module/0001.qa &amp;lt;- a single testcase Please tell me, if the following assumption is correct: I think to accomplish what I want, I need to create a special implementation of - org.junit.runners.Runner and/or of - org.junit.runners.model.TestClass A test basically looks like this: DOM loaded So we're running the content inside the &amp;lt;php..&amp;gt; block and do a string comparison line by line with the &amp;lt;compare&amp;gt; block. I know, thats not best practice, but currently I just need to know if it is possible to run such tests with JUnit (by extending it?) or not. The ideal (end-)scenario would be, that we just put our test files into the /src/test/qa folder of a maven module, add our junit-extension artifact to the project and junit would then pickup the files and run them as tests. Thanks for your help. Dominik</body>
  </mail>
  <mail>
    <header>Re: How to avoid running a test class multiple times</header>
    <body>Not as simply as you might think.  Could you achieve what you want with Categories (from 4.8?) times it appears in an invoked test suite? both 'A' and 'B'. Running 'All' will thus run SomeTestClass.java twice. Is there a way to prevent that?</body>
  </mail>
  <mail>
    <header>Re: How to make JUnit work with own test format</header>
    <body>Dominik, You should definitely be able to do this.  The extension point you want is likely ParentRunner.  I imagine you'd override getChildren to return a list of filenames, describeChild to return the filename (or perhaps the title?), and runChild to parse and run your test. I hope this helps. that I'm able to include our test files in a maven build and let them be run through junit (and all the nice junit plugins for IDEs). of comparison line by line with the &amp;lt;compare&amp;gt; block. possible to run such tests with JUnit (by extending it?) or not. project and junit would then pickup the files and run them as tests.</body>
  </mail>
  <mail>
    <header>Re: How to make JUnit work with own test format</header>
    <body>I was trying to think if there was some way to do this with rules, since that's the preferred way to extend test running behavior, but I don't see how since you need a test for each file. Kent that I'm able to include our test files in a maven build and let them be run through junit (and all the nice junit plugins for IDEs). of comparison line by line with the &amp;lt;compare&amp;gt; block. possible to run such tests with JUnit (by extending it?) or not. the project and junit would then pickup the files and run them as tests.</body>
  </mail>
  <mail>
    <header>Re: More modern license?</header>
    <body>Traditionally, it is common place to not redistribute JUnit.  Most products run fine without the JUnit jars included in the final release.  The jars are only required for running the unit tests. If you are not distributing the code, I'm no lawyer, but I'd think you'd be fine.  Are you required to distribute your tests? Mike</body>
  </mail>
  <mail>
    <header>Re: More modern license?</header>
    <body>Dear Jaroslav, Thank you for the message. It is not practical to change the license for JUnit because of the difficult of identifying and notifying contributors. Commercial licenses are available and have been sold through Three Rivers Consulting, Inc. with terms crafted to meet your needs. Please have your lawyers contact me for details. Best regards, Kent Beck Three Rivers Consulting, Inc. license. True, JUnit's use of Common Public License is unique and sort of archaic. I don't know about any other (important) project using this license anymore. our standard installation. Silly, I know, JUnit is necessary part of any serious Java development, but there is not much we can do. Except to ask: would be fine. At least I have not heard any complain about EPL from our new lawyers yet. Dual licensing to CPL &amp;amp; EPL probably too. our software being crippled due to artificial licensing constraints.</body>
  </mail>
  <mail>
    <header>Commercial License for Open Source was: More modern license?</header>
    <body>Thanks for your fast reply Kent. I am glad we have an option to pay for a better license, especially one without the patent clause[1]. Now I fully understand why our lawyers object against CPL and I am surprised that Sun lawyers previously accepted that clause. Btw. I am trying to understand ways to make open source projects profitable[2]. So far I thought only GPL with commercial licensing is an option, but the CPL trick is also cute. I have one question, however: I can imagine buying a commercial license is good for closed source projects. But how can a commercial license be suitable for an open source project like NetBeans? If we want to stay open source, we cannot have a commercial license on one of our libraries! We need to have an open source one. We need to let 3rd parties to take parts of our IDE and use them in an open source manner. I am sure we are not the first ones to have this problem, and you have some solution, right? Thanks in advance for your answer. Meanwhile we'll start shaping up description of our needs with our lawyers. -jt [1]  change-2 [2] because of the difficult of identifying and notifying contributors. Commercial licenses are available and have been sold through Three Rivers Consulting, Inc. with terms crafted to meet your needs. Please have your lawyers contact me for details. license. True, JUnit's use of Common Public License is unique and sort of archaic. I don't know about any other (important) project using this license anymore. our standard installation. Silly, I know, JUnit is necessary part of any serious Java development, but there is not much we can do. Except to ask: would be fine. At least I have not heard any complain about EPL from our new lawyers yet. Dual licensing to CPL &amp;amp; EPL probably too. see our software being crippled due to artificial licensing constraints.</body>
  </mail>
  <mail>
    <header>The story of the JUnit license</header>
    <body>All, Since the question about the JUnit license came up recently, I thought I'd clarify the story of why the license is the way it is. Pre-license For the first year or so of JUnit's existence we didn't have a license at all. The code was out there, people used it, nobody worried. CPL After a while it became clear that JUnit was going to be popular. At the same time IBM's lawyers discovered open source. Since Erich and I had been equally involved in the project from the first, we needed to have a license and it needed to be one that the IBM lawyers approved of. This was roughly the time that the CPL came out, I believe with IBM's support. We adopted the CPL, more or less by default. I want to be clear on this point. The CPL isn't a cunning trick or a political statement. It's just the license that made sense at the time. Commercial licenses About five years ago I began receiving questions from company lawyers about the CPL. They object to the patent provisions for reasons I cannot explain because I have never received an explanation that made sense to me. In these cases I offer to write a commercial license for JUnit with terms that meet their needs. Sometimes the inquirer purchases the license. Sometimes they don't. Re-licensing One of the options is to issue JUnit under a new license that no one would object to.  I don't have any plans to do this. The costs of the conversion are considerable, and would be paid by me. The benefits of the conversion would accrue to large corporations with big legal staffs. It doesn't make sense to me to spend my time for free to make their lives easier. From my perspective, if a company can afford the lawyers to object to the CPL, then they can afford a commercial license. The vast majority of users have no concerns with the current license. I suppose there is a fantasy scenario where Large Corp. decides to sponsor JUnit for a bazillion dollars a year and as part of the deal I change the license, but that doesn't seem likely at this point. Conclusion I can see that from the outside my position looks a bit like extortion: you (big company) don't want bad things to happen, you'd better pay up. From my perspective, though, my position makes sense. If you can pay to object, you can pay to make the objection go away. I have donated many thousands of hours of my time to my community. Should I donate more of my time so lawyers can sleep better at night and give up a source of revenue in the process? That's the part that doesn't make sense to me. I can see the conflict between the two perspectives but I don't have a resolution. Anyway, that's the story of the JUnit license. I'd be glad to engage in followup discussions here if folks have any questions or comments.</body>
  </mail>
  <mail>
    <header>Re: The story of the JUnit license</header>
    <body>Just an idea that popped up in my mind: Would it solve the problem if someone sponsored the move of JUnit to another licence, instead of bying a commercial license? As such this sponsor would invest in the community to make JUnit even more accessible to others. Greetings,</body>
  </mail>
  <mail>
    <header>Re: The story of the JUnit license</header>
    <body>Kent Beck wrote on 01/14/11 07:37 AM: the I offer If you don't understand why people object to the patent litigation clause, well, then you're like me a few days ago, or like most of the people who use JUnit - you've been completely fooled by the implications of the license.  Start here:  change-2 As I now understand it (IANAL), the CPL provides a huge disincentive to anyone who depends on JUnit to enforce their patent rights with a contributor to JUnit *for software completely unrelated to JUnit*.  CPL (and EPL) contains a similar patent retaliation clause limited to the licensed program (e.g., JUnit), but it's this broader clause in CPL that is problematic. As licensor, you might think this is a good thing. If you believe software patents are evil, you might think this is a good thing. As licensee, if you have a significant software patent portfolio, you should be concerned. Ask IBM if they're willing to use someone else's software under the terms of the CPL license. I fully understand why you would want to offer commercial licenses for JUnit, and why changes that reduce your ability to make money that way would not be attractive. And I understand that changing the license has some cost to you, for no apparent benefit to *you*. I just think it's important for you to understand why others object to the license you've chosen, even if you don't want to change it.  (Given the history you've described, it's clear that you didn't choose this license *because* of this clause.)  I understand that you need to balance changes in the license that might further promote use and distribution of JUnit with the cost to you of doing so and with your ability to make money by selling commercial licenses. Do you now understand why others have an issue with the license you're using?</body>
  </mail>
  <mail>
    <header>Re: More modern license?</header>
    <body>The following posts might be helpful..  ense-proliferation/ IANAL either but the section 7 language does appear to give any contributor the right to release under a successor license, and EPL is a successor. Hope you guys can get it sorted out! because of the difficult of identifying and notifying contributors. Commercial licenses are available and have been sold through Three Rivers Consulting, Inc. with terms crafted to meet your needs. Please have your lawyers contact me for details.</body>
  </mail>
  <mail>
    <header>Proliferation of licenses was: More modern license?</header>
    <body>Very interesting, thanks for sharing the links!  ense-proliferation/ It has not come to my mind[1] that EPL1.0 supercedes CPL1.0! When I asked for "more modern license" I did not know how close I was. Proliferation of various open source licenses is bad and I am glad upgrading to EPL1.0 is allowed by CPL1.0. It can safe a lot of troubles. Now, when it is clear that EPL1.0 is the natural evolution step, I can offer some help. Kent mentioned that he has no capacity to change the license himself. I can help changing all the JUnit sources and create a patch. The rest would be just a matter of incorporating my changes into main source line and releasing binaries for under the new license... Shall we walk this path? -jt [1] The license would rather be called CPL1.1 if "the superceeding" was the plan from begining...  ense-proliferation/ the right to release under a successor license, and EPL is a successor. JUnit because of the difficult of identifying and notifying contributors. Commercial licenses are available and have been sold through Three Rivers Consulting, Inc. with terms crafted to meet your needs. Please have your lawyers contact me for details.</body>
  </mail>
  <mail>
    <header>Re: Proliferation of licenses was: More modern license?</header>
    <body>As the text of an e-mail does not carry the facial expressions and tonality of the spoken word, I'm not sure if your sarcastic or not.  (Even though, I do have a reduced ability of this compared to others.) Assuming that you were serious.... I can not speak for the authors of the language, nor do I care to.  Yet, I've always been under the impression that to transfer a fork of an API under a new fresh license, a person/group would have to start without any of the original code.  I'm no lawyer, but to claim that a patch to a given set of source code could release without holding onto the original license might not be possible under the copy left provision. As a plea from myself, others may join in... Please don't make my life more troublesome by introducing a freshly grown JUnit-esque API, that some corporate manager like.  While as a developer, I will see some uniqueness that will make my code writing experience less enjoyable. But as The Dude would say to me... "Yeah, well, you know, that's just, like, your opinion, man." On Sat, Jan 15, 2011 at 9:14 AM, jaroslavtulach  ense-proliferation/  ense-proliferation/</body>
  </mail>
  <mail>
    <header>Re: More modern license?</header>
    <body>I just wanted to reiterate what others have pointed out. Because the EPL has superseded the CPL as its new version, it is not necessary to seek the approval of past contributors. You can simply re-license the code under the EPL as other projects such as Mondrian and olap4j[1] have done. Obviously, the license is your decision. I just want to clarify that the burden of moving to the EPL is relatively low. See the second last paragraph of Section 7 of the CPL and EPL. Mike Milinkovich Executive Director, Eclipse Foundation [1]</body>
  </mail>
  <mail>
    <header>Re: The story of the JUnit license</header>
    <body>Bill, I can understand why Oracle lawyers object to the patent provisions of the CPL. It makes sense to me to work out a business arrangement to address the JUnit license to their satisfaction. Regards, Kent</body>
  </mail>
  <mail>
    <header>Re: The story of the JUnit license</header>
    <body>Malte, That sounds ideal to me. I would love to have a stable source of support for JUnit so it can continue to evolve. Regards, Kent</body>
  </mail>
  <mail>
    <header>Re: The story of the JUnit license</header>
    <body>Kent, Please leave JUnit under the CPL. We need something to keep Oracle's aggressiveness in check. On an unrelated note, Google uses and extends JUnit to test the Dalvik VM. Oracle might have already triggered the CPL patent clauses (which may explain in great part why they are focussing on this right now.). A lawyer should look into it. Fred Former Staff Engineer, SW at Sun Microsystem CPL. It makes sense to me to work out a business arrangement to address the JUnit license to their satisfaction.</body>
  </mail>
  <mail>
    <header>junit4 timeout not working</header>
    <body>Hi, I am contributing to bluej project which is a java IDE targeted for university students. It is multi threaded environment. Here is a code snippet that we use to invoke a test method: Result res = (new JUnitCore()).run(Request.method(StudentTest.class, I have annotated our StudentTest class test methods with: I can see that all the tests run successfully. However, one of the tests run longer than 1mS, but there is no timeout error given in the res variable. I'm wondering if this is some weird threading issue related to how we have configured our multi threaded environment. Any suggestions? Let me know if you need any more information. Regards, Patrick</body>
  </mail>
  <mail>
    <header>Re: junit4 timeout not working</header>
    <body>Hmm.  That's a surprising result to me.  Do you have time to boil it down into a single class I can run on its own?  Thanks, students. It is multi threaded environment. Here is a code snippet that we use to invoke a test method: longer than 1mS, but there is no timeout error given in the res variable. configured our multi threaded environment.</body>
  </mail>
  <mail>
    <header>Re: Junit4.9b1 not work</header>
    <body>Emanuela, Have you tried with junit-4.8.2.jar?  Do you have the same problem? C:\TOOL_TEST\JUnit\junit4.9b1\junit4.9b1.jar;C:\TOOL_TEST\JUnit\junit4.9b1\org;C\ :\TOOL_TEST\JUnit\junit4.9b1;C:\TOOL_TEST\JUnit\junit4.9b1\javadoc;C:\TOOL_TEST\\ JUnit\junit4.9b1\junit\tests</body>
  </mail>
  <mail>
    <header>Re: Junit4.9b1 not work</header>
    <body>Emanuela, Please include the user group on each mail by using "reply to all", so other people get a chance to help. What happens if you run jar tf C:\TOOL_TEST\JUnit\junit4.9b1\junit4.9b1.jar ? Thanks, C:\TOOL_TEST\JUnit\junit4.9b1\junit4.9b1.jar;C:\TOOL_TEST\JUnit\junit4.9b1\org;C\ :\TOOL_TEST\JUnit\junit4.9b1;C:\TOOL_TEST\JUnit\junit4.9b1\javadoc;C:\TOOL_TEST\\ JUnit\junit4.9b1\junit\tests</body>
  </mail>
  <mail>
    <header>Re: Junit4.9b1 not work</header>
    <body>Hi, Problem fixed. I did not completely convert over from junit3 to junit4. I had the testclass still inheriting from junit3 TestCase. It all works now. Thanks for your help, Patrick</body>
  </mail>
  <mail>
    <header>Re: Re: Junit4.9b1 not work</header>
    <body>Sorry but not work again see the message error: C:\TOOL_TEST\JUnit\junit4.9b2&amp;gt;"C:\Program Files (x86)\Java\jre6\bin\java.exe" or g.junit.runner.JUnitCore org.junit.tests.AllTests Exception in thread "main" java.lang.NoClassDefFoundError: org/junit/runner/JUni tCore Caused by: java.lang.ClassNotFoundException: org.junit.runner.JUnitCore Â Â Â Â Â Â Â  at java.net.URLClassLoader$1.run(Unknown Source) Â Â Â Â Â Â Â  at java.security.AccessController.doPrivileged(Native Method) Â Â Â Â Â Â Â  at java.net.URLClassLoader.findClass(Unknown Source) Â Â Â Â Â Â Â  at java.lang.ClassLoader.loadClass(Unknown Source) Â Â Â Â Â Â Â  at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source) Â Â Â Â Â Â Â  at java.lang.ClassLoader.loadClass(Unknown Source) Could not find the main class: org.junit.runner.JUnitCore.Â  Program will exit. Â  Can you help me? Thank so much... Emanuela Â  ________________________________ A: junit@yahoogroups.com Inviato: Mer 19 gennaio 2011, 19:23:59 Oggetto: [junit] Re: Junit4.9b1 not work Â  Hi, Problem fixed. I did not completely convert over from junit3 to junit4. I had the testclass still inheriting from junit3 TestCase. It all works now. Thanks for your help, Patrick</body>
  </mail>
  <mail>
    <header>Re: Re: Junit4.9b1 not work</header>
    <body>Emanuela, Were you able to find the jar tool, and use it to find the contents of the jar on your classpath? or org/junit/runner/JUni</body>
  </mail>
  <mail>
    <header>Re: Junit4.9b1 not work</header>
    <body>Emanuela, I'm afraid I'm out of ideas.  When I'm at a computer later, I'll double-check that the jar is well-formed.  In the meantime, maybe people who have more recently worked on Windows can chime in... (x86)\Java\jre6\bin\java.exe" or org/junit/runner/JUni exit.</body>
  </mail>
  <mail>
    <header>Re: Re: Junit4.9b1 not work</header>
    <body>Hi Emanuela, the jar tool (jar.exe) is in the bin/ folder of your JDK installation. Note that you require a JDK, as it is not included in an JRE. Regards, Murat</body>
  </mail>
  <mail>
    <header>Re: Re: Junit4.9b1 not work</header>
    <body>Emanuela, You're likely to get more answers if you keep CC'ing the mailing list by using "Reply to All". Can you try using the -cp flag to the java command to override the environment variable?  Thanks, org/junit/experimental/theories/PotentialAssignment$CouldNotGenerateValueExcepti\ on.class org/junit/experimental/theories/internal/AllMembersSupplier$MethodParameterValue\ .class org/junit/internal/runners/JUnit38ClassRunner$OldTestClassAdaptingListener.class</body>
  </mail>
  <mail>
    <header>Re: junit4 timeout not working</header>
    <body>Hi, Problem fixed. I did not completely convert over from junit3 to junit4. I had the testclass still inheriting from junit3 TestCase. It all works now. Thanks for your help, Patrick university students. It is multi threaded environment. Here is a code snippet that we use to invoke a test method: longer than 1mS, but there is no timeout error given in the res variable. configured our multi threaded environment.</body>
  </mail>
  <mail>
    <header>Re: Proliferation of licenses was: More modern license?</header>
    <body>Just to make sure y'all know this isn't hanging, we're discussing what to do next. Kent  ense-proliferation/ "more modern license" I did not know how close I was. Proliferation of various open source licenses is bad and I am glad upgrading to EPL1.0 is allowed by CPL1.0. It can safe a lot of troubles. some help. Kent mentioned that he has no capacity to change the license himself. I can help changing all the JUnit sources and create a patch. The rest would be just a matter of incorporating my changes into main source line and releasing binaries for under the new license... plan from begining...  ense-proliferation/  the right to release under a successor license, and EPL is a successor. JUnit because of the difficult of identifying and notifying contributors. Commercial licenses are available and have been sold through Three Rivers Consulting, Inc. with terms crafted to meet your needs. Please have your lawyers contact me for details.</body>
  </mail>
  <mail>
    <header>Junit3 error: Implicit super constructor TestCase() is not visible</header>
    <body>The following code has this error when compiled in jdk6 &amp;amp; Eclipse: Implicit super constructor TestCase() is not visible. Must explicitly invoke another constructor.</body>
  </mail>
  <mail>
    <header>Re: Junit3 error: Implicit super constructor TestCase() is not visible</header>
    <body>Do you know what version of JUnit you're compiling against? TestCase() has been public for a very long time. another constructor.</body>
  </mail>
  <mail>
    <header>Re: Junit3 error: Implicit super constructor TestCase() is not visible</header>
    <body>-- View this message in context:  is-not-visible-tp30724419p30728622.html Sent from the JUnit - User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Custom ANT selector for JUnit</header>
    <body>I have written a simple custom selector for ANT. Used as follows It matches class files which either extend TestCase or contain methods marked with @Test but not @Ignore. It also checks @Category annotations so the matched set can be restricted by or The category test doesn't respect the class heirarchy (i.e. only exact matches, not super/sub classes). This was done for simplicity in the initial implementation. I can make the code available if anyone is interested. Mark</body>
  </mail>
  <mail>
    <header>Re: Junit3 error: Implicit super constructor TestCase() is not visible</header>
    <body>Albert, I don't quite understand/remember what's going on here... Where is this error being reported? Do you have other classes that extend TestCase, and don't have this problem?  If you add a constructor like this, is life better?  is-not-visible-tp30724419p30728622.html</body>
  </mail>
  <mail>
    <header>Re: Re: Unit testing a private method??</header>
    <body>Mike Forsberg wrote on 5.12.2010 2:17: For me too, the speed of running the tests is important. If it takes over 5-10 seconds to run all the tests, then I will hesitate to run them after every change, which in turn will lead to slower feedback and longer times in finding the reason for a failure: If I run the tests less often, I will make more changes between running tests, and the mistake could be in any of those changed lines. But if I run tests after every one-liner change and the tests break, there is a high probability that the mistake was on that one line and I will find it quickly. So I will have near-100% test coverage using unit tests, which I will run many times per minute; these tests must run at a speed of hundreds or thousands of tests per second. Then I also have a small set of end-to-end tests, which I use the verify the existence of features and that all the components have been plugged together correctly. P.S. When using Guice, I might have a unit test which creates the Guice Injector to check that the DI configuration doesn't contain such obvious errors which Guice's built-in checks will find. But I would not instantiate the SUT of my unit tests using Guice, because that's slow (on my C2Q6600 CPU about 5 ms to create the Injector), and because it would not put as much design pressure on my code (more on that later). Another reason is that by writing focused unit tests you can focus better on making that unit behave correctly in all corner cases (pun intended). For example, I was writing a small transactional in-memory database and had to introduce locking of multiple keys as an atomic group (my integration tests were sometimes failing due to a concurrency bug - so at integration level the bug was reproducable, but very non-deterministic), so I wrote a GroupLock [1] class which I could then use in the database. What do you think, could all the corner cases mentioned in [2] be covered reliably with integration tests for a multi-threaded system? In the same in-memory database there were also other low-level components which I test-drove using unit tests, because test-driving them using higher level tests would not have been possible with small steps. When I was test-driving the database class, at first I had all the values in a HashMap, but then when I started to implement transactions and multiversion concurrency control [3], I basically needed a versioned Map which remembers some of the previous values, until there are no active transactions which can read those old versions. This produced the five Revision* classes at [4], in total over 400 LOC, and I don't see how I could have test-driven those using only integration tests. So I grew those classes using the four Revision*Spec tests at [5]. [1]  t/orfjackal/dimdwarf/db/inmemory/GroupLock.java [2]  t/orfjackal/dimdwarf/db/inmemory/GroupLockSpec.java [3] [4]  t/orfjackal/dimdwarf/db/inmemory [5]  t/orfjackal/dimdwarf/db/inmemory Still one more reason why I write unit tests (in addition to end-to-end tests), is that writing unit tests is more painful [6]. To be able to test something in isolation, the code needs to be decoupled and cohesive, and it needs to avoid global state and many other traits of generally bad design [7]. When dealing with bad code, writing unit tests causes *more pain* than writing integration tests, which is a *good thing*, because it leads me to improve the design so that writing the tests will be easier. This in turn leads into better code and a more maintainable design. If I would write only integration tests, or even no tests, then I would be shutting my eyes to the problem points in the design and there would be no pressure to improve the design. P.S. In the Growing Object-Oriented Software book the authors say that also writing end-to-end tests puts design pressure on the system as a whole, which leads to for example introducing monitoring hooks into the system. These hooks in turn also happen to be useful for monitoring the system in production. [6]  [7]  -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Re: Is junit-dep supposed to work without Hamcrest?</header>
    <body>The issue is here: Will this get fixed for 4.9? Causes lots of pain. Cheers, Peter ---------------------------------------------------------------- Peter Niederwieser Creator, Committer, Chief Engineer, Twitter: pniederw</body>
  </mail>
  <mail>
    <header>Why no target parameter on TestRule.apply()?</header>
    <body>Hi all, A question arose in response to my blog post about how to write and apply rules ( Why does the new TestRule.apply() method not take a target parameter? Given that the description can tell you everything you want to know about the test method and test class, I'm guessing that rules would need to interact directly with targets only rarely. But the question arose, and rare is not the same as never, so I thought I'd ask those in the know. Dale -- Dale Emery Consultant to software teams and leaders Web:</body>
  </mail>
  <mail>
    <header>Re: Why no target parameter on TestRule.apply()?</header>
    <body>Great question.  As usual, the docs are lagging the implementation a bit.  A couple reasons: 1) Most rules don't appear to use the target. 2) 4.9 introduces ClassRules, for which there is no target to supply. 3) Rules that need the target can easily ask for it at creation (see below). 4) There seemed to be some documentation benefit in being able to see which rules actually used the target. A (half-hypothetical) example of a rule that can use the target is a auto-mocker, which can be used thus, with "this" passed into the Rule's constructor: Hope that makes sense, and thanks for the blog post!</body>
  </mail>
  <mail>
    <header>In which sequence are testMethods called?</header>
    <body>Assume I have defined a java test class like the one below. In which sequence are the Â´various test methods processed? - Alphabetically? - In the order of appearance in the class? How can I change the order of processing? Ben -- View this message in context:  480.html Sent from the JUnit - User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: In which sequence are testMethods called?</header>
    <body>Ben, JUnit uses Java's reflection API, which guarantees nothing with respect to order:  -fields-and-methods-standardized There are tricks to get your tests running in a particular order. There are also ways to change your tests so the order is unimportant. Why are you hoping to change the order?  480.html</body>
  </mail>
  <mail>
    <header>Re: Why no target parameter on TestRule.apply()?</header>
    <body>Hi David, D'oh! It never occurred to me that you could refer to "this" outside a method. I need to pair more often. Thanks! Dale -- Dale Emery Consultant to software teams and leaders Web:</body>
  </mail>
  <mail>
    <header>Re: Why no target parameter on TestRule.apply()?</header>
    <body>In truth, I had to go double-check with a quick test case before posting, because I don't do it often...</body>
  </mail>
  <mail>
    <header>Re: Latest preference for organzing test package</header>
    <body>That's why I put the test classes in a different package from the production code: - if I need intermediate access, then there's probably a cleaner design waiting to be discovered - it makes navigation in Idea (based on packages) easier (Eclipse handles this better) S</body>
  </mail>
  <mail>
    <header>exclude some tests to run</header>
    <body>Hello all, I am using an older version of junit (3.8) and I'm having some time consuming tests that I don't want to run on every build but on some special ones. Those tests are grouped into a suite. Is it possible to exclude that suite from an ant script?</body>
  </mail>
  <mail>
    <header>Re: exclude some tests to run</header>
    <body>Googling for "ant junit exclude tests" gave me some useful links.  Good luck, tests that I don't want to run on every build but on some special ones. Those tests are grouped into a suite. Is it possible to exclude that suite from an ant script?</body>
  </mail>
  <mail>
    <header>newbie question</header>
    <body>I'm learning about using junit for my unit tests. My problem is that while my test is written as: I'm getting the following: RBC.possibleCard(String card) returns a boolean. But why am I getting expected null when I'm doing an assertTrue? I've tried junit 4.8.2 and 4.8.1 with no change. I have a parameterized test going where it runs a bunch of assertTrue based off a parameter. Every time it tests I get the same expected:&amp;lt;null&amp;gt;. At first I had assertEquals with that error, so I changed it to assertTrue or assertFalse and I'm still getting expected:&amp;lt;null&amp;gt;. What am I doing wrong?</body>
  </mail>
  <mail>
    <header>Re:</header>
    <body>[This is a recording.] I'm on vacation until January 3, 2011. I'll be reading mail occasionally. Happy Holidays! Bill</body>
  </mail>
  <mail>
    <header>Re: newbie question</header>
    <body>Hi, jsmitthers. There are a few bugs that need to be fixed where JUnit adds "null" to failure messages.  However, I'm not aware of any that result in exactly that message.  Can you post a small test class that I can run to see this behavior?  Thanks, test is written as: null when I'm doing an assertTrue? going where it runs a bunch of assertTrue based off a parameter. Every time it tests I get the same expected:&amp;lt;null&amp;gt;. assertFalse and I'm still getting expected:&amp;lt;null&amp;gt;.</body>
  </mail>
  <mail>
    <header>Re: newbie question</header>
    <body>Hi David, Thanks for the help! I'm very new to this, so I'm sure this is not the most efficient method of testing. blahImpl.possibleCard(String card) returns either true or false if the card presented is valid. For example, "10s" is valid (10 of spades), "11s" is invalid, "3h" is valid. Instead of using the Boolean class, I've also tried using a plain old boolean. Both produce the same results. Interestingly, when running, the println() statements show that the boolean value is being carried over into testPossibleCards(). This test is being executed by Hudson, via Ant, using javac version 1.6.0_22 on an ubuntu server system. I've never used JUnit, Ant, or Hudson... I jumped in head first :). Anyways, enough yacking on my part. Here is my attempt: @RunWith(value = Parameterized.class) @Before @Parameterized.Parameters for(String rank:ranks) for(String suit:suits) @Test  //assertEquals(expectedValidation.booleanValue(),blahInstance.possibleCard(card)\ THANKS!! my test is written as: getting expected null when I'm doing an assertTrue? going where it runs a bunch of assertTrue based off a parameter. Every time it tests I get the same expected:&amp;lt;null&amp;gt;. or assertFalse and I'm still getting expected:&amp;lt;null&amp;gt;.</body>
  </mail>
  <mail>
    <header>Re: newbie question</header>
    <body>I am now completely confused.... I copy/pasted that test class for testing a different method (I only changed the filename, classname, and a few other necessities), and the new test class worked fantastically.... Then, I added an assertion message to the assert in the test I sent you. It doesn't print the assertion message. Here is the failing test class: @RunWith(value = Parameterized.class) @Before public blahTestPossibleCard(String card, Boolean expectedValidation, String @Parameterized.Parameters for(String rank:ranks) for(String suit:suits) @Test System.out.println("Testing value '"+card+"' with expected result '"  //assertEquals(expectedValidation.booleanValue(),blahInstance.possibleCard(card)\ the most efficient method of testing. presented is valid. For example, "10s" is valid (10 of spades), "11s" is invalid, "3h" is valid. Both produce the same results. Interestingly, when running, the println() statements show that the boolean value is being carried over into testPossibleCards(). on an ubuntu server system. I've never used JUnit, Ant, or Hudson... I jumped in head first :). //assertEquals(expectedValidation.booleanValue(),blahInstance.possibleCard(card)\ my test is written as: getting expected null when I'm doing an assertTrue? test going where it runs a bunch of assertTrue based off a parameter. Every time it tests I get the same expected:&amp;lt;null&amp;gt;. or assertFalse and I'm still getting expected:&amp;lt;null&amp;gt;.</body>
  </mail>
  <mail>
    <header>Test Data provider</header>
    <body>I haven't seen the external Test Data provider in junit. is it going to be available in junit.</body>
  </mail>
  <mail>
    <header>Re: Test Data provider</header>
    <body>Sanjaya, Can you elaborate?  What would an external test data provider do?</body>
  </mail>
  <mail>
    <header>Re: Re: newbie question</header>
    <body>jsmitthers, How are you running the tests?  (command line?  Eclipse?  ant?)  Can you copy and paste the output?  Thanks, the filename, classname, and a few other necessities), and the new test class worked fantastically.... doesn't print the assertion message.  //assertEquals(expectedValidation.booleanValue(),blahInstance.possibleCard(card\ the most efficient method of testing. presented is valid. For example, "10s" is valid (10 of spades), "11s" is invalid, "3h" is valid. boolean. Both produce the same results. Interestingly, when running, the println() statements show that the boolean value is being carried over into testPossibleCards(). on an ubuntu server system. I've never used JUnit, Ant, or Hudson... I jumped in head first :). //assertEquals(expectedValidation.booleanValue(),blahInstance.possibleCard(card)\ while my test is written as: getting expected null when I'm doing an assertTrue? test going where it runs a bunch of assertTrue based off a parameter. Every time it tests I get the same expected:&amp;lt;null&amp;gt;. assertTrue or assertFalse and I'm still getting expected:&amp;lt;null&amp;gt;.</body>
  </mail>
  <mail>
    <header>Re: Test Data provider</header>
    <body>external data provider should be able read test input data from csv,xls, xml,text etc. files.</body>
  </mail>
  <mail>
    <header>Re: Re: Test Data provider</header>
    <body>This is a feature that is unlikely to be built directly into JUnit. Parameterized tests get their data from a static method, which can use any parsing library and data files needed.  I could imagine there might be a market for a third-party library specifically for reading data from certain kinds of files and getting them into a usable format for JUnit, but I think that maintaining a parsing library, or maintaining a dependency on a parsing library, would not make sense as a job for the core JUnit maintainers.</body>
  </mail>
  <mail>
    <header>Catching certain Exception types for all test cases</header>
    <body>Hello, I am currently developing WebDriver test cases, which all might produce exceptions named WebDriverException. Is it some how possible to catch (and handle) certain Exception types for the entire test suite collection in a webapp? I.e., if I have multiple packages under src/test/java/ which each contain multiple Java classes (JUnit), is there any way to detect when certain Exceptions are thrown and then handle them in one single place? Example: Now I am using the following code for Exception handling: Now, I have multiple classes using this try-catch teqhnique. So, is there a way to avoid this, i.e. can JUnit somehow detect when a certain type of Exception occurs, making it possible for me to perform exception handling before continuing as normal? Regards jogrimst</body>
  </mail>
  <mail>
    <header>Before/After cannot be resolved to a type</header>
    <body>i'm trying to use the @Before, @After annotations and i get a "... cannot be resolved to a type" error. i am importing as follows: .... @Before ... methods annotated with @Test work fine. i am doing this from eclipse using JUnit4. any tips much appreciated.</body>
  </mail>
  <mail>
    <header>Re: Before/After cannot be resolved to a type</header>
    <body>You need to import Annotations as well: org.junit.Before org.junit.After Greetings, resolved to a type" error.</body>
  </mail>
  <mail>
    <header>Re: Before/After cannot be resolved to a type</header>
    <body>i fixed this by changing the import from: to not sure if there's a better way... resolved to a type" error.</body>
  </mail>
  <mail>
    <header>Re: Catching certain Exception types for all test cases</header>
    <body>jogrimst, It depends.  With Rules in JUnit 4, you can hook up a Rule that will have a chance to handle any exceptions thrown by all test methods in a class, and you can add that Rule to each class with a single line. However, it looks like you might be hoping to restart the test method after the line that throws an exception.  If you're looking for that, I'm not aware of any Java package that has that capability. Good luck, exceptions named WebDriverException. entire test suite collection in a webapp? multiple Java classes (JUnit), is there any way to detect when certain Exceptions are thrown and then handle them in one single place? way to avoid this, i.e. can JUnit somehow detect when a certain type of Exception occurs, making it possible for me to perform exception handling before continuing as normal?</body>
  </mail>
  <mail>
    <header>JUnit &amp;amp; embedded</header>
    <body>Hi, I'm currently doing some studies in a degree of coding &amp;amp; networks in a college in France. This year we have a 250 hours project, and my goal in this project is to code on a TINI card the control of some captors and to send some datas to the main database, in addition to that, the user will be able from a distant site, to handle the whole system such as rebooting it and others features to be determined. But here is my question, I'd like to use JUnit on embedded systems. So as I said on a TINI card. Is there anything special I should know about JUnit compared to basic coding on software? Thanks in advance regards</body>
  </mail>
  <mail>
    <header>Re: JUnit &amp;amp; embedded</header>
    <body>The main thing to check is whether the Java Runtime Environment for your system supports reflection.  If it doesn't, then many native features of JUnit will not work.  However, I'm aware of work in at least JUnit 3 to support non-reflection environments.  Let me know if that's relevant. On Mon, Jan 10, 2011 at 4:04 AM, sofiene.hammad@... in France. This year we have a 250 hours project, and my goal in this project is to code on a TINI card the control of some captors and to send some datas to the main database, in addition to that, the user will be able from a distant site, to handle the whole system such as rebooting it and others features to be determined. said on a TINI card. Is there anything special I should know about JUnit compared to basic coding on software?</body>
  </mail>
  <mail>
    <header>More modern license?</header>
    <body>Hello JUnit guys. I know my post is going to sound silly, but I'll try anyway. We have new lawyers. Our new lawyers seem to be concerned about the JUnit license. True, JUnit's use of Common Public License is unique and sort of archaic. I don't know about any other (important) project using this license anymore. Right now we are holding our release and getting ready to remove JUnit from our standard installation. Silly, I know, JUnit is necessary part of any serious Java development, but there is not much we can do. Except to ask: Don't you want to relicense JUnit to some more commonly used license? EPL would be fine. At least I have not heard any complain about EPL from our new lawyers yet. Dual licensing to CPL &amp;amp; EPL probably too. Thanks for reading my post and sorry for bothering. It just make me sad to see our software being crippled due to artificial licensing constraints. On behalf of about 800000 active users of NetBeans IDE, Jaroslav Tulach NetBeans Platform Architect</body>
  </mail>
  <mail>
    <header>Re: More modern license?</header>
    <body>Sorry, didn't see the bit about your product being an IDE.  But still...</body>
  </mail>
  <mail>
    <header>Re: Latest preference for organzing test package</header>
    <body>The maven directory structure is by far the most popular "standard" arrangement, and can be seen at  ry-layout.html This structure is used by a lot of non-maven projects too, simply because following a well known convention is better than making your own. An interesting side-effect of the maven structure is that the unit test resides in the same package as the class being tested. This permits the use of package-level protection for exposing "non-public" information to the test. I know this is generally frowned upon, but sometimes nice anyway. Personally I find the semantics of using "protected" so much more convoluted (that keyword communicates so many other things), so I find package level protection as nice alternative without all the feelings that come with "protected". Kristian fr., 26.11.2010 kl. 16.12 +0100, skrev Kristian Rosenvold:</body>
  </mail>
  <mail>
    <header>Re: Latest preference for organzing test package</header>
    <body>David, Yes, we are doing it through eclipse. -Nelson clear opinions. The JUnit FAQ also has a preference on organization but that has not been updated since 2006. Also, if some people had adopted a particular method, have you had any regrets and wished you had adopted the another method?</body>
  </mail>
  <mail>
    <header>Re: Unit testing a private method??</header>
    <body>Private methods are "helper" methods for other methods. If you want to test a private method, you should make it at least package private. -- ------------------------------------------------------------------------ Rafael Naufal "A great pleasure in life is doing what people say you cannot do" -Walter Gagehot  Twitter: ------------------------------------------------------------------------</body>
  </mail>
  <mail>
    <header>Re: Reporting results when running JUnit tests from Java application</header>
    <body>Many methods of RunListener refer to a junit.framework.Test item. In my situation thanks to your advice I am able to call my testcases from a separate Java application. I had to remove the 'extend TestCase' statement from my class definition to achieve that. As a result I cannot access/specify a Test item to pass to my RunListener. A Test item could have provided a lot of information that I would like to include in my results reporting. David which I want to do using an XSL transform of my XML output. RunListener. situation how can I specify the Test item to pass to the RunListener?</body>
  </mail>
  <mail>
    <header>Re: Running JUnit tests from a separate Java application</header>
    <body>I had hoped I could differentiate between a failed testcase and a failure because the testcase does not exist. David not exist. does it exist. in the one package. application where I run the code which looks like this:</body>
  </mail>
  <mail>
    <header>Re: Re: Running JUnit tests from a separate Java application</header>
    <body>If the test case doesn't exist, I think the failure exception should be a NoTestsRemainException.  Can you check for that? because the testcase does not exist. not exist. does it exist. in the one package. application where I run the code which looks like this:</body>
  </mail>
  <mail>
    <header>Re: Re: Reporting results when running JUnit tests from Java application</header>
    <body>David, I think we're hung up on the difference between: 1) junit.framework.TestListener.  This refers to Test instances, and you shouldn't be using it. 2) org.junit.runner.notification.RunListener.  This refers to Descriptions, and you should be using it. Does this help? situation thanks to your advice I am able to call my testcases from a separate Java application. I had to remove the 'extend TestCase' statement from my class definition to achieve that. As a result I cannot access/specify a Test item to pass to my RunListener. include in my results reporting. results which I want to do using an XSL transform of my XML output. the RunListener. my situation how can I specify the Test item to pass to the RunListener?</body>
  </mail>
  <mail>
    <header>execute all tests in a jar</header>
    <body>Hi I have a couple of questions: (1) To run JUnit tests from the command-prompt, I can use JUnitCore. I have to specify each test class I wish to run. Is it possible to specify a jar file, which JUnitCore will inspect for all available test classes, and execute them? (2) What does the output "EE.EE.EE.EE" etc, from JUnitCore mean? Thanks, Peter</body>
  </mail>
  <mail>
    <header>Re: execute all tests in a jar</header>
    <body>specify each test class I wish to run. Is it possible to specify a jar file, which JUnitCore will inspect for all available test classes, and execute them? Not with core JUnit, but you should look at cpsuite and  . = a test has started E = a test has failed.</body>
  </mail>
  <mail>
    <header>Re: execute all tests in a jar</header>
    <body>Am 30.11.2010 22:03, schrieb xdzgor: I don't know, but you might try out Ant where there is a junit-Task: This is searching for all testcases in a directory but it might also work with Jar-files. With that and you end up with a nice Javadoc-like result of all tests. See  and  for more details. Regards, Lothar</body>
  </mail>
  <mail>
    <header>Re: Running JUnit tests from a separate Java application</header>
    <body>When I put a construct like this into my code Java tells me 'Unreachable catch block for NoTestsRemainException. This exception is never thrown from the try statement body' If I generalise the last catch to look for ANY exception the catch never catches because the run request always returns normally. David because the testcase does not exist. does not exist. i.e. does it exist. @Test. is in the one package. Java application where I run the code module which looks like this:</body>
  </mail>
  <mail>
    <header>Re: Re: Running JUnit tests from a separate Java application</header>
    <body>Sorry, could have given more information. if (run.wasSuccessful()) if (run.getFailures().getException() instanceof NoTestsRemainException) else thrown from the try statement body' catches because the run request always returns normally. because the testcase does not exist. does not exist. i.e. does it exist. @Test. is in the one package. Java application where I run the code module which looks like this: example.Try.methodA' example.Try</body>
  </mail>
  <mail>
    <header>Re: Running JUnit tests from a separate Java application</header>
    <body>Hi, A glimmer of hope - exceptions from my test run are being caught. Refer to this code snippet: if (run.wasSuccessful()) else if (run.getFailures().get(0).getException() instanceof NoTestsRemainException) System.out.println("Error ("+i+"): " + When run do not see 'Method does not exist' being reported. All output is stemming from the last 'else'. How can I found out what exceptions are possible? David thrown from the try statement body' catches because the run request always returns normally. because the testcase does not exist. does not exist. message. i.e. does it exist. @Test. code is in the one package. Java application where I run the code module which looks like this: example.Try.methodA' example.Try</body>
  </mail>
  <mail>
    <header>Re: Running JUnit tests from a separate Java application</header>
    <body>Exceptions actually are discoverable; this line of code identifies them: for (int i=0; i&amp;lt; run.getFailureCount(); i++) System.out.println("Error ("+i+"): " + David thrown from the try statement body' catches because the run request always returns normally. because the testcase does not exist. does not exist. i.e. does it exist. @Test. is in the one package. Java application where I run the code module which looks like this: example.Try.methodA' example.Try</body>
  </mail>
  <mail>
    <header>Re: Re: Running JUnit tests from a separate Java application</header>
    <body>To be clear, you've seen passing tests correctly reported, and failing tests correctly reported, but if you pass in a non-existant test, it's not reported at all?  What is the output you do see?  Thanks, NoTestsRemainException) stemming from the last 'else'. never thrown from the try statement body' catches because the run request always returns normally. failure because the testcase does not exist. does not exist. message. executed i.e. does it exist. @Test. code is in the one package. separate Java application where I run the code module which looks like this: example.Try.methodA' example.Try</body>
  </mail>
  <mail>
    <header>Re: Unit testing a private method??</header>
    <body>Hi Julien, here i use unitils and the solution was to use reflection Search the class org.unitils.util.ReflectionUtils and use helper methods or others utils class using Reflection solution. -- Atenciosamente, Rafael Ribeiro Duque Estrada Michelli</body>
  </mail>
  <mail>
    <header>Re: Running JUnit tests from a separate Java application</header>
    <body>If I debug I see that I am getting an exception with detailed message 'No tests found matching Method Test Case(example.Try) from org.junit.internal.requests.ClassRequest@36d047' I cannot determine to what exception it corresponds. NoTestsRemainException) stemming from the last 'else'. never thrown from the try statement body' catches because the run request always returns normally. failure because the testcase does not exist. it does not exist. message. executed i.e. does it exist. @Test. code is in the one package. separate Java application where I run the code module which looks like this: example.Try.methodA' example.Try</body>
  </mail>
  <mail>
    <header>Re: Unit testing a private method??</header>
    <body>Hi Karl, I had forgotten I even wrote that article. It is quite verbose what I ended up needing to do to test a private method in Java. I included a trait in ScalaTest, which is the descendant of SuiteRunner, to test private methods with very minimal code:  This is heavily integrated with JUnit, a JUnit extension to a great extent. And it can be used to test private Java methods. But you need to use Scala as the testing language. Bill -- Bill Venners Artima, Inc.</body>
  </mail>
  <mail>
    <header>Re: Re: Running JUnit tests from a separate Java application</header>
    <body>Can you use your code above to print run.getFailures().get(i).getException().getClass().getName()? org.junit.internal.requests.ClassRequest@36d047' NoTestsRemainException) stemming from the last 'else'. never thrown from the try statement body' catches because the run request always returns normally. failure because the testcase does not exist. it does not exist. message. executed i.e. does it exist. with @Test. code is in the one package. separate Java application where I run the code test module which looks like this: example.Try.methodA' example.Try</body>
  </mail>
  <mail>
    <header>Re: Unit testing a private method??</header>
    <body>I personally think that every method needs testing; it's a basic part of "divide and conquer". It seems bizarre to me that people seriously believe only public API methods need testing. Smells a bit ideological... To use an analogy, if I'm building (say) a table, I will measure each component as I make it, to make sure it is the right size and shape. Regards, K. -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Karl Auer (kauer@...)                   +61-2-64957160 (h)  GPG fingerprint: B386 7819 B227 2961 8301 C5A9 2EBC 754B CD97 0156 Old fingerprint: 07F3 1DF9 9D45 8BCD 7DD5 00CE 4A44 6A03 F43A 7DEF</body>
  </mail>
  <mail>
    <header>Re: Unit testing a private method??</header>
    <body>Agreed. More generally, I think that any code that can potentially break needs to be tested. Saying that private methods need to be tested through public API's only is the same as saying that you don't need unit testing since you are already doing integration testing. -- Cédric</body>
  </mail>
  <mail>
    <header>Re: Running JUnit tests from a separate Java application</header>
    <body>And I get 'java.lang.Exception' which is not very exciting org.junit.internal.requests.ClassRequest@36d047' NoTestsRemainException) stemming from the last 'else'. never thrown from the try statement body' never catches because the run request always returns normally. failure because the testcase does not exist. or it does not exist. message. executed i.e. does it exist. with @Test. source code is in the one package. separate Java application where I run the code test module which looks like this: example.Try.methodA' example.Try</body>
  </mail>
  <mail>
    <header>Re: Unit testing a private method??</header>
    <body>I agree with both of you. Except... I haven't heard anybody but raw beginners claim that private methods don't need testing. You are ignoring the most frequently stated issue with the testing of private methods. In the wild, when folks "need" to test a private method, it most usually means that they aren't looking carefully enough at the design of the class they are testing. I'd say that 9 times out of 10, the average developer should split the class rather than reach inside to test a private method. Charlie 2010/12/3 CÃ©dric Beust â &amp;lt;cedric@...&amp;gt;:</body>
  </mail>
  <mail>
    <header>Re: Unit testing a private method??</header>
    <body>I absolutely agree with Charlie. Lasse Koskela recently blogged about this issue here:  Marc</body>
  </mail>
  <mail>
    <header>Re: Re: Unit testing a private method??</header>
    <body>Sorry, but Lasse seems to disagree with both Charlie and myself. He's saying that you should never test private methods directly, only indirectly through public methods. I find this angle puzzling, since as I said above, if you follow this reasoning, since all your code is already being tested indirectly by functional testing, why do unit testing at all? The main reason why I sometimes want to test private methods is not fear, as Lasse claims, but simply the fact that this functionality can break. Therefore, it deserves a test of its own. There are two extreme ways to test private methods, both bad: I tend to favor the middle ground approach, which is to relax the scope of the method so that tests can see it. Making it package protected and putting a comment ("/* for testing */") usually works, but if it doesn't, I don't have a problem with making this method public for testing. -- Cédric</body>
  </mail>
  <mail>
    <header>Re: Re: Unit testing a private method??</header>
    <body>Hi Cedric, Sorry, but Lasse seems to disagree with both Charlie and myself. He's Note the end of the article, where Lasse recommends this: Move the private method to a new class where it is public, then test it directly. Dale -- Dale Emery Consultant to software teams and leaders Web:</body>
  </mail>
  <mail>
    <header>Re: Re: Unit testing a private method??</header>
    <body>It is scary to hear of code that may have broken functionality in a private method while the caller methods do not reveal the classes brokenness.  If a private method were performing incorrectly, yet all the functionality exposed at the protected level and above works correctly, one would have to ask, "What is the man behind the curtain really doing?". In a slightly different vain, if a developer were writing tests as sign posts to signify that an error has occurred, shouldn't that sign post be viewable at a higher then private level. Consider a public API that is tested thoroughly and is functionally correct.  Yet, there is a private method that still has a functional error. This should be a signal that the extra incorrect functionality is unreachable or unnecessary. In regards to... why do unit testing at all if everything is tested through functional testing. Personally, if I could get every scenario to run at the integration/functional level within the time I can run my unit tests, I'd only write unit tests to track down why the higher level tests are failing. In this amazing world, a unit test would only be needed to track down a bug since my brain is not big enough to hold the whole system in it's mind. However, once the bug is fixed, the unit test can grow stale.  As I'd be assured that every possible scenario is tested. For me, the reality is that customers don't care that - every method performs correctly - a given method supplies incorrect answers in certain conditions They only care that the result they need is correct when they need it. Since it is the customer that is paying me, I'd rather only care what they care about. Making a rough calculation that - The price of enough machines to run every integration/functional test within a reasonable amount of time is too much money. - I don't write perfect code, and I'd most likely need targeted tests that can run parts of the system in case there is a bug. - Since I know what I'm changing when I change it, I can keep a corresponding set of tests up-to-date with the code changes. It behooves me to keep some unit tests laying around. Then, since they are laying around and are up-to-date, why not run all the ones above the code that I'm changing.  And thus I keep a set of unit tests for each class.  Should I run all the unit test?  Nope, if their code was not touched, then they should still pass.  If it is the case that the tests might fail, then I might have bad architecture or class design. My two cents, Big Mike</body>
  </mail>
  <mail>
    <header>Re: Re: Unit testing a private method??</header>
    <body>That's a truth that too many engineers tend to forget about, and this is why in the grander scheme of things, functional tests are so much more important than unit tests. Here is the reality: unit tests are a comfort *for the developer*. Functional tests are a necessity *for the user*. Functional tests allow you to make sure that a functionality that you are shipping and that will be used by your consumers will work as expected. Unit tests give you no such guarantee. 100% unit tests might be passing and still, your application might be completely broken. This is the reason why if I'm pressed with time and I have to choose between writing a unit test or a functional test, I will choose to write a functional test 100% of the time. Then later, if I find some extra time, I'll try to write a few unit tests that will allow me to converge toward problems faster. Because that's all unit tests enable: faster pinpointing of a problem. If 100% of your tests are functional, you will still find the problem but it might take you a little longer. Not a big deal. It's unfortunate that unit tests have become such a high focus of attention lately (and another reason why TDD makes me uncomfortable). High emphasis on unit tests and on TDD is engineers trying to make their work easier. It's a laudable goal, but it should never come at the expense of the person whom you are working for: the customer. And the only tests that really matter to the customer are functional tests. -- Cédric</body>
  </mail>
  <mail>
    <header>Re: Re: Unit testing a private method??</header>
    <body>2010/12/5 CÃ©dric Beust â &amp;lt;cedric@...&amp;gt;: I tend to try many different approaches to software development, since I plan to be doing it for decades to come, and don't want to get stuck in a local maximum.  I pay special attention to techniques that people I trust say good things about, but I haven't tried, or haven't been successful with.  At this point, I find that test-driven development, with the discipline of changing my design when writing the unit tests hurts, produces the highest-quality software at the highest speed.  I expect I'll continue to try variations on the formula and others. This isn't the first time that Cedric and I have discussed this particular point, so you can probably refer to previous mails on this list if I don't expand every thought here. - Most engineers and craftsmen consider it professional to have structures they use during design and construction that make their job easier, but might not obviously contribute to final quality from an outsider's perspective.  Home contractors might use scaffolding, temporary lighting, pencil marks on the walls, clamps.  As a customer, I do not begrudge these tools, saying "without that temporary lighting, you'll probably make more mistakes, and it might take you longer to find them and fix them, but eventually it will get done." - On being "pressed for time": I assume that a very experienced auto engineer can make a professional decision, when pressed for time, about whether to thoroughly test the airbags in my car using crash test dummies, or using a more isolated lab test.  I also really hope that if both are valuable, a very professional auto engineer makes sure there's time in the schedule for both, and doesn't spend a lot of time arguing with peers about which to drop in order to shorten the schedule. - No tests matter to the customer.  Working software matters to the customer.  What produces working software is a matter best investigated through history and experience. Thanks,</body>
  </mail>
  <mail>
    <header>Re: Re: Running JUnit tests from a separate Java application</header>
    <body>Hmm.  Sounds like you can probably get what you need by checking the exception message, but please file a feature request for a more reliable notification.  Thanks! org.junit.internal.requests.ClassRequest@36d047' NoTestsRemainException) is stemming from the last 'else'. is never thrown from the try statement body' never catches because the run request always returns normally. failure because the testcase does not exist. or it does not exist. message. executed i.e. does it exist. with @Test. source code is in the one package. separate Java application where I run the code test module which looks like this: example.Try.methodA' example.Try</body>
  </mail>
  <mail>
    <header>Re: Running in parallel with categories</header>
    <body>On Tue, Nov 2, 2010 at 4:22 PM, Kristian Rosenvold Yes, that's not in the current implementation.  -of-classes Yep.  Also, have you seen Dale Emery's DynamicSuite?  I might have the name wrong.</body>
  </mail>
  <mail>
    <header>Re: Running in parallel with categories</header>
    <body>Hi David and Kristian, It's currently called RuntimeSuite:  I do think DynamicSuite would be a better name. Not sure if I want to annoy my (nearly 2) fanatic users by changing the name. Dale -- Dale Emery Consultant to software teams and leaders Web:</body>
  </mail>
  <mail>
    <header>Recommendations for tests on transcoding strings</header>
    <body>Hello everyone, I am developing JUnit tests for transcoding ISO-8859-1 strings into UTF-8 and having difficulties with the correct approach to take.  The problem is that some of the test cases deal with characters not supported within ISO-8859-1 such as  or £.  I know Java supports encoding strings in specific character sets via String.getBytes(Charset charset) and that new strings can be constructed via new String(byte[] bytes, Charset charset). QUESTIONS: I would appreciate any advice and direction offered. Regards, -- *Andrew Feller* Production Engineer Bronto Software, Inc 324 Blackwell St. Ste. 410 Durham, NC 27701 "If you do too much, people get dependent on you. And if you do nothing, they lose hope. You have to use a light touch ... If you do things right, people won't be sure you've done anything at all." -- Gaseous Omniscient Deity from Futurama</body>
  </mail>
  <mail>
    <header>ANT</header>
    <body>&lt;a href="http://junit.sourceforge.net/doc/faq/faq.htm#running_5"&gt; Hi, I'm using cruiseControl ... And I need to configure ant to run my Junits ... I known that the info. is in the FAQ, but I dont known where I must put that configuration. faq from junit  and faq from cruiseControl: Perhaps the JUnit results are not being captured correctly. Ensure that your &amp;lt;junit&amp;gt; ant task contains the proper formatting directive to instruct JUnit to output the results in XML format: &amp;lt;formatter type="xml"/&amp;gt;. If you are directing JUnit to send output to a subdirectory, make sure to tell CC about it - use the &amp;lt;merge&amp;gt; element in the &amp;lt;log&amp;gt; section of your config.xml. someone can help me ? I'm using Netbeans 6.8 and Junit 4.5 thanks</body>
  </mail>
  <mail>
    <header>Howto run JUnit4 tests from command-line?</header>
    <body>Hi, I try to run my JUnit4 tests from the command-line using the following command: However it seems using this command my "@BeforeClass"-Annotations are ignored. When I select "run" in netbeans everything executes like expected. Any idea why? Thank you in advance, Thomas</body>
  </mail>
  <mail>
    <header>Howto specify classpath for junit tests?</header>
    <body>Hi, I would like to execute my JUnit-4 tests as an ant task. However I've troubles setting the classpath, my jars are listed in a property called "exec-cp", however JUnit always aborts with ClassNotFound. Any idea whats wrong? Thanks you in advance, Thomas</body>
  </mail>
  <mail>
    <header>Re: Howto specify classpath for junit tests?</header>
    <body>Thomas: a) While many people on this list use ant, and I hope one of us can help you, you may find more ant experts on an ant-specific list. b) Which class is reported not found?</body>
  </mail>
  <mail>
    <header>Re: Howto run JUnit4 tests from command-line?</header>
    <body>Are your @BeforeClass annotations on Test1 and Test2, or on a suite not mentioned? command:</body>
  </mail>
  <mail>
    <header>Running JUnit tests from a separate Java application</header>
    <body>In Eclipse I have a project with a package and all my source code is in the one package. I would like to run JUnit test cases selectively from a separate Java application where I run the code in an attempt to run the unit test 'methodA' in my JUnit test module which looks like this: public class Try extends TestCase @Before @Test I get the error message 'Could not find class: example.Try.methodA' If I run Try.java as a JUnit Test I get the error junit.framework.AssertionFailedError: No tests found in example.Try David</body>
  </mail>
  <mail>
    <header>Re: Running JUnit tests from a separate Java application</header>
    <body>David, 2) You can't both extend from TestCase and mark your tests with @Test. Remove the extends TestCase, and more things will work. Good luck, one package. application where I run the code looks like this:</body>
  </mail>
  <mail>
    <header>Clarification on deprecation of runBefores and runAfters</header>
    <body>In BlockJunit4ClassRunner there is a deprecation with no explicit alternative for runBefores and runAfters (at least I didn't understand the comment, so if it is explicit it is not very clear).  Can someone clarify what is going to happen here? Some third party libraries extend BlockJUnit4ClassRunner and override these methods.  What are they supposed to do?  It seems quite reasonable to want to modify this behaviour (e.g. to repeat a test method but only run the befores and afters once, or to add behaviour after the befores but before the test method).</body>
  </mail>
  <mail>
    <header>Re: Clarification on deprecation of runBefores and runAfters</header>
    <body>This deprecation was a mistake.  Expect a de-deprecation in 4.9. for runBefores and runAfters (at least I didn't understand the comment, so if it is explicit it is not very clear).  Can someone clarify what is going to happen here? methods.  What are they supposed to do?  It seems quite reasonable to want to modify this behaviour (e.g. to repeat a test method but only run the befores and afters once, or to add behaviour after the befores but before the test method).</body>
  </mail>
  <mail>
    <header>how to read JUnit report programatically</header>
    <body>Hi all, I want to send the mail to client after the test suit run. So is there any way i can come to know how many test cases have passed and how many testcases have failed programatically??</body>
  </mail>
  <mail>
    <header>Re: how to read JUnit report programatically</header>
    <body>gaurangnshah, The simplest solution may be to look at using ant to run and report on your tests. i can come to know how many test cases have passed and how many testcases have failed programatically??</body>
  </mail>
  <mail>
    <header>Re: Running JUnit tests from a separate Java application</header>
    <body>Hi, Fantastic advice! I would also like to tell whether the methodA was actually executed i.e. does it exist. Thanks, David one package. application where I run the code looks like this:</body>
  </mail>
  <mail>
    <header>Re: Re: Running JUnit tests from a separate Java application</header>
    <body>I think that if methodA does not exist, you will get an error message. Do you see different behavior? it exist. one package. application where I run the code looks like this:</body>
  </mail>
  <mail>
    <header>Re: JUnit diff Reports</header>
    <body>Hi, I'm working on something similar, see  s-report-comparison.texy HTH, Ondra ----- InsolvenÄnÃ­ rejstÅÃ­k: -- View this message in context:  Sent from the JUnit - User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: Running JUnit tests from a separate Java application</header>
    <body>I had hoped so but with Result run = (new org.junit.runner.JUnitCore()).run(Request.method(Try.class, I get run.wasSuccessful() returning false when the method fails or it does not exist. does it exist. the one package. application where I run the code which looks like this:</body>
  </mail>
  <mail>
    <header>Reporting results when running JUnit tests from Java application</header>
    <body>When I run a JUnit TC I am calling from a standard Java application. I understand that I can use a RunListener to do my reporting of test results which I want to do using an XSL transform of my XML output. I am unclear on how I define the testcase that I am running each time to the RunListener. Many methods of RunListener refer to the junit.framework.Test item but in my situation how can I specify the Test item to pass to the RunListener? David</body>
  </mail>
  <mail>
    <header>Unit testing a private method??</header>
    <body>Hello, I have not used unit testing a lot but I'll have to do so in my next position as a developer. I have always wondered how to test a method that is private. From a java point of view it is impossible. So how do you circumvent this problem and how do you make sure your private methods perform correctly? Any comment welcome. J.</body>
  </mail>
  <mail>
    <header>Re: Unit testing a private method??</header>
    <body>This usually works:  d od Seeya, Hill</body>
  </mail>
  <mail>
    <header>Latest preference for organzing test package</header>
    <body>Hi guys, I did search the group for an answer to my question, but could not find any clear opinions. The JUnit FAQ also has a preference on organization but that has not been updated since 2006. Also, if some people had adopted a particular method, have you had any regrets and wished you had adopted the another method? My question:What is a preferable method to place our JUnit tests. Method A ---------- MyPackage Method B ----------- MyPackage MyPackageTest</body>
  </mail>
  <mail>
    <header>Re: Unit testing a private method??</header>
    <body>Hi Julien, try googling 'testing private methods', you'll find lots of people who will say that it's bad practice to want to do that (even if it's possible). you'll likely test those methods through public methods that use them. or if you feel they really need to be unit tested, then you may consider making them public, maybe in a new class. happy unit testing! nico</body>
  </mail>
  <mail>
    <header>Re: Unit testing a private method??</header>
    <body>oops, I meant to say we make the private methods "protected".... sorry about that.</body>
  </mail>
  <mail>
    <header>Re: Unit testing a private method??</header>
    <body>We have our tests in the same package as the code (under a folder called "test"), and then make the private methods public.</body>
  </mail>
  <mail>
    <header>Re: Unit testing a private method??</header>
    <body>Google for "junit test private methods" Some links that I think are succinct and useful are: At very least they are a good starting point. Regards, K. -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Karl Auer (kauer@...)                   +61-2-64957160 (h)  GPG fingerprint: B386 7819 B227 2961 8301 C5A9 2EBC 754B CD97 0156 Old fingerprint: 07F3 1DF9 9D45 8BCD 7DD5 00CE 4A44 6A03 F43A 7DEF</body>
  </mail>
  <mail>
    <header>Re: Latest preference for organzing test package</header>
    <body>I think it depends on your development environment.  Maven, for example, has a very strong preference for a certain organization.  It looks like you might be organizing things in Eclipse--is that true? On Thu, Nov 25, 2010 at 10:35 PM, nervousxians clear opinions. The JUnit FAQ also has a preference on organization but that has not been updated since 2006. Also, if some people had adopted a particular method, have you had any regrets and wished you had adopted the another method?</body>
  </mail>
  <mail>
    <header>Re: Reporting results when running JUnit tests from Java application</header>
    <body>David, In JUnit 4, you use RunListeners, by passing them to JUnitCore.addListener.  Does that help? which I want to do using an XSL transform of my XML output. RunListener. situation how can I specify the Test item to pass to the RunListener?</body>
  </mail>
  <mail>
    <header>Re: Re: Running JUnit tests from a separate Java application</header>
    <body>That's the behavior I expect.  What were you expecting to see? exist. does it exist. the one package. application where I run the code which looks like this:</body>
  </mail>
  <mail>
    <header>Re: Latest preference for organzing test package</header>
    <body>The maven directory structure is by far fr., 26.11.2010 kl. 07.28 -0500, skrev David Saff:</body>
  </mail>
  <mail>
    <header>Re: assumeTrue(false) only causes test ignore if called from @BeforeClass method</header>
    <body>Vince, We need to do a better job with this.  Failing assumptions changed the interface for JUnit to include tests that could be "ignored" halfway through their execution, and we need to work with the maven and Eclipse runner implementors to make sure that we output something they can ingest.  Thank you for the reminder. something I'm doing wrong. was hoping that assumeTrue(false) called at any point would cause an Ignore result. same results. ignored/skipped.</body>
  </mail>
  <mail>
    <header>Re: assumeTrue(false) only causes test ignore if called from @BeforeClass method</header>
    <body>So are we missing one or more test cases or is the problem subtler than that? Kent something I'm doing wrong. was hoping that assumeTrue(false) called at any point would cause an Ignore result. the same results. ignored/skipped.</body>
  </mail>
  <mail>
    <header>Re: assumeTrue(false) only causes test ignore if called from @BeforeClass method</header>
    <body>Kent, It's more about making a bold once-for-all decision about how failing assumptions are communicated, and then informing/persuading the various runners to pick up on that communication. something I'm doing wrong. was hoping that assumeTrue(false) called at any point would cause an Ignore result. ignored." the same results. ignored/skipped.</body>
  </mail>
  <mail>
    <header>Is junit-dep supposed to work without Hamcrest?</header>
    <body>Now that recent versions of junit-dep are finally available from Maven Central, I've tried to replace junit with junit-dep (4.8.2) in my project. The idea is to allow users of my project to use later versions of Hamcrest if they want to. However, after this change I get NoClassDefFoundError: org/hamcrest/SelfDescribing when calling org.junit.runner.Request.classes (see stacktrace below). Therefore my question is: Should junit-dep work without Hamcrest (as long as no Hamcrest-specific functionality is used)? And if yes, is there an unintentional dependency somewhere? Cheers, Peter Caused by: java.lang.NoClassDefFoundError: org/hamcrest/SelfDescribing at java.lang.ClassLoader.defineClass1(Native Method) at java.lang.ClassLoader.defineClassCond(ClassLoader.java:632) at java.lang.ClassLoader.defineClass(ClassLoader.java:616) at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:141) at java.net.URLClassLoader.defineClass(URLClassLoader.java:283) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(URLClassLoader.java:190) at java.lang.ClassLoader.loadClass(ClassLoader.java:307) at java.lang.ClassLoader.loadClass(ClassLoader.java:248) at org.junit.runner.Computer.getSuite(Computer.java:26) at org.junit.runner.Request.classes(Request.java:69) at org.junit.runner.Request.classes(Request.java:84)</body>
  </mail>
  <mail>
    <header>Re: Is junit-dep supposed to work without Hamcrest?</header>
    <body>From my understanding, the junit-dep was just created so that you could explicitly use your own hamcrest jars and version.  (Be more explicit on your dependencies, in other words.) I'm going through env issues on this front as well, mainly due to JMock and other poms using hamcrest as well. Mike</body>
  </mail>
  <mail>
    <header>Re: Is junit-dep supposed to work without Hamcrest?</header>
    <body>The answers are yes, junit-dep should work if you avoid any overt hamcrest mentions, and there appears to be a bug.  Can you make sure to file the bug at github?  Thanks, Central, I've tried to replace junit with junit-dep (4.8.2) in my project. The idea is to allow users of my project to use later versions of Hamcrest if they want to. However, after this change I get NoClassDefFoundError: org/hamcrest/SelfDescribing when calling org.junit.runner.Request.classes (see stacktrace below). Therefore my question is: Should junit-dep work without Hamcrest (as long as no Hamcrest-specific functionality is used)? And if yes, is there an unintentional dependency somewhere? java.security.SecureClassLoader.defineClass(SecureClassLoader.java:141)</body>
  </mail>
  <mail>
    <header>@IncludeCategory, @ExcludeCategory to accept multiple categories?</header>
    <body>Hi list! I would very much like to know if there are any plans to let the @IncludeCategory and @ExcludeCategory annotations accept multiple categories like the @Category annotation does today? Would be great! There is a not-so-beatiful workaround. You can get multiple includes or excludes if you create an inheritance hierarchy of suites and exclude one category on each level. All comments appreciated, /Martin</body>
  </mail>
  <mail>
    <header>Re: @IncludeCategory, @ExcludeCategory to accept multiple categories?</header>
    <body>Martin, Could certainly do it.  Be sure to file the issue/vote at github.  Thanks, @IncludeCategory and @ExcludeCategory annotations accept multiple categories like the @Category annotation does today? Would be great! excludes if you create an inheritance hierarchy of suites and exclude one category on each level.</body>
  </mail>
  <mail>
    <header>Re: @IncludeCategory, @ExcludeCategory to accept multiple categories?</header>
    <body>Thanks for your quick reply! Created Github issue #146.  /Martin @IncludeCategory and @ExcludeCategory annotations accept multiple categories like the @Category annotation does today? Would be great! excludes if you create an inheritance hierarchy of suites and exclude one category on each level.</body>
  </mail>
  <mail>
    <header>Re: @IncludeCategory, @ExcludeCategory to accept multiple categories?</header>
    <body>Hi Martin, I would very much like to know if there are any plans to let the I've created a suite runner that finds test classes, then filters classes and methods, all by delegating the finding and filtering to classes you write. I've written a few finders and filters for my own needs, and will add others over time. But writing and running your own is easy:  Dale -- Dale Emery Consultant to software teams and leaders Web:</body>
  </mail>
  <mail>
    <header>What happened to JUnit Factory?</header>
    <body>Does anyone know what happened to JUnit Factory ( I searched, but did not find anything about why it is gone.</body>
  </mail>
  <mail>
    <header>Re: What happened to JUnit Factory?</header>
    <body>JUnit Factory was a product/service developed by Agitar, and there's not really any of the original Agitar left that I'm aware of...  You might be interested in the tpalus project, which is an open-source, research-driven effort in the same direction.  I searched, but did not find anything about why it is gone.</body>
  </mail>
  <mail>
    <header>Re: What happened to JUnit Factory?</header>
    <body>Sorry, tpalus link:  Thanks, ( it is gone.</body>
  </mail>
  <mail>
    <header>Re: QuickCheck-style parameter suppliers for JUnit theories</header>
    <body>It's exciting to see interest in test case generation. For the interested, the TwiP ( recent development activity, and does a decent job of generating boundary values. Also, over in another conversation thread ( tpalus ( Java programs, which also appears to have recent development activity.  I haven't yet tried out this project. -Bruce Yearning for the day when I can click "Test", and it will be done. property with a default value of 100; this is how the corresponding ParameterSupplier decides how many values to produce. controlling sample size, and the ability to produce values other than primitive/primitive-wrapper numerics from a source of randomness. I'm open to any suggestions for enhancement of this stuff. It's not (yet) as sexy as to seek out interesting inputs via JUnitFactory/Agitator, but we'll see where it goes.</body>
  </mail>
  <mail>
    <header>Possible to auto-generate test classes (source code frame)?</header>
    <body>Sorry for this newbie question: But is there a way to let JUnit automatically generate the corresponding test classes (just the frame code)? I could imagine that there is an additional plugin/option in Eclipse which let me right click on an existing *.java class and select a context menu "generate JUnit test source  frame class". After the generation the target test class is available in the "src/test" branch. Is this possible somehow? Or do I have to write every test class completly manual? Ben</body>
  </mail>
  <mail>
    <header>Re: Possible to auto-generate test classes (source code frame)?</header>
    <body>Hi Ben, I think you can use the new JUnit Testcase Dialog to specify the "class under test" and the methods to test. Afterwards you can use MoreUnit, for example. CTRL-U generates a stub for the current method, and CTRL-J jumps between production code and test case.  Regards, Murat</body>
  </mail>
  <mail>
    <header>Re: Possible to auto-generate test classes (source code frame)?</header>
    <body>Ben, In Eclipse, see File &amp;gt; New &amp;gt; JUnit Test Case. FYI, I write every test class "completely manual", and have never felt it a waste of time. classes (just the frame code)? me right click on an existing class". branch.</body>
  </mail>
  <mail>
    <header>Re: Possible to auto-generate test classes (source code frame)?</header>
    <body>----- Original Message ---- In Eclipse, if you have the JUnit library in the dependencies for a project, right click on the .java file and select New-&amp;gt;JUnit test case.  -- Glenn Holliday holliday@...</body>
  </mail>
  <mail>
    <header>What happened to popper?</header>
    <body>The JUnit README ( the Popper project for more information about Theories, but the Popper project appears to be no longer.  Fortunately, an archive of the referenced tutorial document is still available at  I was just curious if anyone knows what happened to the Popper project.  I have not found an explanation for its disappearance.</body>
  </mail>
  <mail>
    <header>Re: What happened to popper?</header>
    <body>thaneanthem, I was the lead on the Popper project, and once Theories were included in JUnit, it had little further reason to exist. the Popper project for more information about Theories, but the Popper project appears to be no longer.  Fortunately, an archive of the referenced tutorial document is still available at  have not found an explanation for its disappearance.</body>
  </mail>
  <mail>
    <header>Re: What happened to popper?</header>
    <body>Got it.  Thank you for the reply. What about the -Thane to the Popper project for more information about Theories, but the Popper project appears to be no longer.  Fortunately, an archive of the referenced tutorial document is still available at  have not found an explanation for its disappearance.</body>
  </mail>
  <mail>
    <header>Re: What happened to popper?</header>
    <body>but I prefer to see test-suite as empirical data and running code as theory that generalizes the data. This viewpoint is more interrelated to ideas of falsificationism by K. Popper and to the theory of software testing. For more details you can see my short paper:  Comments welcome. fg</body>
  </mail>
  <mail>
    <header>Why is MethodRule deprecated, and what's the alternative?</header>
    <body>In my efforts to understand @Rule, I see that MethodRule is deprecated, but I have not been able to find any explanation for the deprecation, or suggestions for what to use instead of MethodRule. Does anyone know why MethodRule is deprecated, and what the alternative is? Thank you, -Thane</body>
  </mail>
  <mail>
    <header>Re: Why is MethodRule deprecated, and what's the alternative?</header>
    <body>thaneanthem, You may have more luck looking at the released code ( is lagging a bit, as the implementation settles down.  TestRule is the current proposed replacement for MethodRule, and we'll write it up better if it proves an improvement. have not been able to find any explanation for the deprecation, or suggestions for what to use instead of MethodRule.</body>
  </mail>
  <mail>
    <header>Re: Re: What happened to popper?</header>
    <body>Most of that code now lives at org.junit.tests.experimental.theories.extendingwithstubs to the Popper project for more information about Theories, but the Popper project appears to be no longer.  Fortunately, an archive of the referenced tutorial document is still available at  have not found an explanation for its disappearance.</body>
  </mail>
  <mail>
    <header>Question about @Category and @SuiteClasses</header>
    <body>Hi there, Yesterday I was trying out the new features in junit 4.8.x and noticed that while Categories and SuiteClasses seem to be what I needed to group my tests into different "testing frameworks" I realized that the xml reports generated are not what I expected. The total number of tests I run is around 60k. They're currently grouped into "testing frameworks" like frontend tests, backend tests, rdbms, api, webservices, etc. The tests are run through ant and these frameworks are just filesets that include or exclude different file directories. This seems to work fine for us, as the reports generated are per-class, so we can quickly know which class a specific test case belongs to. The reason I wanted to define my "testing frameworks" using Categories or SuiteClasses is so that the group definition are closer to the java code and developers are more in control as opposed to having to manipulate the ant filesets. However, when creating a "Frontend" Suite all the test methods in the frontend test classes are shown in a single report, so I don't know if testMethodA belongs to com.frontend.ClassATest or com.frontend.ClassBTest. Is there a way to use Categories or SuiteClasses for my use case? Thanks!</body>
  </mail>
  <mail>
    <header>Running in parallel with categories</header>
    <body>I've been looking at the possibilities for concurrent test execution in combination with the use of categories (for maven-surefire  What would be the recommended way of doing this? Surefire currently uses the run(Computer computer, Class&amp;lt;?&amp;gt;... classes) method on junitcore, and this seems kind of orthogonal to running with categories. Regards Kristian Rosenvold</body>
  </mail>
  <mail>
    <header>Re: assumeTrue(false) only causes test ignore if called from @BeforeClass method</header>
    <body>+1 to this David. I work on maven-surefire and will gladly implement whatever this bold decision may be  ;) Kristian that? something I'm doing wrong.  I was hoping that assumeTrue(false) called at any point would cause an Ignore result. ignored." the same results. ignored/skipped.</body>
  </mail>
  <mail>
    <header>Re: Running in parallel with categories</header>
    <body>Kristian, That's a good question.  If you create a suite using the Categories runner, you should be all set to run it using whatever Computer you want.  I assume you're asking how one could do this without an explicit categorized suite? On Tue, Nov 2, 2010 at 12:54 PM, Kristian Rosenvold</body>
  </mail>
  <mail>
    <header>Re: Running in parallel with categories</header>
    <body>Yes that solution is supported already; you can force surefire to use the 4.7 provider and just run an explicitly coded suite as the build target using &amp;lt;includes&amp;gt; statements. To my (relatively limited knowledge) the missing functionality is really just to be able to pass in the category name as a string parameter, probably using the groups parameter which is implemented for testng ( Surefire already scans the entire classpath looking for tests, so I assume we'd be able to resolve the string to one or more java classes (possibly working backwards from @Category annotations we find when scanning the classpath). Then we could just dynamically create a test suite and send it in, doing something like the answer in this question:  -of-classes Would that be the way to go ? Kristian ti., 02.11.2010 kl. 13.43 -0400, skrev David Saff:</body>
  </mail>
  <mail>
    <header>Re: Re: Bespoke logging</header>
    <body>David, What you want in terms of showing the parameters is a very popular feature request, and I wouldn't be surprised to see us incorporate a patch, or write our own, for that sometime in the next couple of months.  That doesn't necessarily tell you what to do while you're waiting, sorry. and am missing some of the functionality it had.  I'm thinking of test names, test descriptions and parametrised tests. each test case in the parametrised test and the input values for each case. parameters to the JUnit window.  It's surprising how often you want to see details of your passing tests so you can compare them with the failing ones.  In order to be useful, and to get my colleagues to agree with me and hop on-board, it needs to be easy to read and require as little code massaging as possible. and harder to match up the output with the test results. can get my debug information for both cases. though. window. calling an assert. anything. as fail.</body>
  </mail>
  <mail>
    <header>Re: what should I do first? upgrade to Java 6, or write unit tests?</header>
    <body>rejohnsoca, A lot of this depends on how risky you and your CTO agree the JVM upgrade is.  If you just change the JVM version, and let generics warnings stand, are you concerned there would be behavior changes? I'd be a little surprised, but I can't say that I've watched a large Java project go through that transition, so I don't know. 1.4.2.  it has NO unit tests. should write a unit test suite first, so that we can make sure the upgrade doesn't break anything. sure that the plan is very practical, as I'd really like to start with a recent version of JUnit -like 4.8, and I can't use it with java 1.4.2 to ensure that the upgrade goes well. 3.8 and then potentially rewriting all of them to run under JUnit 4.8 after the upgrade, it would be better to upgrade the JVM first, rely on integration tests, and then write unit tests from scratch for JUnit 4.8.</body>
  </mail>
  <mail>
    <header>Re: what should I do first? upgrade to Java 6, or write unit tests?</header>
    <body>I personally don't think that moving to java 6 is risky, and I don't think my CTO does either, I think I'm just trying to validate my approach of not writing the tests until after I am in my new (java 6 and JUnit 4.8) home, and that's what other people would do. -- "There are no passengers on Spaceship Earth - we are all crew."</body>
  </mail>
  <mail>
    <header>Re: what should I do first? upgrade to Java 6, or write unit tests?</header>
    <body>If you had _no_ tests, I'd suggest you wrap the whole thing with system/acceptance tests first, rather than trying to add unit tests. If you already have a good suite of high-level tests, I would go with them. Obviously, you want to do all this in a non-production environment first. I'd also put some good exploratory testers on it for a day or two before going live. Charlie</body>
  </mail>
  <mail>
    <header>JUnit4 and Threads</header>
    <body>Hi, I'm a moderately experienced JUnit user, but a new member of this Yahoo group. I use Eclipse (Helios), JUnit4, and EclEmma for testing and code coverage. I've been looking for a way to incorporate more robust unit testing into a parallel computing framework that uses both MPIJava and Threads. Google searches and a search of this group didn't turn up an obvious answer. Google turned up a reference from JavaWorld back in 2000, which has let me get started with JUnit3. Is there a good reference with basic examples that I have missed for JUnit4 ? Thanks, Chuck Mosher</body>
  </mail>
  <mail>
    <header>Wrong number of arguments</header>
    <body>Hi. My test parameterized class keeps throwing up this exception, and I can't figure out how to fix it. Could someone point out where my problem lies? java.lang.IllegalAgumentException: wrong number of arguments at java.lang.reflect.Constructor.newInstance(Unknown Source) Here's the parameter method: @Parameters My constructor:</body>
  </mail>
  <mail>
    <header>Re: Wrong number of arguments</header>
    <body>David, There's so much I'd love to change about the current parameterized runner.  The way it's designed, a @Parameters method returns a Collection&amp;lt;Object[]&amp;gt;, but the individual elements of the Object array are unpacked to fill the parameters of the constructor.  So, there's two ways to fix what's going on: 1) If the number of elements read on each line of your testFile is going to be constant, you could explicitly name them in the constructor: 2) If it isn't, then you'll need to wrap the array in an array: In either case, you deserved a better error message.  Can you log a bug for that? On Fri, Oct 8, 2010 at 11:32 AM, beauchesne.david figure out how to fix it. Could someone point out where my problem lies?</body>
  </mail>
  <mail>
    <header>Junit result files</header>
    <body>Hi Junit users, I am trying to integrate junit to our own proprietary test framework. Would like to know if Junit result files(xml files) are written/copied into any folders in a windows machine, where I run my eclipse. This would definetly help my task. Thanks a lot in advacne. Regards, Dinesh</body>
  </mail>
  <mail>
    <header>Re: Junit result files</header>
    <body>Dinesh, There are no output files automatically written.  However, I believe there is a UI option to write out a test result set. any folders in a windows machine, where I run my eclipse.</body>
  </mail>
  <mail>
    <header>Re: Junit result files</header>
    <body>Thanks David, Â  Thanks for your quick response.I have one more query. Â  Is there any Junit event I can wait for to know if my test is comleted and my result files are ready. Â  I need this info as I initiate the Junit testÂ from my framework and I am waiting for the Junit test completion(and for results) Â  Regards, Dinesh. Subject: Re: [junit] Junit result files To: junit@yahoogroups.com Date: Saturday, October 9, 2010, 1:49 AM Â  Dinesh, There are no output files automatically written. However, I believe there is a UI option to write out a test result set. David Saff any folders in a windows machine, where I run my eclipse.</body>
  </mail>
  <mail>
    <header>Running test with guaranteed method order -&amp;gt; cookbook/FAQ?</header>
    <body>Hello Although junit is designed to run the test methods in arbitrary order, e.g. for sorting often failing ones first or just to be safe that there are not dependencies, every now and then someone has a valid case where it could indeed be useful. One solution is offered in the API docs of Request.sortWith()Â¹ but the example seems only to work for standalone calls not for running the tests with @test annotations from an IDE or automated tool. For these cases it would be nice if you could write an example like the one below in the FAQ or the cookbook as it took me a while to figure out how to do it. bye tiaraki Â¹:  va.util.Comparator%29</body>
  </mail>
  <mail>
    <header>Re: JUnit4 and Threads</header>
    <body>Here are the two references I pursued:  This looked interesting, but I wasn't quite ready to take on trying to get this integrated with my Eclipse environment.  The last section on this page, "Test Thread Safety", gave me something that was easy to get working with Eclipse. I would work on getting this working with JUnit4, but suspect that others have figured all this out already. Any pointers appreciated ! -Chuck Mosher</body>
  </mail>
  <mail>
    <header>Re: Junit result files</header>
    <body>Yes, testRunFinished:  tml Good luck, result files are ready. waiting for the Junit test completion(and for results) any folders in a windows machine, where I run my eclipse.</body>
  </mail>
  <mail>
    <header>Re: Running test with guaranteed method order -&amp;gt; cookbook/FAQ?</header>
    <body>tiaraki, Thanks for the suggestion!  Can you add it as a feature request at github?  ( and that will help keep it on my radar.  Thanks, not dependencies, every now and then someone has a valid case where it could indeed be useful. @test annotations from an IDE or automated tool. For these cases it would be nice if you could write an example like the one below in the FAQ or the cookbook as it took me a while to figure out how to do it.  va.util.Comparator%29</body>
  </mail>
  <mail>
    <header>How to skip a test case and go to next one at runtime....Plz suggest if ther's any other way !!!</header>
    <body>Hi, I want to skip a test case and go to the next one based on some conditions. For ex: // some condition What I exactly want is; while executing testcase1() if "some condition" fails (or is not meet) then go to next test case i.e testcase2(). Is there any way to achieve this??? Please reply if you have any thoughts!!!</body>
  </mail>
  <mail>
    <header>Re: How to skip a test case and go to next one at runtime....Plz suggest if ther's any other way !!!</header>
    <body>sumeshbadge, Are you using JUnit 3 style, or JUnit 4 style?  The answer depends on that.  Thanks, For ex: (or is not meet) then go to next test case i.e testcase2(). Is there any way to achieve this???</body>
  </mail>
  <mail>
    <header>Re: Running test with guaranteed method order -&amp;gt; cookbook/FAQ?</header>
    <body>tiaraki wrote on 11.10.2010 4:10: A related issue is that Java's reflection libraries do not return the methods in the same order as they are declared in the source code. It's compiler-dependant that in which order the methods are written to the .class file - sometimes they are in order, sometimes in reverse order, sometimes in random order. Some time ago I wrote a tool for sorting methods (and inner classes) according to their line numbers and it's being used in the JDave testing framework. It sorts them by reading the line numbers from the bytecode. The source code is at -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Re: How to skip a test case and go to next one at runtime....Plz suggest if ther's any other way !!!</header>
    <body>Hi David, I'm currently using Junit 3.8 For ex: fails (or is not meet) then go to next test case i.e testcase2(). Is there any way to achieve this???</body>
  </mail>
  <mail>
    <header>How to generate JUnit HTML reports in Android</header>
    <body>Hi All, generate HTML reports by using junitreport ant task. Its generating HTML and XML reports but all are empty. Thanks, Vamsi.</body>
  </mail>
  <mail>
    <header>Re: Re: How to skip a test case and go to next one at runtime....Plz suggest if ther's any other way !!!</header>
    <body>Well if you're not trying to be too fancy, have you thought of...</body>
  </mail>
  <mail>
    <header>Re: How to generate JUnit HTML reports in Android</header>
    <body>Vamsi, There may be experts in ant and android here, but if you don't hear from them, you may also want to try android-specific forums.  Good luck, generate HTML reports by using junitreport ant task. Its generating HTML and XML reports but all are empty.</body>
  </mail>
  <mail>
    <header>Re: How to skip a test case and go to next one at runtime....Plz suggest if ther's any other way !!!</header>
    <body>Actually this is not really what I'm looking for. let me explain u one scenario: // the no. of asserts is not fixed. there can be any no. of asserts. // the no. of asserts is not fixed. there can be any no. of asserts. // the no. of asserts is not fixed. there can be any no. of asserts. // code to check some condition here. So, I'm not sure in how many test cases "callThisMethod(some arg)" is being used, but what I want is whenever "callThisMethod(some arg)" is called, then based on the condition in this method the rest of the asserts for this test should be executed or skipped. For example in  testcase1() when callThisMethod(some arg) is called and condition is not met I don't want to execute the remainign asserts in that test and instead go to next test. However if the condition is met I want to execute the asserts. I know I can make callThisMethod return a boolean value and do this: // the no. of asserts is not fixed. there can be any no. of asserts. but this is really not a good solution. Any solution/suggestion/ideas are welcomed :) !!</body>
  </mail>
  <mail>
    <header>Re: Re: How to skip a test case and go to next one at runtime....Plz suggest if ther's any other way !!!</header>
    <body>scenario: used, but what I want is whenever "callThisMethod(some arg)" is called, then based on the condition in this method the rest of the asserts for this test should be executed or skipped. condition is not met I don't want to execute the remainign asserts in that test and instead go to next test. welcomed :) !! It looks like a good solution to me.  Can you explain what you want to do that this solution prevents?  Thanks,</body>
  </mail>
  <mail>
    <header>Re: How to skip a test case and go to next one at runtime....Plz suggest if ther's any other way !!!</header>
    <body>@sumeshbadge: How about using org.junit.Assume.assumeTrue(some condition) in callThisMethod()? Marc scenario: used, but what I want is whenever "callThisMethod(some arg)" is called, then based on the condition in this method the rest of the asserts for this test should be executed or skipped. condition is not met I don't want to execute the remainign asserts in that test and instead go to next test. welcomed :) !! condition" there</body>
  </mail>
  <mail>
    <header>Re: How to skip a test case and go to next one at runtime....Plz suggest if ther's any other way !!!</header>
    <body>David, This seems to be an ugly solution to me, i'm looking for something better; like updating the callThisMethod(some arg) in such a way that when the condition in this method fails, it skips the current testcase and go to next testcase. This would also be feasible for any new person who wants to add some new test cases and use the callThisMethod(some arg) method, he doesn't need to care abt the if statement. Btw, does anyone knows how does junit goes to next testcase once it is done with execution of current testcase? scenario: used, but what I want is whenever "callThisMethod(some arg)" is called, then based on the condition in this method the rest of the asserts for this test should be executed or skipped. condition is not met I don't want to execute the remainign asserts in that test and instead go to next test. welcomed :) !! condition" there</body>
  </mail>
  <mail>
    <header>Re: Re: How to skip a test case and go to next one at runtime....Plz suggest if ther's any other way !!!</header>
    <body>Sumesh, You may want to look at JUnit 4 and assumptions. like updating the callThisMethod(some arg) in such a way that when the condition in this method fails, it skips the current testcase and go to next testcase. This would also be feasible for any new person who wants to add some new test cases and use the callThisMethod(some arg) method, he doesn't need to care abt the if statement. with execution of current testcase? scenario: used, but what I want is whenever "callThisMethod(some arg)" is called, then based on the condition in this method the rest of the asserts for this test should be executed or skipped. condition is not met I don't want to execute the remainign asserts in that test and instead go to next test. welcomed :) !! condition" there</body>
  </mail>
  <mail>
    <header>QuickCheck-style parameter suppliers for JUnit theories</header>
    <body>Hi JUnit, I'm intrigued by Haskell's QuickCheck tool for specifying properties that should hold for given functions and peppering the functions with lots of random values to see for which ones the property holds or doesn't. It occurs to me that JUnit theories are akin to such properties. But how to feed the theories lots of values to see the results? I decided to use a ParameterSupplier and annotations on the target parameter, e.g.: @ForAll would be marked @ParametersSuppliedBy(Generator.class), where Generator inspects the ParameterSignature it's given and spits back a list of PotentialAssignments each with a new random int as its value. I've begun to explore these ideas in a project of mine on GitHub:  your constructive feedback. Is this useful? The closest things to this I could find are JCheck ( which uses a custom test runner, and Functional Java's Reductio. The ParameterSupplier solution seems like the one that plays most nicely with JUnit. What a wonderful extension point ParameterSupplier turns out to be! Thanks,pholser</body>
  </mail>
  <mail>
    <header>Re: QuickCheck-style parameter suppliers for JUnit theories</header>
    <body>Paul, Love it in theory.  Can't wait for time to play with it.  How do you decide how many values to throw at the method?  Do you have some further favorite examples?</body>
  </mail>
  <mail>
    <header>Re: QuickCheck-style parameter suppliers for JUnit theories</header>
    <body>Hi David, thanks for the feedback. Currently @ForAll has a sampleSize() property with a default value of 100; this is how the corresponding ParameterSupplier decides how many values to produce. This is all rather embryonic -- not much to it right now but a @ForAll, controlling sample size, and the ability to produce values other than primitive/primitive-wrapper numerics from a source of randomness. I'm open to any suggestions for enhancement of this stuff. It's not (yet) as sexy as to seek out interesting inputs via JUnitFactory/Agitator, but we'll see where it goes. Thanks for making JUnit so easy to extend. --p</body>
  </mail>
  <mail>
    <header>assumeTrue(false) only causes test ignore if called from @BeforeClass method</header>
    <body>I've tried this on JUnit 4.7 and 4.8.2.  I hope one of you can point out something I'm doing wrong. assumeTrue(false) only causes ignore if called from @BeforeClass method.  I was hoping that assumeTrue(false) called at any point would cause an Ignore result.  "The default JUnit runner treats tests with failing assumptions as ignored." I'm running my tests with both Maven and Eclipse's JUnit 4 UI.  Both have the same results. As I understand the JUnit docs, all three of these tests should be ignored/skipped. Running com.mycompany.app.AssumeTest Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.026 sec Running com.mycompany.app.AssumeBeforeTest Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.006 sec Running com.mycompany.app.AssumeBeforeClassTest Tests run: 1, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 0.006 sec public class AssumeTest public class AssumeBeforeTest public class AssumeBeforeClassTest</body>
  </mail>
  <mail>
    <header>Re: JUnit Test Result Format" (XML): No evolution for years?</header>
    <body>Hi Esko, Ok, letÂ´s go. I will send you an e-mail. Best regards Daniela Waranie</body>
  </mail>
  <mail>
    <header>Using the class constructor to create mock ups</header>
    <body>Hey everyone, I have sent some questions regarding how to test methods using whole OR-mapped classes in a bundle. I got some very useful tips. However, I looked again at the mock up proposal. My ORM classes provide a constructor which assigns every class field a variable. So I came to the point to use: new Course(2,5,0,null,null,null,null,roomList); This means I set every value I will not need for my test case to null. Is this also a way to create mock up objects? Because implementing real mock ups with a factory method and replacing its content like its proposed in a paper from IBM, seems a bit overloaded if I can use the constructor only. Am I on the right path? Best regards, Konrad Reiche</body>
  </mail>
  <mail>
    <header>Re: Using the class constructor to create mock ups</header>
    <body>Konrad, In general, the idea of a mock object is to change the focus from the data stored in collaborator objects to their behavior.  Many people find this encourages designs that have many other useful properties. So, I think that few people would see using a concrete class's constructor with some values set to null to have the same advantages as a mock object.  Myself, I find that if I'm regularly using null in my tests, it means I have one class doing more than one thing, and I look to split it up.  Good luck,</body>
  </mail>
  <mail>
    <header>ExpectedException reset</header>
    <body>Hi All, I was using the the ExpectedException rule, and realized that after getting the expected exception it "sinks" every following exception, whats more I couldn't even reset it't expectations. Am I missing something, or is this the proper behavior? See the following code which runs successfully: Thanks in advance, Tamás</body>
  </mail>
  <mail>
    <header>Re: ExpectedException reset</header>
    <body>Tamas, If you put a System.out.println after your first call to throwNullPointer, you'll see that the test ends there.  The exception ends the test, and then the rule is happy, because it got the exception it was looking for.  This is the expected behavior. the expected exception it "sinks" every following exception, whats more I couldn't even reset it't expectations.</body>
  </mail>
  <mail>
    <header>Re: ExpectedException reset</header>
    <body>It's still Java, you know. ;-) Not catching an exception ends the method it's thrown in (or through)... Greetings, the expected exception it "sinks" every following exception, whats more I couldn't even reset it't expectations.</body>
  </mail>
  <mail>
    <header>Re: Using the class constructor to create mock ups</header>
    <body>What do you care about in this test? That the Course object is constructed correctly, that a Course object is sent to the right place depending on one of its fields, that values from a Course are used to set up something else? Focussing on that question usually helps to bring out the right answer. I don't usually mock out data objects, since the technique is more concerned with understanding behaviour than state. S. Steve Freeman  Winner of the Agile Alliance Gordon Pask award 2006</body>
  </mail>
  <mail>
    <header>RE: ExpectedException reset</header>
    <body>Yeah, that's what I was afraid of, but hoped that someone has a solution (like instrumenting the code somehow), or at least a little bit more elegant one than the Junit3 way. Thanks anyway. From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of Malte Finsterwalder Sent: 2010. szeptember 28. 9:35 To: junit@yahoogroups.com Subject: Re: [junit] ExpectedException reset It's still Java, you know. ;-) Not catching an exception ends the method it's thrown in (or through)... Greetings, Malte. On 27 September 2010 16:59, Tamas Paulo the expected exception it "sinks" every following exception, whats more I couldn't even reset it't expectations.</body>
  </mail>
  <mail>
    <header>RE: ExpectedException reset</header>
    <body>Hi David, Thanks for your answer! Do you know a way, besides try-catch blocks, to expect multiple exceptions in a single test case? T From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of David Saff Sent: 2010. szeptember 27. 18:35 To: junit@yahoogroups.com Subject: Re: [junit] ExpectedException reset Tamas, If you put a System.out.println after your first call to throwNullPointer, you'll see that the test ends there. The exception ends the test, and then the rule is happy, because it got the exception it was looking for. This is the expected behavior. David Saff On Mon, Sep 27, 2010 at 7:59 AM, Tamas Paulo the expected exception it "sinks" every following exception, whats more I couldn't even reset it't expectations.</body>
  </mail>
  <mail>
    <header>Re: ExpectedException reset</header>
    <body>Months ago, I was working on a v0.2 of dotmesh that allowed: I still hope to get back to it.  If the sideways construction would be worth the added functionality, let me know, and I'll see if I can bring the project to light faster. multiple exceptions in a single test case? Saff the expected exception it "sinks" every following exception, whats more I couldn't even reset it't expectations.</body>
  </mail>
  <mail>
    <header>Missing JUnit jars in Maven central - intent to correct</header>
    <body>A number of JUnit jars are missing in Maven central. junit 4.8 4.8.2 junit-dep 4.6 4.7 4.8 4.8.1 4.8.2 All except 4.6 appear to be available on the github download area. If there's no-one already working on it, and the JUnit committers are happy with me doing so, I intend to synthesize the required artifact bundles and submit them through oss.sonatype.org. Max.</body>
  </mail>
  <mail>
    <header>Re: Missing JUnit jars in Maven central - intent to correct</header>
    <body>Note that you will have to request ownership of org.junit. Sonatype is great, though, I love the ability of being able to push a new release whenever I want and have it available on Maven central within the hour. -- Cédric -- Cédric</body>
  </mail>
  <mail>
    <header>Re: Missing JUnit jars in Maven central - intent to correct</header>
    <body>CÃ©dric Beust â wrote on 1.10.2010 6:21: JUnit is still using "junit" as its groupId. Would it be good at some point to switch using "org.junit" groupId, to make it more in line with the current naming standards? Some coordination with Maven Surefire Plugin might be needed, because it has "junit:junit" as the default for junitArtifactName in  but there is a workaround ( so it's not a showstopper. -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Re: Missing JUnit jars in Maven central - intent to correct</header>
    <body>Max, Would you be willing to take this on in the future, as well?  I'd be delighted--I've been meaning to do this for over a year.</body>
  </mail>
  <mail>
    <header>Re: Missing JUnit jars in Maven central - intent to correct</header>
    <body>Yes, I'm happy to do that. OK, I'll go file a ticket with Sonatype requesting creation of staging repositories for the "junit" groupId. Max.</body>
  </mail>
  <mail>
    <header>Re: Missing JUnit jars in Maven central - intent to correct</header>
    <body>I second the appreciation.</body>
  </mail>
  <mail>
    <header>Re: Missing JUnit jars in Maven central - intent to correct</header>
    <body>I would very strongly recommend against this. If we do, Maven will treat the two as completely different artifacts, and happily place a version of both on the classpath. The situation is bad enough already with junit vs. junit-dep, let's not make it even more convoluted. (If I were starting from scratch, I would only ever upload the junit-dep jar to any Maven repository. Jars that bundle other classes may be a powerful convenience in a world without a dependency resolver, but IMO serve no purpose in Maven.) Max.</body>
  </mail>
  <mail>
    <header>Bespoke logging</header>
    <body>Hia, I'd like to be able to write to the JUnit's output stream without calling an assert. Is there a method I can call that will do this?  I can't see anything. My goal is to be able to write messages on tests that pass, as well as fail. Thanks all. David</body>
  </mail>
  <mail>
    <header>Re: Bespoke logging</header>
    <body>David, The JUnit core simply generates events interpreted by the RunListener. The right way to change the RunListener depends on how you're running JUnit. How are you running JUnit?  :-) assert.</body>
  </mail>
  <mail>
    <header>JUnit patterns?</header>
    <body>Hello all,I'm wondering if anyone has a go-to resource for unit testing patterns? I have a copy of the "xUnit Test Patterns" book by Gerard Meszaros. Just wondering if there's another great resource like it out there that folks recommend. Thank you,Sebastian</body>
  </mail>
  <mail>
    <header>Re: JUnit patterns?</header>
    <body>JUnit Recipes by J.B. Rainsberger describes JUnit-specific solutions to a number of unit-testing problems. Many of the solutions describe how to use specific plug-ins. Some parts may be a bit dated as it was published in 2004. Gerard -- Gerard Meszaros Lean/Agile Coach/Mentor/Trainer  Author of the Jolt Productivity Award winning book "xUnit Test Patterns - Refactoring Test Code" and winner of the "Programming with the Stars" competition at Agile 2009. Learn more at -- Gerard Meszaros Lean/Agile Coach/Mentor/Trainer  1-403-827-2967 Author of the Jolt Productivity Award winning book "xUnit Test Patterns - Refactoring Test Code" and winner of the "Programming with the Stars" competition at Agile 2009. Learn more at</body>
  </mail>
  <mail>
    <header>Re: Missing JUnit jars in Maven central - intent to correct</header>
    <body>I found 4.6 at sourceforge too. Done: bundles uploaded and released to Sonatype OSSRH, should propagate to Central automatically in an hour or so. Max.</body>
  </mail>
  <mail>
    <header>Re: Bespoke logging</header>
    <body>Hia David, Thanks for replying. I'm running it in Eclipse and viewing the results in the JUnit results window. No "funny stuff" happening as far as I'm aware. Yours David assert.</body>
  </mail>
  <mail>
    <header>Re: Re: Bespoke logging</header>
    <body>David, Eclipse doesn't attach any information to a test result unless the result is a failure.  You can write information to standard out, and that will be recorded in the console. an assert. fail.</body>
  </mail>
  <mail>
    <header>Re: Missing JUnit jars in Maven central - intent to correct</header>
    <body>Max, Many thanks.  The 27 voters on  thank you as well.  Would you mind posting a link there when the propagation to Central is complete?  Thanks,</body>
  </mail>
  <mail>
    <header>Re: Missing JUnit jars in Maven central - intent to correct</header>
    <body>Done.</body>
  </mail>
  <mail>
    <header>Re: Bespoke logging</header>
    <body>I considered writing to the System.out, but it's crude and harder to read and harder to match up the output with the test results. The only solution I can think of is to duplicate the output to a file so I can get my debug information for both cases. Doing this kind of defeats the purpose of Eclipse's nice JUnit window though. window. an assert. fail.</body>
  </mail>
  <mail>
    <header>Re: Re: Bespoke logging</header>
    <body>David, Unfortunately, what you want would need changes in both JUnit and Eclipse.  Could you share a little more about what you're trying to solve, so maybe we can brainstorm how to get what you need out of what you have?  Thanks, harder to match up the output with the test results. get my debug information for both cases. window. calling an assert. fail.</body>
  </mail>
  <mail>
    <header>Re: Bespoke logging</header>
    <body>Hia Dave, I'm a .NET dev who moved to Java 3 weeks ago.  I'm used to working with NUnit and am missing some of the functionality it had.  I'm thinking of test names, test descriptions and parametrised tests. Parametrised tests are a trivial matter in NUnit, in the NUnit GUI you can see each test case in the parametrised test and the input values for each case. JUnit doesn't have this, so I thought I'd compensate a little by writing the parameters to the JUnit window.  It's surprising how often you want to see details of your passing tests so you can compare them with the failing ones.  In order to be useful, and to get my colleagues to agree with me and hop on-board, it needs to be easy to read and require as little code massaging as possible. Thanks David and harder to match up the output with the test results. can get my debug information for both cases. though. window. calling an assert. fail.</body>
  </mail>
  <mail>
    <header>what should I do first? upgrade to Java 6, or write unit tests?</header>
    <body>I've recently become responsible for a piece of software, that runs under java 1.4.2.  it has NO unit tests. I want to move it to Java 6, but the CTO of my company is thinking that we should write a unit test suite first, so that we can make sure the upgrade doesn't break anything. That's a nice idea, and I'm fully behind writing some unit tests.  I'm not sure that the plan is very practical, as I'd really like to start with a recent version of JUnit -like 4.8, and I can't use it with java 1.4.2 We do have a reasonable suite of integration tests (which are NOT unit tests), to ensure that the upgrade goes well. I was considering, rather than writing unit tests for java 1.4.2, and JUnit 3.8 and then potentially rewriting all of them to run under JUnit 4.8 after the upgrade, it would be better to upgrade the JVM first, rely on integration tests, and then write unit tests from scratch for JUnit 4.8. What do other people do if they are in a similar situation?</body>
  </mail>
  <mail>
    <header>Re: Common Test Runner for JVM</header>
    <body>Esko, This is a lot to absorb all at once.  I'd love to go down the list and see what makes sense outside JUnit vs. inside JUnit.  I notice that a number of the issues you're tackling are mostly about IDE integration--I wonder if thinking about the interface you wish IDEs would talk to, and then getting at least one IDE to agree to it, would be a good approach.  I've tackled a few of your questions below--going deep on one of them, of your choice, might be the most productive way forward, rather than trying to hit all of them at once. There are advantages to the "declare everything before running anything" requirement from JUnit, but I agree that it also makes some things very difficult.  I'd love to see a standard way to address this within JUnit. In terms of IDE integration, JUnit just reports a tree of Descriptions, and results against them.  Runners are free to structure these trees however they wish.  Have you run into IDE limitations for displaying/interacting with these trees? That assumption is in the IDE's.  It's a useful one, but it's neither required nor assumed by JUnit itself. We've taken several stabs at this.  The biggest hurdle is how to extend the test-definition language: while many tests can be parallelized without cost, and test writers should not depend on order, they currently might depend on only test being written at the time. Test discovery seems to be yet another feature of a common IDE interface.</body>
  </mail>
  <mail>
    <header>Re: Common Test Runner for JVM</header>
    <body>Hi Esko, David, them is that is that you can make a progress bar that gives feedback to the user as the tests run. That's a really nice feature in GUI test runners that is lost if you can't count tests in advance. It would be possible to make the advance test count an optional feature, but then when tests can't be counted, you couldn't show a progress bar. And I think that would be a pretty big loss. The downside of the requirement is it becomes difficult to use the same token all the way down nested closures (like you use "&amp;gt;&amp;gt;" in Specsy). If you use a different character to denote leaf nodes, then  those leaf nodes (the tests) can be counted (and their names known, etc.) before they are run. That's what I do in ScalaTest. The other thing you can do is run all test code at construction time, and just store results to be reported later. I think that's what Eric Torreborre does in Specs, because he also uses the same "&amp;gt;&amp;gt;" or "in" token all the way down. This is a design tradeoff, and I think the world wants to keep their progress bar and can live with the above two approaches to nested closures in Scala test code. of nesting closures in test code. Several traits in ScalaTest do that, but the model I use in ScalaTest is that each leaf node is one test. The closures surrounding the leaf nodes are descriptions, not tests themselves. I would think you and Eric could  adopt that approach in Specs and Specsy without much trouble. Bill -- Bill Venners Artima, Inc.</body>
  </mail>
  <mail>
    <header>Re: Common Test Runner for JVM</header>
    <body>Yes. In addition to programming I do also interaction design, and usability is very important to me. My development process is to first design the UI and after that think about what is needed to implement it. Quite many times a good user interface affects all levels of the implementation. Yes, that's what I'm planning. As Linus Torvalds says, "Talk is cheap. Show me the code." My current plan is to implement a minimal set of features, create a UI and integrate it with IntelliJ IDEA. Then people can better see what this is all about, and can better decide whether it's something that they like. I will setup a dedicated mailing list and contact the major tool vendors after I have something working to show (right now I'm only gauging some interest on JUnit, scala-tools and simple-build-tool mailing lists). I've thought about that. It's possible to measure progress at least on the class level. And within a class, the completion of a class can be approximated as more tests are discovered. I'm also planning on making the tool remember statistics from previous test runs (and do some classloader caching of external libraries, to speed up the test runs), so after the first test run the tool will know quite accurately that how many tests there are and how long each of them takes to execute. I've also thought about some ways to detect which classes are covered by a test, which information can be used to run first the tests for the recently modified classes. So there might be some features similar to JUnit Max (I haven't used Max because it's not available on IntelliJ IDEA). It would be possible for me to detect the leaf nodes after the tests have been run, but I prefer the UI to show the correct mental model of what is happening during test runs. To illustrate, here is a partial version of one of Specsy's example specs with some println() debug statements. @RunWith(classOf[Specsy]) To execute that, Specsy needs to instantiate and run the class two times. The first test run will print: Stack() Stack(pushed last, pushed first) Stack(pushed first) The second test run will print: Stack() Stack(pushed last, pushed first) Stack() My vision is that the UI would visualize where one test ends and another begins. It would provide the same information as the following examples (but better visualized ;). Test run 1: Stack() Stack(pushed last, pushed first) Stack(pushed first) Test run 2: Stack() Stack(pushed last, pushed first) Stack() Then when I select "StackSpec" or "When objects have been pushed onto a stack" in the tree of tests shown by the UI, it would show both of those test runs, because those tests were included in both of them. But if I select "the object pushed last is popped first" then it will show only test run 1, and if I select "the object pushed first is popped last" it will show only test run 2. True. I would like to make that concept explicit, so that the testing framework could help the IDE with code navigation. I've been thinking whether to make parallelization enabled by default. From a usability point of view, I would prefer to "design for one user" (as advocated for example by Alan Cooper) and as such I'm tempted to write the test runner for programmers who write tests which don't depend on any global state (i.e. I would design it for myself :). For tests which cannot be executed safely in parallel, my plan is to make it possible to annotate the class with @LocallySequential or @GloballySequential. The first annotation would still allow running tests from other classes in parallel, but the second annotation would execute this one test class all alone. And build tools. One thing that I'm also trying to solve, is minor differences between running tests in the IDE vs. running them through a build tool. For example IntelliJ IDEA executes all tests in the project using the same classpath, but Maven uses the classpath of the module which contains the tests. If two modules use different versions of a library (I have one such project), then this difference might be important. Also I want to get rid of bugs such as  does not run Scala classes which are annotated with org.junit.runner.RunWith". Running tests is such an important feature, that I don't want it to have any bugs. -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Re: Common Test Runner for JVM</header>
    <body>Esko, There's a lot going on here, and good luck to you.  I'm happy to keep talking about this.  However, it will be easier for me (and possibly for the group) to Think Global, Act Local.  Prioritize the list of things you want to be different about your environment, and tackle them one at a time.  Good luck,</body>
  </mail>
  <mail>
    <header>Re: Common Test Runner for JVM</header>
    <body>Hi Esko, What you say you want here makes sense. My point is that it doesn't require nested tests. You can do it with nested descriptions. That's the approach I take in ScalaTest. In ScalaTest the test names for StackSpec two tests would be: When objects have been pushed onto a stack the object pushed last is popped first When objects have been pushed onto a stack the object pushed first is popped last But when you run it through ScalaTest's standard out reporter, for example, the output would look something like: StackSpec: When objects have been pushed onto a stack - the object pushed first is popped last - the object pushed first is popped last The output looks like a specification. The number of tests here is 2, not 3, because the outer closure is not a test with two tests inside it but a description clause with two tests inside it. You could write a reporter that shows these specification-style results as a tree that can have the various branches opened and closed, which is I think what you're really after. To me conceptually it is fuzzy to say you can nest a test inside another test. If an inner test fails, does that mean all the enclosing outer tests fail too? It isn't clear. The other thing I heard you mention as a deficiency in JUnit's runner is that tests need to have unique names. (I'm not sure that's true of JUnit but I'll take your work on it.) ScalaTest's runner does not require that tests have unique names, but Suite does. The reason is it allows you to run just one test by providing its name. So while I think the runner needn't have this requirement, I think it is useful to ask a suite of tests to run just one test, and a unique name requirement facilitates that. Bill ---- Bill Venners Artima, Inc.</body>
  </mail>
  <mail>
    <header>Re: Common Test Runner for JVM</header>
    <body>I may be wrong, but it sounds like this project will be a JUnit "engine" geared specifically for IntelliJ. Is there any chance that the core functionality could be written in a way that other tools could leverage it's design.  It would be great if the project would be broken into a core with modules per IDE.  I think this paradigm would benifit the project in the following ways: -- Adoption may slow if every developer were forced into a specific IDE to gain access to this tool. -- Integration with common tools like Ant, Maven, and other CI tools might be harder if too much design is IntelliJ specific. -- I want to use it, but prefer eclipse for no other reason then, "I'm lazy". Sound like a great project, a refactoring of the @RunWith would be a nice-ity.  If you head the eclipse route, I'd be willing to give it a try and supply feed back. Big Mike</body>
  </mail>
  <mail>
    <header>Re: Common Test Runner for JVM</header>
    <body>Mike Forsberg wrote on 13.9.2010 22:39: My examples just relate to IntelliJ because that's my IDE of choise. CTR4J isn't meant to be IDE specific. It's meant to be something that every development tool can use. CTR4J will probably be organized into three modules: one with the API for testing frameworks (with a strong backwards compatibility policy), another with code for launching the test runs (for use in build tools and IDEs), and a reference UI for showing the test results (for use in IDEs or as a stand-alone application). Regarding the reference UI, there are a couple of options that I've thought about: One option is to provide a UI which could be embedded into the IDEs. IntelliJ and NetBeans use Swing, so they could use the same implementation, but Eclipse's SWT would require some rework. The IDE architectures are quite different, so it might be problematic to provide good integration for every IDE with just one UI implementation. Some IDEs might choose to use the reference UI implementation as just a reference and make their own UI (hopefully with improvements and without bugs). Another option is for CTR4J to have an external UI. The test runner will anyways run as a separate process (similar to Scala's compile server, fsc) which does things like classloader caching to speed up test runs (at least the classes of all libraries can be cached - maybe also module or package level caching of unmodified classes in large projects possible). It would be possible to have a UI which connects to the test runner server(s) running on the local machine and shows the results of current and recent test runs. This option would work also for test runs started by Ant, Maven etc. It would to some degree work also for IDEs, with the (quite serious) limitations that it would be in a different window as the IDE and code navigation from test results to source code would not work. Maybe implementing both options is the best option. One more thing: To speed up tool support, I'm planning on creating a JUnit adapter so that CTR4J can be launched using the tools' existing JUnit integration. This should be possible with a custom JUnit runner which starts CTR4J which in turn finds the tests and runs them (although it might be necessary for the user to manually tell CTR4J that which directory contains the compiled test classes). Thanks. I'll keep this mailing list informed when I have something working. -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Using @BeforeClass annotation from Scala</header>
    <body>Hi all, I'm newbie with Scala. I have an application written in Scala and integrated with JUnit. I need two methods annotated with @BeforeClass and @AfterClass. As I know, I can't use these annotations because their methods must be static and Scala doesn't support it. I've tried to extract the methods to an object, but it doesn't work. Do you know any way of use those JUnit annotations from Scala? Thank you for your help, Beatriz Nombela.</body>
  </mail>
  <mail>
    <header>Re: Using @BeforeClass annotation from Scala</header>
    <body>Beatriz, I've ran into the same problem, and it's driven me crazy.  I'm curious if the information in  cMethods leads to a viable work-around? with JUnit. I need two methods annotated with @BeforeClass and @AfterClass. As I know, I can't use these annotations because their methods must be static and Scala doesn't support it. I've tried to extract the methods to an object, but it doesn't work.</body>
  </mail>
  <mail>
    <header>JUnit Test Result Format" (XML): No evolution for years?</header>
    <body>Hi, the "junit result format" introduced by the ant project is a defacto standard to exchange test result data between test runners and build servers / IDE - not limited to java. Today it is used in many other programming languages (e.g. PHPUnit, etc.). The same is true for ant, which is not limited for using in a specific programming language, too. I saw a lot of discussions in the past years on how to extend the "old xml" to fit the current needs at the ant wiki:  I think it is time to start the evolution of the "junit result format" to came up with its ubliquitously. I think the "next version" of the "junit result format specification" should focus to be language generic to full fill its current role. The above wiki page should be splitted in things related to: 1) the xml evolution 2) the test runner* 3) the test result xml printer* 4) the result xml consumer (IDEs, build servers) *=of the unit test framework used for your favorit programming language Essential to have success on the big goal we should not try to create a complete new format. It must have a backward compatibility, which leads into extending the current version (add elements and attributes, but not removing old ones). At the moment there is no official DTD/Schema available for validation, so it is supposable that most apps are tolarant to new xml elements. Some goals outlined in the above proposials can not be reached that way (e.g. be streamable) - but going this way makes the software industry able to perform a soft migration to the new format. I personally would like to see a xml element (e.g. "notice") for skipped or incompleted (not jet fully implemented) test, which are in fact not "errors" and not "failure"(s). What do you thing about the evolution? Best regards Daniela Waranie</body>
  </mail>
  <mail>
    <header>Re: JUnit Test Result Format" (XML): No evolution for years?</header>
    <body>Daniela Waranie wrote on 17.9.2010 0:24: +1 Rethinking the result format fits into CTR4J's scope ( happy to collaborate with others. -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Re: JUnit Test Result Format" (XML): No evolution for years?</header>
    <body>I've personally ran into issues in the past where specific features in JUnit 4.x would fail to generate XML output using Ant's XMLJUnitResultFormatter, maybe due to the ant task's failure.  (I think I recall these issues related to the @Expected annotation, but it has been a while and quite a few revisions of both systems..) For those who are unaware, I believe that the system generating the xml under discussion is currently being produced by a specific formatter in the JUnit task in Ant.  Yes, it is very common to use this formatter, as many CI tools consume it as input for test status.  kdefs/optional/junit/XMLJUnitResultFormatter.java My questions are these, is JUnit responsible for this specification?  Or is this a request for some JUnit mailing list follower's input into the process?</body>
  </mail>
  <mail>
    <header>Re: JUnit Test Result Format" (XML): No evolution for years?</header>
    <body>kdefs/optional/junit/XMLJUnitResultFormatter.java No, we've always been output-format neutral, but are glad that the community's gotten so much mileage out of a common spec. That was my assumption.</body>
  </mail>
  <mail>
    <header>Re: JUnit Test Result Format" (XML): No evolution for years?</header>
    <body>Hi Esko, thanks for the link. I see some similarities of your link and my link (to the wiki page). It would be nice if you can figure out what of your thoughts about improving the "output format" is currently NOT listed in the wiki page. Please add it to the page (create a login). "Nested tests" is a big thing that is not supported by the actual specification. Some result printer like PHPUnit creating "JUnit test result xml" can output nested tests (but that is in fact not a original JUnit test result xml). I do not know a single IDE that can display nested tests. With the next version of that "specification" i hope me can push the IDE developers a little bit - would be interesting to see what IDE wins the innovation race (first to the market). It would be nice if you start with the xml, because it is most important if you want to make the new features available to a wide range of "xml consumers" (build servers / IDEs). Apache License 2.0 is a good choice for the next version of the specification, too. To keep it compatible to the existing projects (license) that uses the JUnit actual format. A reference implementation of a: a) result printer b) result consumer would boost the acceptance of a new version of this specification. Hope to see you soon at that front. ;-) I will take care about the xml evolution and on keeping the discussion continuing. I think to enable the PHPUnit to fit to the new version of the specification can be done by me, too. Best regards Daniela Waranie</body>
  </mail>
  <mail>
    <header>Re: JUnit Test Result Format" (XML): No evolution for years?</header>
    <body>Hi Mike, thanks for your post. It seams that the 'specification', that was introduced by the ant team, is not maintained anymore by the ant team. It seams that the 'specification' was a one time ejection of the ant team. I think (but iÂ´m not sure) that no one is responsable at the moment. I agree to David Saff that the JUnit team is not responsable for the 'specification'. I strongly want to move the 'unit test result format' to the next level. I think my next step should be to contact the ant team as they are the legal 'copyright owner' (in the open source meaning) of the XMLJUnitResultFormatter code. The XMLJUnitResultFormatter code (and related documents) are the only 'official source' of the 'specification'. I will ask them if the support my idea and how to continue. Any suggestions who to contact and how to contact ? Year, would be great if i get impulse from the community to keep on going. But at least your thoughts about it and your ideas can help me a lot. It will be wonderful if i get some combatants. Best regards Daniela Waranie</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit Test Result Format" (XML): No evolution for years?</header>
    <body>Daniela Waranie wrote on 18.9.2010 0:26: &amp;gt; ... That's what I think, too. My current plan is to first implement the basic features of the new test runner and a UI for showing the test results. That would demonstrate for example the concept of nested tests and what benefits there could be for having them as a first-class concept. I would begin thinking about a new test result format only after something which uses the test result data has been implemented. Otherwise it's easy to get stuck in endless speculation of what _might_ be needed. I prefer starting from what is _really_ needed, and then think about what is the best way to fulfill those concrete needs. -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit Test Result Format" (XML): No evolution for years?</header>
    <body>It depends on what you mean by maintained. This is true (I'm one of the initial authors of XMLJUnitResultFormatter).  Not exactly "one time" since the format evolved a bit, but then again it has been ten years since we've initially created it and the format has been stable for nine years or so now. You are welcome (the most easy way from Ant's POV would certainly be a different formatter). dev@... But this would only give you Ant tooling support for whatever new format would be created.  I agree that it would be benefitial to a new format if it wasn't decided on by a single tool but on some more "neutral ground". Stefan</body>
  </mail>
  <mail>
    <header>Re: JUnit Test Result Format" (XML): No evolution for years?</header>
    <body>Hi Esko, Nice to hear that. Sometimes to instant start working is good, but sometimes start thinking first is mutch better ;-) Try to make a 'big step' can lead you make become to wallow. I prefer to start step-by-step (feature-by-feature) and if we have a significant count of features we should release it as next version. The remaining feature request are then the job for the version 3 of that specification. I do not want the community to wait for 2 more years for release 2.0. So a combined workflow would be good. A good process can be to collect the ideas (for not more than 14 days). Then review and summarize it. And start a voting to collect what feature is most desired by the community. After voting we should define, how the xml should look like to handle that feature. This can happen while you are creating the reference implementation. When a feature is finished we should loop with the next 'most voted' feature. Are you agree? Best regards Daniela Waranie</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit Test Result Format" (XML): No evolution for years?</header>
    <body>I'm curious... Do you view this as a JUnit format, a Java unit test format or a more general test reporting format? Charlie</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit Test Result Format" (XML): No evolution for years?</header>
    <body>Daniela Waranie wrote on 19.9.2010 15:50: Yes, that sounds like a good process. Where shall we continue the discussion and collecting of ideas? Here or another mailing list? I've just created a mailing list for CTR4J ( all discussion on new test runners and interfaces in one place. -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Re: JUnit Test Result Format" (XML): No evolution for years?</header>
    <body>Hi Exko, process is clear, fine. Next good question is about, where should the discussion takes place, i agree. I am in contact which inventor of TestNG, CÃ©dric Beust. CÃ©deric is interested in this topic and he contacted me to tell me what he thinks about a new format/version. He agrees that the format should be maintained and it should be guarnateed that the format is maintained on its full life cycle. He stated that the JUnit team can be a good choice. I think that we will never get a guarantee. As you can see in the past, even a big player like the apache software foundation can not guarantee that each projects is maintained forever. I think the guarantee is not the point. When ever someone is interessed in bringing the project to the next step it can be done (event-driven evolution) ;-) Stefan Bodewig, one of the initial authors of the XMLJUnitResultFormater, contacts me to tell me his ideas, too. He stated that it should be developed on 'neutral ground' and should stay language-agnostic. At the moment it feels like a specification team come up around me. The team members comes / should come from the ant team and the JUnit team, and from many other projects and programming languages that uses the 'old format'. The more i think about it, it comes to my mind, that a 'neutral ground' looks like to be the best biological nutrient media to ensure that the next format version is language-agnostic. My thanks goes to: - the ant team for inventing the format - the JUnit team for not at least borrowing the inoffical name for the format (that does not realy have a name jet) - commonly called "JUnit format". It is aaske strategic decision to d the big player (apache ant / JUnit) to give its name to the xml project or to forc with a new name. To call the next version e.g. 'JUnit test result format 2.0' can be a good choice to be recognized. To become more language-agnostic a renaming to a different name can be better - but i am not sure. It depends on the community. Is the community conservative (name keeping) or progressive (renaming). I am not sure. I am a practitioner, so the format should at first fits your needs and the other things can be done by-the-way (maybe someone with experience in strategic desicions can point me here). At the moment it sounds good to rename it. I would call it TRUE format, where TRUE stands for "Test Results Universal Exchange" format - not at least because a lot assertions should become true to make the developer happy. Just my to cents. What does the community think: 1) Where to place the project? a) At a big player? b) Independent? 2) Keep the name or rename it? a) keep it (make the inofficial name an official name) b) rename it Best regards Daniela Waranie</body>
  </mail>
  <mail>
    <header>Re: JUnit Test Result Format" (XML): No evolution for years?</header>
    <body>Hi Charlie, Due to the fact that the "JUnit test result xml format" is now used in many tools AND a lot of these tools are not addressed to java only the next version should become a language-agnostic format (just to continue that good process). Best regards Daniela Waranie</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit Test Result Format" (XML): No evolution for years?</header>
    <body>Hi Daniela, Well, that idea definitely matches the name. :-) I'm interested from the point of view of NUnit, which will have a new format for test results in version 3.0. Charlie</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit Test Result Format" (XML): No evolution for years?</header>
    <body>Daniela Waranie wrote on 20.9.2010 12:00: I vote for independent. If the format is meant to be for tools of many different programming languages, and not just the Java platform, then there won't be any platform-neutral big player. I suppose that we will need at least the following services: - mailing list - publicly editable wiki - source code repository (for any reference implementations and TCKs) (My current project hosting preference is GitHub + Google Groups.) I vote for renaming, to make the name platform-neutral. "TRUE format" sounds OK, although I would prefer something more descriptive and unique. -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Fwd: Writing a test fixture for a set of many classes</header>
    <body>Hey everyone! I am currently developing a course scheduler for universites in Java. My team and me chose test driven development, espcially for the scheduler itself. I am using JUnit. For nearly every class there has to be JUnit test class. The database schema has become quiet big. Not everything is needed for the OR-mapped classes in the scheduler. In the end there are still 14 classes. As the scheduler has to be highly configurable, we need classes like: courses, lecturers, students, features, rooms, roomRequiredFeatures, timeSlot, lecturerPrefferredTimeSlots, and so on. I wanted to use the @Before annotations to create fixtures (instantiated test objects to test). These test objects reflect one example of a data set from the database. As a matter of fact, the 14 classess are not very detailed: maybe 3-4 fields. The problem arises as they are bound really tight to each other. THis results in 220 lines code of instanation in the @Before method which is way to much. A common way to deal with this is to write mockups, which simulate the test objects behaviour. But as the classes are very simple there is no way to simulate them. I am a little bit desperate because I have the feeling our design is flawed. Are there any suggesstions or course of actions for this case? I hope I made myself clear, Best regards!</body>
  </mail>
  <mail>
    <header>Re: JUnit Test Result Format" (XML): No evolution for years?</header>
    <body>Hi Charlie, for Can to provide a link to the specification, xml schema or DTD of the new NUnit format - just for reference / inspiration. Best regards Daniela Waranie</body>
  </mail>
  <mail>
    <header>Re: Fwd: Writing a test fixture for a set of many classes</header>
    <body>Konrad, I don't know enough about your design to critique it, yet, but I'm familiar with the things that can happen if you try to run all your tests against One Big Concrete Example, as you seem to be doing. Usually, in these cases, I recommend that a developer try to custom-build their data in each test, using only what they need.  For example, although a single lecturer, single class, and two rooms isn't enough to test every available case, it's probably enough to feed to a simple room-assignment test, etc. In this case, if I find myself making the same chain of calls over and over, I sometimes write convenient factory methods in my test class, so my tests can look like: 102: 20 seats")) Good luck,</body>
  </mail>
  <mail>
    <header>Re: Re: JUnit Test Result Format" (XML): No evolution for years?</header>
    <body>So far, it's an adhoc format, but I'll put together an example. Charlie for</body>
  </mail>
  <mail>
    <header>Re: Fwd: Writing a test fixture for a set of many classes</header>
    <body>Konrad, Let's keep the discussion on the list, so others can contribute. It's just a plain old Java class that you write for yourself with the convenience methods you need. Yes and no.  In general, I've seen bad things happen if my tests call external methods that are designed for other purposes, but _happen_ to give me the data or behavior I need to set up the method I really want to test.  They tend to get changed later, to suit their intended purposes, leaving the tests broken and sad. However, if the "external" method in question is something you write for yourself, to kill what would otherwise be duplicated between the tests, or stuffed into a setUp method, I've seen few pitfalls. Some people seem to get a lot of mileage out of this, but it seems that the payoffs come when for some reason, CSV files are easier to edit or understand than data right there in the code.  I've heard three reasons for this: 1) The people writing the tests are different than the developers. (Fair enough, but JUnit's a celebration of developers testing their own code) 2) Data files are easier to change than code.  (I rarely find myself wanting to add a bunch of tests without changing _something_ about the test code or the code being tested, so this is an imaginary benefit for me.) 3) The code required to set up the data is convoluted (I consider that a challenge to make the code simpler). I consider trying to apply a generic data-parser to issues in test abstraction to be replacing one problem with two.  Others have taken different views.</body>
  </mail>
  <mail>
    <header>Re: Re: Another question about a JUnit test</header>
    <body>... which is when test dependencies come in handy: you only need to run loadFile() once. -- Cédric</body>
  </mail>
  <mail>
    <header>Re: Re: Another question about a JUnit test</header>
    <body>While I think that it can be useful to express certain other kinds of dependencies between tests, this seems to be of the worst kind. When one unit test creates state that is needed by another test, we have true dependency, something we generally try to avoid. Not good guidance for those getting started AFAIC. When what is being tested by a test is a prerequisite for certain other tests we have a dependency that may be worth noting. But that's another thing entirely. Charlie 2010/8/26 CÃ©dric Beust â &amp;lt;cedric@...&amp;gt;:</body>
  </mail>
  <mail>
    <header>Re: catch failure to take screenshot with selenium</header>
    <body>We implemented something similar, and in the end we wrote a custom runner, so we could be sure that every test that failed would generate a screenshot, before the @After/@AfterClass methods were called. We also had a bit of code wrapping our Selenium class, that would take a screenshot whenever any method threw an exception (and re-threw the exception).  So we got screenshots in mid test as well. - James</body>
  </mail>
  <mail>
    <header>Re: Re: Another question about a JUnit test</header>
    <body>Charlie, I'm not sure I see the difference between these two cases. When a test depends on another test, it's usually because it needs state created by that previous test. It's a very common need in integration testing, pretty easy to handle and no obvious reason why you should avoid it. Here's a relevant how Selenium relies on this kind of dependencies to create robust tests that don't need to recreate expensive states all the time. -- CÃ©dric On Thu, Aug 26, 2010 at 3:50 PM, Charlie Poole -- CÃ©dric</body>
  </mail>
  <mail>
    <header>Re: Re: Another question about a JUnit test</header>
    <body>Hi CÃ©dric, I distinguish three different sorts of dependency... 1. Test B depends on state created by Test A. 2. Tests A depends on some underlying functionality f1 and B depends on f1 plus some additonal functionality f2. In this situation, it's fairly common for folks to say that B depends on A, but it isn't strictly true. 3. Given that Test A failed, test B will not give any further useful information. In general, case 1 implies cases 2 and 3 and case 2 implies case 3, but not the reverse. A key difference between case 1 is seen if we run Test B by itself - assuming the code is correct of course. For case 1, B will fail but for cases 2 and 3 it will pass. In unit testing, we generally seek to avoid case 1. It's often needed in customer tests and in system testing in general. I was talking about unit testing and I think that's what the thread was about. "Integration" testing means different things to different people so I may agree with you on that count - or not. OTOH, case 2 and 3 exist in the wild and we can do nothing to avoid them. We can only decide whether to express them. As tool designers we can decide whether to allow them to be expressed. Unfortunately, I can't think of a way to allow expressing cases 2 and 3 without also permitting users to fall into the error (I think it's almost always an error in unit testing) of setting up case 1. Usually they do this because of a desire to (prematurely) optimize their tests. Charlie 2010/8/27 CÃ©dric Beust â &amp;lt;cedric@...&amp;gt;:</body>
  </mail>
  <mail>
    <header>Re: catch failure to take screenshot with selenium</header>
    <body>Hello, Thanks for your replies. A custom runner seems a good way to go. But what about this: I copied most of the ExternalResource rule and added a catch to handle the errors. I moved the initialization of selenium to before(), the termination to after(), and I take the screenshot and rethrow the error on handleError(Throwable). It works for me, but I'm not sure if this is nice coding. I preferred the @After and @Before annotations. But if David Saff added this Rule to the code, I guess it's ok to copy it. pura vida. -- ¡paz y baile!</body>
  </mail>
  <mail>
    <header>Re: catch failure to take screenshot with selenium</header>
    <body>That is a very slick solution, and much easier to implement then the method we used. - James</body>
  </mail>
  <mail>
    <header>Re: catch failure to take screenshot with selenium</header>
    <body>Leo, That's very similar to what I would have done.  By the way, did you look at TestWatchman in the JUnit code?  It might be even closer to what you want as a starting point.  Thanks,</body>
  </mail>
  <mail>
    <header>Re: Re: Another question about a JUnit test</header>
    <body>I think the original poster's point was that the test data required to test loadFile would be very similar to the test data required to test readFile.  This seems orthogonal to any question of whether one test is dependent on another. 2010/8/26 CÃ©dric Beust â &amp;lt;cedric@...&amp;gt;:</body>
  </mail>
  <mail>
    <header>Re: Excluding empty test suites from report</header>
    <body>Shay, You may have to create a custom Suite runner as well that will filter out the empty classes.  I'm hoping we can make this a little easier in 4.9.  Good luck,  I'm using a custom Test Runner which filters the tests and only runs the ones that have the custom Annotation.  The problem I'm having is that some classes have 0 tests with the custom Annotation.  When that happens, the class still shows up in the report but lists 0 tests.  I'd prefer to only have a report with the tests that had the special Annotation, ie the ones that actually ran.  Is there a way to exclude the others from the report?  I'm using Ant's junitreport task to generate the report.</body>
  </mail>
  <mail>
    <header>Running JUnit from a JUnit Test</header>
    <body>I'm converting a bunch of tests from JUnit 3 to JUnit 4. These tests are used in a training course and some of them deliberately fail. Therefore I have "metatests" that run all the tests and compare the results to what "should" happen. e.g. Under the covers these methods create a TestSuite, run the tests and examine the resulting TestResult.  When I convert a JUnit 3 test to JUnit 4, this no longer works. I get a single failure saying "No tests found in Exercise1TestCase". Could someone point me at some code that does something similar for JUnit 4? Thanks, Gerard</body>
  </mail>
  <mail>
    <header>Re: Running JUnit from a JUnit Test</header>
    <body>Gerard, If you look at the JUnit self-tests in the org.junit.tests package, you'll see a lot of metatests, as you might expect.  Good luck, in a training course and some of them deliberately fail. Therefore I have "metatests" that run all the tests and compare the results to what "should" happen. e.g. the resulting TestResult.  When I convert a JUnit 3 test to JUnit 4, this no longer works. I get a single failure saying "No tests found in Exercise1TestCase".</body>
  </mail>
  <mail>
    <header>Re: catch failure to take screenshot with selenium</header>
    <body>Hello David, Yes, I saw it. I agree that it seems a better way to go. For example, throwing always the error on the catch block is smart. What I did is almost a TestWatchman, but instead of starting and finished I used after and before. So I'll better use the TestWatchman instead of my hack. Thanks a lot for your kind answers. pura vida. -- Â¡paz y baile!</body>
  </mail>
  <mail>
    <header>nullpointerexception junitext accessing xml file</header>
    <body>im very new to java and junit, when i run the following code im getting a nullpointer exception , i want to take input from an xml file, the xml file is located in same location as the java file, i pasted the stack trace below, im using eclipse , any help would be most welcomed @RunWith(XMLParameterizedRunner.class) @XMLParameters("NewFile.xml") @Category("A") im pasting the stack trace below, java.lang.NullPointerException at java.io.FileInputStream.&amp;lt;init&amp;gt;(Unknown Source) at org.junitext.runners.parameters.factory.DigesterParameterFactory.createParameter\ s(Unknown Source) at org.junitext.runners.XMLParameterizedRunner$RunAllXMLParameterMethods.getParamet\ ersList(Unknown Source) at org.junitext.runners.XMLParameterizedRunner$RunAllXMLParameterMethods.&amp;lt;init&amp;gt;(Unk\ nown Source) at org.junitext.runners.XMLParameterizedRunner.&amp;lt;init&amp;gt;(Unknown Source) at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source) at java.lang.reflect.Constructor.newInstance(Unknown Source) at org.junit.internal.requests.ClassRequest.buildRunner(ClassRequest.java:33) at org.junit.internal.requests.ClassRequest.getRunner(ClassRequest.java:28) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.&amp;lt;init&amp;gt;(JUnit4TestRefe\ rence.java:28) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestClassReference.&amp;lt;init&amp;gt;(JUnit4Tes\ tClassReference.java:24) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestLoader.createTest(JUnit4TestLoa\ der.java:40) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestLoader.loadTests(JUnit4TestLoad\ er.java:30) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\ .java:445) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\ .java:673) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java\ :386) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.jav\ a:196)</body>
  </mail>
  <mail>
    <header>Re: nullpointerexception junitext accessing xml file</header>
    <body>Tinku, This seems specific to junitext.  While there may be junitext users here, is there also a junitext forum where you might be able to find help?  Good luck, nullpointer exception , i want to take input from an xml file, the xml file is located in same location as the java file, i pasted the stack trace below, im using eclipse , any help would be most welcomed org.junitext.runners.parameters.factory.DigesterParameterFactory.createParameter\ s(Unknown Source) org.junitext.runners.XMLParameterizedRunner$RunAllXMLParameterMethods.getParamet\ ersList(Unknown Source) org.junitext.runners.XMLParameterizedRunner$RunAllXMLParameterMethods.&amp;lt;init&amp;gt;(Unk\ nown Source) Method) Source) Source) org.junit.internal.requests.ClassRequest.buildRunner(ClassRequest.java:33) org.junit.internal.requests.ClassRequest.getRunner(ClassRequest.java:28) org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.&amp;lt;init&amp;gt;(JUnit4TestRefe\ rence.java:28) org.eclipse.jdt.internal.junit4.runner.JUnit4TestClassReference.&amp;lt;init&amp;gt;(JUnit4Tes\ tClassReference.java:24) org.eclipse.jdt.internal.junit4.runner.JUnit4TestLoader.createTest(JUnit4TestLoa\ der.java:40) org.eclipse.jdt.internal.junit4.runner.JUnit4TestLoader.loadTests(JUnit4TestLoad\ er.java:30) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\ .java:445) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\ .java:673) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java\ :386) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.jav\ a:196)</body>
  </mail>
  <mail>
    <header>Re: Future of JUnit &amp;amp; Hamcrest</header>
    <body>Hi David, I know this is a bit late, but I was wondering if you have some pointers to the API/type changes that would lead to this issue? I'd really like to be able to use the latest version of hamcrest with junit (and I don't have a large test case suite to worry about it). Another question is: if I can use hamcrest 1.2 then is there a junit jar that doesn't include the old hamcrest classes? tia, :- alex</body>
  </mail>
  <mail>
    <header>Re: Future of JUnit &amp;amp; Hamcrest</header>
    <body>yes. junit-dep.jar Ships with the distribution. S.</body>
  </mail>
  <mail>
    <header>forked jvm exited abnormally</header>
    <body>Hi All, I met a trick problem "forked jvm exited abnormally". I ran the JUnit test case in ant and set the fork=yes for getting EMMA report. But I met the above problem. When I set back the fork=no , it work well. Then I asked Google, there are so many question on the network. It seems a popular issue. Someone said it is fixed bug in Ant 1.7.1.  It caused the multiple version of Ant or JUnit. In Ant1.7.1 , it will give you a tips to said multiple version of Ant or JUnit exist. But I still got the problem "forked jvm exited abnormally" after I clean up the classpath until  the there is  no more warning for multiple version of Ant or JUnit exist. Do you have any idea on that? Env JUnit 4.8 Ant1.8.1 JDK1.6 Thanks Best Regards Larry</body>
  </mail>
  <mail>
    <header>Order of testclasses in suite junit 4.7</header>
    <body>Hi, We are using junit 4.7 and Suite to run tests. If we take a look at the example below ( from the web ...): @RunWith(Suite.class) Is it guaranteed that TestCalculatorAddition.class will be executed before TestCalculatorSubtraction.class ? How is the order of execution determined for a suite? Is it possible in junit 4 to determine order for test classes in suite? br, //mike</body>
  </mail>
  <mail>
    <header>Re: Order of testclasses in suite junit 4.7</header>
    <body>Hi, Mike. Yes, in JUnit 4.7, those classes will run in the order shown. However, many people find a lot of benefits from writing test suites that are useful, fast, and correct independently from the order of execution.  Can you tell us more about why the order is important to you in this case, On Tue, Sep 7, 2010 at 2:40 AM, mpetterson@... example below ( from the web ...): TestCalculatorSubtraction.class ? How is the order of execution determined for a suite? Is it possible in junit 4 to determine order for test classes in suite?</body>
  </mail>
  <mail>
    <header>Re: Future of JUnit &amp;amp; Hamcrest</header>
    <body>Alexandru, I may be able to dig up the thread later today.  I'll try. 2010/9/6 Alexandru Popescu â &amp;lt;the.mindstorm.mailinglist@...&amp;gt;:</body>
  </mail>
  <mail>
    <header>Re: Order of testclasses in suite junit 4.7</header>
    <body>Without contradicting David, I'll say just the opposite :-) The order of execution of tests is not guaranteed. Period. If you'd like, I can go into the philosophy of this, but that's the specification. Now, there's specification and then there's implementation (this is where the "not contradicting" part kicks in). Until JUnit Max, all of the test runners I know of were implemented so that tests ran in declaration order. This is an artifact of implementation, though, and there's power in being able to re-order tests. Regards, Kent example below ( from the web ...): TestCalculatorSubtraction.class ? How is the order of execution determined for a suite? Is it possible in junit 4 to determine order for test classes in suite?</body>
  </mail>
  <mail>
    <header>Re: forked jvm exited abnormally</header>
    <body>This means that for some reason the Java VM that is running your unit tests exited before all tests finished.  The reason could be a crash in your VM (like an OutOfMemoryError) or something in your code calling System.exit - for example. It is not too likely that the problem is within Ant (Ant's user list would have been the better forum to ask this question, BTW) but rather within your tests.  1.7.1 may have fixed a bunch of things, and so has Ant 1.8.0 and 1.8.1 which have been released later. This may lead to all sorts of problems but shouldn't make your forked VM crash. I'd add a formatter that is pretty verbose ("plain" will do) and make sure the output goes to Ant's logging system as well as to a file.  With this you should be able to at least pinpoint the test suite that crashes your VM. Stefan</body>
  </mail>
  <mail>
    <header>Re: Future of JUnit &amp;amp; Hamcrest</header>
    <body>I remember XMLUnit's tests were one affected, see lead to it as well as 0C1%40vmgump.apache.org If you take svn revision 342 of XMLUnit it won't compile with Hamcrest 1.2 but with Hamcrest 1.1.  To see what I had to change to make things work with Hamcrest 1.2: Basically I had code like Source s = ... code creating an instance of the Source interface ... assertThat(s, is(DOMSource.class)) and this is what happened /srv/gump/public/workspace/xmlunit/src/tests/java-core/net/sf/xmlunit/builder/In\ putTest.java:48: cannot find symbol assertThat(javax.xml.transform.Source,org.hamcrest.Matcher&amp;lt;capture#983 of ? super javax.xml.transform.dom.DOMSource&amp;gt;) in Hamcrest 1.1 the is method in question was in 1.2 it became Together with javac's type inferencer is running into trouble. The changed code in XMLUnit now uses which was in Hamcrest 1.1 and became The problem with the is() method is that it assumes a relation between the class and the object you want to match at compile time while the instanceOf doesn't assume anything like this. With Hamcrest 1.2 you get a compile time error for and with 1.1 you get a failed assertion. Not sure if this is the problem David had in mind. Stefan</body>
  </mail>
  <mail>
    <header>Re: Future of JUnit &amp;amp; Hamcrest</header>
    <body>Stefan, That sounds very familiar.  Thank you for digging that up. On Tue, Sep 7, 2010 at 11:12 AM, Stefan Bodewig 0C1%40vmgump.apache.org /srv/gump/public/workspace/xmlunit/src/tests/java-core/net/sf/xmlunit/builder/In\ putTest.java:48: cannot find symbol assertThat(javax.xml.transform.Source,org.hamcrest.Matcher&amp;lt;capture#983 of ? super javax.xml.transform.dom.DOMSource&amp;gt;)</body>
  </mail>
  <mail>
    <header>Re: Example JUnit code</header>
    <body>Resurrecting an old thread: I'm not aware of a definitive list, but I'd particularly like to see some realistic sample applications using Theories, Rules, and assertThat/Hamcrest. Some might also argue Categories, too. Brett On Sun, Aug 8, 2010 at 6:46 PM, Simon Chappell &amp;lt;simonpeterchappell@...</body>
  </mail>
  <mail>
    <header>RE: forked jvm exited abnormally</header>
    <body>HI Stefan, Sincerely thanks for your reply. As you said, I have added a format ¡®Plain¡¯ in the junit task ang check the ant log and output of unit test. But I can¡¯t find not any useful info. Ant log: [junit] Tests run: 1, Failures: 0, Errors: 1, Time elapsed: 0 sec JUnit output: Testsuite: com.ebay.ice.kernel.unittest.AllTests Tests run: 1, Failures: 0, Errors: 1, Time elapsed: 0 sec Testcase: null took 0 sec Forked Java VM exited abnormally. Please note the time in the report does not reflect the time until the VM exit. junit.framework.AssertionFailedError: Forked Java VM exited abnormally. Please note the time in the report does not reflect the time until the VM exit. Is there any way to get more detail log? Best Regards Larry From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of Stefan Bodewig Sent: 2010Äê9ÔÂ7ÈÕ 22:39 To: junit@yahoogroups.com Subject: Re: [junit] forked jvm exited abnormally This means that for some reason the Java VM that is running your unit tests exited before all tests finished. The reason could be a crash in your VM (like an OutOfMemoryError) or something in your code calling System.exit - for example. It is not too likely that the problem is within Ant (Ant's user list would have been the better forum to ask this question, BTW) but rather within your tests. 1.7.1 may have fixed a bunch of things, and so has Ant 1.8.0 and 1.8.1 which have been released later. This may lead to all sorts of problems but shouldn't make your forked VM crash. I'd add a formatter that is pretty verbose ("plain" will do) and make sure the output goes to Ant's logging system as well as to a file. With this you should be able to at least pinpoint the test suite that crashes your VM. Stefan</body>
  </mail>
  <mail>
    <header>Scheduling Junit tests for a concurrent execution</header>
    <body>Hello Everybody, for some concurrrent Junit tests, I took the classes, which I found on the Junit Webside:  x/junit/runner/ My problem is, that with my tests I access some classes, which schouldn't be accessed concurrently . Therefore I receive some exceptions, so that I cannot really run the concurrent junit plugin tests. Therefore I would like to use a newScheduledThreadPool instead of a newFixedthreadPool in the classes "ConcurrentJunitRunner" and "ConcurrentTestsuite": ScheduledExecutorService executorService = Executors.newScheduledThreadPool(klass.isAnnotationPresent(Sequential.cl\ ass) ? klass.getAnnotation( (Runtime.getRuntime().availableProcessors() * 1.5), instead of ExecutorService executorService = Executors.newFixedThreadPool(klass.isAnnotationPresent(Concurrent.class) ? klass.getAnnotation( (Runtime.getRuntime().availableProcessors() * 1.5), executorService.scheduleWithFixedDelay(command, initialDelay, delay, or executorService.scheduleAtFixedRate(command, initialDelay, period, I can set these values in the schedule () method, yet I would like to set them before I define: Does anybody have an idea, how to modify these classes in that the concuurent tests don't start at the same time? For some help I would be grateful. Kindly Monika</body>
  </mail>
  <mail>
    <header>Re: Scheduling Junit tests for a concurrent execution</header>
    <body>It's a good question.  If you don't find someone here with time to answer, you may want to go back to the original author: junit.org serves as a clearing house for all kinds of people with ideas about JUnit and Java testing, and I'm not sure if all of them are on this list.  Good luck,</body>
  </mail>
  <mail>
    <header>Common Test Runner for JVM</header>
    <body>I'll soon start writing a new test runner - a common test runner for the JVM, codename CTR4J. It will provide a superset of JUnit's test runner's features, while at the same time overcoming some of JUnit's limitations and helping integration with development tools. I would like to hear your opinions on this project. MOTIVATION JUnit's test runner - especially the org.junit.runner.RunWith annotation - has been very successful in providing a common interface for running tests from multiple testing frameworks. If a testing framework provides a org.junit.runner.Runner implementation, every Java build tool and IDE will automatically support the framework. However with the rise of Scala testing frameworks (Specs, ScalaTest, Specsy - the last one being written by me), some limitations of JUnit's test runner are coming to the fore: - JUnit makes an implicit assumption that all tests are known before any test code is executed. For example IntelliJ IDEA calls Runner.getDescription() before calling Runner.run() and has problems if the descriptions change during test execution. But in the Scala testing frameworks, in order to achieve a concise syntax, test declarations are implemented as method calls in the class constructor, which means that at least some of the test code must be executed before it is known that what tests there are. - JUnit doesn't know the concept of nested tests. It knows the concept of suites containing suites, but not "test methods" which contain other "test methods". But at least Specs and Specsy allow organizing tests into unlimitedly nested closures. For them this limitation means that IDEs are not able to show the right mental model of what is really happening during test execution, which makes understanding test output harder. - There is an implicit assumption that test names are the same as method names, and that the tests are implemented as methods. For example in IntelliJ IDEA it's possible to navigate from the test results into test methods. But with the Scala frameworks this is not possible, because the test names to not correspond any method declaration (and a string search is not 100% reliable because the test name could be generated dynamically or there could be multiple tests with the same name; at least Specsy allows duplicate names). There are also some other limitations which affect all Java testing frameworks: - When a test prints something, IntelliJ IDEA collects what is printed to stdout and stderr, so that when you select a test in the test results, it will show only what that test printed. This is very useful for debugging with println-statements. But because there is no synchronization between the test runner and the IDE which reads the stdout/err, IDEA doesn't always associate what a test printed with the correct test, especially when the tests are very fast. - No built-in support for executing the tests in parallel. Third-party tools are needed for it. Possibly because of being faced with the above limitations, at least Specs, ScalaTest and TestNG have implemented their own test runners. This in turn means that the IDEs need to support each test runner individually, which results in varying levels of quality and features between the integration with different test runners. For example, at least some time ago, IDEA's Scala plugin did not support automatically finding all Specs tests in the project and executing them. There is also code duplication inside and between all IDEs, build tools and CI servers because they have had to write code to keep track of the test execution state, and that needs to be repeated for each test runner. THE PROJECT I'll soon start writing a test runner to solve the above mentioned limitations and to ease the integration with build tools, IDEs, CI servers etc. The license will be Apache License 2.0. I'm also thinking of making this not only open source, but also "open development", by screencasting similar to What the test runner will provide to testing frameworks, is a superset of the features provided by these JUnit classes: RunWith, Runner, Description, RunNotifier. The API will be a bit more generic and with new abstractions, in order to support for example nested tests. What the test runner will provide to IDEs, build tools and CI servers, is a library for launching the tests in a new VM instance, monitoring the test execution status, collecting the test results and what was printed to stdout/err etc. The tools just need to configure the classpath and choose which tests to run (e.g. using file name patters). I will also provide a reference implementation of an UI for running the tests, because running tests as part of the TDD cycle is too important a feature for its usability to be left in the hands of programmers without interaction design skills. What the test runner will provide to users, is running tests from all testing frameworks (which support this runner or JUnit's test runner) in one suite, running them in parallel on multiple CPU cores (I'll tackle parallelization over multiple machines as a separate project, probably as a commercial tool), integration with every development tool on the JVM (I intend to contact all tool vendors and gather requirements from them to ease the integration) and reliability (backwards compatiblity is very important to me, and I plan on making it possible for each tool vendor to write integration tests, which will be run as part of the test runner's development builds, to detect any breaking changes). So, I would like to ask for your opinion on this project. Here are some questions: - Do you find this useful? - If you had the possibility to rewrite JUnit's test runner, without having to think about backwards compatibility, what would you do differently? @RunWith's javadoc says: "We added this feature late in development. While it seems powerful we expect the runner API to change as we learn how people really use it. Some of the classes that are currently internal will likely be refined and become public." - What do you think would be a good name for the project? One suggestion is CTR4J (actually named similar to SLF4J) which is googleable, but perhaps not very pronounceable or memorable. - What would be a good name for the annotation which corresponds @RunWith? Its name needs to be different to be googleable and to make it easy to annotate a class with both JUnit's and this test runner's annotation. - Any other thoughts? -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>JUnit in the Maven repository (was Re: Future of JUnit &amp;amp; Hamcrest)</header>
    <body>Hi, I use JUnit exclusively via Maven. From the Maven user's perspective, it would actually be for the best if *only* the junit-dep jar had ever been uploaded to the Maven repository - remember, Maven resolves dependencies, so when junit-dep is referenced, it will also pull in hamcrest-core 1.1. The issue is as follows: Maven will only put one version of any given groupId+artifactId on the classpath. Since junit is present both as junit:junit and junit:junit-dep, it's far too easy for a project that, say, depends on junit itself, and also uses jmock's junit4 integration (which declares a dependency on junit-dep) to end up with BOTH junit and junit-dep on its classpath.... potentially of different versions. Personally, I think there's a pretty solid rationale to decide to back-fill the missing junit-dep uploads, and decide to never upload any new versions of the junit jar with hamcrest, so that Maven users will gradually migrate to using a single Maven artifactId for JUnit. Max.</body>
  </mail>
  <mail>
    <header>Now comes Zephyr v3.0</header>
    <body>Hello Everyone, Zephyr has been a leader in comprehensive test management and now with Zephyr v3.0, Zephyr is changing the landscape by introducing quality intelligence to test management. We are pleased to inform you that Zephyr has come out with its new and enhanced version Zephyr v3.0 comprehensive test management. What's New in Zephyr v3.0? Custom reports generator: Zephyr's new custom report generator makes it simple for every team to be able to run any report they need. The new functionality builds on the existing out of the box functionality which comes with more than 16 drill down reports and metrics. Extensive API's: Zephyr's philosophy has always been to integrate with existing infrastructure and not force teams to rip one tool out to replace it with another. With the new extensive API's Zephyr further extends the capability of its platform to support the myriad needs of global software quality teams. The web services API's are fully documented at Enhanced productivity levels/Search Technology: Zephyr's test management solution promotes a new level of organization at the release, project, department and global level. With the 3.0 release, Zephyr debuts a new search technology that searches in the body of fields, not just in the title or subject field. Teams will achieve new levels of productivity Trend reporting: With Zephyr's new, first of its kind dynamic trend reports, teams now have the ability to look back at stages of former projects and quantify how long it took to complete the release. With this information in hand, the same teams will now able to plan accordingly for not only current releases, but also for future projects. Enhanced JIRA integration: Zephyr enhances its one of a kind 2-way JIRA integration by supporting JIRA custom fields. Teams have always been able to enter, search, change, report, analyze and close any defect in JIRA from within Zephyr through optimized testing desktops. With the new release, teams who have customized or plan to customize JIRA will also be able to leverage the robust functionality and achieve higher productivity and efficiencies. We'd love to hear your opinion about Zephyr v3.0 and will be glad to share more information with you. Online help is available at</body>
  </mail>
  <mail>
    <header>Re: Re: Future of JUnit &amp;amp; Hamcrest</header>
    <body>I recently started using  projects to the Maven Central Repository. I think that using Sonetype is easier than directly submitting to Maven Central (  because you don't need to set up repository syncing manually and Sonatype also does some additional checks to make sure that the uploaded artifacts are high quality (  +guide#SonatypeOSSMavenRepositoryUsageGuide-6.CentralSyncRequirement ). -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Re: Re: Future of JUnit &amp;amp; Hamcrest</header>
    <body>Correction: It seems that syncing your own repository to Maven Central is not anymore the preferred process, so that isn't anymore an option. :) Sonetype appears to be the only accepted forge which is open for all OSS projects. (The last time I read that page was a couple of years ago, so I should have checked it for updates before posting.) -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Re: Future of JUnit &amp;amp; Hamcrest</header>
    <body>David, thanks for the explanations. Please, pick one of the many volunteers and work with him/her to automate deployment to Maven Central. This will literally save 1000's of wasted hours for devs around the globe. (As someone else already stated, there is zero practical chance of breaking someone's build when deploying a new release version.) Meanwhile I've deployed the latest release versions of junit/junit-dep to my own Maven repo: build that will continually build and deploy the latest (4.9) snapshots to this repo. Hopefully this will help some people who, like me, can't wait any longer for the latest JUnit versions to appear in Maven Central. The repo also hosts Hamcrest 1.2, another important (and related) lib that isn't available from Central. Cheers, Peter future JUnit version continue to ship with Hamcrest? with Hamcrest 1.2?</body>
  </mail>
  <mail>
    <header>Re: Use Cases for JUnit Rules</header>
    <body>I agree, Rules are great. +1 for highlighting them (and the possible use-cases) in JUnit docs. Dawid years. People are using them in totally unexpected ways. it really rocks. But few seem to know about this feature and even less seem to understand its use cases. In order to help with this I bloged about the Use Cases of JUnit Rules.</body>
  </mail>
  <mail>
    <header>More example JUnit code</header>
    <body>Following up on my previous offering of example JUnit code, I have pushed a project called Fraction to GitHub. This implements classic mathematical fractions and was written in a test first manner and has documented unit tests to help those learning JUnit see one style (my style!) of test implementation. The code may be found at:  I hope that you find it useful. Simon (one of the JUnit mailing list moderators) -- simonpeter.org | simonpeter.com | newlife-upc.org</body>
  </mail>
  <mail>
    <header>Re: More example JUnit code</header>
    <body>Hi Simon, A few quick questions/remarks: -- Cédric -- Cédric</body>
  </mail>
  <mail>
    <header>Re: More example JUnit code</header>
    <body>I'll join by posting an example of my style. :)  It's more focused on learning TDD, but might also serve as a JUnit example. The 'beyond' branch contains also a mocking example ( s/RemovingFullRowsTest.java The tests use a small custom test runner which enables nesting JUnit test classes, in order to enable my style. Simon Chappell wrote on 23.8.2010 1:47: -- Esko Luontola www.orfjackal.net</body>
  </mail>
  <mail>
    <header>Re: More example JUnit code</header>
    <body>Cedric, Good points. 1. I'm not used to the @BeforeClass. I will make that change, as it is a better fit. 2. The assigning of nulls is just to emphasize cleaning up after yourself. I agree that it's technically unnecessary. 3. Let me think about the parameterized thing. I think for eight values, with their descriptive names, it brings more value leaving them as they are, although I may change where they are defined. Thank you for you considered points. Hopefully this will help us all sharpen our JUnit writing. Simon -- simonpeter.org | simonpeter.com | newlife-upc.org</body>
  </mail>
  <mail>
    <header>Re: More example JUnit code</header>
    <body>Simon, Actually, I was wrong: using @BeforeClass will break your tests. Since JUnit reinstantiates a brand new class before each test method, only the first method will get the correct values for these fields. Subsequent methods will see null. Anyway, these values are constants, so they should be static final. Which solves the problem and also gets rid of @Before and @After. About the fields: what bothers me with this approach is that you're exposing a lot of fields to all your test methods and they only use a very small subset of these. In effect, fields are like global variables and they make it harder for someone coming to improve your class to understand exactly what fields are okay to modify and which tests need to be updated as well. I like to keep the data needed by each test method as local as possible to avoid this kind of problem. Parameterized tests help a lot with this kind of locality, and they turn out to be a great match for this particular problem. With all this in mind, here is my version (TestNG syntax, porting to JUnit is left as an exercise to the reader): result You can probably see how parameterized tests improve the locality of your tests and how adding values to extend the coverage is trivial. Also note that this is a great example of how misleading code coverage can be: you would get 100% test coverage if you only returned 1 data set in each data provider, but your tests would be very poor. Adding values to your data provider will do nothing for your code coverage but it will considerably improve the quality of your tests. -- CÃ©dric -- CÃ©dric</body>
  </mail>
  <mail>
    <header>Re: More example JUnit code</header>
    <body>Simon, I'm curious if you considered just instantiating the fractions you needed inside each test method?  It would seem to be a total win for readability and total lines of code.  I don't think @BeforeClass or parameterized tests would be any better. On Sun, Aug 22, 2010 at 6:47 PM, Simon Chappell</body>
  </mail>
  <mail>
    <header>Tetris example (was: Re: More example JUnit code)</header>
    <body>Esko, I like the style.  I'm glad you were able to get the BDD-style expressiveness you wanted with just 170 lines of easily-parseable extension code! ( s/RemovingFullRowsTest.java</body>
  </mail>
  <mail>
    <header>Re: More example JUnit code</header>
    <body>2010/8/22 CÃ©dric Beust â &amp;lt;cedric@...&amp;gt;: @BeforeClass only works on static values, and should be matched with an @AfterClass.  It is very rare to see @BeforeClass used for set-up of lightweight data values. I'd replace your 49 lines of code with these 17, without loss of extensibility or coverage:</body>
  </mail>
  <mail>
    <header>Re: More example JUnit code</header>
    <body>You're losing quite a bit of generality since you are inlining all the constants. You are also creating and recreating a lot of similar objects all the time, there's a lot of DRY violation in your code. Your code is a good first version, but it needs some refactoring. Again, a class such as Factor is a perfect target for parameterized testing since the logic of the testing doesn't change (verify that f1.operation(f2) equals f3), only the data does. -- CÃ©dric -- CÃ©dric</body>
  </mail>
  <mail>
    <header>Re: Tetris example (was: Re: More example JUnit code)</header>
    <body>Seconded. That's really very neat. Clive -- Clive Evans "Black holes are where God divides by zero" - anon</body>
  </mail>
  <mail>
    <header>Re: More example JUnit code</header>
    <body>2010/8/23 CÃ©dric Beust â &amp;lt;cedric@...&amp;gt;: I'm not sure what you mean by generality.  If I were to re-extract the constants, what would that allow me to do that I can't now, or what costs would I save? Version A is more than twice as long as Version B.  In Version B, we have: To know what this does, with no familiarity with JUnit, I need to look at A) The definition of the f function (which is just syntactic sugar). B) The definition of assertEquals In Version A: To know what this does, with no familiarity with TestNG, I need to look at: A) The parameter list, to see that these are input parameters B) The TestNG manual, to see how these inputs are generated C) The @Test(dataProvider = "reduceData") line, to see which provider is being used D) The multiplicationData method, to see which data is being passed in E) The F_1_1 constant, to see what it contains F) The definition of assertEquals The next developer to work on your project is more likely to notice this cost in mental indirection long before they appreciate any wins in "Don't Repeat Yourself"* * They may even notice that while Version A has three fewer repeated calls to assertEquals, it has seven _more_ repeated calls to new Object[]</body>
  </mail>
  <mail>
    <header>Re: More example JUnit code</header>
    <body>Leaving aside the JUnit/TestNG specificity, you are simply saying that the reader needs to know what parameterized testing is in order to understand this code. Well, of course. What's the point in introducing this feature in JUnit 4 if you don't believe it's useful? Again, this is a textbook example of what parameterized testing is for. The test *is* the data, not the code. Making it possible to extract that data out of the code has a lot of value that you might not see as a programmer but that QA organizations everywhere absolutely love. I cannot tell you how many TestNG users (and JUnit too I bet) are using Excel spreadsheets to drive their tests thanks to data providers. The mental indirection is just "know the tool you are working with". The cost in violating DRY is a brittle code base. I'm pretty sure the code you posted would not pass code review where you work :-) -- Cédric</body>
  </mail>
  <mail>
    <header>Re: More example JUnit code</header>
    <body>2010/8/23 CÃ©dric Beust â &amp;lt;cedric@...&amp;gt;: I believe its useful _when used well_.  This is a _poor place to use the tool_. Can you show me the textbook you're referring to? I hope you actually can tell me.  I hope you have numbers, because that would be interesting.  Are you suggesting that Simon should be driving his tests of a rational number class with an Excel spreadsheet? I'll leave that up to the opinion of the reader. If you really want to go there, please show me a believeable change in the Fraction class that would have a high cost in Version B.  Don't Repeat Yourself is an important principle that needs to be rationally applied, not brandished like a talisman that precludes further discussion. That's an easily verifiable proposition.  I'll run it by a couple of my colleagues.  Let me know if there's anyone in particular you think I should ask.</body>
  </mail>
  <mail>
    <header>Re: More example JUnit code</header>
    <body>Again: if adding new test cases is more about adding data than it is about adding code, then your code is data driven and probably a good fit for parameterized testing. It's a pretty simple Litmus test, really. Suppose that after this, you implement a ComplexFraction class that implements fractions for complex numbers. Interestingly, your test code will *not* change. Multiplication testing will be the same for real and complex numbers: @Test What will change is the data that you will pass to this test method. Thanks to polymorphism, your code will be exactly the same but the data set will be completely different. This is one of the reasons why it makes sense to *extract* that data set out of the test logic. Hence parameterized testing. What if the Fraction constructor suddenly needs one more parameter? You'll find yourself having to replace all the new Fraction(1, 1) that litter your code. With a constant, it would be a one line change. Frankly, I'm puzzled I have to justify the importance of using constants. That sounds fun. Anyone on the Java readability will do. I hope they won't let me down :-) To be realistic, the test class should test the entire spectrum of operations that a fraction class would offer (reduce, multiply, divide, add, etc...) because hopefully, this would make you realize how much repetition your version actually generates, but I understand if you don't want to waste too much time on this. -- Cédric</body>
  </mail>
  <mail>
    <header>Re: More example JUnit code</header>
    <body>2010/8/23 CÃ©dric Beust â &amp;lt;cedric@...&amp;gt;: I can easily see that there are testing problems that justify the additional complexity of parameterized testing.  Can you see that there are testing problems that do not justify that complexity? Precisely the opposite.  Version B will involve a single change in the f() method, and Version A will require changes in all the new Fraction(1, 1) that litter _it's_ code, including all those constants. Review the actual code we're talking about. Again, constants are a tool, to be used in the right place.  If you can't think of a way that a tool can be overused, you're probably overusing it. Posted.  I'll let you know. For every operation, Version-B style coding will produce more than twice as much code as Version A.  There's no economy of scale to be had at all in Version B.  I agree that extending the example is a waste of time--it will produce no new answers.</body>
  </mail>
  <mail>
    <header>Re: More example JUnit code</header>
    <body>Cedric: I actually got that to work. I did have to declare the variables as static, but that didn't bother me. I might even declare them final and skip the @BeforeClass and @AfterClass completely. As for the rest of the discussion which I really wish I could follow during the day, but have to wait until I get home in the evening, I like the idea of trying the more test driven approach. Not totally convinced that'll work in this example, but worth a try. Also, I'm trying to get up to speed on the new Theories as they might fit some of the invariant nature of the mathematics involved with fractions. (I'm still stuck in a timewarp back at JUnit 4.0) (As an aside, this is why I teach JUnit using simple objects, because then the object is simple enough to fade into the background, leaving just the unit testing principles and approaches to be mentally wrangled.) David: on first inspection, I found your code to be very terse. This is a good thing in some situations, but this code was/is designed for teaching and that's why I created variables with names like oneHalf and threeFifths, so that the lines of code would read better. There's method to my madness! I like the concept of valuing more than just code coverage in our tests and the thought of domain coverage through well chosen test data is an appealing one. I'll give that some more thought. Thank you for a most interesting discussion. Simon -- simonpeter.org | simonpeter.com | newlife-upc.org</body>
  </mail>
  <mail>
    <header>Question about junit test</header>
    <body>Hi, I'm pretty new to JUnit testing and I'm having a question regarding writing a test for the example class beneath which e.g. use XPath to query an xml file and returns an object if it's found. Assume i have the following class public Class A into here (resulint in the exception) Now I have following questions: Is it neccesary to write a test for the catch block or is it enough to write a test to check if in such a case the return object is null  ? If it's necessary to write a test how does this test needs to look ? Tnx in advance for the feedback. Regards, Tom</body>
  </mail>
  <mail>
    <header>Re: Question about junit test</header>
    <body>A very old saying from Kent Beck is: Test everything that could possibly break If there is functionality inside the catch-block that needs to work correctly and that could be wrong, then you should write tests for that. If the catch block does nothing but return null, then testing with a wrong XPath and expecting null would probably be enough. Greetings, test for the example class beneath which e.g. use XPath to query an xml file and returns an object if it's found. into here (resulint in the exception) test to check if in such a case the return object is null  ?</body>
  </mail>
  <mail>
    <header>catch failure to take screenshot with selenium</header>
    <body>Hello, I use junit and selenium to test a web interface. Selenium session is started on @Before and is closed on @After. Pretty nice :) But now we have to take a screenshot on failed tests. I added the selenium.captureScreenshot(screenshotPath); on @After, but it takes screenshots of all tests. Then I tried the TestWatchman @Rule to override the failed function and take the screenshot there. But this doesn't work, because failed is called after closing the selenium session. So I don't really know where to place the captureScreenshot function. How can I catch the failure before @After is executed? thanks :) -- ¡paz y baile!</body>
  </mail>
  <mail>
    <header>Excluding empty test suites from report</header>
    <body>I'm running a set of tests, some of which have a custom Annotation on them.  I'm using a custom Test Runner which filters the tests and only runs the ones that have the custom Annotation.  The problem I'm having is that some classes have 0 tests with the custom Annotation.  When that happens, the class still shows up in the report but lists 0 tests.  I'd prefer to only have a report with the tests that had the special Annotation, ie the ones that actually ran.  Is there a way to exclude the others from the report?  I'm using Ant's junitreport task to generate the report. Thanks, Shay</body>
  </mail>
  <mail>
    <header>Another question about a JUnit test</header>
    <body>Hi, Like told earlier i'm pretty new in the field of JUnit testing. I've another question about a test Let's say I have code which executes two things and I want to have those things splitted up in two methods. Method 2 however is also called from method 1. E.g. // Contains it's name and contents (in ascii) public void loadFile(String strFile) public String readFile(File f) My question is now how do you junit test this code Do you first test "readFile" and then write a test "loadFile" which will lead to the fact that "readFile" is executed once again when you test "loadFile" Do you write a test for "loadFile" and test the contents in this test method. Baiscally the question is about junit testing methods which call other methods ? Tnx in advance for the repsonses, Regards, Tom</body>
  </mail>
  <mail>
    <header>RE: Another question about a JUnit test</header>
    <body>From a testing perspective you should test both regardless of the fact that loadFile calls readFile.  This includes negative testing like so: loadFile(null) loadFile("") readFile(null) readFile(new File(".")) Another test would be to compare fileObject.contents with what readFile returns. The outcome seems obvious but that doesn't mean it couldn't be broken by someone else down the road. From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of tcdmail Sent: Thursday, August 26, 2010 5:46 AM To: junit@yahoogroups.com Subject: [junit] Another question about a JUnit test Hi, Like told earlier i'm pretty new in the field of JUnit testing. I've another question about a test Let's say I have code which executes two things and I want to have those things splitted up in two methods. Method 2 however is also called from method 1. E.g. // Contains it's name and contents (in ascii) public void loadFile(String strFile) File f = new File(strFile) if (f.exists) public String readFile(File f) // do read stuff return contents My question is now how do you junit test this code Do you first test "readFile" and then write a test "loadFile" which will lead to the fact that "readFile" is executed once again when you test "loadFile" Do you write a test for "loadFile" and test the contents in this test method. Baiscally the question is about junit testing methods which call other methods ? Tnx in advance for the repsonses, Regards, Tom</body>
  </mail>
  <mail>
    <header>RE: catch failure to take screenshot with selenium</header>
    <body>@After methods are run after each test.  @AfterClass methods are run after all tests in a class have completed.  I'm not sure if this will work for Selenium but you could try it. If that won't work you can wrap your test code in try/catch blocks.  In the catch you can do a capture and then throw the failure. From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of Leo Arias F. Sent: Wednesday, August 25, 2010 7:56 PM To: junit@yahoogroups.com Subject: [junit] catch failure to take screenshot with selenium Hello, I use junit and selenium to test a web interface. Selenium session is started on @Before and is closed on @After. Pretty nice :) But now we have to take a screenshot on failed tests. I added the selenium.captureScreenshot(screenshotPath); on @After, but it takes screenshots of all tests. Then I tried the TestWatchman @Rule to override the failed function and take the screenshot there. But this doesn't work, because failed is called after closing the selenium session. So I don't really know where to place the captureScreenshot function. How can I catch the failure before @After is executed? thanks :) -- ¡paz y baile!</body>
  </mail>
  <mail>
    <header>Re: Another question about a JUnit test</header>
    <body>Just want to add a sidenote, suppose also that if you want to test "readFile" you need to include almost all code from method "loadFile" in order to be able to test everything question about a test things splitted up in two methods. Method 2 however is also called from method 1. to the fact that "readFile" is executed once again when you test "loadFile" ?</body>
  </mail>
  <mail>
    <header>Re: Example JUnit code</header>
    <body>Hi Simon, you asked for ideas on where new features could be suitable. I think theories would emphasize the global applicability of some rules like: symmetry of equality, an object should always equal itself etc. Two examples to illustrate: I think it shows more clearly that this is true for any instance of BinaryDigit and not just the ones used to show the same thing in a normal @Test annotated test. For this to work you have to add the @RunWith(Theories.class) annotaion and annotate the BinaryDigit instances as DataPoints. Thanks for posting this code. ----------------------------------------------------- Joakim Ohlrogge Agical AB Västerlånggatan 79, 2 tr 111 29 Stockholm, SWEDEN Mobile: +46-708-754004 Blog: johlrogge.wordpress.com E-mail: joakim.ohlrogge@...</body>
  </mail>
  <mail>
    <header>Re: Running Junit tests 'for dummies' tools/etc</header>
    <body>We have almost the exact setup (but a smaller team so less division of concern). We use TeamCity to run the tests, which does a great job of informing developers and non-developers alike, at it is very easy to trigger a build, and it will support pre-commit test running, but your DBAs would have to use eclipse to relate to their source control system (IDEA, or Visual Studio). For it to work, of course, you have to update some test database. For that, I recommend dbDeploy. You can put that together into the build to modify a defined database that is made for these pre-test commits. And although it doesn't seem you need it, we use DBUnit to set the database into a known state before the tests run. looking for, so posting a question here -- desktops), Eclipse IDE for java developers, mix of junit 3.8/4.0 tests, and a LOT of already existing junit tests that include regression/database testing. including direct SQL queries, hibernate/JPA queries, and stored procedure calls (MS SQL).  People who are non-java/non-junit are going to make changes to the database and stored procedures (for many different projects). run unit tests to see if changes they made will cause issues to the existing regression/unit tests?  The ease-of-access and results is the key/critical part, as otherwise they will just keep asking development staff to run them and ask for feedback.</body>
  </mail>
  <mail>
    <header>this.getClass().getClassLoader().getResource("/") is null</header>
    <body>I am writing a Junit test for a class which has this.getClass().getClassLoader().getResource("/") and returns null public ModelAndView urlGen(HttpServletRequest request, .... return null Please guide me to write unit test for this, my unit test is as follows public void testUrlGenerator() throws ServletException, IOException,  Thread.currentThread().setContextClassLoader(ClassLoader.getSystemClassLoader())\</body>
  </mail>
  <mail>
    <header>Re: this.getClass().getClassLoader().getResource("/") is null</header>
    <body>What happens when you run your current test? this.getClass().getClassLoader().getResource("/") and returns null Thread.currentThread().setContextClassLoader(ClassLoader.getSystemClassLoader())\</body>
  </mail>
  <mail>
    <header>Re: Running Junit tests 'for dummies' tools/etc</header>
    <body>Why is everyone one working in the same schema? As a developer I have almost always had a db instance on my system.  With whatever test data I am running in my own schema. There is a ci server next with it's own db schema. Sure what ever the QA guys  were testing on is a shared instace, but are they running unit tests? looking for, so posting a question here -- desktops), Eclipse IDE for java developers, mix of junit 3.8/4.0 tests, and a LOT of already existing junit tests that include regression/database testing. including direct SQL queries, hibernate/JPA queries, and stored procedure calls (MS SQL).  People who are non-java/non-junit are going to make changes to the database and stored procedures (for many different projects). run unit tests to see if changes they made will cause issues to the existing regression/unit tests?  The ease-of-access and results is the key/critical part, as otherwise they will just keep asking development staff to run them and ask for feedback.</body>
  </mail>
  <mail>
    <header>Re: this.getClass().getClassLoader().getResource("/") is null</header>
    <body>David, Thanks for quick reply. While running application, path returned by 'urlGen' class is /WEB-INF/../../.. directory structure. And further processing is done on the path returned. When I run my test case this.getClass().getClassLoader().getResource(SLASH) reurns null. Since this is first line in the method, I am not able to test rest of the code. this.getClass().getClassLoader().getResource("/") and returns null Thread.currentThread().setContextClassLoader(ClassLoader.getSystemClassLoader())\</body>
  </mail>
  <mail>
    <header>Re: Re: this.getClass().getClassLoader().getResource("/") is null</header>
    <body>My suggestion is: 1) split the method into three: 2) Test furtherProcessing in isolation 3) If you're truly concerned that findPath() will do the wrong thing, we can think harder and come up with some tricks. Make sense? /WEB-INF/../../.. directory structure. And further processing is done on the path returned. reurns null. Since this is first line in the method, I am not able to test rest of the code. this.getClass().getClassLoader().getResource("/") and returns null  Thread.currentThread().setContextClassLoader(ClassLoader.getSystemClassLoader()\</body>
  </mail>
  <mail>
    <header>Re: this.getClass().getClassLoader().getResource("/") is null</header>
    <body>Thanks again. The provided class is working perfectly from its existence and task is to write test case without changing the source code. The provided solution may be an option provided I can change the source code. Please guide me to get through this test case. this.getClass().getClassLoader().getResource("/") and returns null Thread.currentThread().setContextClassLoader(ClassLoader.getSystemClassLoader())\</body>
  </mail>
  <mail>
    <header>Re: Example JUnit code</header>
    <body>That sounds great. I have been aware of the new features but for various good reasons have been unable to try them out. (You can think of me as stuck back at 4.0 if that helps). Are there any overviews of the new features that you could point me towards so that I can see how to try them out? Simon On Wed, Aug 4, 2010 at 3:43 PM, Joakim Ohlrogge -- simonpeter.org | simonpeter.com | newlife-upc.org</body>
  </mail>
  <mail>
    <header>Re: Re: this.getClass().getClassLoader().getResource("/") is null</header>
    <body>task is to write test case without changing the source code. The provided solution may be an option provided I can change the source code. Please guide me to get through this test case. First, something you probably don't want to hear.  You've been asked to take code that hard-codes an assumption that it's being run inside a web container, and run it outside a web container.  You may want to talk to whoever's assigning this task (even if it's yourself), and see if the tradeoff of the extra work you'll have to do, and the design you won't be able to improve, is worth the benefit of not changing the source code. That said, you can probably hack something together using a custom classloader, and use that classloader to load your class.  Generalist Java forums may be your best source of information on how to do this. Good luck, this.getClass().getClassLoader().getResource("/") and returns null  Thread.currentThread().setContextClassLoader(ClassLoader.getSystemClassLoader()\</body>
  </mail>
  <mail>
    <header>jsystem parametrized and junit</header>
    <body>Hi, I am new with junit. I am trying, for a week, to solve a problem of junit and jsystem working simultaneously. I work with jsystem 5.5.4. The version of junits that comes with this jsystem is 4.4. I tried to make parameterized test in jsystem but I did not succeed. In parameterized test, only one constructor should exist. This constructor will take the parameters.  But for jsystem reflection I need an empty constructor. If  I have 2 constructors the Junit will fail in the function : getOnlyConstructor(). If I use only the parametric constructor it will failed in jsystem GUI because it can not build this class. Do anybody has an idea what can solve this problem? Can I upgrade the junit version for the jsystem or does the jsystem will have problems with the upgraded  junit. Thanks Lee</body>
  </mail>
  <mail>
    <header>change junit code</header>
    <body>Hi, I want to fix a bug in junit 4.4. I download the jar from The src jar and the regular jar(with .class)  are not the same. The src jar is missing the .project file; .classpath file and some library are not the same. What should I do so I can open the code in the eclipse and change it? Thanks LEE</body>
  </mail>
  <mail>
    <header>Re: change junit code</header>
    <body>Lee, I'm not sure what the issue is.  For less ancient versions, you can check out the code from github.  Does it have to be based on 4.4? Thanks, missing the .project file; .classpath file and some library are not the same.</body>
  </mail>
  <mail>
    <header>Re: jsystem parametrized and junit</header>
    <body>Lee, I don't think upgrading will help.  Have you contacted the JSystem team to see why they require a no-arg constructor, while JUnit does not?  Thanks, jsystem working simultaneously. is 4.4. will take the parameters.  But for jsystem reflection I need an empty constructor. getOnlyConstructor(). If I use only the parametric constructor it will failed in jsystem GUI because it can not build this class. problems with the upgraded  junit.</body>
  </mail>
  <mail>
    <header>Re: change junit code</header>
    <body>.classpath and .project are Eclipse specific files, I'm guessing the JUnit distribution doesn't include them by default (which I think is a good thing, or if you're going to provide them, name them differently so that developers can't accidentally check in their own). It's pretty straightforward to create an Eclipse project from a Java distribution, though, especially if it respects the Apache directory structure (not sure if JUnit does). -- Cédric -- Cédric</body>
  </mail>
  <mail>
    <header>Re: change junit code</header>
    <body>Likewise, I think modern Eclipses will slurp the project settings from the build.xml, which _should_ be included. 2010/8/10 CÃ©dric Beust â &amp;lt;cedric@...&amp;gt;:</body>
  </mail>
  <mail>
    <header>Re: jsystem parametrized and junit</header>
    <body>Hi, Thank you for your answer. I try to ask in jsystem forum - but nobody answer to me yet.... Are in latest version of junit we can use more than one constructor in parametrized test? Does fixing junit code will be a good idea? thanks Lee and jsystem working simultaneously. jsystem is 4.4. will take the parameters.  But for jsystem reflection I need an empty constructor. getOnlyConstructor(). If I use only the parametric constructor it will failed in jsystem GUI because it can not build this class. have problems with the upgraded  junit.</body>
  </mail>
  <mail>
    <header>Re: change junit code</header>
    <body>Hi, Thanks for the reply. Lee</body>
  </mail>
  <mail>
    <header>Re: Re: jsystem parametrized and junit</header>
    <body>Lee, In the current implementation of parameterized test, there's no meaning for a test object that is constructed without constructor parameters.  So you could remove the restriction, but I'm not sure whether it would allow your tests to run, or what they would do if you did.  Is JSystem open source?  I think that redirecting JSystem to use the JUnit running infrastructure would be the best win, since that would allow all JSystem users to use all JUnit classes, rather than hand-hacking individual class runners in JUnit to workaround JSystem's quirks. to me yet.... parametrized test? Does fixing junit code will be a good idea? and jsystem working simultaneously. jsystem is 4.4. will take the parameters.  But for jsystem reflection I need an empty constructor. getOnlyConstructor(). If I use only the parametric constructor it will failed in jsystem GUI because it can not build this class. have problems with the upgraded  junit.</body>
  </mail>
  <mail>
    <header>Meaningful descriptions for parameterized test cases (patch submission)</header>
    <body>I'd like to get some feedback about a patch I 've submitted to  contain more information extracted from the parameters, test name, etc.  See also issue  #135 project. The reason for this change is that in my team, we have a problem that when using parameterized tests, JUnit reports do not display the parameters of the test case or even the test class, but rather cryptic [0], [1], [2] for each run of the fixture and methodName[0], methodName[1], etc. for the actual test case runs.  In order to understand what fails, we need to lookup the actual parameters in the sources, which is annoying. The new feature works by allowing one to specify fixtureDescription and testDescription patterns to the Parameters annotation. This has the benefit that the formatting is kept close to the data and the default values are chosen to be backwards compatible, so there is no impact to the users that choose not to specify the patterns. Check Javadoc for details.</body>
  </mail>
  <mail>
    <header>Junit in a jar</header>
    <body>I'd like to be able to have a single jar file, that contains JUnit and other jar files my project needs, and be able to run my Junit tests from the cmd line. In other words do something like: Which would execute-&amp;gt; junit.textui.TestRunner MyTestClass It would need to be with junit inside the jar (not outside on the classpath somewhere). My directory structure looks something like this: dist What tweaks do I need to make to the manifest? What will the jar command look like both jarring up and executing? Thanks.</body>
  </mail>
  <mail>
    <header>Use Cases for JUnit Rules</header>
    <body>I have used JUnits @Rule a couple of times now in real projects and I think it really rocks. But few seem to know about this feature and even less seem to understand its use cases. In order to help with this I bloged about the Use Cases of JUnit Rules.  Jens Schauder</body>
  </mail>
  <mail>
    <header>Re: Use Cases for JUnit Rules</header>
    <body>Jens, Thank you for sharing your experiences. Rules have been the best surprise in years. People are using them in totally unexpected ways. Kent really rocks. But few seem to know about this feature and even less seem to understand its use cases. In order to help with this I bloged about the Use Cases of JUnit Rules.</body>
  </mail>
  <mail>
    <header>Future of JUnit &amp;amp; Hamcrest</header>
    <body>I've noticed that JUnit includes an (outdated) version of Hamcrest. Will future JUnit version continue to ship with Hamcrest? Do you have plans to update to Hamcrest 1.2 or higher? Why is there no junit-dep anymore, i.e. how are we supposed to use JUnit with Hamcrest 1.2? Cheers, Peter</body>
  </mail>
  <mail>
    <header>Re: Future of JUnit &amp;amp; Hamcrest</header>
    <body>future JUnit version continue to ship with Hamcrest? Yes, having made this decision, we'll stick to it until convinced it's doing more harm than good. Unfortunately, the last time we looked at the typing changes in Hamcrest 1.2, we found that we couldn't automatically upgrade people without changing compiling tests into non-compiling tests, and, if I remember, in a few pathological cases, passing tests into failing tests.  We guessed that of people who used the hamcrest features bundled with JUnit, there were more that would be hurt by a version change than would be helped by it, so we've stayed here. Hamcrest 1.2? junit-dep has been up on github for every release.  Whoever has been putting JUnit up on maven, I take it, hasn't been also putting up junit-dep?  I'm sorry to say that I'm very aware that a lot of people are indebted to the anonymous time-donor who'd been keeping the maven repos up-to-date until several months ago.  I've been reluctant to accept full responsibility for feeding a repository I neither use nor fully understand until some point where I was sure I could quickly respond to millions of users who got their junit jars auto-updated in a way that broke all their tests.  This might be overly cautious of me.</body>
  </mail>
  <mail>
    <header>Re: Future of JUnit &amp;amp; Hamcrest</header>
    <body>I would like to add something here, regarding the Maven repo push: - if you publish your versions of junit as SNAPSHOTS (such as 4.8.1-SNAPSHOT) (which I think you don't want), then yes, the users will get auto-updated and perhaps their tests might start failing in the morning, after such an update. - however, if you publish your versions as non-snapshot versions (such as 4.8.1), then the users will NOT be auto-updated. They have to manually select to use the new version that has just appeared in the repo, and this way if their tests start failing, they will know that they can either fix them to work with the new version of junit, or revert to the previous version. I am considering of taking up on this task with pushing junit to the public Maven repo, but I have to first learn what is exactly the process for this (perhaps signing up at Apache as contributor, or smt). Bogdan future JUnit version continue to ship with Hamcrest? with Hamcrest 1.2?</body>
  </mail>
  <mail>
    <header>Re: Re: Future of JUnit &amp;amp; Hamcrest</header>
    <body>On Wed, Aug 18, 2010 at 2:11 AM, Bogdan (which I think you don't want), then yes, the users will get auto-updated and perhaps their tests might start failing in the morning, after such an update. 4.8.1), then the users will NOT be auto-updated. They have to manually select to use the new version that has just appeared in the repo, and this way if their tests start failing, they will know that they can either fix them to work with the new version of junit, or revert to the previous version. Interesting.  I was under the impression that it was possible to simply depend on the _latest_ version of a package--indeed, that the ability to get upgraded versions automatically was one of the benefits/risks of maven.  Perhaps I've just learned something new. Maven repo, but I have to first learn what is exactly the process for this (perhaps signing up at Apache as contributor, or smt). future JUnit version continue to ship with Hamcrest? with Hamcrest 1.2?</body>
  </mail>
  <mail>
    <header>Re: Re: Future of JUnit &amp;amp; Hamcrest</header>
    <body>You won't be able to push SNAPSHOT versions of anything on the main Maven repository. That's by design (and it's a good design decision). You can push these to a special snapshot repository and then ask your users to add three lines to their pom so that Maven will query that snapshot repository. That's a good middle ground solution that I've used a few times with TestNG. As for pushing to a Maven repository, it's quite straightforward now and you can now do it yourself (you no longer need to file a ticket and have someone from Maven do the push for you). You don't need to be a member of Apache either. Once you deploy to Nexus, it takes about an hour before it becomes available on Maven central. -- Cédric -- Cédric</body>
  </mail>
  <mail>
    <header>Re: Re: Future of JUnit &amp;amp; Hamcrest</header>
    <body>It is possible, but not very common and not recommended in general, for precisely that reason. Once you have a code base of a reasonable size, it's much safer to depend on explicit version numbers and only bump manually when the need arises. -- Cédric</body>
  </mail>
  <mail>
    <header>Re: Re: Future of JUnit &amp;amp; Hamcrest</header>
    <body>I am happy to help with the Junit Maven task as well. I've been following the maven user &amp;amp; dev list for some months now and can point you to the right direction. People at Sonatype (they run the maven central repository) are also happy to help projects set up maven repository integration. Raphael (which I think you don't want), then yes, the users will get auto-updated and perhaps their tests might start failing in the morning, after such an update. 4.8.1), then the users will NOT be auto-updated. They have to manually select to use the new version that has just appeared in the repo, and this way if their tests start failing, they will know that they can either fix them to work with the new version of junit, or revert to the previous version. Maven repo, but I have to first learn what is exactly the process for this (perhaps signing up at Apache as contributor, or smt). future JUnit version continue to ship with Hamcrest? with Hamcrest 1.2?</body>
  </mail>
  <mail>
    <header>JUnit initial configuration</header>
    <body>Hello to all, I am completely new to all this so please forgive my ignorance, i have a small question i am trying to find documentation regarding the initial state configuration of a JUnit, I want to know what type of command context, properties and if it is able to query for the state of a database. If my question sounds illogical please provide me guidance, I am trying to figure out when the test environment is being initialized what all the steps in the procedure, if this is well known could you please point me to where the documentation is located i have searched and have not been able to come up with anything. Thank you for your help.</body>
  </mail>
  <mail>
    <header>Re:</header>
    <body>[This is a recording.] I'm on vacation until July 29, 2010. I'll be reading mail occasionally. Bill</body>
  </mail>
  <mail>
    <header>JUnitCore not waiting for @BeforeClass</header>
    <body>I am having a problem where the JUnit 4 runner isn't waiting for the @BeforeClass method to finish before running some of the tests contained within the class.  I am running the tests via a webservice which calls an EJB which calls JUnitCore.run(Class[])(I have also tried JUnitCore.run(Runner)).  I put a log statement at the end of the BeforeClass method and added a listener to the core to log when a test starts to figure this out.  Also, is there a way to guarentee that all the tests in a class run in the same context because we are having problems with the current approach that we are getting EJB cross-pollution between the tests. Any help is greatly appreciated. Matt</body>
  </mail>
  <mail>
    <header>Re: JUnitCore not waiting for @BeforeClass</header>
    <body>Matt, Thank you for exploring this before reporting. I was waiting to see if someone else jumped in on this because I don't have any experience with EJBs. The behavior you report is certainly not how JUnit is supposed to work. @BeforeClass methods are (I thought) guaranteed to be called before any tests in that class are called. Is it possible for you to put logging calls in the test itself as well to verify that this invariant is not holding? As far running all the tests in the same context, I'm afraid I can't help with that. Regards, Kent @BeforeClass method to finish before running some of the tests contained within the class. I am running the tests via a webservice which calls an EJB which calls JUnitCore.run(Class[])(I have also tried JUnitCore.run(Runner)). I put a log statement at the end of the BeforeClass method and added a listener to the core to log when a test starts to figure this out. Also, is there a way to guarentee that all the tests in a class run in the same context because we are having problems with the current approach that we are getting EJB cross-pollution between the tests.</body>
  </mail>
  <mail>
    <header>Re: Misunderstanding the use of the Assume Class</header>
    <body>Bruce, Sorry to be a while getting back to you.  Can you post the stack trace that you get in Eclipse? com.MyCode.InclusionFileProcessTest.testLoadLargeListbyId(InclusionFileProcessTe\ st.java:352)</body>
  </mail>
  <mail>
    <header>Re: Re: An "after all tests" event</header>
    <body>I'm not sure yet the right way to do this.  Is there a feature request on github yet? a test suite periodically from a long-running process, such as Ant. seems much more friendly to use a @AfterSuite than to wire up shutdown hooks, implement a Runnable, etc. and say "Run as... Junit Test".  This allows you to run all of your many, many classes that contain test methods without having to do a ton of bookkeeping to maintain a Suite that explicitly lists these classes.  In this situation, @AfterClass annotations or annotating the Suite class just won't work, since there is no Suite class at all. there any better way to do it?</body>
  </mail>
  <mail>
    <header>@BeforeClass vs. TestCase's constructor?</header>
    <body>Hi.  I have a JUnit 4 TestCase, let's call it MyTestCase.  I want to initialize some state once prior to running any of MyTestCase's tests.  I see my options are to give MyTestCase some static attributes and initialize them with @BeforeClass or to give MyTestCase some instance attributes and initialize them with MyTestCase's constructor. Any recommendations for one approach over the other? Thanks! Ken</body>
  </mail>
  <mail>
    <header>Re: @BeforeClass vs. TestCase's constructor?</header>
    <body>@BeforeClass runs only once ever, whereas the constructor runs once per test method.  Does that help? initialize some state once prior to running any of MyTestCase's tests.  I see my options are to give MyTestCase some static attributes and initialize them with @BeforeClass or to give MyTestCase some instance attributes and initialize them with MyTestCase's constructor.</body>
  </mail>
  <mail>
    <header>Re: @BeforeClass vs. TestCase's constructor?</header>
    <body>Hi.  I see!  Thanks for clearing that up! That being said, is there a time I should use the test case's constructor instead of @Before? Thanks again, Ken</body>
  </mail>
  <mail>
    <header>Re: Re: @BeforeClass vs. TestCase's constructor?</header>
    <body>There's a slight difference between constructors and @Before: an exception thrown from the constructor permanently kills the test, without further cleanup (there's no object to clean up), whereas an exception thrown from a @Before can still be cleaned up in an @After. instead of @Before?</body>
  </mail>
  <mail>
    <header>Re: JUnitCore not waiting for @BeforeClass</header>
    <body>I have solved the issue of it not waiting for @BeforeClass to finish, it turns out that it was, but my BeforeClass method was finishing before I wanted it to on the second time I ran the tests because I wasn't resetting a flag where it was waiting for another thread to finish.  So the only issue that I have now is running all the tests in the same context, but I have not verified this problem for myself,but was only told it's an issue by someone else on our team.  Thanks for your help Kent. Adding more logging calls helped me solve the problem that using the debugger didn't expose because the debugger slowed the main thread enough that the flag pass through was irrelevant. Matt else jumped in on this because I don't have any experience with EJBs. @BeforeClass methods are (I thought) guaranteed to be called before any tests in that class are called. Is it possible for you to put logging calls in the test itself as well to verify that this invariant is not holding? that. @BeforeClass method to finish before running some of the tests contained within the class. I am running the tests via a webservice which calls an EJB which calls JUnitCore.run(Class[])(I have also tried JUnitCore.run(Runner)). I put a log statement at the end of the BeforeClass method and added a listener to the core to log when a test starts to figure this out. Also, is there a way to guarentee that all the tests in a class run in the same context because we are having problems with the current approach that we are getting EJB cross-pollution between the tests.</body>
  </mail>
  <mail>
    <header>Ready to rank your Open Source project?</header>
    <body>Antelink launches a new metric for the Open Source Community after a first metric of how many times a library is reused in the Open Source Community.Thanks to the users feedbacks, Antelink proposes the "project reused ranking" based on how many Open Source projects reuse at least one of the artifact of the project being ranked.This global metric aims to ease comparison between projects. It is much more robust than metrics based on each release since it will be independent of release policy and the Community release adoption period. Since the metric is still in Bêta, your feedbacks are welcome as well as if you want to have access to your own project ranking or the ranking of all projects in Antelink Database. Then, are you ready to rank your Open Source project? Michael AttiaCommunity Manager @Atelink</body>
  </mail>
  <mail>
    <header>JUnit tests stop working in Eclipse</header>
    <body>Symptoms:  a project in Eclipse 3.5, with which I have been successfully using a JUnit 4 test suite all along.  This morning suddenly when I run a test class with "Run as JUnit Test", Eclipse reports "No JUnit tests found". I can still run individual test methods normally.  The problem happens when I run the test class, and it happens with all test classes in the project, except one.  When I run the entire test directory tree, JUnit executes one of the classes in the middle of the directory tree normally, then stops with no other messages.  I can run that one test class normally.  I can't find any difference between the one that runs and the dozens that don't.  Other projects continue to run JUnit normally.  Eclipse clean, refresh, and validate does not help. Closing and opening the project does not help.  Deleting the project from disk and checking it out again from my Subversion repository does not help.  When I drop back to a revision from a few days back, all works correctly.  But I want to save and test my work since then. This sounds like Eclipse metadata got corrupted, and it sounds like the corrupted metadata gets saved to Subversion.  I haven't been able to identify an event or a change in my project that led to this problem. What metadata might be involved?  If I try deleting Eclipse metadata directories, what is safe to throw away? Thanks for any suggestions.</body>
  </mail>
  <mail>
    <header>Re: JUnit tests stop working in Eclipse</header>
    <body>This has happened to me several times - usually just restarting Eclipse solves it -- Maybe she awoke to see the roommate's boyfriend swinging from the chandelier wearing a boar's head. Something which you, I, and everyone else would call "Tuesday", of course.</body>
  </mail>
  <mail>
    <header>Re: JUnit tests stop working in Eclipse</header>
    <body>----- Original Message ---- I overlooked that one when I was trying simple things. I'm still interested in why this problem develops, but I'm happy to have it solved. Thanks Colin.  -- Glenn Holliday holliday@...</body>
  </mail>
  <mail>
    <header>JUnit mailing list etiquette</header>
    <body>Once again, it's time for a little reminder of some of the finer points of JUnit mailing list etiquette. This will be posted now and then; not often enough to be spam, but often enough to keep our newer members aware of how we conduct business around here. Dear members and readers of the JUnit mailing list, Around here, we love testing. Not only do we love testing, we love to discuss any and all aspects of testing, often with enthusiasm and passion. This is good. This is the reason that this mailing list exists. On top of all this, we are very keen to help others understand this strange affliction we have; medical name "testus infectus", better known as being test infected. We love to answer questions and help those new to the joy move further down the road towards test enlightenment. In the classic spirit of hospitality, our list is your list, our test cases are your test cases. Please make yourself at home and enjoy the journey. :-) That said, there are some things that we don't love, so sit tight and listen up. We don't love people who haven't, or won't, read the JUnit Frequently Asked Questions (FAQ) document, lovingly maintained by Mike Clark or the "Smart Questions" document written and maintained by Eric S. Raymond. Here are the links, go forth and read ...  We don't love people who think that we'll do their homework assignments for them. Back when I was a lad, we didn't have the Internet and we had to do our own homework assignments without the aid of all the knowledge and information that you have available to you today. (And yes, now that you ask, I did walk uphill both ways to school through the snow.) We don't love people who are incapable of using a search engine, but are yet somehow capable of signing up onto this mailing list so that they can ask questions that ten seconds of searching would reveal the answer to. Learn how to use a search engine. Around here, Google seems quite popular. Here's a link; learn to love it and use it.  We don't love job postings. We do love having jobs (or at least, we like the pay) and we do like to look at job postings, but we like to look at them in more logical places like job websites. So, please don't be upset when a moderator deletes your carefully worded prose describing yet another testing job. We don't love thread hijacking. That's when you start a different subject by replying to a previous conversation and not even changing the subject line. We like to discuss a variety of subjects, so please feel free to be inspired to ask side-questions during ongoing conversations. Just do so by starting a fresh thread with a unique subject line. Lastly, we don't love people who whine, moan and generally sound like petulant children after they've been told that they have violated one of the "laws of the land" around here. It's a big old Internet; feel free to take your questions and/or tantrums somewhere else if you don't like the way we do things around here. Simon (One of the JUnit mailing list moderators) -- simonpeter.org | simonpeter.com | newlife-upc.org</body>
  </mail>
  <mail>
    <header>Example JUnit code</header>
    <body>I'm doing some spring cleaning on my hard drive and found a few example code projects that I used when teaching "Getting started with JUnit" sessions at previous employers/engagements. I have cleaned the first one up , added lots of extra JavaDoc, upgraded it to use JUnit 4.8.2 and have posted it on GitHub. The project may be found here:  I hope that this will be useful to some of the members of this list. Feedback would be appreciated, especially whether anyone thinks that this is helpful. And I'd be interested to know how I could have used some of the newer features of JUnit on this somewhat simple example. I'm working on cleaning up the next one and will try to post that in a few weeks. Simon (One of the JUnit mailing list moderators) -- simonpeter.org | simonpeter.com | newlife-upc.org</body>
  </mail>
  <mail>
    <header>Re: Example JUnit code</header>
    <body>Thanks, Simon. These projects would be very useful for me when teaching unit testing to undergrads. How do the other projects compare in size and complexity to BinaryDigit? Brett</body>
  </mail>
  <mail>
    <header>Re: Example JUnit code</header>
    <body>Brett, The next one is a representation of a fraction and has two fields and validation. After that I have a U.S. Social Security Number with three fields and quite a significant quantity of domain rules and validation in it. The SSN object is part of another collection called ClassicDomainObjects:  ClassicDomainObjects is still in its early phase, but it is my intention to work the objects in the same comprehensive fashion as BinaryDigit and Fraction. Hope this helps. Simon -- simonpeter.org | simonpeter.com | newlife-upc.org</body>
  </mail>
  <mail>
    <header>Re: Example JUnit code</header>
    <body>Simon, Thanks for this.  I'd like to learn more.  For example, why do you initialize three aliases to the same immutable TRUE value?  Thanks, On Sat, Jul 31, 2010 at 8:13 AM, Simon Chappell</body>
  </mail>
  <mail>
    <header>Re: Example JUnit code</header>
    <body>David, For the test, I created three objects for the equality tests. Your point about them being the same physical object is a good one, I should actually use the constructor. Good catch. Simon -- simonpeter.org | simonpeter.com | newlife-upc.org</body>
  </mail>
  <mail>
    <header>RunnerBuilder</header>
    <body>I tried extending JUnit for my own needs with several Annotations. Because i have an own Ignore Annotation which i want to use on method and class level i wrote my own RunnerBuilder. If i use suites i can integrate them easely but not when using the default runner which seems to use the AllPossibilitiesBuilder (via JUnitCore) by default with no way to override. As far i have not seen other ways to implement this behavior. Any suggestions?</body>
  </mail>
  <mail>
    <header>Re: RunnerBuilder</header>
    <body>Have you tried @RunWith and a custom runner? have an own Ignore Annotation which i want to use on method and class level i wrote my own RunnerBuilder. If i use suites i can integrate them easely but not when using the default runner which seems to use the AllPossibilitiesBuilder (via JUnitCore) by default with no way to override. As far i have not seen other ways to implement this behavior.</body>
  </mail>
  <mail>
    <header>Running Junit tests 'for dummies' tools/etc</header>
    <body>Hey all, I'm having a hard time searching for the right terms to describe what I am looking for, so posting a question here -- Environment: Java 5/6, mixed windows/linux environment (for use-case, assume all Windows desktops), Eclipse IDE for java developers, mix of junit 3.8/4.0 tests, and a LOT of already existing junit tests that include regression/database testing. Scenario: Junit tests already exist and do integration testing to the database backend, including direct SQL queries, hibernate/JPA queries, and stored procedure calls (MS SQL).  People who are non-java/non-junit are going to make changes to the database and stored procedures (for many different projects). Question: Is there an easy way for a non-java/non-junit person to, basically, one-click run unit tests to see if changes they made will cause issues to the existing regression/unit tests?  The ease-of-access and results is the key/critical part, as otherwise they will just keep asking development staff to run them and ask for feedback. Thanks for any tips/ideas/tooling! -dhartford</body>
  </mail>
  <mail>
    <header>Re: Running Junit tests 'for dummies' tools/etc</header>
    <body>Would a continuous integration server get part-way to what you want? Everyone can check their changes into a development branch, which gets merged into the trunk only if all the tests work. looking for, so posting a question here -- desktops), Eclipse IDE for java developers, mix of junit 3.8/4.0 tests, and a LOT of already existing junit tests that include regression/database testing. including direct SQL queries, hibernate/JPA queries, and stored procedure calls (MS SQL).  People who are non-java/non-junit are going to make changes to the database and stored procedures (for many different projects). run unit tests to see if changes they made will cause issues to the existing regression/unit tests?  The ease-of-access and results is the key/critical part, as otherwise they will just keep asking development staff to run them and ask for feedback.</body>
  </mail>
  <mail>
    <header>Re: Running Junit tests 'for dummies' tools/etc</header>
    <body>I think David Staff's idea with an integrations server is probably the best way to go. Other than that, I don't see the problem. Why not just run JUnit as a console application / Ant Build or alike? If you want, you can wrap it in a batch-file or something to make it even easier to start. Why is this situation not to your satisfaction? Greetings,</body>
  </mail>
  <mail>
    <header>Re: Running Junit tests 'for dummies' tools/etc</header>
    <body>Thank you for your feedback.  The current system uses a Maven2 buildsystem. The current deficiency (not in junit, but tooling) is not from a developer running the unit tests, it's from a non-code-developer (i.e. a database person who works with (M$) tools like Query Analyzers/Enterprise managers) verifying their database changes did not impact the current junits without needing a code-developer to 'babysit' watching the unit tests. The CI server would be perfect...if the sql code changes were commited to source control at the same time the TEST database instance was updated, but no source control is committed to trigger the unit tests (i.e. database changes not in source control, or in a different source control system...and generally you try not to commit code until local unit tests pass).  I will think about this one more though as a talking point to move in that direction. Until then, the challenge is still the 'non-developer' to be able to invoke running the unit tests through a GUI they (a person familiar with M$ GUI screens) can run and understand.  Command-line/console approaches are difficult to get acceptance for external users who are used to their GUI screens :-(</body>
  </mail>
  <mail>
    <header>Re: Re: Running Junit tests 'for dummies' tools/etc</header>
    <body>You could set up a manual hudson build, and encourage the non-developers to push the "build" button when ready.  You could even make it a parameterized build, so they could type in the test database name, or whatever. running the unit tests, it's from a non-code-developer (i.e. a database person who works with (M$) tools like Query Analyzers/Enterprise managers) verifying their database changes did not impact the current junits without needing a code-developer to 'babysit' watching the unit tests. source control at the same time the TEST database instance was updated, but no source control is committed to trigger the unit tests (i.e. database changes not in source control, or in a different source control system...and generally you try not to commit code until local unit tests pass).  I will think about this one more though as a talking point to move in that direction. running the unit tests through a GUI they (a person familiar with M$ GUI screens) can run and understand.  Command-line/console approaches are difficult to get acceptance for external users who are used to their GUI screens :-(</body>
  </mail>
  <mail>
    <header>Re: Re: Running Junit tests 'for dummies' tools/etc</header>
    <body>running the unit tests through a GUI they (a person familiar with M$ GUI screens) can run and understand.  Command-line/console approaches are difficult to get acceptance for external users who are used to their GUI screens :-( Why don't you hack together a simple GUI that calls the build internally? Do you need detailed error output? Or just a red/green light? A detailed output would be a little harder to get it pretty. But I suppose it wouldn't be much trouble to parse the XML-JUnit output from the junit ant task to print the error messages in pretty enough. Greetings,</body>
  </mail>
  <mail>
    <header>Re: @BeforeClass method for DBUnit Dataset creation</header>
    <body>That is a compelling story -- thanks for taking the time to tell it. We use a best practice that each test class must have its own independent test data set.  Right now we have only 8 test class and 8 test data sets.  But soon we'll have 50+ test classes and so we'll have 50+ test data sets.  Recall that Spring Test performs a rollback after every test method, so there are no dependencies between tests. In your experience, is one data set per test *class* good enough?  It's unclear from your narrative if you are suggesting one data set per test *method* or just avoiding/minimizing integration testing altogether in favor of unit testing. I have found these DAO integration tests to be extremely helpful, given all the subtleties and magic surrounding Spring and Hibernate.</body>
  </mail>
  <mail>
    <header>Re: An "after all tests" event</header>
    <body>I hope no one minds me dragging this thread up from the dead. Eclipse has a feature that allows you to right click on a folder/package and say "Run as... Junit Test".  This allows you to run all of your many, many classes that contain test methods without having to do a ton of bookkeeping to maintain a Suite that explicitly lists these classes.  In this situation, @AfterClass annotations or annotating the Suite class just won't work, since there is no Suite class at all. Currently I use VM shutdown hooks to simulate @AfterSuite behavior - is there any better way to do it?  Any hope for an AfterSuite annotation? Thank you, Adam</body>
  </mail>
  <mail>
    <header>ref: new to junit on linux</header>
    <body>Hi Mike Im able to make junit tests work now .My java PATH variable and CLASSPATH wasnt set correctly.So I set it in my .profile file. Now its running fine Im using junit 3.8.2 just to start with..I need to upgrade to junit 4 . thanks Rs</body>
  </mail>
  <mail>
    <header>Organizing Tests - Documentation is Conflicting</header>
    <body>Okay, I've been browsing documentation for a while now, and there seems to be a large conflict where approaches have changed between versions. My understanding is that to create a test, I should be doing something along these lines: @Test To add setup and take down, I just make methods that are annotated with @Before and @After. Simple enough. Now, my understanding is that this setup was developed to replace the old practice of making classes that extend TestCase and overriding methods in there to get the same functionality. The one thing that I can't seem to find is how I should be grouping tests like these. Eclipse can run this class's tests for me, and that's all good, but how should I be grouping tests if I want to run all the tests in a project at the same time? I've looked at TestSuite and tried to get it working with classes that use annotations like this, but I can't seem to figure out how it should be done.</body>
  </mail>
  <mail>
    <header>Re: Organizing Tests - Documentation is Conflicting</header>
    <body>After Googling instead of going through articles here, I found  It looks like I should be using @RunWith(Suite.class) and found in the articles section of the JUnit site. Also, this may just be me whining, but... Yahoo Groups seems like a poor place for a project like this. I had to register a Yahoo account to join the group, which wouldn't normally bother me, except that Yahoo forces me to use their mail system to get updates (apparently I have to pay to get the option to forward my mail elsewhere). Sourceforge gives you the option to get a real mailing list that requires no website account at all. Again, I may just be a lazy whiner, but I found it frustrating.</body>
  </mail>
  <mail>
    <header>Re: Re: Organizing Tests - Documentation is Conflicting</header>
    <body>I don't think so... Just go here :-  , login, add your preferred email address, verify, set as primary. -- Mark</body>
  </mail>
  <mail>
    <header>Re: Re: Organizing Tests - Documentation is Conflicting</header>
    <body>Hi Debio, There are several ways of grouping your tests, including using suites. However, the simplest way if you're using Eclipse seems to be like this: 1. Have one folder in your project called "src" for your source code. 2. Have another folder (a sibling of "src") called "junit" or "test" or something like that. Nowadays I am calling mine "junit" because I've ended up with a variety of types of test code in my projects. 3. Under the "junit" folder organize your packages the same way as you would under "src", and keep your test classes and all other related classes here (such as mock classes). 4 In Eclipse, set up a new run configuration that runs all tests in the "junit" folder. This will allow you to execute all tests in your project. If you want to run all the classes in a specific package, you can setup run configurations to do that also. As for the Yahoo Groups things - I thought that at first too. But if you go back into the group there will be a link to Edit Membership, where you can add a new email address and switch where mail is sent to for this group. Good luck! -Dennis</body>
  </mail>
  <mail>
    <header>Re: @BeforeClass method for DBUnit Dataset creation</header>
    <body>Just like PostConstruct, you also have the PreDestroy annotation. Annotating a method with this will allow you to execute code before the respective bean is taken out of the context. More generaly, you could implement (if you don't already have) a Spring bean that is responsible with setting up the test, and then cleaning up when the tests are finished. Having this bean as a Spring singleton ensures that the bean will be created only once, and the initialization + destruction methods will also be called only once. Bogdan problem.  I still need to delete the test data after all the tests have run! The only way to do this is via @AfterClass which, again, forces all my DBUnit code to be static which doesn't work. created a non-static DBUnitHelper class and used Spring to instantiate one of these and inject it into the root class of my test classes.  The DBUnitHelper class uses your approach to ensure the data is only loaded once regardless of how many times it is asked to load it.  Deleting the data from an @AfterClass static method was also simple.  So for now, I am happy. is to do what unitils does and create a custom testexecutionlistener. a great way to load the data just once.  However, you are still left with the cleanup problem.... tests that a and guide than</body>
  </mail>
  <mail>
    <header>Re: Re: An "after all tests" event</header>
    <body>say "Run as... Junit Test".  This allows you to run all of your many, many classes that contain test methods without having to do a ton of bookkeeping to maintain a Suite that explicitly lists these classes.  In this situation, @AfterClass annotations or annotating the Suite class just won't work, since there is no Suite class at all. any better way to do it? What would be better?  VM shutdown is the scope you're looking for, right?  It seems that anything JUnit would do would be a thin copy of the Runtime.getRuntime().registerShutdownHook mechanism, anyway.</body>
  </mail>
  <mail>
    <header>Quering sqlite3 database in junit framework</header>
    <body>I am using junit framework, within that i am working with selenium-rc commands. I just need to access the database so as to fetch the values and compare with the actual value. DB table format: Testcaseno Expected ---------   -------- 1           true (string) 2           1234  (string) In the  junit framework i need to access the each and every row for its values and compare with the actual string values. Example Actions to be done. 1. Connect to db. 2. Fetch the row values. 3. Compare with actual value got. 4. Close the connection. How can implement this using JUNIT FW. Can some one help me by providing some sample examples related to my requirment.</body>
  </mail>
  <mail>
    <header>Re: Re: An "after all tests" event</header>
    <body>One would want the test to fail if some condition is bad. For my part (the OP way back), the situation is that if some spawned thread dies during the run (which for some reason isn't caught by the tests themselves - which in itself obviously is strange), I want the test to fail. This catching itself is done by registering a UncaughtExceptionHandler - but I need JUnit to fail the run if any exception is actually caught by that handler. Thanks, Endre.</body>
  </mail>
  <mail>
    <header>Re: Quering sqlite3 database in junit framework</header>
    <body>Hi, ksgupta1986, Can you narrow down your question?  For example, do you already have code that can query the database?  Thanks, commands. the actual value. and compare with the actual string values. requirment.</body>
  </mail>
  <mail>
    <header>Re: Re: An "after all tests" event</header>
    <body>To go back to the OP, are the spawned threads dying during the lifetime of the initiating test, or sometime later?  Thanks, 2010/7/7 Endre Stølsvik &amp;lt;online@...&amp;gt;:</body>
  </mail>
  <mail>
    <header>Re: Quering sqlite3 database in junit framework</header>
    <body>I would investigate DBUnit... it is geared to working with databases.</body>
  </mail>
  <mail>
    <header>Put the spotlight on the Open Source project Junit</header>
    <body>Antelink launched in April a free byproduct from their R&amp;amp;D that enables the Open Source Community to check how many times a library is reused in service already focused on the TOP 100 most reused Open Source Java . In order to get the spotlight on Open Source projects Antelink will propose a weekly blog article on the most reused Open Source Project. The first project is JUnit, the famous Java automated test.  It's interesting to see that many projects seems to be stuck on the last version of the 3.X branch using the previous implementation based on class inheritance from the framework interfaces, instead of JUnit 4.x based on the Java 5 annotations. Do these figures fit with your experience using Junit? Michael, community manager @antelink</body>
  </mail>
  <mail>
    <header>Re: Re: An "after all tests" event</header>
    <body>During. Any threads and -pools are taken down either as a part of the test, or @AfterClass. As I mentioned - I install an UncaughtExceptionHandler to catch this (thus I do know whether it has happened), but I'd want an @AfterSuite or similar annotation to be able to do a generic test for this, and thus fail the run so that I don't think that the world is nice because the bar went green: Basically, if ANY test[s] are run, then run all the @AfterSuite tests in the project. Or simply have Eclipse's runner have a field where I can specify a specific test to run after ANY test [suite] is run. Endre.</body>
  </mail>
  <mail>
    <header>RE: ref: new to junit on linux</header>
    <body>Did you add the "export" statement to /usr/profile and then reboot? Neil Heller 510-862-4387 From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of rekshiv Sent: Thursday, July 01, 2010 5:10 PM To: junit@yahoogroups.com Subject: [junit] ref: new to junit on linux Hi Group, Im trying to setup Junit on linux(ubuntu 9.10).I folloed the instructions on junit.org site for donwloading and setup of junit. 1.I have extracted junit installer files to :/usr/bin/junit-3.8.2 directory 2.I have setup the classpath as follows: export CLASSPATH=$CLASSPATH:/user/bin/junit-3.8.2/junit.jar 3. Im trying to test junit by running the 'MoneyTest.java' test: rsk@rsklaptop:/usr/bin/junit-3.8.2/junit/samples/money$ java junit.textui.TestRunner MoneyTest Exception in thread "main" java.lang.NoClassDefFoundError: junit/textui/TestRunner Caused by: java.lang.ClassNotFoundException: junit.textui.TestRunner at java.net.URLClassLoader$1.run(URLClassLoader.java:202) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(URLClassLoader.java:190) at java.lang.ClassLoader.loadClass(ClassLoader.java:307) at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301) at java.lang.ClassLoader.loadClass(ClassLoader.java:248) Could not find the main class: junit.textui.TestRunner. Program will exit. Im not able to get why it says no class def found ,when I have set class path .Can anyone pls tell me where I'm going wrong? Is my classpath setting incorrect? thanks rsk</body>
  </mail>
  <mail>
    <header>Why to use JUnits?</header>
    <body>Why do we need to use JUnits? If we have to test any new class, we could create a new class, inside that class we could declare a main() method and call the function to be tested with the required arguments. Does using JUnits provide any extra feature or additional functionality over this way of testing,i.e, declaring main() methods and testing?</body>
  </mail>
  <mail>
    <header>Re: Why to use JUnits?</header>
    <body>Hi dk, Yes, it is possible to write your tests by adding a class with a main method which just calls the function you want to test. However, JUnit provides you with a lot of features which you would end up developing for yourself anyway. For example, you will have many of these "main" methods which will compare the two values (the value which you expect and the actual value from your function). JUnit provides assertEquals methods for you. JUnit also gives you the ability to organize your test cases into test classes and test suites. There are a lot of tools which also utilize JUnit. For example, JUnit is integrated into many popular Java IDEs and works with most continuous integration environments (such as CruiseControl). In other words, if you write all your tests in your own main method, you will probably find yourself, slowly "re-inventing" all the features of JUnit. As JUnit advances, you will be able to take advantage of the new features which the community provides. You also have access to the many other people who use JUnit and who have experience writing unit tests. Good luck, Dennis</body>
  </mail>
  <mail>
    <header>Re: An "after all tests" event</header>
    <body>I think addShutdownHook has two problems: 1. The scope is too far reaching for many cases.  Imagine if you were running a test suite periodically from a long-running process, such as Ant. 2. I bet many people using JUnit don't even know about shutdown hooks.  It seems much more friendly to use a @AfterSuite than to wire up shutdown hooks, implement a Runnable, etc. What do you think? Thanks, Adam say "Run as... Junit Test".  This allows you to run all of your many, many classes that contain test methods without having to do a ton of bookkeeping to maintain a Suite that explicitly lists these classes.  In this situation, @AfterClass annotations or annotating the Suite class just won't work, since there is no Suite class at all. there any better way to do it?</body>
  </mail>
  <mail>
    <header>Re: Why to use JUnits?</header>
    <body>According to Java, there is only one main method allowed per class. Traditionally, I use more then one method in a given class.  If I were limited to only testing one method at a time, then I would miss a great many methods.  Plus, I have to change the main method to call a different method. However, - if I were to make a very complex main method, that called all of my methods... - - I'd have to maintain this complex main method. - - I'd have to add logic to make sure that all my tests execute, even if the first one threw an exception - if I were to provide arguments to the main method to determine which method to test... - -  I'd still have to call Java multiple times to test all my methods. - in both cases - - I'd have to write assertion logic, that displays expected and actual values, so I can determine what was wrong. Making main method's also corrupts the actual code with methods that are not needed for execution.  Using separate test classes allows for easy removal of test code from your deployment.  If every class is wired tightly to their test code, then how do you strip it out without modifying the code base. If your argument is, why use JUnit if it is just another java program that executes java code.  I see nothing prohibiting one from writing their own test harness...  I personally would want to stay away from such an endeavor, but feel free to try and succeed.  May your time on the project be enjoyable. Big Mike</body>
  </mail>
  <mail>
    <header>Possible testing quote...</header>
    <body>I think I heard this somewhere... does anyone know the source? "Let he who codes without tests write the first bug"</body>
  </mail>
  <mail>
    <header>Re: Possible testing quote...</header>
    <body>I have no idea who wrote it, but I love it. Simon (One of the JUnit list moderators)</body>
  </mail>
  <mail>
    <header>Re: Possible testing quote...</header>
    <body>If your job will be gone before you can write a test case / anyone notices, no one cares about test case -- _______________________________________________ Surf the Web in a faster, safer and easier way: Download Opera 9 at</body>
  </mail>
  <mail>
    <header>Misunderstanding the use of the Assume Class</header>
    <body>Hi, I want to use the Assume class to dynamically turn off some tests. There are tests I want run when we run full regression but not at other times. I have implemented an assume line that I thought would ignore the test as follows The test runs and exits when it reaches the assumeNotNull as I expected. However when all my tests finish I get an error in the junit report build.xml:1100: JunitTests failed. Check "C:\DEV\junitreport Inside of the report I have the following type="org.junit.internal.AssumptionViolatedException"&amp;gt; at com.MyCode.InclusionFileProcessTest.testLoadLargeListbyId(InclusionFileProcessTe\ st.java:352) To me ignoring the test would mean just that, nothing happens. Am I doing something wrong? I have recently upgraded from junit 3.x to 4.x have I missed something in the upgrade?</body>
  </mail>
  <mail>
    <header>Re: Misunderstanding the use of the Assume Class</header>
    <body>Bruce, What you've done looks good from the JUnit side at first glance.  I wonder if the ant team is maintaining their own copy of part of the JUnit infrastructure, which handles assumptions in a different way? It might be worth asking the ant team.  Good luck, tests I want run when we run full regression but not at other times. I have implemented an assume line that I thought would ignore the test as follows However when all my tests finish I get an error in the junit report type="org.junit.internal.AssumptionViolatedException"&amp;gt;        at com.MyCode.InclusionFileProcessTest.testLoadLargeListbyId(InclusionFileProcessTe\ st.java:352) something wrong? I have recently upgraded from junit 3.x to 4.x have I missed something in the upgrade?</body>
  </mail>
  <mail>
    <header>Re: Re: @BeforeClass method for DBUnit Dataset creation</header>
    <body>You're most welcome. I err on the side of one data set to test (method), however if a handful (six?) of tests share a data set, I can live with that. As long as changes in a data set don't lead to changes in seemingly irrelevant tests, I wouldn't worry too much. Bear in mind that I have the style of making many little things, then collecting them together, instead of making big things and breaking them up when they grow too big, so this might boil down to a style issue. Have you found much duplication in your integrated tests? -- J. B. Rainsberger ::</body>
  </mail>
  <mail>
    <header>Re: Why to use JUnits?</header>
    <body>JUnit started this way. I recommend you google a paper by Kent Beck with the keywords "smalltalk testing patterns". &amp;gt; Does using JUnits provide any extra feature or additional functionality &amp;gt; over this way of testing,i.e, declaring main() methods and testing? JUnit provides framework extension points for common testing features, such as setting up objects before each test, resetting objects after each test, and executing the same test with multiple inputs and expected outputs. JUnit also works well with several IDEs which can help you monitor your progress as you write and pass tests. -- J. B. Rainsberger ::</body>
  </mail>
  <mail>
    <header>Re: Why to use JUnits?</header>
    <body>You can also easily exclude or include tests using profiles in maven, if you happen to use maven as a build tool.  You would need to write code for this if you did not use JUnit. I think of JUnit as main() with extra features.  JUnit doesn't do the testing for you, it just facilitates a more uniform test structure for ALL tests. -- Trenton D. Adams Systems Analyst/Web Software Developer Navy Penguins at your service! Athabasca University (780) 675-6195 :wq! __ ---</body>
  </mail>
  <mail>
    <header>Re: Misunderstanding the use of the Assume Class</header>
    <body>Thanks David, I don't think it's ant as I am getting the same issue with eclipse com.MyCode.InclusionFileProcessTest.testLoadLargeListbyId(InclusionFileProcessTe\ st.java:352)</body>
  </mail>
  <mail>
    <header>jUnit4 Expectation and Assertation with jMock2</header>
    <body>Hi, I am new to java and doing my first project. The testcase is as given below, but the snippet where i need help is @Test(expected = java.sql.SQLException.class) The test is running fine and giving me GREEN bar. But I would like to show meaningful message when any of the above test fails. e.g. if boolHandler.setParameter(setter, new Boolean(false)); is changed to boolHandler.setParameter(setter, new Boolean(true)); then test fails but the message is not precisely telling why it has failed as getResult is doing. The message is also given below one has to search in this long message and conclude that setString("T") has been called once and it should be setString("F") for second time call. How can I indicate a short precise message why test has failed. Thanks and regards. Raja ====================================================================== @Before @After @Test(expected = java.sql.SQLException.class) will(onConsecutiveCalls(returnValue("T"), returnValue("F"), returnValue(" ") // , returnValue('F') // getter.getString() == ' ' Throws Exception @Test(expected = java.sql.SQLException.class) /** * * @Test */ ====================================================================== java.lang.Exception: Unexpected exception, expected&amp;lt;java.sql.SQLException&amp;gt; but at org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.j\ ava:29) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:73\ ) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:46\ ) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:180) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:41) at org.junit.runners.ParentRunner$1.evaluate(ParentRunner.java:173) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31) at org.junit.runners.ParentRunner.run(ParentRunner.java:220) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReferen\ ce.java:46) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\ .java:467) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\ .java:683) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java\ :390) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.jav\ a:197) Caused by: java.lang.AssertionError: unexpected invocation: parameterSetter.setString("T") expectations: a default value default value what happened before this: at org.jmock.internal.InvocationDispatcher.dispatch(InvocationDispatcher.java:56) at org.jmock.Mockery.dispatch(Mockery.java:218) at org.jmock.Mockery.access$000(Mockery.java:43) at org.jmock.Mockery$MockObject.invoke(Mockery.java:258) at org.jmock.internal.InvocationDiverter.invoke(InvocationDiverter.java:27) at org.jmock.internal.FakeObjectMethods.invoke(FakeObjectMethods.java:38) at org.jmock.lib.JavaReflectionImposteriser$1.invoke(JavaReflectionImposteriser.jav\ a:33) at $Proxy7.setString(Unknown Source) at com.matrimony.utils.ibatis.boolTypeHandlerTF.setParameter(boolTypeHandlerTF.java\ :45) at com.matrimony.utils.ibatis.testBoolTypeHandler.testSetParameter(testBoolTypeHand\ ler.java:89) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java\ :44) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:\ 15) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:4\ 1) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20\ ) at org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.j\ ava:22) ... 16 more</body>
  </mail>
  <mail>
    <header>Re: Suggestion for new matchers</header>
    <body>There are property matchers in Hamcrest. Is that what you wanted? S. matchers here: Steve Freeman  Winner of the Agile Alliance Gordon Pask award 2006</body>
  </mail>
  <mail>
    <header>Re: jUnit4 Expectation and Assertation with jMock2</header>
    <body>This seems to be an unfortunate combination of the two libraries. In your sql exception test, the first stack trace is from the JUnit expected annotation. The second is from the jMock expectations. We tried to strike a balance in jMock between being providing enough and too much information, but it's hard to be general. One trick, though, is that I think that some of the IDE's can be configured to hide certain packages in stack traces. S. long message and conclude that setString("T") has been ") // , returnValue('F') org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.j\ ava:29) org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28) org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31) org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:73\ ) org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:46\ ) org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28) org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31) org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReferen\ ce.java:46) org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\ .java:467) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\ .java:683) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java\ :390) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.jav\ a:197) parameterSetter.setString("T") returns a default value default value org.jmock.internal.InvocationDispatcher.dispatch(InvocationDispatcher.java:56) org.jmock.lib.JavaReflectionImposteriser$1.invoke(JavaReflectionImposteriser.jav\ a:33) com.matrimony.utils.ibatis.boolTypeHandlerTF.setParameter(boolTypeHandlerTF.java\ :45) com.matrimony.utils.ibatis.testBoolTypeHandler.testSetParameter(testBoolTypeHand\ ler.java:89) sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:25) org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java\ :44) org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:\ 15) org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:4\ 1) org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20\ ) org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.j\ ava:22) Steve Freeman  Winner of the Agile Alliance Gordon Pask award 2006</body>
  </mail>
  <mail>
    <header>Re: jUnit4 Expectation and Assertation with jMock2</header>
    <body>Thanks Steve, exception test, the first stack trace is from the JUnit expected annotation. The second is from the jMock expectations. We tried to strike a balance in jMock between being providing enough and too much information, but it's hard to be general. One trick, though, is that I think that some of the IDE's can be configured to hide certain packages in stack traces. is it mean, in short that, We have to live with this ? Thanks and regards Raja</body>
  </mail>
  <mail>
    <header>Re: Suggestion for new matchers</header>
    <body>Sorry. My bad. I've missed additional matchers library for JUnit. Given the currently available features of Java, I guess less verbose tests are impossible. I just hope when (and if) Java 7 comes out, and if language level support for collections feature is included, less verbose and more attractive syntax could be used for this: assertThat( store.items, hasItems ( Maybe something like: assertThat( store.items, hasItems ( Michael</body>
  </mail>
  <mail>
    <header>Newcommers Problem with junit 4, jmock 2 and hamcrest.</header>
    <body>Hello, I am new to java and unit testing too. The first project I am working demands acquiring knowledge about junit4, jmock2 and consequently hamcrest. But the documentation I am finding very hard to grasp and every now and then I have to refer to this list. Can somebody suggest me a good book on these which will explain expectations basics and meaning of each is explained elaborately. We are referring  Growing Object-Oriented Software, Guided by Tests by Steve Freeman and Nat Pryce but even after couple of weeks we are not finding comfortable and confident about writing expectations and mock objects parameters matchers etc. etc. Please suggest us good reading/study material, tutorial examples etc.etc. which will make us comfortable and confident. Thanks and best regards Raja</body>
  </mail>
  <mail>
    <header>Re: Large, hierarchical, randomized test suites: how to not	run out of memory?</header>
    <body>Thanks again for your hints. I have a few problems with your suggestion. First of all, your code is slightly broken (I guess you were typing it off the top of your head). MethodRule.apply() must return a Statement, not void. A correct implementation seems to be the following (at least, that's what I came up with): @Rule @Override public Statement apply(final Statement base, FrameworkMethod method, Object @Override for (int i = 0; i &amp;lt; 1000; i++) Another problem I have is that it turns out my @Before method is executed only once before running all 1000 tests, instead of once before each test. Finally, this approach flattens the test hierarchy. Instead of being able to consult the result of each run of the test method, if any of the runs fails, the whole test suite is interrupted, and the following tests are not run at all. I would like to be able to see the frequency of failure of the test method, and the various ways in which it fails.</body>
  </mail>
  <mail>
    <header>Re: Newcommers Problem with junit 4, jmock 2 and hamcrest.</header>
    <body>If you're new, I wouldn't start with our book, it's intended for people with some experience. Off the top of my head, I still recommend Dave Astels' book for getting the concepts (I'm sure there are others). Then Kent Beck's. S. Steve Freeman  Winner of the Agile Alliance Gordon Pask award 2006</body>
  </mail>
  <mail>
    <header>Re: Re: jUnit4 Expectation and Assertation with jMock2</header>
    <body>Like I say, I think you can fix some of this with your IDE. It's very hard to be both expressive and general. For example, should the expected() option allow AssertionError's through or report them as a failure? It depends on what you're testing. S. exception test, the first stack trace is from the JUnit expected annotation. The second is from the jMock expectations. We tried to strike a balance in jMock between being providing enough and too much information, but it's hard to be general. One trick, though, is that I think that some of the IDE's can be configured to hide certain packages in stack traces.</body>
  </mail>
  <mail>
    <header>Re: Re: Suggestion for new matchers</header>
    <body>maybe we could come up with a better syntax, but I've been so badly burned by java generics this year I don't want to go there ever again. In the meantime, there is another matcher that compares all the bean properties of two objects. S. impossible. I just hope when (and if) Java 7 comes out, and if language level support for collections feature is included, less verbose and more attractive syntax could be used for this: Steve Freeman  Winner of the Agile Alliance Gordon Pask award 2006</body>
  </mail>
  <mail>
    <header>Automatically running unit tests after compilation in eclipse</header>
    <body>Hi there, I am trying to setup eclipse to launch one particular test suite every time after I compile. I am using eclipse 3.3.2. Is this possible? I have created junit launch configuration which does the work required. Only problem I have is how do I configure eclipse to execute this configuration automatically. Eclipse allows you to import some launch configuration as external builders. However it looks like junit launchers are filtered from that list. Thanks for any help/suggestions. - Niranjan</body>
  </mail>
  <mail>
    <header>Re: Automatically running unit tests after compilation in eclipse</header>
    <body>As far as I can remember you can start and ant task after compilation. So maybe you can call your tests within an ant task ant trigger that task after compilation. Eclipse allows launching ant builds after compilation Yours. -- Ä°brahim DEMÄ°R  twt: @ibrahimdemir ff:    @ibrahimdemir</body>
  </mail>
  <mail>
    <header>Re: Newcommers Problem with junit 4, jmock 2 and hamcrest.</header>
    <body>Thanks Steve, some experience. concepts (I'm sure there are others). Then Kent Beck's. Well I have to search our lib for both books otherwise raise a request Fine, question of couple of week if not in lib. Till then this list is source of help. Regards Raja</body>
  </mail>
  <mail>
    <header>Re: Large, hierarchical, randomized test suites: how to not	run out of memory?</header>
    <body>I've thought twice about your initial suggestion to use Theories and DataPoints. Conceptually, this is the functionality that I am looking for. But I don't want to have to instantiate all DataPoints at once. So, I figured out a simple hack: the DataPoints should be fake data points. The only thing that matters is their number. Then, the real (expensive) data points should be instantiated one by one in the @Before method. This looks like the following: @RunWith(Theories.class) @DataPoints @Before // Instantiate the random data points @After // Free resources @Theory // Run the test However, there are still 3 issues with this approach: 1) If TestClass contains multiple Theories, they are all run the same number of times (1000). I don't see how one could easily enforce a specific number of runs for each Theory. 2) JUnit still reports the method testMethod as one entity, instead of breaking it down into 1000 runs, and terminates after the very first failed run. I'd like to have a more detailed report. 3) I am struggling with what appears to be a bug in JUnit when testMethod takes in other (real) data points. Then, regardless of their types, JUnit attempts to feed them with elements of the "runs" array of DataPoints. For instance: @RunWith(Theories.class) @DataPoints @DataPoint @Theory This test fails because JUnit attempts to substitute "used" with runs[0]: org.junit.experimental.theories.internal.ParameterizedAssertionError: testMethod(runs[0], runs[0]) Why is JUnit doing this? I'm seeing this with both JUnit 4.5 and 4.8.1. Thanks again for your help</body>
  </mail>
  <mail>
    <header>Re: Automatically running unit tests after compilation in eclipse</header>
    <body>In the project settings, there's one for 'run' where you can choose between 'run the right thing for the file that's open' and 'run the same damned thing every time regardless of what's open'. Change that to the latter, then manually run your junit one time. Thereafter, run will just do the right thing. Ping me mike.hill AT anarchycreek.com if you need more details. Hill</body>
  </mail>
  <mail>
    <header>Need Help in Writing Test Case</header>
    <body>Hello, I am new to unit testing and using junit4, jmock2 with STS 2.3.2. I am trying to write a testcase for a concrete class. The skeleton code is as below. What I want to do is mockSetter's method will a set a value via paramter that value i want to save to some variable or to disk file and would like to refer/read from file when mockSetter's method is called and return. I would like to compare original value given to context object's set value method with returned value from context objects's get value method. These two method' are invoking mockSetter and mockgetter methods after some processing the test tests this processing's reversability. How should I design the testcase. Thanks and best regards Raja @Before @After @Test(expected = java.sql.SQLException.class) /* */</body>
  </mail>
  <mail>
    <header>Re: Need Help in Writing Test Case</header>
    <body>Hi, Raja. Welcome to unit testing!  There are some frequent jMock users on this list, and I hope one of them chimes in, but you may also want to look for a jMock-specific mailing list, if you don't hear back.  Good luck,</body>
  </mail>
  <mail>
    <header>Re: Automatically running unit tests after compilation in eclipse</header>
    <body>Niranjan, This has been implemented several times for old versions of Eclipse. I believe that Infinitest is the only currently-maintained implementation. after I compile. I am using eclipse 3.3.2. work required. Only problem I have is how do I configure eclipse to execute this configuration automatically. However it looks like junit launchers are filtered from that list.</body>
  </mail>
  <mail>
    <header>Re: Large, hierarchical, randomized test suites: how to not run out of memory?</header>
    <body>DataPoints. Conceptually, this is the functionality that I am looking for. But I don't want to have to instantiate all DataPoints at once. So, I figured out a simple hack: the DataPoints should be fake data points. The only thing that matters is their number. Then, the real (expensive) data points should be instantiated one by one in the @Before method. This looks like the following: of times (1000). I don't see how one could easily enforce a specific number of runs for each Theory. You could add it as an annotation on the method, and read it in the rule. breaking it down into 1000 runs, and terminates after the very first failed run. I'd like to have a more detailed report.  about this very point.  A couple more votes would move it to the top. takes in other (real) data points. Then, regardless of their types, JUnit attempts to feed them with elements of the "runs" array of DataPoints. For instance: testMethod(runs[0], runs[0]) Definitely a bug.  Have you filed it at github yet?</body>
  </mail>
  <mail>
    <header>Re: Large, hierarchical, randomized test suites: how to not	run out of memory?</header>
    <body>In the meantime, I have been experimenting with TestNG, and I am sorry to report that it does a much better job than JUnit at solving my problem. Using TestNG's DataProvider functionality, I was able to quickly get everything I need (and that JUnit hasn't been able to deliver yet): 1) A DataProvider returns an Object[][] that gives, for each run of the test method, the sequence of input parameters for that method. So, to run a parameterless test method 1000 times, you just need to write: @DataProvider (name = "dataProvider") @Test (dataProvider = "dataProvider") // Run the test No need to use the same hack as with JUnit that requires test methods to take in an unused int, like I previously suggested. 2) Even better: if I wanted to pass the data points as inputs to the test method instead of creating them inside the @Before method, TestNG provides a way to create these data points one by one instead of all at once, hereby saving instead of an Object[][]. 3) TestNG reports the results of tests on a data point basis instead of on a method basis, and does not terminate the test method as soon as it fails on a particular data point. This functionality is not available (yet) in JUnit. 4) If there are multiple test methods, It is straightforward to specify the desired number of runs for each method: @DataProvider (name = "dataProvider") if (method.getName().equals("testMethodRequiringEvenMoreRuns"))) 5) Needless to say, TestNG works without bugs when the test method does take in parameters (contrary to JUnit). But you have to manually build the corresponding Object[][] in the DataProvider, while JUnit attempts to automate that for you (and currently fails to do so due to a bug). The only problem I have with TestNG at this point is that the Eclipse plugin is painfully slow and a bit buggy. But this is a problem with the plugin itself, not with TestNG. So, until JUnit meets my needs, I am going to go with TestNG. Thanks again for your support</body>
  </mail>
  <mail>
    <header>Survey: Are you satisfied with your development experiences?</header>
    <body>Hello JUnit users and developers, I sincerely invite you to an online survey:  by University of Munich. (It takes about 10 min.) It focuses on developers´ motivation of participating in open source project and turnover of developers. You could also consider it as a platform  to share with us your satisfaction or dissatisfaction of your developing experience. NOTE: Although you are a member of project JUnit, it does not necessarily mean that in this survey you choose JUnit as the topic. If you have been involved in more than 1 open source projects, please recollect the project you have already DISCONTINUED working on, otherwise, please recollect the project you work on with lowest frequency. If you are interested in the result of the research, just leave your Email at the last page. We will share it with you by then! Thank you for the participation! Best Regards, tsing</body>
  </mail>
  <mail>
    <header>Re: Large, hierarchical, randomized test suites: how to not run out of memory?</header>
    <body>OK... This is really ridiculous, but it turns out there is a super-simple way to efficiently get the functionality I need using JUnit 3.8. It's called junit.extensions.RepeatedTest. All I need to do is replace with and I'm done. Thanks for your help anyway!</body>
  </mail>
  <mail>
    <header>@BeforeClass method for DBUnit Dataset creation</header>
    <body>My DAO integration tests are taking a long time to run.  I am using Spring Test which automatically does a transaction rollback after each test method. However, I am also using DBUnit to load the exact same dataset before each test method via the @BeforeTransaction annotation. It has occured to me that I could save a lot of time if I load the DBUnit test data once per test class instead of once per test method. I've not used the @BeforeClass and @AfterClass methods before, but apparently they require the annotated method to be static and this is interfering with my normal use of Spring dependency injection that provides an application context, data source, and other things I need to load the correct data set. Anyone experience this before?  What's a good way to address this problem?</body>
  </mail>
  <mail>
    <header>Re: @BeforeClass method for DBUnit Dataset creation</header>
    <body>I would advise against that unless you were following the following guide lines.... - No test method (or called method) manipulates the data base. - The order of the test methods do not cause conflicts with each other with required data being there. Some things I'd try before doing the @BeforeClass - Only populate the data you need for a given set of tests.  (Don't populate the _whole_ database.) - Which of the DBUnit population features are you using... I think there is one that will revert to a known state, without the delete and insert.  This may save some time. - Try to use a non-commitable transaction for testing.  After all, one shouldn't need to test the commit functionality.  If that breaks more than just you will have problems. Hope I helped, Big Mike</body>
  </mail>
  <mail>
    <header>Re: @BeforeClass method for DBUnit Dataset creation</header>
    <body>Thanks for the help.  In my case, Spring Test does an automatic transaction rollback after every test method, so there are no dependencies between tests -- so thats not a problem.  Because of the rollback, it is also the case that they order of the test runs also doesn't matter.  The database is reset to a "known" state after each test method by the transactional rollback. I'd just like to load the data once rather than 50 times.  But the @BeforeClass requirement to be a static method makes it impossible to use.   Is there any trigger that can run after a class is initialized by Spring and before any test method is executed?</body>
  </mail>
  <mail>
    <header>Re: Re: @BeforeClass method for DBUnit Dataset creation</header>
    <body>The hack of a initalizationOccurred boolean is always an option. In other words... use a static field that is initially set to false.  Then when you come to your setup method, only do the update if the field is false.  Just remember to set the field to true once the update occurs.  This way, no matter which test runs first or even if a sub set of tests run, then the reset only occurs initially. There may be a better way to do this, but I like to fall back on this recipe. Big Mike</body>
  </mail>
  <mail>
    <header>Re: @BeforeClass method for DBUnit Dataset creation</header>
    <body>Let me tell you a story. In 2001 I worked on my first XP project at Toyota Canada in Toronto. We ran into exactly the same problem you describe here: we had several dozen tests, most of which inserted data in setUp() and rolled transactions back in tearDown(). Back then, of course, computers ran more slowly, so we were running at around 5-10 tests per second when we were lucky. We could see how when we added another 300 tests our test suite would take several minutes to run, and that just wasn't going to work. We decided to create a single test data set for the entire test suite, then used the tools of the time--DBUnit, in fact--to insert the data set at the start of the test run. For a few weeks, it worked great. Our test suite execution time dropped from minutes to tens of seconds which, back then, we could live with. Then something annoying happened. We added a new feature, which required putting data in a new table, which itself required adding a row to an old table to set up a foreign key relationship. We got the six new tests to run, but when we ran the entire suite just before checkin, 3 tests failed. We discovered that by adding a row to the parent table, we changed the expected result for three of our tests: they used to expect 6 rows, and now they needed to expect 7. We considered two options: split the test data into two sets, or change the expected results in the tests. We figured that the first option would slowly lead us back to loading test data for each test, so we chose the second option and changed the expected results. A couple of weeks later, it happened again. We added a feature that required putting data in a new table, which itself required adding rows to a few different existing tables to set up foreign key relationships. We got the eight new tests run, but when we ran the whole suite, 10 tests failed. We sighed, we checked what happened, and we updated the expected results on the old tests. A week later, it happened again. This time we had to change 26 tests. It took a day to do it accurately, because each "fix" required running an 8-minute test suite, and 26 times 8 is already over three hours. A week later, it happened again. This time we had to change 61 tests. It took three days. We saw where this was going. We split the test data back into sensible datasets, with each test loading the data it needed. Execution time increased, but maintenance time went to almost zero. We also figured out how to test more of the system without touching the database at all. Nowadays, when I work on such a project, only about 20-50 tests touch the database, and the rest run in memory. At today's machine speeds, I usually get 250-500 tests per second. In the ten seconds it takes for my mind to wander, I can run 15,000-30,000 tests. I can build a pretty good system for 15,000 tests. -- J. B. Rainsberger ::</body>
  </mail>
  <mail>
    <header>ref: new to junit on linux</header>
    <body>Hi Group, Im trying to setup Junit on linux(ubuntu 9.10).I folloed the instructions on junit.org site for donwloading and setup of junit. 1.I have extracted junit installer files to :/usr/bin/junit-3.8.2 directory 2.I have setup the classpath as follows: export CLASSPATH=$CLASSPATH:/user/bin/junit-3.8.2/junit.jar 3. Im trying to test junit by running the 'MoneyTest.java' test: rsk@rsklaptop:/usr/bin/junit-3.8.2/junit/samples/money$ java junit.textui.TestRunner MoneyTest Exception in thread "main" java.lang.NoClassDefFoundError: junit/textui/TestRunner Caused by: java.lang.ClassNotFoundException: junit.textui.TestRunner at java.net.URLClassLoader$1.run(URLClassLoader.java:202) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(URLClassLoader.java:190) at java.lang.ClassLoader.loadClass(ClassLoader.java:307) at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301) at java.lang.ClassLoader.loadClass(ClassLoader.java:248) Could not find the main class: junit.textui.TestRunner.  Program will exit. Im not able to get why it says no class def found ,when I have set class path .Can anyone pls tell me where I'm going wrong? Is my classpath setting incorrect? thanks rsk</body>
  </mail>
  <mail>
    <header>Re: ref: new to junit on linux</header>
    <body>Somethings you might want to try - echo your CLASSPATH after exporting it.  Just to be sure that you have the setting you think you have. - Try setting the classpath explicitly using the -cp flag. Let us know if you got things to work. Big Mike P.S. Any reason why your not starting with JUnit 4</body>
  </mail>
  <mail>
    <header>Re: @BeforeClass method for DBUnit Dataset creation</header>
    <body>I am totally good with hacks!  However, this one still leaves me with a problem. I still need to delete the test data after all the tests have run!  The only way to do this is via @AfterClass which, again, forces all my DBUnit code to be static which doesn't work. In the meantime, I implemented another approach that has seemed to work.   I created a non-static DBUnitHelper class and used Spring to instantiate one of these and inject it into the root class of my test classes.  The DBUnitHelper class uses your approach to ensure the data is only loaded once regardless of how many times it is asked to load it.  Deleting the data from an @AfterClass static method was also simple.  So for now, I am happy. For the record, an alternative (and better) approach I learned about elsewhere is to do what unitils does and create a custom testexecutionlistener. Also for the record, if you annotate a method with @PostConstruct -- it's also a great way to load the data just once.  However, you are still left with the cleanup problem.... Anyway hope all this helps somebody else!</body>
  </mail>
  <mail>
    <header>How to add Parameterized Class in TestSuite in Junit</header>
    <body>Hi, I want to add Parametrized Class into TestSuite. How can I do that? I did the following: FibonacciTest is a parameterized Class: @RunWith(Parameterized.class) But when I run the Suite file, it creates only one case with fInput and fExpected value assigned as Zero. But I want all the cases for febonicci to run. How can I do that. -- View this message in context:  40497p28740497.html Sent from the JUnit - User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: How to add Parameterized Class in TestSuite in Junit</header>
    <body>This looks like a promising Google hit..   40497p28740497.html</body>
  </mail>
  <mail>
    <header>Re: How to add Parameterized Class in TestSuite in Junit</header>
    <body>Thanks for the reply Mike... Yeah I have already added class file in a test suite like the way mentioned in junit example on the link provided. But my requirement is to add parameterized class and some cases from another Class into Test Suite file. Is it possible in jUnit 4. The following is not working: Can we add specific tests instead of class in @Suite.SuiteClasses: Regards  40497p28740497.html -- View this message in context:  40497p28750712.html Sent from the JUnit - User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: How to add Parameterized Class in TestSuite in Junit</header>
    <body>I might look at this when I get home, but I think a sibling annotation to @Suite.SuiteClasses is lacking. I'd like to see an annotation called @Suite.SuiteTests... where you can add just a specific test. In fact I'll add the issue on GitHub, please vote for it. If I have some free time I might submit a patch. Big Mike  40497p28740497.html  40497p28750712.html</body>
  </mail>
  <mail>
    <header>How can we stop executing a test before execution in jUnit....</header>
    <body>Hi, I have a test script file with multiple test cases (marked with @test annotation). Now I want that I can control the execution of this test case at runtime. Like I should get a notification before each test run with testcase name which is going to run. After that I read from excel file whether that case has to be run or not. If is is marked for execution then let jUnit proceed in default way. If not, then cancel its execution at runtime. Can I do this jUnit4? i.e. provide me notification and allow me to cancel the test case execution. One more thing is that I want to execute these tests through Ant. Regards -- View this message in context:  ....-tp28756253p28756253.html Sent from the JUnit - User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>RE: How can we stop executing a test before execution in jUnit....</header>
    <body>This is the type of problem that the Rules package is meant to address. Essentially you would have an object that extends the MethodRule base class, and add that to your test case as a class field marked with the @Rule annotation.  Example: The org.junit.rules.TestWatchman would be a good base to subclass for your purposes.  Do keep in mind that Java will create a new instance of your class for each test run.  Expensive tasks like reading and parsing an Excel spreadsheet will add up quite quickly. Executing the tests through Ant is a no brainer.  Consult Ant related resources for examples. From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of _harry_ Sent: Wednesday, June 02, 2010 11:38 AM To: junit@yahoogroups.com Subject: [junit] How can we stop executing a test before execution in jUnit.... Hi, I have a test script file with multiple test cases (marked with @test annotation). Now I want that I can control the execution of this test case at runtime. Like I should get a notification before each test run with testcase name which is going to run. After that I read from excel file whether that case has to be run or not. If is is marked for execution then let jUnit proceed in default way. If not, then cancel its execution at runtime. Can I do this jUnit4? i.e. provide me notification and allow me to cancel the test case execution. One more thing is that I want to execute these tests through Ant. Regards -- View this message in context:  in-jUnit....-tp28756253p28756253.html Sent from the JUnit - User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>RE: How can we stop executing a test before execution in jUnit....</header>
    <body>Thanks for the reply Berin.... I will be using @rule annotation and will let you know, how it worked.... I understand that reading/parsing Excel will be expensive... I will do that by reading it into a Hashmap... Thanks and Regards -- View this message in context:  ....-tp28756253p28763545.html Sent from the JUnit - User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: How to add Parameterized Class in TestSuite in Junit</header>
    <body>I dont know how to vote on GitHub. Can you send me the link where and How I have to vote.... Regards  40497p28740497.html  40497p28750712.html -- View this message in context:  40497p28763523.html Sent from the JUnit - User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>When running a test suite a private static final field Object is null. Why?</header>
    <body>Hi, I am running an instrumentation test suite with a field like this: And at one point in the test, the LOCK variable becomes null. How is that even possible? Thanks!</body>
  </mail>
  <mail>
    <header>RE: How can we stop executing a test before execution in jUnit....</header>
    <body>Hi Berin, I am able to apply rule using TestWatchman, but do not know how to stop the execution of the test. @Rule @Override System.out.println("Before execution of Test method: " + /************************************************** *  TODO Add code to stop execution of current test. **************************************************/ @Override System.out.println("After execution of Test method: " + @Test Can you let me know how can we stop the current test in starting method of TestWatchman? Regards -- View this message in context:  ....-tp28756253p28763882.html Sent from the JUnit - User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Additional classes in test package cause errors</header>
    <body>Hi, enable the testing of another class.  To support the stub I've written a class (implementing Answer for those familiar with Mockito) as a standalone class rather than as an anonymous inner class, for readability. should have exactly one public zero-argument constructor" and "No runnable methods". be.  What am I doing wrong?  How do I keep JUnit from objecting to my test support classes? Thanks, Paul</body>
  </mail>
  <mail>
    <header>Re: When running a test suite a private static final field Object is null. Why?</header>
    <body>If you have static code, the execution of the static code flows from the top of the file to the bottom.  It could be possible for this code to execute above the setting of the LOCK variable.  At which time the variable will be null.</body>
  </mail>
  <mail>
    <header>Implement Serializable on test results</header>
    <body>Hi, I've been a long time user of JUnit, and I'm currently looking at a setup where I need to run JUnit over RMI.  I've been able to setup a test runner, and get this going, but to make it work really great, I'd love to have the Description, Failure and Result objects  implement serializable. I've created an issue for this on GitHub ( implements the functionality.  I'm wondering if this would ever be able to make it into JUnit, or if I need to do something different. Any feedback would be greatly appreciated. Rob</body>
  </mail>
  <mail>
    <header>Theories: Annotating Collections with @DataPoints, as well as arrays</header>
    <body>When using the experimental "Theories" feature in the current version of JUnit, you can annotate any array with "@DataPoints" so that all the elements of that array will be fed into methods annotated with "@Theory", provided that the types match. But you cannot do the same for a List, or any other kind of Collection, as I described at  nstead-of-arrays-as-datapointsand also filed as an issue at  I've managed to hack together a solution, which you can see in my fork of the project at comments or suggestions you have to improve it. To see how it works, run the test case org.junit.tests.experimental.theories.runner.DataPointsTest I hope this can eventually become part of the official JUnit project. Thanks!</body>
  </mail>
  <mail>
    <header>Problem with Method which is expected to throw message</header>
    <body>Hello, I am using junit 4 for first time and new to java too. I am trying to do unit testing a class which has a method which is suppose to throw a exception. I have instantiated the class and tried method with valid values and test passed but I will also like to test invalid data and it should raise exception then test should pass. the testCase is as below. If i comment out try..catch block I am getting compilation errors. I am using Spring toolsuit 2.3.2 to run the test and Junit 4 Thanks and regards Raja. @Before will(onConsecutiveCalls(returnValue("T"), returnValue("F"), returnValue(" ") // , returnValue('F') @After @Test(expected = java.sql.SQLException.class) /** * @Test * * @Test */</body>
  </mail>
  <mail>
    <header>Re: Problem with Method which is expected to throw message</header>
    <body>You need to change the signature of your public void testGetResult() to include throws Exception, like so: ") // , returnValue('F')</body>
  </mail>
  <mail>
    <header>Re: Problem with Method which is expected to throw message</header>
    <body>Thanks For help, include throws Exception, like so: I have changed as Follows @Test(expected = java.sql.SQLException.class) but the test ends with following fault and bar is still RED. with comment on last 'result = ' statement the bar turns GREEN I expect that when exception is not raised the test should fail. java.sql.SQLException: Could not convert '' to a boolean value. Valid arguments are 'T' and 'F'. at com.matrimony.utils.ibatis.boolTypeHandlerTF.yesNoToBoolean(boolTypeHandlerTF.ja\ va:81) at com.matrimony.utils.ibatis.boolTypeHandlerTF.getResult(boolTypeHandlerTF.java:34\ ) at com.matrimony.utils.ibatis.testBoolTypeHandler.testGetResult(testBoolTypeHandler\ .java:65) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:25) at java.lang.reflect.Method.invoke(Method.java:597) at junit.framework.TestCase.runTest(TestCase.java:168) at org.jmock.integration.junit3.VerifyingTestCase.runBare(VerifyingTestCase.java:38\ ) at junit.framework.TestResult$1.protect(TestResult.java:110) at junit.framework.TestResult.runProtected(TestResult.java:128) at junit.framework.TestResult.run(TestResult.java:113) at junit.framework.TestCase.run(TestCase.java:124) at junit.framework.TestSuite.runTest(TestSuite.java:232) at junit.framework.TestSuite.run(TestSuite.java:227) at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:79) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReferen\ ce.java:46) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\ .java:467) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\ .java:683) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java\ :390) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.jav\ a:197)</body>
  </mail>
  <mail>
    <header>Large, hierarchical, randomized test suites: how to not run out of memory?</header>
    <body>Hello, I have randomized JUnit 3 tests that look like the following: Then I organize my test suites into a LARGE hierarchy (of depth possibly larger than 8; only 3 in this simple example): In fact, it ends up being so large (over 150,000 tests) that JUnit cannot cope with it and runs out of memory (even though you will notice I have taken care of systematically nulling everything in tearDown()). How can I get this done without running out of memory? I have looked a bit at JUnit 4's new paradigm using annotations, but haven't been able to figure out how to set up such tests. Thanks in advance for your suggestions.</body>
  </mail>
  <mail>
    <header>Re: Large, hierarchical, randomized test suites: how to not run out of memory?</header>
    <body>Have you looked at theory support in JUnit 4?  You could have a @DataPoints method that returned 1000 random datapoints, and would only be called right before you needed it. larger than 8; only 3 in this simple example): with it and runs out of memory (even though you will notice I have taken care of systematically nulling everything in tearDown()). JUnit 4's new paradigm using annotations, but haven't been able to figure out how to set up such tests.</body>
  </mail>
  <mail>
    <header>Re: Problem with Method which is expected to throw message</header>
    <body>What compilation errors do you get if you uncomment those lines? returnValue("F"), returnValue(" ")    // , returnValue('F')</body>
  </mail>
  <mail>
    <header>Re: Additional classes in test package cause errors</header>
    <body>Paul, JUnit only runs the classes it's asked to run.  How are you running JUnit? enable the testing of another class.  To support the stub I've written a class (implementing Answer for those familiar with Mockito) as a standalone class rather than as an anonymous inner class, for readability. class should have exactly one public zero-argument constructor" and "No runnable methods". be.  What am I doing wrong?  How do I keep JUnit from objecting to my test support classes?</body>
  </mail>
  <mail>
    <header>Re: How can we stop executing a test before execution in jUnit....</header>
    <body>Harry, Try something like this: +  ....-tp28756253p28763882.html</body>
  </mail>
  <mail>
    <header>Re: Large, hierarchical, randomized test suites: how to not	run out of memory?</header>
    <body>Op 10-jun-2010, om 15:59 heeft David Saff het volgende geschreven: Thank you for your input. I should definitely look into JUnit 4 Theories, a feature that I didn't know existed. However, even before I do so  and pardon me if I misunderstood your suggestion  it looks like your approach would generate all 1,000 random DataPoints at once. This would be even worse than my current approach, since the DataPoints we are talking about are large, expensive objects. Currently, each random input is nulled in tearDown() before the next one is instantiated in setUp(). Can I do that with JUnit 4 Theories? // create one random DataPoint // run the test on that DataPoint // GC the DataPoint Thanks again for your suggestions.</body>
  </mail>
  <mail>
    <header>Re: Large, hierarchical, randomized test suites: how to not run out of memory?</header>
    <body>feature that I didn't know existed. suggestion  it looks like your approach would generate all 1,000 random DataPoints at once. This would be even worse than my current approach, since the DataPoints we are talking about are large, expensive objects. Currently, each random input is nulled in tearDown() before the next one is instantiated in setUp(). Can I do that with JUnit 4 Theories? Yes, it would generate all 1,000 DataPoints at once right before they're needed, but it wouldn't create a bunch of test objects the way JUnit 3 does.  I wasn't clear on your trade-offs: you'd like to avoid both blow-ups. If it were possible to push the randomization into the method execution itself, (or the before method), would it be sufficient to just repeat the method 1000 times?  I know a way to do that.</body>
  </mail>
  <mail>
    <header>Re: Problem with Method which is expected to throw message</header>
    <body>Thanks David Saff, java.lang.Error: Unresolved compilation problems: Unhandled exception type SQLException Unhandled exception type SQLException Unhandled exception type SQLException at com.matrimony.utils.ibatis.testBoolTypeHandler.testGetResult(testBoolTypeHandler\ .java:59) ...... Regards Raja</body>
  </mail>
  <mail>
    <header>Re: Re: Problem with Method which is expected to throw message</header>
    <body>What happens if you run this? include throws Exception, like so: arguments are 'T' and 'F'. com.matrimony.utils.ibatis.boolTypeHandlerTF.yesNoToBoolean(boolTypeHandlerTF.ja\ va:81) com.matrimony.utils.ibatis.boolTypeHandlerTF.getResult(boolTypeHandlerTF.java:34\ ) com.matrimony.utils.ibatis.testBoolTypeHandler.testGetResult(testBoolTypeHandler\ .java:65) sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:25) org.jmock.integration.junit3.VerifyingTestCase.runBare(VerifyingTestCase.java:38\ ) org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:79) org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReferen\ ce.java:46) org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\ .java:467) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\ .java:683) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java\ :390) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.jav\ a:197)</body>
  </mail>
  <mail>
    <header>Re: Large, hierarchical, randomized test suites: how to not	run out of memory?</header>
    <body>Op 10-jun-2010, om 19:23 heeft David Saff het volgende geschreven: Would just annotating the existing setUp() method with @Before (and the existing tearDown() method with @After) do the job? What way do you have in mind to execute de test method multiple times? Thanks</body>
  </mail>
  <mail>
    <header>Re: Problem with Method which is expected to throw message</header>
    <body>Thanks to all who tried to help, The problem is solved. Actually test was running under junit3 runner due to this line MockObjectTestCase is extending TestCase hence it was using jUnit3. I removed that clause and modified the whole class accordingly. The test is running fine as expected going GREEN in spite of exception. The working code is given below for somebody who may stumble like me. thanks and regards Raja. @Before will(onConsecutiveCalls(returnValue("T"), returnValue("F"), returnValue(" ") // , returnValue('F') @After @Test(expected = java.sql.SQLException.class) // getter.getString() == ' ' Throws Exception /** * @Test * * @Test */</body>
  </mail>
  <mail>
    <header>Re: Large, hierarchical, randomized test suites: how to not run out of memory?</header>
    <body>existing tearDown() method with @After) do the job? Sure, that would work. You will have to make sure that your exception has all the information from your datapoints, using hamcrest or some other mechanism.</body>
  </mail>
  <mail>
    <header>Suggestion for new matchers</header>
    <body>Hello, My name is  Mykolas Mickus (in english its Michael). I've just graduated from Kaunas University of Technology (in Lithuania) where I have been studying IT for four years. I've been using Java for 3 years now. First of all I'd like to thank You and all JUnit team for the great testing framework which I've been using since version 4. What I especially like about the version 4 is hamcrest and matchers. They make my tests more readable (and fun) to write. However I've found that JUnit does not have property matchers which would be very usefull in my opinion. While using FlexUnit 4 (Adobe Flex and ActionScript 3 testing framework) I've got used to these property (or object) matchers and now think that similar matchers could be implemented and used in JUnit. Here is an example reasoning the necessity of this feature. Lets say we call 'sellItem()' method on instance of class 'Store'. Then we need to check if properties (migh be set/get pairs or public instance variables) like 'itemsInStock', 'currentStoreValue' or 'itemsSold' have been updated. Currently we could accomplish this in several ways with JUnit: 1) Use assertion methods: 2) With currently available matchers: 3) Creating another instance and comparing the two: The last example is limited because we must have 'equals()' implemented  in correct way and this assertion will *always* check same properties which, probably, means all of them. But what if wee need only a subset? Of course this issue can be addressed by the first two examples. However, things get complicated when we come to collections. The same class 'Store' probably holds a list of all items. Its difficult to check if there is an item with some specific properties values: Again, we need 'equals()' to be implemented correctly and we can't easily match agains a subset of all properties. Needless to say, many lines of code are required when we want to use 'hasItems()' to check even a few items in a collection. Now here is how one would make similar assertions with FlexUnit 4: (You can find more information regarding FlexUnit and property (object) matchers here:  I think this approach is better in many ways compared with those described above. Of course due to limitations of Java same example would be more verbose. Still I think that implementing these matchers for JUnit is worth a shot. And if Java 7 is released we could be able to use new features (like language level support for collections) to simplify the syntax (not sure if this is a correct term). Finally, I think implementing these matchers in Java is not very complicated. Having said that, I would be glad to do it myself. I think I have got enough knowledge and experience to be able to accoplish the task. To sum up with, I believe property matchers would be great addition to JUnit testing framework. I'm looking forward to hearing Your opinion about this proposal. Mykolas Mickus (Kaunas University of Technology graduate)</body>
  </mail>
  <mail>
    <header>Re: junit historical statistics</header>
    <body>DevCreek.com is a service that provides some of what you are looking for. Kent</body>
  </mail>
  <mail>
    <header>Snapshot release junit4.9-SNAPSHOT-20100512-0041, aka SuiteBuilder, aka "Categories the right way"</header>
    <body>All, So Categories seemed to get some people excited ( couldn't help feeling that we'd gone about it the wrong way.  From the design perspective, why have a whole Runner just for filtering by category?  There are other things you can filter on.  And, there were some definitely hackish parts of the implementation.  And, it turns out, there were bugs in Categories, (such as  to elegantly fix with the current design.  And, (sorry, maven hopefuls), but we were anxious to get back into the meat of the code. So, the first 4.9 snapshot is up today, with a new way of specifying suites, called SuiteBuilder.  SuiteBuilder allows for flexible specification of where to find the classes containing tests, and how to filter the resulting runners. This suite class lists the explicit test classes to consider running, and then filters it down to only those tests or classes annotated with `@Category(Yes.class)`: @RunWith(SuiteBuilder.class) @Classes @RunnerFilter We hope to soon include other implementations for the @Classes annotation, including a classpath-searching test gatherer.  Other implementations for @RunnerFilter also make sense (if you look close, you'll see that RunnerFilter implementations can also re-order runners, as well as selecting them). Please have fun, and let us know how it works for you.  Thanks,</body>
  </mail>
  <mail>
    <header>Re: Snapshot release junit4.9-SNAPSHOT-20100512-0041, aka SuiteBuilder, aka "Categories the right way"</header>
    <body>Hi David, A quick question:  instead of  tying the selection of test classes to c)" method? This would allow more flexibility, in my opinion. -- Cédric -- Cédric</body>
  </mail>
  <mail>
    <header>Re: junit historical statistics</header>
    <body>Thanks a lot for your suggestions. As far as I could see in their website, DevCreek is not free software so it is a no-go. I'll take a look at Cuanto. thanks again. -- ¡paz y baile!</body>
  </mail>
  <mail>
    <header>Maven Surefire and newer junit features</header>
    <body>Most of you are probably not aware of this, so I thought I'd just let you know: maven-surefire plugin has 2 different junit-4 providers, and the most modern one is normally only used to run parallel tests. This provider uses JUnitCore to run the tests and should (probably) support most of the "modern" junit features. The "thing" is that the JunitCore provider can be activated even for non-parallel tests by adding the following to your configuration: This will force the use of the new provider in serial mode, which is fine if you just want to get access to more modern junit features. Please note that right now you need to use 2.6-SNAPSHOT of surefire to get the latest version of the JunitCore provider.  Which is really the reason I'm writing this: I'm about to release a bug-fix release of surefire (which will probably be called 2.5.1). I do not personally have time to test all the "new" junit features with the new provider, but if anyone here has time/interest in this I can get it included in the official surefire documentation.</body>
  </mail>
  <mail>
    <header>Re: Snapshot release junit4.9-SNAPSHOT-20100512-0041, aka SuiteBuilder, aka "Categories the right way"</header>
    <body>Beautiful, you definitely hit on the right design limitations and found a great new direction. I'm not positive I love the conventions of having public variables do this kind of thing, but maybe that will grow on me (a more traditional Builder pattern strikes me as less surprising), but that is nitpicking. The bottom line is that the new design direction is great, providing substantial flexibility and power while keeping things simple. Thank you very much.</body>
  </mail>
  <mail>
    <header>Re: junit installation problem</header>
    <body>Thanks for your response, This is the text: If I change directories to C:\junit\junit4.8.2 and issue this command: java -cp junit-4.8.2.jar org.junit.runner.JUnitCore I get : JUnit version 4.8. Time: 0 OK (0 tests) But if I type "java junit-4.8.2.jar org.junit.runner.JUnitCore" as the instructions say I get the error : Exception in thread "main" java.lang.NoClassDefFoundError: org/junit/runner/JUnitCore Could not find the main class: org.junit.runner.JUnitCore. Program will exit. I have typed this in the command prompt: set CLASSPATH=%classpath%;.;C:\junit\junit-4.8.2.jar;C:\junit\junit4.8.2\org\junit\t\ ests\running\classes;C:\junit\junit4.8.2\org\junit\tests;C:\junit;C:\Program Files\Java\jdk1.6.0_20\jre\bin if I type echo %CLASSPATH%  I get the same classpath I typed above. But if I go to the my computer properties, system variables, the classpath doesn't get updated. I then put the classpath manually in system variables, I restarted the pc everytime I make this changes and still I cant test the junit installaitn without the cp command. In the excell sheet I also have the screenshots that show the directory structure where I have Junit installed and the error messages I get in the command prompt. Thank you very much for your help. site. I attached the file to the "Files" link on the left pane of this site, I hope that is alright. the installation to work. I have a spreadsheet with screenshots and an explanation of my install, I hope some one responds to my email rodrigo7x@ that I may send the file. I believe the classpath isn't taking effect.</body>
  </mail>
  <mail>
    <header>Reminder about class-level @Rule</header>
    <body>Hi, With the JUnit 4.9 process getting under way, I'd like to remind again about class-level @Rule, In my message proposed that Alistair Israel's branch was suitable for merging as-is. Please could a JUnit committer either do so, or explain what currently prevents that from happening? Thanks, Max.</body>
  </mail>
  <mail>
    <header>Re: Re: junit installation problem</header>
    <body>So that works.  From the rest, I assume that your primary goal is eliminating the "cp" flag... instructions say I get the error : Which instructions say that? org/junit/runner/JUnitCore CLASSPATH=%classpath%;.;C:\junit\junit-4.8.2.jar;C:\junit\junit4.8.2\org\junit\t\ ests\running\classes;C:\junit\junit4.8.2\org\junit\tests;C:\junit;C:\Program Files\Java\jdk1.6.0_20\jre\bin That's right.  The set command only affects the environment for the rest of that terminal session. Assuming that you're typing the path to the jar correctly, that's surprising.  What's the output from echo %CLASSPATH% right before you try the java command? structure where I have Junit installed and the error messages I get in the command prompt. site. I attached the file to the "Files" link on the left pane of this site, I hope that is alright. get the installation to work. I have a spreadsheet with screenshots and an explanation of my install, I hope some one responds to my email rodrigo7x@ that I may send the file. I believe the classpath isn't taking effect.</body>
  </mail>
  <mail>
    <header>Re: Snapshot release junit4.9-SNAPSHOT-20100512-0041, aka SuiteBuilder, aka "Categories the right way"</header>
    <body>Cedric, @RunnerFilter.Value is pretty general, and would completely support, for example, filtering by package name.  I'm confused what more flexibility you'd need, but would be happy to hear about something specific we've overlooked. Or perhaps you want an abstract implementation of RunnerFilter.Value that supports that specific API?  I could imagine that. 2010/5/12 CÃ©dric Beust â &amp;lt;cbeust@...&amp;gt;:</body>
  </mail>
  <mail>
    <header>Re: Re: Snapshot release junit4.9-SNAPSHOT-20100512-0041, aka SuiteBuilder, aka "Categories the right way"</header>
    <body>great new direction. kind of thing, but maybe that will grow on me (a more traditional Builder pattern strikes me as less surprising), but that is nitpicking. We talked a lot about this.  Configuration from objects grabbed from annotated fields or methods has already been done incidentally at several points throughout the codebase (i.e. @Parameters, @DataPoints, @Rule).  We realized that this new runner would represent a commitment to the idea that this was a worthwhile design pattern, but found it less surprising _within the context of junit_ than the alternatives. If you have a sketch of a different design, I'd be happy to discuss it. substantial flexibility and power while keeping things simple. Thanks!</body>
  </mail>
  <mail>
    <header>Re: Snapshot release junit4.9-SNAPSHOT-20100512-0041, aka SuiteBuilder, aka "Categories the right way"</header>
    <body>I do realize that this is not a new concept in JUnit. I think my first reaction just stems from the Builder word. I hear Builder, I expect a fluid interface. That doesn't really mean very much (as I said this was nitpicking) except that if others have that reaction, well then it is surprising, for whatever importance that carries. BTW, I didn't really love it with @Rule either (although I think for @Parameters and @DataPoints it's more justified), but it didn't go against the grain of my expectations the same way Builder did. In terms of an alternative design, here is what comes to mind (although I obviously have not spent the time thinking about this that you have): @RunWith(DynamicRunner.class) Of course you could imagine the RunnerBuilder folding in all the other three annotations by using a DynamicRunner whenever you needed them, but I'm less sure about that. great new direction. kind of thing, but maybe that will grow on me (a more traditional Builder pattern strikes me as less surprising), but that is nitpicking. substantial flexibility and power while keeping things simple.</body>
  </mail>
  <mail>
    <header>Real World JUnit (first time poster)</header>
    <body>Hi, I am new to this forum and new to JUnit.  I started searching for best practices and found that people were asking that question all the way back in 2001!  Kind of intimidating! Anyway, what I am looking for is not "best practices", per se, but a real world example.  And from that I mean an example that starts from an idea in someone's head and evolves all the way through application completion and testing coverage.  For example, I am thinking of an auto insurance type of application that has certain requirements, say 10, and how the tests are derived from the requirements and the code gets derived from the tests. We have many developers that are new to Test Driven Development, and to simply come out with best practices and ask them to get on board will never work. However, if we can take a real world example, from start to finish, and show how the tests did drive the code and how refactoring became so much simpler as a result, that would be a great start into changing the mentality of some of our developers (myself included ;-) Any suggestions? Thank you, Regards, Elaine</body>
  </mail>
  <mail>
    <header>Re: Real World JUnit (first time poster)</header>
    <body>I am recording a series of screencasts on TDD for the Pragmatic Programmers. My example program is an interface to Tokyo Tyrant (a simple key/value store), so it isn't as "business-y" as the example you requested, but it does go through the whole TDD process, at least the way I do it. The series will be four half-hour episodes. You can see the first ten minutes of the raw footage of the first two episodes at  is released. That said, I think there is scope for many more specialized demonstrations of TDD. I hope lots of folks jump in with their favorite IDE, application, language, and/or technique. Regards, Kent practices and found that people were asking that question all the way back in 2001! Kind of intimidating! world example. And from that I mean an example that starts from an idea in someone's head and evolves all the way through application completion and testing coverage. For example, I am thinking of an auto insurance type of application that has certain requirements, say 10, and how the tests are derived from the requirements and the code gets derived from the tests. come out with best practices and ask them to get on board will never work. However, if we can take a real world example, from start to finish, and show how the tests did drive the code and how refactoring became so much simpler as a result, that would be a great start into changing the mentality of some of our developers (myself included ;-)</body>
  </mail>
  <mail>
    <header>RE: Real World JUnit (first time poster)</header>
    <body>The best place to start is that you and your team need to make the following commitments: *         You will stick with it for at least 30 days (you should start seeing benefits by then) *         Make room with your estimates and schedule to write the unit tests *         Everyone has the responsibility to keep the tests passing-your build needs to fail if the tests fail *         Try to make quick running tests Without the above commitments, TDD gets tossed out.  In the very beginning it may seem like a lot of extra work for very little benefit, but stick with it anyway.  It takes time to see how TDD is affecting how you approach writing code and the time saved by not having to step through the code with a debugger as often.  If you don't make room in your schedule to write the unit tests, your schedule will be off, everyone will feel behind the 8-ball, and what they are not familiar with won't get done.  Sometimes everything passes until you check in your code.  When everyone makes their (at least daily) check-ins, it helps to do a check-out and rerun the tests-just in case.  Lastly, if the tests take a long time to run, it becomes painful to run them.  If it's painful to run them, they don't get run and you lose all your benefits. As to a real world example, I've got a few.  When I first started doing TDD, it was with an open source framework I was building.  I started out dutifully writing the test, watching it fail, and doing the simplest thing that could possibly work.  Essentially I used "triangulation" to get to a set of tests that forced the code to work the way I wanted it. It seemed counterintuitive at first, even a bit awkward.  But I was willing to keep at it.  I noticed that the code I was writing was a bit different from what I used to write.  Essentially, by thinking about how I was going to test the code before I wrote the code I was intentionally making the tests easy to write.  By extension, the code I was writing was simpler and easier to comprehend.  As I progressed with writing the framework, there were a few tests that I wrote thinking I had to write something to satisfy the case, but the code already handled that case. I left the tests there to make sure the functionality didn't regress after refactoring the code.  I noticed that I was much more confident in refactoring my code regularly, and made it a point to incorporate that into the way I work.  What was the simplest thing one day isn't so simple after you've made a series of changes.  I also noticed that I was spending a lot less time in the debugger.  In fact, the only time I needed to open it up was when someone reported a difficult to reproduce bug.  Once I discovered what was happening, I added a new test case to reproduce the problem as closely as I could to the cause.  Once I got the expected failure, I was able to make the change with more confidence. My first experience introducing TDD to a team taught me a few things. First, not everyone knows how to write good tests.  The book Pragmatic Unit Testing: in Java with JUnit is a good resource with how to approach writing unit tests.  All it's examples are JUnit 3 examples, but the principles still apply no matter what your unit testing framework is. Basically, the unit tests need to be as simple as possible.  The setup, execution, and assertions need to be clear.  Adding too much to the setup will cause the tests to be harder to understand, and make them take longer to run.  Your team really needs someone to coach in writing good unit tests.  On my team, that was me.  There will likely be someone on the team that needs to know that unit tests require an assertion-they cannot rely on manual inspection.  Unit tests are not just a way to run code, they are a way to verify the code is correct.  That doesn't mean the person is stupid, they just aren't experienced with unit tests. It's a brand new idea for them.  There will likely be someone else who tries to lump multiple separate tests into one test case.  They need to be taught how to test only one thing at a time.  Lastly, with people writing unit tests with differing levels of experience, we can run into performance problems in the unit test suite.  A common area where this problem occurs is when you test anything that requires a network connection such as database access and web services.  It requires a little more creativity to solve these problems, but it can be done.  I solved the remote service problem by stubbing it out and creating a mock implementation to generate all the test conditions without requiring network services.  The database can be more of a problem, particularly because writing cross database queries can be very hard.  Sometimes it helps to separate out the database tests into a separate suite.  As long as the remainder of the unit tests run quickly, you can reserve running the database tests for the official build and the other unit tests as part of your daily work. That's a summary of the highlights with instituting TDD on a project. As people learn how to write better tests, they also end up writing better code.  The expectations, results, and error conditions are thought out much better.  It can also bring to light when different approaches are used by different people.  By changing the unit tests, you can get everyone on the same page.  You'll find some corners that just can't be tested without resorting to extraordinary lengths. Typically, these are exceptions that the Java API forces you to catch even though there is no way in your code to make those exceptions be thrown.  Examples include catching unsupported algorithm exceptions when you are using encryption algorithms installed on everyone's machine, or using a character set that exists on every instance of Java for your streams.  For those, don't worry about testing it.  It's just not worth hacking the JVM installation to force these errors.  As long as you remain consistent with your error handling techniques and you (at the very least) log the exceptions you can be pretty confident in that code. From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of amalcamel Sent: Monday, May 17, 2010 2:34 PM To: junit@yahoogroups.com Subject: [junit] Real World JUnit (first time poster) Hi, I am new to this forum and new to JUnit. I started searching for best practices and found that people were asking that question all the way back in 2001! Kind of intimidating! Anyway, what I am looking for is not "best practices", per se, but a real world example. And from that I mean an example that starts from an idea in someone's head and evolves all the way through application completion and testing coverage. For example, I am thinking of an auto insurance type of application that has certain requirements, say 10, and how the tests are derived from the requirements and the code gets derived from the tests. We have many developers that are new to Test Driven Development, and to simply come out with best practices and ask them to get on board will never work. However, if we can take a real world example, from start to finish, and show how the tests did drive the code and how refactoring became so much simpler as a result, that would be a great start into changing the mentality of some of our developers (myself included ;-) Any suggestions? Thank you, Regards, Elaine</body>
  </mail>
  <mail>
    <header>Re: Real World JUnit (first time poster)</header>
    <body>I have a humble suggestion. (it has to be humble after following an answer from Kent :-) I had previously had this idea to write an ebook about JUnit and started it and in it's incomplete glory it lives on Github at the following project URL:  Go to the project page and scroll down, near the bottom are two choices of PDF, an ebook size or US letter size. There are five chapters at this point, with the fifth one being a description of thinking through a requirement to come up with both tests and code. I'm actually back re-writing the fifth chapter right now as I am not really satisfied with it. So, take it as you find it and if it works for you that's wonderful. I'll announce when I have any new updates. Simon</body>
  </mail>
  <mail>
    <header>Re: Real World JUnit (first time poster)</header>
    <body>Wow, thank you for all of the detailed information, I have a lot of reading and learning to do! Thanks again! Elaine</body>
  </mail>
  <mail>
    <header>Running a component of a Parameterised test</header>
    <body>Running the whole set works fine, but in IDEA at least attempting run/debug an individual item doesn't work. Or rather it almost does. I tried adding two constructors to the class intending that one would be used for the parameterised runs and the default constructor would apply to the individual tests. Unfortunately JUnit complains about having more than one constructor. We currently work around this by using a second class which delegates to the parameterised test class. Is there a more elegant approach? Regards, Mark Thornton</body>
  </mail>
  <mail>
    <header>Why my own TestListener implementation doesn't work?</header>
    <body>Hi, experts Since our project wants to save the failed environment for a failed test case, I tried to implement my own TestListener which did the work in TestListener.addFailure and TestListener.addError. But it doesn't work, could you please figure out the errors in my program, thanks. I think if I implement my own TestListener and register it with a TestResult in createResult method, that TestResult should replace the default one, but it doesn't work. Thanks for any help! Regards! Tao</body>
  </mail>
  <mail>
    <header>How do I set the testcase name dynamically with using junit4?</header>
    <body>Hi, experts We're using the junit 3.8.1 currently, and we're planning to move to junit4, but we meet a question that we want to address. Imagine we have a test, and it has four test cases: And we have a boolean type which presents whether the test is transactional or not, and we want either transactional or non-transactional needs to run under testA, testB, testC. To do that, we add a suite() method, and add the tests with different transactional configuration, so that it can run actually 6 test cases. But here comes another question, how can we distinguish the failures, because there are actually 3 test cases in the test? Luckily Junit3.8.1 can set the test case name dynamically through setName, so we can do this: So when we run the test, we will get the test case name as following: With these information, we can easily figure out which test fails. But the setName() method doesn't work in Junit4, since I don't need to extend from TestCase any longer. I know I can use the Parameterized to do the same thing, but there is no way to set the customerized test case name, so what I get is: Which doesn't make sense to figure out in which mode the test fails, and the worse is that we use the test case name to create a directory to save the failed test results, but now it's hard to do that in junit4. So is there anyway to support dynamically naming a test case? Thanks and regards! Tao</body>
  </mail>
  <mail>
    <header>Re: How do I set the testcase name dynamically with using junit4?</header>
    <body>Tao, There's nothing good for this right now.  However, better naming of Parameterized tests is very high in the feature-request voting right now ( this will change soon. On Sun, May 23, 2010 at 11:10 PM, zx200287853714 but we meet a question that we want to address. not, and we want either transactional or non-transactional needs to run under testA, testB, testC. transactional configuration, so that it can run actually 6 test cases. But here comes another question, how can we distinguish the failures, because there are actually 3 test cases in the test? we can do this: from TestCase any longer. I know I can use the Parameterized to do the same thing, but there is no way to set the customerized test case name, so what I get is: worse is that we use the test case name to create a directory to save the failed test results, but now it's hard to do that in junit4.</body>
  </mail>
  <mail>
    <header>Re: Why my own TestListener implementation doesn't work?</header>
    <body>Tao, createResult() is somewhat confusing--it has nothing to do with the normal flow of JUnit execution.  To do what you're doing, many people will override runTest(). On Mon, May 24, 2010 at 1:16 AM, zx200287853714 I tried to implement my own TestListener which did the work in TestListener.addFailure and TestListener.addError. But it doesn't work, could you please figure out the errors in my program, thanks. in createResult method, that TestResult should replace the default one, but it doesn't work.</body>
  </mail>
  <mail>
    <header>Re: Running a component of a Parameterised test</header>
    <body>Well, there's the Filter support, which IDEA could be using (I don't think any of the IDE's are using it, because JUnit 3 got them used to thinking about having to do evil reflection on test outputs to get this kind of thing done).  Log a feature request with IntelliJ, and mention that we'd be happy to talk to them if they don't find what they need in the API's.  Thanks, On Fri, May 21, 2010 at 1:10 PM, Mark Thornton</body>
  </mail>
  <mail>
    <header>Re: Running a component of a Parameterised test</header>
    <body>Thanks, I have posted a query on their community forums. I'll see if I get any response. I have also been using Hudson and have an 'issue' with JUnit there too, but can't quite decide whether to start here or there. What I would like is a class of test which is known to fail, yet is still run on each commit, but doesn't block acceptance (largely because the 'bug' has been there for years). I want to be reminded that these bugs are still there and also be advised if any are unintentionally fixed. This would also allow someone who discovers a bug to check in a test which illustrates the problem, while being unable to fix it themselves (whether for lack of skill or time). Regards, Mark</body>
  </mail>
  <mail>
    <header>Re: Why my own TestListener implementation doesn't work?</header>
    <body>OK, get your meanning. Here is another question for you, I create my TestResult and use assign my TestResult to the TestResult used in run(TestResult result), I did see that my TestResult returns me whether a test fails, but it doesn't tell me in the tearDown after a test case finishes, instead I can check the error count and failure count changes in the setUp in the next test case. This is really confusing me, why don't those count changes in tearDown()? Thanks and regards! Tao</body>
  </mail>
  <mail>
    <header>Re: Re: Why my own TestListener implementation doesn't work?</header>
    <body>On Tue, May 25, 2010 at 5:49 AM, zx200287853714 TestResult to the TestResult used in run(TestResult result), I did see that my TestResult returns me whether a test fails, but it doesn't tell me in the tearDown after a test case finishes, instead I can check the error count and failure count changes in the setUp in the next test case. Tao, The test has not successfully passed until the tearDown successfully completes.  If you want to take action on a test failure, you want to do it in a TestListener, not in a tearDown method.</body>
  </mail>
  <mail>
    <header>Re: Running a component of a Parameterised test</header>
    <body>On Mon, May 24, 2010 at 2:57 PM, Mark Thornton Kevin Lawrence did something really cool a couple years ago at Agitar that I've been wanting to re-implement ever since.  In JUnit &amp;gt;=4.7, it would look like this: Essentially, this would check in a bug database: if bug 12345 was marked fixed, then this would run normally.  But if bug 12345 was marked as still open: * If the test failed, the failure would be ignored in the main report, and sent to a separate special report. * If the test passed, it would fail. This is doable on top of JUnit, and I'd welcome the feature request or patch.</body>
  </mail>
  <mail>
    <header>Re: How do I set the testcase name dynamically with using junit4?</header>
    <body>That's good to know, also I see some great guys have already posted their patch for that. So can I assume that this feature will be supported in the next release? My project hangs on this issue, so we have to stay on Junit3.8.1..... Thanks and regards! Tao</body>
  </mail>
  <mail>
    <header>Re: Re: How do I set the testcase name dynamically with using junit4?</header>
    <body>A release soon.  We have a fix for a serious problem with Categories and the even-more-popular ClassRule close to ready to go, so we might go ahead and release that as 4.9, and pick this up as part of 4.10. Thanks, On Tue, May 25, 2010 at 5:55 AM, zx200287853714 patch for that. So can I assume that this feature will be supported in the next release?</body>
  </mail>
  <mail>
    <header>Re: Alternative to repeating @ContextConfiguration</header>
    <body>I happened upon the solution to this: Create a base test class which extends from AbstractDependencyInjectionSpringContextTests, overriding getConfigLocations to define the location of the context file in one place only.  stractDependencyInjectionSpringContextTests.html Tom. -- View this message in context:  7p28705171.html Sent from the JUnit - User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: When it matters most, don't forget your tests.</header>
    <body>I think asking candidates to do TDD in an interview is a waste of time. You have about forty-five minutes to find out how good that candidate is and if you ask her to solve a problem and to begin by writing tests the TDD way, you'll waste fifteen minutes seeing code that tests for easy cases, nulls and exceptions.  Not exactly enlightening. I prefer to focus on coding problems and possibly mentioning tests and hearing what they have to say about it.  It's also perfectly okay with me if all they talk about is "automated" tests and not TDD, I don't think that TDD is a requirement to write good tests, nor does it tell me much about how good that candidate is. -- Cédric -- Cédric</body>
  </mail>
  <mail>
    <header>Re: When it matters most, don't forget your tests.</header>
    <body>It depends what you're looking for. If you want to know whether your candidate can actually do TDD (as claimed on their resume), then there's only one good way to find out. And a candidate that started by testing all the exotic failure states, rather than working through the most useful features, would have revealed that they probably don't understand incremental development. S. Steve Freeman</body>
  </mail>
  <mail>
    <header>Re: When it matters most, don't forget your tests.</header>
    <body>TDD is not rocket science.  If a candidate manages to solve complex programming problems during the interview and they have never heard of TDD before, it will be easy for them to learn if you are imposing this at your company (a mistake in my opinion, but that's a separate topic). As for your remark about incremental development, all the examples I have seen of TDD when you start from scratch begin by testing trivial cases.  It will take at least a half hour before the candidate starts writing code that's actually complex, which is why I think it's a waste of time in an interview. -- Cédric</body>
  </mail>
  <mail>
    <header>Re: When it matters most, don't forget your tests.</header>
    <body>I can't help but notice that some of the messages in this thread have used language that expresses possibility and attention to the context, while other messages in this thread have focused on rules and absolutes. I would want to pay attention to the differences in these styles of thinking in an interview, and hire the absolutist mostly in those rare cases where I need someone to rule others with an iron fist. -- J. B. Rainsberger ::</body>
  </mail>
  <mail>
    <header>junit installation problem</header>
    <body>I hope I can find some help here. I followed the installation instructions on the junit site but cannot get the installation to work. I have a spreadsheet with screenshots and an explanation of my install, I hope some one responds to my email rodrigo7x@... that I may send the file. I believe the classpath isn't taking effect. Thanks, Rodrigo</body>
  </mail>
  <mail>
    <header>Re:When it matters most, don't forget your tests.</header>
    <body>I agree with Cedric that TDD isn't necessary at an interview.    If I think about the biggest benefits of writing unit tests, they are: 1) Make sure the code works (quality) 2) Make sure the code stays working (regression/maintenance) Neither of these are critical on an interview.  Clearly #2 doesn't matter.  It's an exercise that will never make it to production, let alone be maintained. #1 is more interesting.  On first glance, one would think the code needs to work at an interview.  While that's nice, I don't view that as the most important thing when I am interviewing.  I am more interested in seeing how the candidate thinks, looks up information, reacts to errors, whether he/she seems comfortable with basic Java idioms. In my opinion, more organizations should have candidates writing code on a computer as part of the interview.  This is still rarer than I would like.</body>
  </mail>
  <mail>
    <header>Re: junit installation problem</header>
    <body>Rodrigo, You should be able to attach files to the mailing list.  I'd love to see your problems resolved in the open, so other users can benefit from the solution. installation to work. I have a spreadsheet with screenshots and an explanation of my install, I hope some one responds to my email rodrigo7x@... that I may send the file. I believe the classpath isn't taking effect.</body>
  </mail>
  <mail>
    <header>Re: When it matters most, don't forget your tests.</header>
    <body>Mike, Three thoughts: 1) Did any of these interviews provide an actual execution environment with which to run your tests?  Without the possibility of learning new things from the execution of the tests, I can imagine changing the way I'd apply a test-driven mindset.   (I've yet to give or receive an interview that actually used a computer.) 2) For a while, I would give interviews where I'd describe a set of requirements for a system design, and then ask the candidate to write a test for a core component in the system, without implementing it first.  I found that only a few absolute superstars could make headway--interestingly, these were split about 50/50 between those who had at least tried TDD, and just incredibly intelligent  people able to get their heads around a problem no matter how it was presented. 3) On the other hand, I've noticed that applicants who end up writing buggy implementations in interviews often do so because they stop with a solution that works on a single example, and have a hard time thinking of ways it could break on other types of input.  I'd like to think that every professional developer finds ways to get continuously TDD does that for me. interviews.</body>
  </mail>
  <mail>
    <header>Re: Re: Class-level @Rule</header>
    <body>I think that it's likely easier to find agreement on what kind of new features could be added than on which of those might be added through an annotation containing the word "Rule", and which might be added in a different way. into the instance generation process (although for the whole class, not each case at a time). with its own, a ClassRule can intercept the Runner and replace it with its own (possibly).</body>
  </mail>
  <mail>
    <header>Re: When it matters most, don't forget your tests.</header>
    <body>Thank you to all those that responded. I agree that if a candidate spends all their time on the simple error cases then they don't understand TDD. I think a pair programming environment would be ideal for an interview. Maybe actually have the candidate solve an actual problem you're solving. This may sound like it may take a lot of time, but I'd rather be part of a team that can spend 1-2 hours writing code in an interview, then waste that time on soft silks.  If the candidate complains that it's not their IDE/editor of choice, that should send up a flag. Granted this is my ideal environment. What about a 2 stage interview? One where they write the tests for a already existing piece of code (maybe to increase the codes functionality), then another where they try and write code to get the tests to pass.  Granted this is not testing if they actually use TDD, but it would show if they have test -&amp;gt; functionality will show if they have the skill. I think spending some time, 2-3 hours with a machine, later in the interview process, say after a phone screen, maybe second round of face to face, might pay dividends in the quality of people on a team.  Then again it might depend on how skilled you need this individual to be. Thanks for the input, Big Mike</body>
  </mail>
  <mail>
    <header>Re: Test runtime scenario using junit</header>
    <body>Hello Ananth, Just to give my 2cents on this problem, I would suggest looking at a solution that also involves some distributed cache (like ehCache or perhaps Terracotta). The general idea is to have the code on the VmWare side populated once, and then stored in this distributed cache. Then you can start your JUnit tests, and they simply start their own cache, which is configured to work distributed and connect to the already running cache of VmWare-related objects. Then the objects that you created with VmWare will also be available for the unit tests. The connection in JUnit can be performed in a Rule or in the BeforeClass methods. Cheers, Bogdan</body>
  </mail>
  <mail>
    <header>Re: When it matters most, don't forget your tests.</header>
    <body>To the OP, I think you forgot TDD because you're human. Hard to cure, but perfectly understandable :-) To all, if you expect developers to use TDD in their work, it makes perfect sense to ask them to demonstrate it in an interview. There are a wide range of TDD skills (working on TDD screencasts at the moment continually reminds both how much I know and how very much I don't). If you are pressed for time, you might be able to get some good information by asking them to list the tests they would write for a given problem instead of actually coding. Regards, Kent</body>
  </mail>
  <mail>
    <header>RE: When it matters most, don't forget your tests.</header>
    <body>I've been silent on this for a while, but I did want to chime in.  If you require TDD in your project, you should resign yourself to the fact that you will have to train the prospects on what you mean by that and what level of testing you require even under deadline.  The sad truth is that many projects claim to be "agile" only so they can throw away the most fundamental engineering practices (like CM, much less testing). The later a project is, the more they will look to throw away what they really feel are unnecessary practices, or barriers to progress. Fundamental CM and project management will work with the client to adjust scope or deadline, but we won't go there for the moment. What I've found as a result of this phenomenon is that the vast majority of people I interview have no concept of unit testing, much less TDD. That doesn't mean that the people are bad resources.  It just means that unit testing hasn't saved their bacon yet, and they haven't been required to stick to it long enough for that to happen.  What that means is that I have to build time into my schedule to teach how unit testing works, and how TDD works.  I'll relax the requirement for the tests to be written first for these folks, as long as the tests get written. Part of the training progress is showing them where they are either writing too much code, or not enough tests. I tend to focus on the more critical aspects of troubleshooting skills, and determining if their claimed skills are just paper thin.  After that I check their willingness to do TDD.  My assumption is that I'm going to have to teach them.  Running these engineering tests are only necessary when you are dealing with junior positions. -----Original Message----- From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of Kent Beck Sent: Monday, May 03, 2010 7:59 PM To: junit@yahoogroups.com Subject: Re: [junit] When it matters most, don't forget your tests. To the OP, I think you forgot TDD because you're human. Hard to cure, but perfectly understandable :-) To all, if you expect developers to use TDD in their work, it makes perfect sense to ask them to demonstrate it in an interview. There are a wide range of TDD skills (working on TDD screencasts at the moment continually reminds both how much I know and how very much I don't). If you are pressed for time, you might be able to get some good information by asking them to list the tests they would write for a given problem instead of actually coding. Regards, Kent under the past, I If is one also write code spanning interviewer clearly interviews as lost in generally a good with a coding that to lack</body>
  </mail>
  <mail>
    <header>Re: Re: Test runtime scenario using junit</header>
    <body>Thanks a lot Bogdan. That was very useful information. I will explore those possibilities also .  :) Thanks &amp;amp; Regards Ananth -- Regards Ananth</body>
  </mail>
  <mail>
    <header>Re: When it matters most, don't forget your tests.</header>
    <body>We've been doing this in our circle in London for a decade, and most of us wouldn't hire without such an exercise at some stage in the process. It flushes out so many important issues. I've seen too many people who are good at talking, or even the whiteboard thing, but still can't ship production-quality code. I might still hire them, but at least I know what I'm getting. S. Steve Freeman</body>
  </mail>
  <mail>
    <header>Re: When it matters most, don't forget your tests.</header>
    <body>I'm happy if a candidate doesn't know TDD, I'm less happy if they claim it but don't. I'm also aware, for such a simple technique, that a lot of people haven't learned how to actually deliver incrementally. It's like OO, everyone knows about inheritance but fewer have a deeper understanding. In the meantime, there's a nice living to be had cleaning up all those complex programming problems where testing came later ;) That's easy to solve, just don't start from scratch but from a partial codebase. It's been years since I got to start a project completely clean. S.</body>
  </mail>
  <mail>
    <header>RE: When it matters most, don't forget your tests.</header>
    <body>Mike, this is such a great topic you've stumbled on.  Where I work, we are doing lots of hiring this year.  Every development engineer candidate that comes in gets to do at least two programming problems on the board.  For one of the problems, the question is something like, "Write a function in any language you want (except Perl) to do XXX."  And then once they have that, we ask them to tell us how they'd unit test what they just wrote. It's a rare individual that says, "Damn, now I realize I should have written the unit test FIRST!"  And out of probably 100 candidates in the past few years of this approach, not a single candidate has ever actually written a JUnit/NUnit/whatever test case first.  But I hold out hope that person will someday grace our interview room. Cheers, Todd. -----Original Message----- From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of Mike Forsberg Sent: Monday, May 03, 2010 10:24 AM To: junit@yahoogroups.com Subject: Re: [junit] When it matters most, don't forget your tests. Thank you to all those that responded. I agree that if a candidate spends all their time on the simple error cases then they don't understand TDD. I think a pair programming environment would be ideal for an interview. Maybe actually have the candidate solve an actual problem you're solving. This may sound like it may take a lot of time, but I'd rather be part of a team that can spend 1-2 hours writing code in an interview, then waste that time on soft silks.  If the candidate complains that it's not their IDE/editor of choice, that should send up a flag. Granted this is my ideal environment. What about a 2 stage interview? One where they write the tests for a already existing piece of code (maybe to increase the codes functionality), then another where they try and write code to get the tests to pass.  Granted this is not testing if they actually use TDD, but it would show if they have test -&amp;gt; functionality will show if they have the skill. I think spending some time, 2-3 hours with a machine, later in the interview process, say after a phone screen, maybe second round of face to face, might pay dividends in the quality of people on a team.  Then again it might depend on how skilled you need this individual to be. Thanks for the input, Big Mike</body>
  </mail>
  <mail>
    <header>Re: When it matters most, don't forget your tests.</header>
    <body>So who do you work for???  Steve Sent on the Sprint® Now Network from my BlackBerry® -----Original Message----- Date: Wed, 5 May 2010 16:25:04 Subject: RE: [junit] When it matters most, don't forget your tests. Mike, this is such a great topic you've stumbled on.  Where I work, we are doing lots of hiring this year.  Every development engineer candidate that comes in gets to do at least two programming problems on the board.  For one of the problems, the question is something like, "Write a function in any language you want (except Perl) to do XXX."  And then once they have that, we ask them to tell us how they'd unit test what they just wrote. It's a rare individual that says, "Damn, now I realize I should have written the unit test FIRST!"  And out of probably 100 candidates in the past few years of this approach, not a single candidate has ever actually written a JUnit/NUnit/whatever test case first.  But I hold out hope that person will someday grace our interview room. Cheers, Todd. -----Original Message----- From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of Mike Forsberg Sent: Monday, May 03, 2010 10:24 AM To: junit@yahoogroups.com Subject: Re: [junit] When it matters most, don't forget your tests. Thank you to all those that responded. I agree that if a candidate spends all their time on the simple error cases then they don't understand TDD. I think a pair programming environment would be ideal for an interview. Maybe actually have the candidate solve an actual problem you're solving. This may sound like it may take a lot of time, but I'd rather be part of a team that can spend 1-2 hours writing code in an interview, then waste that time on soft silks.  If the candidate complains that it's not their IDE/editor of choice, that should send up a flag. Granted this is my ideal environment. What about a 2 stage interview? One where they write the tests for a already existing piece of code (maybe to increase the codes functionality), then another where they try and write code to get the tests to pass.  Granted this is not testing if they actually use TDD, but it would show if they have test -&amp;gt; functionality will show if they have the skill. I think spending some time, 2-3 hours with a machine, later in the interview process, say after a phone screen, maybe second round of face to face, might pay dividends in the quality of people on a team.  Then again it might depend on how skilled you need this individual to be. Thanks for the input, Big Mike</body>
  </mail>
  <mail>
    <header>Re: When it matters most, don't forget your tests.</header>
    <body>Before this gets out of hand.  I intended this discussion to be about unit testing in the interview. Please do not turn it into a hiring free for all.  If you'd like to get in touch with someone, their e-mail is in the post. Big Mike doing lots of hiring this year.  Every development engineer candidate that comes in gets to do at least two programming problems on the board.  For one of the problems, the question is something like, "Write a function in any language you want (except Perl) to do XXX."  And then once they have that, we ask them to tell us how they'd unit test what they just wrote. the unit test FIRST!"  And out of probably 100 candidates in the past few years of this approach, not a single candidate has ever actually written a JUnit/NUnit/whatever test case first.  But I hold out hope that person will someday grace our interview room. Forsberg</body>
  </mail>
  <mail>
    <header>Re: When it matters most, don't forget your tests.</header>
    <body>That's my fault. Through the analytical power of hindsight, I realize that I shouldn't have let that one through the moderation process. Simon (One of the JUnit list moderators) -- simonpeter.org | simonpeter.com | newlife-upc.org</body>
  </mail>
  <mail>
    <header>Re: When it matters most, don't forget your tests.</header>
    <body>This is a great discussion and I've been enjoying following along. In the (somewhere in the region north of) ten years that I've been using JUnit, I have never had their use mandated *and* enforced by an employer and I've never been asked about them in an interview. I just applied for a developer position at nearby big city and had to complete a pre-screening call technical questionnaire and some of the Java questions included "write a method that does X", but no mention of JUnit (or any other such tool). So, I threw caution to the wind and submitted not only methods that did X, but unit tests to ensure that the method really did do my best understanding of X. Two of my three previous employers had zero unit tests in-house when I stepped through the door. In both of them, I wrote the first tests and started trying to share the vision of tested code being somewhere that bugs can't hide. It's hard work. Unit testing should be a "no-brainer", but I find that it's still treated poorly within corporations. Simon -- simonpeter.org | simonpeter.com | newlife-upc.org</body>
  </mail>
  <mail>
    <header>RE: When it matters most, don't forget your tests.</header>
    <body>I know this opens up a huge can of worms, but it is amazing to me what should be standard engineering practices are neither practiced nor understood.  I have to go so far as setting up configuration management tools like Subversion and JIRA just to get work done.  That's for both big and small companies.  The concepts of CM, unit testing, and continuous integration are completely lost. At the end of the day, I end up being both an engineer and a process guru.  It's a good thing I like agile processes or my prospective employers might have real heartburn on the cost of implementing processes. I honestly think that some engineering firms are run by network administrators with the title "software engineer"...  but that's way of topic. -----Original Message----- From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of Simon Chappell Sent: Thursday, May 06, 2010 2:31 PM To: junit@yahoogroups.com Subject: Re: [junit] When it matters most, don't forget your tests. This is a great discussion and I've been enjoying following along. In the (somewhere in the region north of) ten years that I've been using JUnit, I have never had their use mandated *and* enforced by an employer and I've never been asked about them in an interview. I just applied for a developer position at nearby big city and had to complete a pre-screening call technical questionnaire and some of the Java questions included "write a method that does X", but no mention of JUnit (or any other such tool). So, I threw caution to the wind and submitted not only methods that did X, but unit tests to ensure that the method really did do my best understanding of X. Two of my three previous employers had zero unit tests in-house when I stepped through the door. In both of them, I wrote the first tests and started trying to share the vision of tested code being somewhere that bugs can't hide. It's hard work. Unit testing should be a "no-brainer", but I find that it's still treated poorly within corporations. Simon On Wed, May 5, 2010 at 6:25 PM, Bradley, Todd are that For one any that, we the past written person will cases interview. solving. of a that ideal then Granted they -- simonpeter.org | simonpeter.com | newlife-upc.org</body>
  </mail>
  <mail>
    <header>Re: When it matters most, don't forget your tests.</header>
    <body>I've been doing some teaching at a major university department for 4th years and MSc students. The first year I taught the course, I had to back up and do a session on version control. A significant number of the students (including some who had worked in industry) had never seen it. The fact that one can get through a CS degree too without using version control is less surprising, but still disappointing. S. Steve Freeman</body>
  </mail>
  <mail>
    <header>Re: When it matters most, don't forget your tests.</header>
    <body>Some of the teams in my large corporation are struggling with working with parallel streams to the extent that they hold each project up because they don't want to change the same code as each other. When pushed it's because they don't understand or have never used the branching mechanism of their SCM tool.</body>
  </mail>
  <mail>
    <header>Re: junit installation problem</header>
    <body>Thank you for your response. I didn't see the mailing list option in this site. I attached the file to the "Files" link on the left pane of this site, I hope that is alright. Thank you and hope we can get Junit up and running. THanks again! The file is called Junit-Troubleshooting the installation to work. I have a spreadsheet with screenshots and an explanation of my install, I hope some one responds to my email rodrigo7x@... that I may send the file. I believe the classpath isn't taking effect.</body>
  </mail>
  <mail>
    <header>RE: When it matters most, don't forget your tests.</header>
    <body>None of my university classes covered version control.  It wasn't until I got my first job that I even heard of the concept. Similarly (and bringing this a little more back on topic) none of my university classes covered unit testing, either.  But that was long before TDD and the whole "test infected" thing. As far as I know, none of my university professors (both undergrad and graduate) had any clue about version control or unit testing, especially automated unit testing.  I just always chalked that up to them having a completely academic background, with no real world professional software engineering experience.  An important part of the first 5 years of my career was understanding the difference between how professors wanted things done and how things are done in the industry.  Nobody told me in college that they would be such different worlds. Cheers, Todd. -----Original Message----- From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of Steve Freeman Sent: Saturday, May 08, 2010 4:03 AM To: junit@yahoogroups.com Subject: Re: [junit] When it matters most, don't forget your tests. I've been doing some teaching at a major university department for 4th years and MSc students. The first year I taught the course, I had to back up and do a session on version control. A significant number of the students (including some who had worked in industry) had never seen it. The fact that one can get through a CS degree too without using version control is less surprising, but still disappointing. S. Steve Freeman  ------------------------------------ Yahoo! Groups Links</body>
  </mail>
  <mail>
    <header>Re: When it matters most, don't forget your tests.</header>
    <body>This is where I think I was quite lucky. When I was in University, around 2002, I has a course called Software Engineer which mimicked a real project using XP. Groups of 8 people worked together to add features to an application. The application could only be submitted through CVS. The application had to have tests that passed and teams that didn't do them or had them broken were penalised. The application had to have a documentation of the new functionality in terms of use cases which mapped into tests, at the time we used a tool called objecteering (I thinkl). And teams that didn't do it were penalised. At that time neither me nor most of my colleagues understood the value of all this, but now I'm happy that I had that first experience. Nuno</body>
  </mail>
  <mail>
    <header>Re: Re: junit installation problem</header>
    <body>Rodrigo, The Excel file is mostly just text.  Can you post the text as an email, for much easier reading? site. I attached the file to the "Files" link on the left pane of this site, I hope that is alright. the installation to work. I have a spreadsheet with screenshots and an explanation of my install, I hope some one responds to my email rodrigo7x@... that I may send the file. I believe the classpath isn't taking effect.</body>
  </mail>
  <mail>
    <header>junit historical statistics</header>
    <body>Hello, Could you tell me what tools do you use to analyze historical junit executions? I would like a tool able to tell me how often a test has failed, basically. But I would love to have a full statistical analysis of the tests we have run during the last year, with charts and stuff. I'm sure I'm not the first to ask for something like this, but I haven't found a free software that does this. thanks. pura vida -- ¡paz y baile!</body>
  </mail>
  <mail>
    <header>Re: junit historical statistics</header>
    <body>test results and analysis. It has an Ant task you can use to push your JUnit results into it. Very superior to HTML reports, in my humble opinion, but then again, I'm the author ;-)</body>
  </mail>
  <mail>
    <header>Re: Disabling test code generation globally?</header>
    <body>tomte, I'm curious about the feature you are asking for.  Have you profiled a test run, and found the generation or execution of this code to be a serious slowdown?  If so, I'd be curious to know more. "Premature optimization is the root of all evil"  -- Donald Knuth anything.toString()) generated on compile time and b) executed on runtime, even if all runs ok. suppress the generation of the code to be suppressed. generation globally, for instance the String concatenations shown above should be suppressed. For assertTrue( "...", ok) no code should be compiled at all. having costly setups, should be suppressed.</body>
  </mail>
  <mail>
    <header>Re: Search Results as Tree of Topic Threads - needed! - how?</header>
    <body>"Group by topic"?  I see it there at the forum is useless.</body>
  </mail>
  <mail>
    <header>String concatenation is costly - WAS: Disabling test code generation globally?</header>
    <body>Hi, yes, String concatenation is known to be a serious performance lack. And it also blows up the size of the compiled code without use. At least for code to be transmitted over the Internet (e.g. by Java Web Start or in Applets) this should be avoided too. Java does conditional compilation if the condition is final. Without conditional compilation there is no other way than commenting out the hundreds of assertions manually - not really realistic. This keeps me from using standard test frameworks in my own projects. In my own logger I have such a global boolean flag to disable test code generation. But this also can not stop those message String concatenations because these are done before passing the resulting String to the internally disabled assertTrue(message, ok) method. Would it be technically impossible to solve this through an annotation like e.g. @EnableTestCodeGeneration? Annotations are recognized at compile time. tomte</body>
  </mail>
  <mail>
    <header>Re: Class-level @Rule</header>
    <body>Max, I really don't think that is true. MethodRule allows you to do things based on the specific test name, and intercept and even replace the running of a test. Consider ExpectedException. You really could not do anything like that in a @Before or @After method. You would have to do it inside your test and use an execute around pattern to handle the exception. For your use case it is a drop more boilerplate than a rule, but all you would do is define a @Before method in a common superclass or in your @Before call a class that encapsulates the functionality. Yes you have to wrap the call in a method rather than defining a field, but Java is kind of verbose already. method? should be MethodRule, but that would require all the rules out there to change. reduces the chances that tests are independent. I'm feeling quite the fuddy-duddy on this, though.</body>
  </mail>
  <mail>
    <header>Re: Re: Class-level @Rule</header>
    <body>Your point concerning ExpectedException is valid, but arguing that method rules are even more useful than class rules does not say anything about class rules being unuseful. "Java is verbose already" is not a good reason to make things even more unnecessarily verbose. You say I should write: I want to write: Personally, I think the second is self-evidently greatly advantageous. * Much less boilerplate in each test using the common code. * Don't need to repeat yourself nearly as much. * No risk of forgetting the teardown. Max.</body>
  </mail>
  <mail>
    <header>Re: String concatenation is costly - WAS: Disabling test code generation globally?</header>
    <body>Hi tomte, indeed, if you have a multitude of such operations, the difference in the generated compiled code can be of some importance. However, since we are talking here about unit tests, these are parts of your project that are not packaged and deployed with your binaries. Unit tests are executed, and if passed ok they are then ignored, when the final package is created. Therefore, I think the concern for this difference in the compiled code is not justified. Moreover, I don't think it is possible to make the compiler ommit parts of the code based on annotations. At most you can benefit of the smart features of the compiler that, as you said, eliminates the parts of the code that cannot be reached because of some final condition. So you could technically define a multitude of final constants, like some switches, that can enable/disable parts of the unit tests. But I repeat: I think the effort is not justified. We are talking here about unit tests, which are not deployed on client's system. Cheers, Bogdan code to be transmitted over the Internet (e.g. by Java Web Start or in Applets) this should be avoided too. hundreds of assertions manually - not really realistic. This keeps me from using standard test frameworks in my own projects. generation. But this also can not stop those message String concatenations because these are done before passing the resulting String to the internally disabled assertTrue(message, ok) method. e.g. @EnableTestCodeGeneration? Annotations are recognized at compile time.</body>
  </mail>
  <mail>
    <header>how to assert result of a void login method</header>
    <body>hello, how can i assert the result of the void login method below thanks === testLogin method === ; //expected failed, how to catch exception and assert result ??? === method to be tested === UserStore.Client userStore = new UserStore.Client(userStoreProt, // Authenticate as a user &amp;amp; password AuthenticationResult authResult = userStore.authenticate(userid,</body>
  </mail>
  <mail>
    <header>Re: how to assert result of a void login method</header>
    <body>Generally, problems testing a behavior in your code means that it would benefit from simplification or breaking into multiple methods, each of which is easier to test independently. The JUnit FAQ also specifically mentions testing void methods:  Simon (One of the JUnit list moderators) -- simonpeter.org | simonpeter.com | newlife-upc.org | wisconsindistrictnews.org</body>
  </mail>
  <mail>
    <header>Re: String concatenation is costly - WAS: Disabling test code generation globally?</header>
    <body>It can be, but it is not automatically one. To be honest, I have never seen String manipulation to be the bottle neck in real life. Run a benchmark, don't guess where your performance problems are. You might as well read tea leaves. Are you guessing again? Who cares after compression if it's 10k or 12k? Or 100k or 110k? Do you mean you prefer performance over correctness? That sends up a bunch of red flags: - your own logger -- nothing else is good enough, you have to write your own? - disable test code -- do you mix test code and production code? - you're worried about test performance but didn't profile? Since you already wrote your own logger, why not write your own preprocessor? Please let us know how many nano seconds of performance you could squeeze out of your production tests. Robert</body>
  </mail>
  <mail>
    <header>Re: Disabling test code generation globally?</header>
    <body>Hi! Though I fully agree with the statements in other posts answering that tests in production code is evil, a possible solution to your problem. In a unit test, I first wrote something like: This was very slow, as method buildALengthyDescriptionofData() was concatenating/formating quite an amount of data (purists wouls say this is an integration test ;-). My solution was: I avoid this, though, as much as I can, as cause &amp;amp; effect are sort of dissociated. Hope this helps, anything.toString()) generated on compile time and b) executed on runtime, even if all runs ok. suppress the generation of the code to be suppressed. generation globally, for instance the String concatenations shown above should be suppressed. For assertTrue( "...", ok) no code should be compiled at all. having costly setups, should be suppressed.</body>
  </mail>
  <mail>
    <header>Re: Class-level @Rule</header>
    <body>It's somewhat more symmetric if you look at: Before -&amp;gt; BeforeClass After -&amp;gt; AfterClass Rule -&amp;gt; ClassRule MethodRule, but that would require all the rules out there to change. Also, I'm not happy about encouraging more extra-test state as this reduces the chances that tests are independent. I'm feeling quite the fuddy-duddy on this, though.</body>
  </mail>
  <mail>
    <header>Re: Class-level @Rule</header>
    <body>Max, The main obstacle I'm aware of right now is the committers' time.  One thing that would help is clear consensus on community opinion.  There are currently two different patches mentioned in that thread--would you be willing to make a case about which is the better solution?</body>
  </mail>
  <mail>
    <header>Re: Seeking sample JUnit result file with Categories</header>
    <body>Todd, I'm afraid I can't.  There's no special support in ant that I'm aware of for categories, so I'd be surprised if the XML output looked significantly different. somebody would be willing to send me a copy of a JUnit XML result that uses Categories. I'd rather not have to cook up a whole JUnit project myself just for the purposes of seeing what the format looks like.</body>
  </mail>
  <mail>
    <header>Re: Class-level @Rule</header>
    <body>Thankyou, this I can usefully do. Alistair Israel's patch is a straightforward propagation of the existing concepts of MethodRules to class level. Daniel Brolund's patch picks the terminology of "TestCaseRule" for this feature, which I find less appropriate than "ClassRule" given that tests can be ordinary classes now rather than inheriting from junit.framework.TestCase. It also goes considerably further, extending the concept of rules beyond classes, to suites, and adding the concept of propagating rules from suites to individual classes and methods. In the parts where the two overlap, I believe Alistair Israel's to be slightly superior in the minor details: * Passes an org.junit.runners.model.TestClass to its class-level * Validates that ClassRule fields must be static. In other respects, it seems to me that Daniel Brolund's work is close to being a superset of Alistair Israel's. Therefore, I propose that what should happen is: * Review/merge Alistair Israel's work, and declare issue 29 fixed. * Invite Daniel Brolund to tweak his extended work to be based upon Thanks, Max.</body>
  </mail>
  <mail>
    <header>Re: Class-level @Rule</header>
    <body>Hi Max, I guess my question is other than the syntactical sugar, what does a class level rule gain for you? I would expect it to be something more than a way of avoiding that kind of boilerplate. As an example of the kind of thing I think a class rule would enable, is that it might allow the rule to dynamically pass values to the test class's constructor based on some dynamic criteria (say a souped up version of Parameterized) or perhaps change the runner that will run the tests, or dynamically disable certain tests (say based on the OS the test is running on). Something that is not possible with an @BeforeClass or @AfterClass annotation. But that is just my imagination. I'm curious if there are real use cases like that.</body>
  </mail>
  <mail>
    <header>Re: Re: Class-level @Rule</header>
    <body>I just explained that in my previous reply. When the boilerplate that is avoided is so excessive, the syntactic sugar itself becomes a valuable feature. No. Test class instantiation occurs per-method, not per-class, thus class-level is not where it can be changed. No. The Runner is what invokes the rules, so rules can't change the runner. A class rule could skip an entire class of tests, if you wanted it to. The ability to package a common class-level setup/teardown behaviour and re-use it in many places is what rules provide over embedded before/after methods. That's very useful by itself, and they don't have to do anything more to justify their existence. Max.</body>
  </mail>
  <mail>
    <header>About @DataPoint and @ Theory</header>
    <body>Hi, the usage of @DataPoint and @Theory. and i hope my test framework can handle each compatible @DataPoint for the @Theory test as the independent test to run. I hope everyone of this kind test can generate their own "Assertion Success" or "Assertion Fail". For example: @DataPoint @DataPoint @DataPoint @Theory assertEquals("Two strings are not matched!", "Test in our test framework. But it fails. matter how many compatible @DataPoint parameters there are. And it will fail the test once an Assertion Fail generate, then, stop here and ignore the left @DataPoint parameters. result, we don't want the test to stop by only one fail result, we want to see all results by one time run. requirement, I think it will provide more convenience for every tester. Thank you, Rionard Zhao</body>
  </mail>
  <mail>
    <header>Re: About @DataPoint and @ Theory</header>
    <body>There is an issue open for this feature request: Vote up if you agree with the suggested "runDiscretely" option. Brett</body>
  </mail>
  <mail>
    <header>Re:Re: About @DataPoint and @ Theory</header>
    <body>I have voted up for that. Hope that can be considered. Thank you~ å¨2010-04-28 21:51:20ï¼"Brett Daniel" &amp;lt;brettdaniel@...&amp;gt; åéï¼ There is an issue open for this feature request:  Vote up if you agree with the suggested "runDiscretely" option. Brett</body>
  </mail>
  <mail>
    <header>Re: Class-level @Rule</header>
    <body>I really don't perceive that as excessive boilerplate. YMMV. Test instantiation is yes, but I would expect a ClassRule to provide a hook into the instance generation process (although for the whole class, not each case at a time). Just like the ExpectedException rule intercepts the Statement and replaces it with its own, a ClassRule can intercept the Runner and replace it with its own (possibly). Hmm, I guess we have to agree to disagree on that one.</body>
  </mail>
  <mail>
    <header>Test runtime scenario using junit</header>
    <body>Hi, Is it possible to test a runtime scenario using junit? For instance, similar to attaching an eclipse debugger to a running process, attach a junit test suite to an already running JVM? The reason why I have this doubt is because, I am making changes to a small part of a huge code base, but in order to test the small code change a lot of other objects have to be populated before invoking the test method. Also, attaching to a running process similar to eclipse debugger, would help me simulate run time scenarios and check if expected exceptions are thrown by the method being tested by Junit. Please get back to me if my question is not clear. Thank you Regards Ananth</body>
  </mail>
  <mail>
    <header>Re: Test runtime scenario using junit</header>
    <body>Ananth, Needing to change a small area in a large, tangled codebase is an all-too-familiar problem.  If you haven't already read Michael Feather's Working Effectively With Legacy Code, you'll likely get a lot out of it.  The short version is: for every hour that you spend writing tests that have to work around these large dependencies, if you can find at least another hour to improve the design of the tested code to reduce those dependencies, the second hour will very often pay itself off fairly quickly. That said, can you help me understand the scenario you have in mind? Especially, are the objects that need to be populated somehow globally accessible, or do you need to somehow pass them into the JUnit test? Thanks, to attaching an eclipse debugger to a running process, attach a junit test suite to an already running JVM? part of a huge code base, but in order to test the small code change a lot of other objects have to be populated before invoking the test method. Also, attaching to a running process similar to eclipse debugger, would help me simulate run time scenarios and check if expected exceptions are thrown by the method being tested by Junit.</body>
  </mail>
  <mail>
    <header>Best way to do "assertNotEquals()"?</header>
    <body>I must be missing something simple, but why is there no "assertNotEquals()" in JUnit?  There is "assertNotSame()", but that's not quite the same thing.  I guess "assertFalse(expected.equals(actual))" is about the best I can do.</body>
  </mail>
  <mail>
    <header>Re: Best way to do "assertNotEquals()"?</header>
    <body>The challenge with assertions is figuring out which ones need to be in org.junit.Assert and which can reasonably be left out. There are potentially thousands of possible assertions that make sense in various domains, but we can't include them all. If we only provide fail(), that's not enough. AssertNotEquals() fell below the line. Matchers provide a nice clean way to add variations to assertions without cluttering the core of JUnit. I hope people take more advantage of customer matchers in the future. Regards, Kent</body>
  </mail>
  <mail>
    <header>Re: Test runtime scenario using junit</header>
    <body>Hi David, Thanks for the reply. To answer your question, I need to somehow pass the objects into the Junit test to call the method. Let me explain the scenario better. My problem is not that i am unable to test the small code change. I would be able to write testmethods only to exercise that part of the code. But in order to simulate a run time scenario, i need hav a lot of objects populated already. The kind of environment i need to simulate before calling the test method, is something like this. I need to have a VmwareESX host to be registered in my application database, and identify what are the VMs installed on that machine and and trigger an operation on those VMs to move from one host to another. This kind of scenario is very difficult to populate on objects. I was looking at a way to do those operations manually on my running application, and attach the Junit test class to the already running process where i will already have the environment. I can use my application to do those set up operations before i trigger the junit test case. This is very similar to how we can attach an eclipse debugger to a running windows service and point to a source code to debug. The parameters eclipse would take for that (remote debugging) are ip address and port number. Is there anything similar available with Junit framework? Hope i have not confused you even more :) Regards Ananth -- Regards Ananth</body>
  </mail>
  <mail>
    <header>Re: Test runtime scenario using junit</header>
    <body>Ananth, The scenario seems clear enough to me, and the short answer is that no, JUnit doesn't do anything like that. Not that it couldn't, but that would be outside the scope of the framework. If this is commercial work, we could discuss offline what the paid options are for providing help on the JUnit side of what you want to do. Regards, Kent</body>
  </mail>
  <mail>
    <header>Re: Test runtime scenario using junit</header>
    <body>Thanks a lot Kent. This is not for commercial work. I just wanted to ensure i din miss out on a feature that is available with JUnit framework. Thank you very much for your support. Regards Ananth -- Regards Ananth</body>
  </mail>
  <mail>
    <header>When it matters most, don't forget your tests.</header>
    <body>This may be better in a blog post, which I will hopefully get to... but I'd like to pose two questions to the group first.  Let's call it research. I've just completed a set of interviews and looking back on the coding questions.  I realized that I never followed my test first mantra that I perform at home. First question, to those giving the interview... Would you ever suggest/remind a candidate of TDD style in his/her code? Second question, why on earth does a candidate, like myself, forget to write tests and incrementally improve their code?  Do this show a lack of software development maturity? As a community reminder, and to myself.... don't forget TDD style on interviews.</body>
  </mail>
  <mail>
    <header>Re: Best way to do "assertNotEquals()"?</header>
    <body>BTW: assertNotEquals is seldome usefull for me. I usually want to assert more specificaly than just not equals. So I never miss it. Could your assert be more specific? That would likely improve your test. Greetings,</body>
  </mail>
  <mail>
    <header>Re: When it matters most, don't forget your tests.</header>
    <body>Hi Mike, I think it's interesting that under the "heat" of an interview, TDD practices get dumped. The same seems to happen to many developers under the heat of a challenging deadline. When I interviewed candidates in the past, I pay close attention to if they mention TDD or automated unit testing. If they don't mention it themselves, I ask. That is because I believe it is one of most important (perhaps THE most important) development skills. I also ask a lot of questions regarding test case identification. It has been a long time since I was on an interview which asked me to write code. However, the last interview I was on, I was presented with a code sample and asked what was wrong with it. It was a single function, spanning three printed pages, with a "bug" somewhere in it. I told the interviewer that the problem was there were no unit tests, and the code was not clearly written - after fixing those two things, the bug should be obvious. It's easy to forget these things during an interview. Developer interviews that I have seen tend to focus on specific developer experiences, such as familiarity with specific languages or technologies, or knowledge of a certain domain. It is easy for the interviewer and candidate to get lost in these details and forget good practices. I think this focus is generally a mistake. I think the focus should be on demonstrating experience with good development practices, good design, testing, well-written code, along with a desire to learn and grow as a developer on a team. Cheers, Dennis</body>
  </mail>
  <mail>
    <header>Re: Complete RCP Application Testing</header>
    <body>t_manev08, That's a pretty big question.  The book "Contributing to Eclipse" has some good chapters on testing in Eclipse (although the specifics may have changed since publication).  Hope that helps, testing dependable modules.</body>
  </mail>
  <mail>
    <header>Re: Complete RCP Application Testing</header>
    <body>Thanks man. I did find what was looking for. ________________________________ To: junit@yahoogroups.com Sent: Tue, April 6, 2010 3:12:58 PM Subject: Re: [junit] Complete RCP Application Testing t_manev08, That's a pretty big question.  The book "Contributing to Eclipse" has some good chapters on testing in Eclipse (although the specifics may have changed since publication) .  Hope that helps, David Saff testing dependable modules.</body>
  </mail>
  <mail>
    <header>What needs to happen for maven?</header>
    <body>All, We're in the process of releasing 4.8.2 (a small interim bugfix release).  I'd like to do the right steps with respect to maven, but have to admit that I'm not at all sure what steps will make it available to everyone's repo.  Can someone walk me through it?  I believe that the existing feature request references both a Sonatype and Codehaus repo:  Thanks,</body>
  </mail>
  <mail>
    <header>JUnit 4.8.2 is released</header>
    <body>This is a small bugfix release:  Download from</body>
  </mail>
  <mail>
    <header>Running suites with annotation</header>
    <body>With "older" traditional creation of test suites, the suite() method is used. I can invoke the test via How can I invoke classes which have the newer annotation style @Suite.SuiteClasses(...) defined? Tom</body>
  </mail>
  <mail>
    <header>Re: Running suites with annotation</header>
    <body>I'm not sure is this the right thing you are looking for, but to run JUnit Suite class, for JUnit 4 clasess that have annotation style@, you can write as this example in your Test suite() method: ________________________________ To: junit@yahoogroups.com Sent: Fri, April 9, 2010 12:23:06 AM Subject: [junit] Running suites with annotation With "older" traditional creation of test suites, the suite() method is used. I can invoke the test via How can I invoke classes which have the newer annotation style @Suite.SuiteClasses (...) defined? Tom</body>
  </mail>
  <mail>
    <header>Re: Running suites with annotation</header>
    <body>Hope this helps, I can invoke the test via @Suite.SuiteClasses(...) defined?</body>
  </mail>
  <mail>
    <header>Sort Tests</header>
    <body>I have been trying to figure out how exactly to use JUnit 4's new sort mechanism.  I have come across the documentation at  doesn't fully describe how to use it.  I don't see a sort annotation, and I was hoping you didn't have to extend the Suite class, overload all of the constructors, and then call the sort method.  The documentation points to a Request.sortWith(Comparator) method, but how do I intercept my Suite and call that method when running the tests through Ant, Mvn, or an eclipse JUnit execution? I'm aware JUnit tests are unit tests that shouldn't need to be ordered, but we have a fairly heavy handed set of side effects produced on win32 that I'm trying to automate using JUnit.  My only other option is to use TestNG, but I'm trying to standardize on JUnit.  Any and all tips, even if you're pointing me to the right documentation is GREATLY appreciated!</body>
  </mail>
  <mail>
    <header>Chain tests, and share information accross several tests</header>
    <body>Hello dear JUnit community. My name is Yves Dessertine and I am new to JUnit. I have a question about good practises in JUnit. First of all, we plan to use JUnit to do integration testing (in our case, to test complete test scenarios). So JUnit tests are not "unit" test, but are all tied together to test a complete use case. Here, we test a complete workflow. Here's a simple example : ======================================================== /** * Test the creation, then the submission of an hypothetical order */ ======================================================== The holder looks like this: ======================================================== ======================================================== Can you tell me if this way of chaining test, and pass infos between test is a completly crappy antipattern, or if it's OK ? Thank you. Yves DESSERTINE</body>
  </mail>
  <mail>
    <header>Re: Using Sorter</header>
    <body>David, Can you point me in the right direction to documentation on using Sorter?  I have a handful of installer tests that I need to run in order on a win32 box.  I have come across the Sorter documentation at  l, and I don't know what's the best practice to extend Suite and set the comparator. How do I use sorter so I can run testA() testC() and testB() in that order?</body>
  </mail>
  <mail>
    <header>Re: Sort Tests</header>
    <body>So then why does junit 4 have a Sorter class, with documentation stating "A Sorter orders tests. In general you will not need to use a Sorter directly. Instead, use Request.sortWith(Comparator). "?  Why does this even exist? mechanism.  I have come across the documentation at  doesn't fully describe how to use it.  I don't see a sort annotation, and I was hoping you didn't have to extend the Suite class, overload all of the constructors, and then call the sort method.  The documentation points to a Request.sortWith(Comparator) method, but how do I intercept my Suite and call that method when running the tests through Ant, Mvn, or an eclipse JUnit execution? have a fairly heavy handed set of side effects produced on win32 that I'm trying to automate using JUnit.  My only other option is to use TestNG, but I'm trying to standardize on JUnit.  Any and all tips, even if you're pointing me to the right documentation is GREATLY appreciated!</body>
  </mail>
  <mail>
    <header>Re: Chain tests, and share information accross several tests</header>
    <body>Hi Yves, For JUnit it is an anti-pattern to do so. JUnit doesn't guarantee any order of test execution. So JUnit is free to execute your tests in reverse order, if it so chooses. JUnit is optimized for small unit level tests and wants the tests to be decoupled, so they can be executed in part or in any order. So you use JUnit in an uncommon way for an uncommon task, at least as JUnit is concerned. BTW: JUnit stops execution of a test-method on the first error. It then continues with the next test in the suite. You might want to take a look at TestNG. There you can do more in terms of ordering tests. And besides, you might need to think about what is a test for you and how do you program that with JUnit or alike. It might be better to actually build one test method in JUnit that also corresponds to one of your tests, so you align the continue/stop behaviour of junit with what suites your needs. Greetings, practises in JUnit. test complete test scenarios). So JUnit tests are not "unit" test, but are all tied together to test a complete use case. Here, we test a complete workflow. completly crappy antipattern, or if it's OK ?</body>
  </mail>
  <mail>
    <header>Re: Chain tests, and share information accross several tests</header>
    <body>Yves, Tests are intended to be isolated and self-sufficient in JUnit. This enables the tests to become more valuable by executing in parallel, sorting by likelihood of failure, and creating false negative results less often just because someone changed the order of declaration in a file. So the short answer is that no, JUnit doesn't support the kind of ordering you are talking about. I'm sure you could make it work, but you'd be going against the grain of the design. In my experience the best way to express sequence is with adjacent lines of code: Underneath I could implement these with Command objects or whatever was most appropriate. Regards, Kent practises in JUnit. test complete test scenarios). So JUnit tests are not "unit" test, but are all tied together to test a complete use case. Here, we test a complete workflow. completly crappy antipattern, or if it's OK ?</body>
  </mail>
  <mail>
    <header>Re: Chain tests, and share information accross several tests</header>
    <body>Hi Kent, What you are saying is very specific to JUnit's implementation. It is quite possible to have: See these rting-2/ find out how TestNG achieves this. -- Cédric</body>
  </mail>
  <mail>
    <header>Re: Chain tests, and share information accross several tests</header>
    <body>Well, on a jUnit mailing list, that is exactly what I would expect to see. 8) Using TestNG... ...interesting indeed, perhaps Yves will discover his needs have been met through the links provided. -- Mark</body>
  </mail>
  <mail>
    <header>Re: Chain tests, and share information accross several tests</header>
    <body>Hello. Thank you Malte, Kent, Cédric and Mark for all you clear, interesting and friendly replies. According to what I've read, TestNG has _the_ two missing features (among other): * Dependencies * Parameter I'm now looking closely at TestNG, since it seems more suitable for our needs. In fact, I would already have adopted TestNG if I was sure it is compatible with the project's environment: * Maven 1.0.2 * Selenium (latest) * Hudson (1.349) Because we test a workflow step by step, almost every test will be dependent of the preceding test. Something like: [test step 1] --&amp;gt; [test step 2] --&amp;gt; [test step 3] and so on... AND we will be able to test several workflow branches in parallel, that's interesting. I will say "Thank you Cedric for creating TestNG" :) Yves</body>
  </mail>
  <mail>
    <header>Re: Re: Using Sorter</header>
    <body>Zach, Sorter is really only designed well for people building test-running tools, not individual tests. For now, it seems that you wouldn't lost much by writing: have a handful of installer tests that I need to run in order on a win32 box.  I have come across the Sorter documentation at  l, and I don't know what's the best practice to extend Suite and set the comparator.</body>
  </mail>
  <mail>
    <header>Re: Re: Using Sorter</header>
    <body>Zach, A feature we're considering for JUnit 4.9 would make what you want easier: we'll be more likely to include it if we see an issue logged at github with a lot of votes! have a handful of installer tests that I need to run in order on a win32 box.  I have come across the Sorter documentation at  l, and I don't know what's the best practice to extend Suite and set the comparator.</body>
  </mail>
  <mail>
    <header>Seeking sample JUnit result file with Categories</header>
    <body>I have a tool that's parsing various test file formats, and it'd be great if somebody would be willing to send me a copy of a JUnit XML result that uses Categories. I'd rather not have to cook up a whole JUnit project myself just for the purposes of seeing what the format looks like. Can someone help me out? Thanks, -Todd</body>
  </mail>
  <mail>
    <header>Fwd: regarding of junit code</header>
    <body>hi This is suneetha. iam new to cactus junit. can u please tel how to write cactus junit for this class. my english is not good.but hope u r understanding wht iam saying. actually this is deligate class. in this we create a datagram then we return some string. how to test expected with actual result. please help me. public MicrositeDetailsDTO *processBeforeRedirect *(final HttpServletRequest request, micrositeIntegrationInputObject) wrpLoginName, String partnerName) (userDetailsDTO!=null)?userDetailsDTO.getWrpLoginName():wrpLoginName;//from request logger.log(VodafoneLogger.LOGLEVEL_DEBUG,METHOD_NAME,"wrpLoginName form MicrositeDetailsXMLReader.getMandatoryFields(partnerName, getDataForProfileFields(wrpLoginName,UserProfileConstants.USERPROPERTYSET, property set MicrositeDetailsXMLReader.getMandatoryFields (partnerName,MicrositeIntegrationConstants.PROFILE_VODAFONE_USER_SUBSCRIPTION_NO\ getDataForProfileFields(wrpLoginName,UserProfileConstants.SUBSCRIPTIONPROPERTYSE\ T, MicrositeDetailsXMLReader.getNonMandatoryFields(partnerName, getDataForProfileFields(wrpLoginName,UserProfileConstants.USERPROPERTYSET, property set MicrositeDetailsXMLReader.getNonMandatoryFields(partnerName, getDataForProfileFields(partnerName,MicrositeIntegrationConstants. MicrositeDetailsXMLReader.getMandatoryFields(partnerName, MicrositeDetailsXMLReader.getMandatoryFields(partnerName, logger.log(VodafoneLogger.LOGLEVEL_DEBUG,METHOD_NAME, logger.log(VodafoneLogger.LOGLEVEL_DEBUG,METHOD_NAME, MicrositeDelegate.micrositeDatagramLogging(wrpLoginName,partnerName,encryptedDat\ /** private HashMap getDataForCustomFields(String wrpLoginName, List if(MicrositeIntegrationConstants.SERVICEID_FIELD_CONSTANT.equalsIgnoreCase((Stri\ ng)fieldName)) customFieldMap.put(MicrositeIntegrationConstants.SERVICEID_FIELD_CONSTANT,servic\ (MicrositeIntegrationConstants.DT_FIELD_CONSTANT.equalsIgnoreCase((String)fieldN\ ame))</body>
  </mail>
  <mail>
    <header>Re: Fwd: regarding of junit code</header>
    <body>If you need help with JUnit, please ask JUnit specific questions. If you have a problem with Cactus (which I've never really used) then perhaps the Cactus support lists or forums would be a better place. The JUnit FAQ covers some of the aspects in your question. Please review it.  Simon (One of the JUnit list moderators) (partnerName,MicrositeIntegrationConstants.PROFILE_VODAFONE_USER_SUBSCRIPTION_NO\ getDataForProfileFields(wrpLoginName,UserProfileConstants.SUBSCRIPTIONPROPERTYSE\ T, MicrositeDelegate.micrositeDatagramLogging(wrpLoginName,partnerName,encryptedDat\ if(MicrositeIntegrationConstants.SERVICEID_FIELD_CONSTANT.equalsIgnoreCase((Stri\ ng)fieldName)) customFieldMap.put(MicrositeIntegrationConstants.SERVICEID_FIELD_CONSTANT,servic\ (MicrositeIntegrationConstants.DT_FIELD_CONSTANT.equalsIgnoreCase((String)fieldN\ ame)) -- simonpeter.org | simonpeter.com | newlife-upc.org | wisconsindistrictnews.org</body>
  </mail>
  <mail>
    <header>Re: Fwd: regarding of junit code</header>
    <body>hi thax for responding. but cactus and junit are similar, but only deffirerence is cactus framework is server side. could u please tel how to write in junit for that code. please iam very new to junit. thanks suneetha (partnerName,MicrositeIntegrationConstants.PROFILE_VODAFONE_USER_SUBSCRIPTION_NO\ getDataForProfileFields(wrpLoginName,UserProfileConstants.SUBSCRIPTIONPROPERTYSE\ T, MicrositeDelegate.micrositeDatagramLogging(wrpLoginName,partnerName,encryptedDat\ if(MicrositeIntegrationConstants.SERVICEID_FIELD_CONSTANT.equalsIgnoreCase((Stri\ ng)fieldName)) customFieldMap.put(MicrositeIntegrationConstants.SERVICEID_FIELD_CONSTANT,servic\ (MicrositeIntegrationConstants.DT_FIELD_CONSTANT.equalsIgnoreCase((String)fieldN\ ame))</body>
  </mail>
  <mail>
    <header>Re: Fwd: regarding of junit code</header>
    <body>Forgot to copy JUnit mailing list. Must drink tea before posting! :-) (partnerName,MicrositeIntegrationConstants.PROFILE_VODAFONE_USER_SUBSCRIPTION_NO\ getDataForProfileFields(wrpLoginName,UserProfileConstants.SUBSCRIPTIONPROPERTYSE\ T, MicrositeDelegate.micrositeDatagramLogging(wrpLoginName,partnerName,encryptedDat\ if(MicrositeIntegrationConstants.SERVICEID_FIELD_CONSTANT.equalsIgnoreCase((Stri\ ng)fieldName)) customFieldMap.put(MicrositeIntegrationConstants.SERVICEID_FIELD_CONSTANT,servic\ (MicrositeIntegrationConstants.DT_FIELD_CONSTANT.equalsIgnoreCase((String)fieldN\ ame)) -- simonpeter.org | simonpeter.com | newlife-upc.org | wisconsindistrictnews.org</body>
  </mail>
  <mail>
    <header>Class-level @Rule</header>
    <body>Hi, I'd really like to see something like  current obstacle on integrating the code there? Can I help the process along at all? Thanks, Max.</body>
  </mail>
  <mail>
    <header>Re: Class-level @Rule</header>
    <body>I'm not satisfied with the assymmetry between Rule and ClassRule. It should be MethodRule, but that would require all the rules out there to change. Also, I'm not happy about encouraging more extra-test state as this reduces the chances that tests are independent. I'm feeling quite the fuddy-duddy on this, though. Kent</body>
  </mail>
  <mail>
    <header>Re: Class-level @Rule</header>
    <body>MethodRule, but that would require all the rules out there to change. Could you clarify what you mean by that? In the git branch, Rule is an annotation and ClassRule an interface so I don't understand what you mean by asymmetry. What should be MethodRule? Changing existing rules is inevitable, since MethodRule#apply operates in the context of a FrameworkMethod and an instantiated target object, neither of which are available at class scope. the chances that tests are independent. I'm feeling quite the fuddy-duddy on this, though. If I have a supporting database that I need to load from an SQL dump, and then want to run 20 different tests using it, it's not a very palatable option to needlessly reload the databsae 20 times instead of 1. I agree I'm taking liberties with the definition of a _unit_ test by doing so, but when dealing with legacy code and legacy testsuites, sometimes a philosophically-impure test is better than no test at all. Max.</body>
  </mail>
  <mail>
    <header>Re: Class-level @Rule</header>
    <body>Max, If that is your use case, what isn't accomplished with the @BeforeClass method? be MethodRule, but that would require all the rules out there to change. the chances that tests are independent. I'm feeling quite the fuddy-duddy on this, though.</body>
  </mail>
  <mail>
    <header>Re: Re: Class-level @Rule</header>
    <body>method? There's nothing you can do with a method @Rule that you can't do with a @Before and @After, but rules allow packaging and re-use of setup/teardown behaviour. I want the same advantages at a class level situation. Max. be MethodRule, but that would require all the rules out there to change. the chances that tests are independent. I'm feeling quite the fuddy-duddy on this, though.</body>
  </mail>
  <mail>
    <header>Disabling test code generation globally?</header>
    <body>Hi, when coding assertTrue( this.getClass().getSimpleName() + "Ref ... found to be null: " + anything.toString()) the slow code for the concatenated assertion message will allways be a) generated on compile time and b) executed on runtime, even if all runs ok. The annotation @Ignore is a fine logical feature, but I imagine it can not suppress the generation of the code to be suppressed. I am looking for an switch / option / assertion? to switch off test code generation globally, for instance the String concatenations shown above should be suppressed. For assertTrue( "...", ok) no code should be compiled at all. Also calls to data intensive tests, maybe residing in special test classes and having costly setups, should be suppressed. Any ideas? Thank you in advance, tomte</body>
  </mail>
  <mail>
    <header>Search Results as Tree of Topic Threads - needed! - how?</header>
    <body>Hi, I will not sequentially scroll throw more than 22.000 postings, this way the forum is useless. Please provide a tree view of topics and its replies. Or is there any secret link I missed? See you then. t</body>
  </mail>
  <mail>
    <header>Re: Injection in Constructor V @Before</header>
    <body>It's just not possible to set an instance field of an object before its constructor has completed.  This limitation will affect all extensions.</body>
  </mail>
  <mail>
    <header>Re: Alternative to repeating @ContextConfiguration</header>
    <body>I'm not directly familiar with how SpringJUnit4ClassRunner uses ContextConfiguration.  I would like to hope that it could be re-written with Rules to avoid this duplication, and would welcome a conversation with the Spring developers to talk about how to make it so. "file:src/test/resources/test-applicationContext.xml") than going back to JUnit 3 and extending TestCase again is their another option to constantly repeating "file:src/test/resources/test-applicationContext.xml")?</body>
  </mail>
  <mail>
    <header>Re: Alternative to repeating @ContextConfiguration</header>
    <body>Have you considered 'forking' SpringJUnit4ClassRunner and essentially hard-coding the location of your ContextConfiguration? I mean, it's not much different from having to repeat "extends MySpringTestCase" every time, is it? On David's note: I agree this might be better expressed as a Rule. Personally, in my mind Runners are external to tests, and tests shouldn't really care about who or what's running them. - alistair --</body>
  </mail>
  <mail>
    <header>Need to get the Error, Failure and the CallStack after each testcase run</header>
    <body>Is there a way to do the above Thru any of the junit.framework.* methods as a value that can be stored into the database after the individual Test run. I need to collect these values inside the tearDown() method after each individual test run.</body>
  </mail>
  <mail>
    <header>Re: Need to get the Error, Failure and the CallStack after each testcase run</header>
    <body>Can you use JUnit 4 (org.junit.*)?  This would be dead easy with a TestWatchman. On Fri, Mar 26, 2010 at 1:43 AM, gajendranchandrappa value that can be stored into the database after the individual Test run. individual test run.</body>
  </mail>
  <mail>
    <header>Re: Alternative to repeating @ContextConfiguration</header>
    <body>Interesting idea on forking, no had not considered that, was hoping for an out of the box solution! Since the applicationContext path is hardcoded every time, imho, it's different from repeating extends MySpringTestCase. -- View this message in context:  7p28040606.html Sent from the JUnit - User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: Injection in Constructor V @Before</header>
    <body>Thanks for the clarification. Is there a way then to create a SimpleJdbcTemplate, which uses an injected DataSource, once for use by the test class? @BeforeClass is static so it can't be done in there. Or do people just do it in @Before and have it re instanced each time? -- View this message in context:  tml Sent from the JUnit - User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: Injection in Constructor V @Before</header>
    <body>There may be several ways of getting at what you want.  Before I confuse the issue, however, are you looking for simplicity of code, or efficiency?  How expensive is creating a new SimpleJdbcTemplate?  tml</body>
  </mail>
  <mail>
    <header>Re: Alternative to repeating @ContextConfiguration</header>
    <body>By the way, JUnit should search the superclass hierarchy of a test class to find RunWith annotations.  If SpringJUnit4ClassRunner does the same to find ContextConfigurations, a common base class could do what you want, without reverting to JUnit 3.  7p28040606.html</body>
  </mail>
  <mail>
    <header>Re: Alternative to repeating @ContextConfiguration</header>
    <body>Interesting idea on forking, no had not considered that, was hoping for an out of the box solution! Since the applicationContext path is hardcoded every time, imho, it's different from repeating extends MySpringTestCase.</body>
  </mail>
  <mail>
    <header>Re: Injection in Constructor V @Before</header>
    <body>Thanks for the clarification. Is there a way then to create a SimpleJdbcTemplate, which uses an injected DataSource, once for use by the test class? @BeforeClass is static so it can't be done in there. Or do people just do it in @Before and have it re instanced each time? &amp;gt;   It's just not possible to set an instance field of an object before &amp;gt;   its constructor has completed.  This limitation will affect all &amp;gt;   extensions.</body>
  </mail>
  <mail>
    <header>Re: Injection in Construc</header>
    <body>Thanks David. I was looking at the code from a DRY perspective, so simplicity, clearly it's not that expensive!</body>
  </mail>
  <mail>
    <header>Re: Alternative to repeating @ContextConfiguration</header>
    <body>All environments I know of support annotating a base class. If you still want to express the ContextConfiguration on your test class you can also declare a public static final variable somewhere that holds your context locations. While this may be a bit old skool, either one of these solutions should be enough to handle most real usecases ? Kristian fr., 26.03.2010 kl. 07.49 -0400, skrev David Saff:</body>
  </mail>
  <mail>
    <header>Snow Leopard Install Help: Can't find tests</header>
    <body>Hi everyone, I get the "Could not find class: org.junit.tests.AllTests" error when I test my JUnit install on Mac OS 10.6.2. Ant is installed via the xCode tools and functions properly. I am using the latest JUnit jar file. I have tried placing JUnit into the Library/Java, ~/Library/Java, ~/customdir, and $ANT_HOME. It still gives me that error. I thought the $ANT_HOME would work, but it didn't. My classpath (with it in the $ANT_HOME) is as follows under ~.bash_profile: (you can see some previous attempts commented out) # export JUNIT_HOME="$HOME/Library/Java" # export CLASSPATH=$CLASSPATH:$JUNIT_HOME/junit.jar:$JUNIT_HOME/ # export JUNIT_HOME="/usr/local/ant/lib" export JUNIT_HOME=""$ANT_HOME/lib"" export PATH="/usr/local/bin:/usr/local/sbin:$PATH:$JUNIT_HOME" export CLASSPATH="$CLASSPATH:$JUNIT_HOME/junit.jar:$JUNIT_HOME" I'm really at my wits end at this point. Could somebody please point me in the right direction? The full output of the test is the following: ...$ java org.junit.runner.JUnitCore org.junit.tests.AllTests JUnit version 4.8.1 Could not find class: org.junit.tests.AllTests Time: 0 OK (0 tests) Any help would be appreciated. I must get this working for a class and have been trying for the last four days to get this up and running in different environments. The same error is happening under Ubuntu as well...</body>
  </mail>
  <mail>
    <header>new to esclipse and can't get junit configured</header>
    <body>My version of Eclipse is 1.2.2 for PHP Devs (my primary lang) containing Eclipse 3.5.2. I have a Java project.  I'm trying to run junit via eclipse.  Every tutorial I've seen says to JUnit to the build path, and then I should be able to go to "New" -&amp;gt; "JUnit Testcase" (or perhaps have to go to "Other" first).  I can add it to the build path, but I don't get a New type I can select.  Also when I'm supposed to be able to go to "Show View" -&amp;gt; "Other" and select "JUnit", it is not present. Sounds like I've not installed something.  I do have this: C:\Program Files\eclipse\plugins\org.junit_3.8.2.v20090203-1005 And I also downloaded and placed junit-4.8.1.jar in that same dir. I can run kinda get unit to run from the "Run" menu, but it is awkward.  Any tips on how to properly get this configured?</body>
  </mail>
  <mail>
    <header>Re: Snow Leopard Install Help: Can't find tests</header>
    <body>my JUnit install on Mac OS 10.6.2. latest JUnit jar file. Hi, Ted. I just checked and the class "org.junit.tests.AllTests" isn't part of the JUnit distribution JAR file. You can verify this yourself by listing the contents of your junit.jar using "jar -tf junit.jar". Instead, to get it you have to checkout the source from GitHub (specifically, here:  sts.java - alistair</body>
  </mail>
  <mail>
    <header>Re: new to esclipse and can't get junit configured</header>
    <body>Eclipse 3.5.2. Hi, Nuttzy. First of all, I don't think just placing junit-4.8.1.jar under eclipse\plugins will work.Â Though I'm not entirely familiar with how Eclipse plugin loading works, I would advise against it because Eclipse might get confused and you'll start running into classpath issues. I think you need to go to "Help" -&amp;gt; "Install New Software..." then pick the Galileo software site (I'm just guessing where the plugin is located, YMMV) and look for something like "JUnit Testing Framework Version 4". Hope I managed to point you in the general direction. - alistair</body>
  </mail>
  <mail>
    <header>Re: Snow Leopard Install Help: Can't find tests</header>
    <body>I found the following information in the readme... *Notice*: that the tests are not contained in the junit-4.6.jar but in the installation directory directly. Therefore make sure that the installation directory is on the class path It appears that the version number in the shipped readme is out of date. But the information is still the same. I think you'll be able to take it from there. If you have any more trouble, just e-mail away. Big Mike</body>
  </mail>
  <mail>
    <header>Re: new to esclipse and can't get junit configured</header>
    <body>You might want to try and download the version for Java developers.  I think you might have more problems then just JUnit. I looked at the package details for the PHP version, and I do not see any mention of Java at all.  Then again, I'm not a eclipse configuration expert, as I only download the Java version and a few select other packages that are Java centric.  So I may be completely wrong. Big Mike</body>
  </mail>
  <mail>
    <header>Re: new to esclipse and can't get junit configured</header>
    <body>Hey Guys, I GOT IT!  Between the two of you, you had the right answer ;-)  In the "Install New Software" dialog under Galileo there was nothing there specific to JUnit. But it occurred to me that installing "EPP Java Package" and "Java EE IDE Feature" was a reasonable thing to do. Did that and now JUnit 4.5 is install and I can access the features I previously mentioned were lacking. Thanks!</body>
  </mail>
  <mail>
    <header>Re: new to esclipse and can't get junit configured</header>
    <body>Point of clarification, the PHP Eclipse does ship with enough Java components where I was able to write some sample apps with it and run them. "Install New Software" dialog under Galileo there was nothing there specific to JUnit.  But it occurred to me that installing "EPP Java Package" and "Java EE IDE Feature" was a reasonable thing to do. previously mentioned were lacking.</body>
  </mail>
  <mail>
    <header>Re: new to esclipse and can't get junit configured</header>
    <body>Hi! Acctually, you only have junit to get work with eclipse (i.e. the graphical interface works). If you are not happy with the version of junit shipped with eclipse, just download the version you want (I'd put that into a lib-directory in the project as to get is stowed away via svn or csv). Then, all you need is to tweak the build-path to point to the downloaded vesion. Or you use maven and add it as a dependency. Cheers, where I was able to write some sample apps with it and run them. "Install New Software" dialog under Galileo there was nothing there specific to JUnit.  But it occurred to me that installing "EPP Java Package" and "Java EE IDE Feature" was a reasonable thing to do. previously mentioned were lacking.</body>
  </mail>
  <mail>
    <header>Need to fetch the result data after each test run to update into resultDB (SQL)</header>
    <body>Hi, Can somebody help me, how to get the result as values like PASS, FAIL or ERROR if fail/error the call stack for each testcase. I need to get all the above mentioned values thru any of the "junit.framework..*" methods and inside the tearDown() method after each individual testcase run. Kind regards, Gajendran eg: //Do somthing // post result to DB after each test run // TestCase class // Test1 //Test 2 Is there a way to get the TestResult for each testcase in the tearDown() Please help me in this. I'm not aware which methods/classes to acheive this.But i know when the "The JUnit Runner UI" can get the result after each testcase run, we should be able to fetch from some way. Thanks, GAjendran Chandrappa</body>
  </mail>
  <mail>
    <header>Re: Need to get the Error, Failure and the CallStack after each testcase run</header>
    <body>Thanks for the reply, but which class/methods can give me the below @Before @Test @Test @After Here where to get result and how to get the values of [Pass/fail, if fail-&amp;gt; call stack, if Error-&amp;gt; call stack] Please help me on this since i'm newely implementing framework in JUnit.</body>
  </mail>
  <mail>
    <header>Re: Re: Need to get the Error, Failure and the CallStack after each testcase run</header>
    <body>If you Google for "TestWatchman", do the results help? On Mon, Mar 29, 2010 at 5:26 AM, gajendranchandrappa</body>
  </mail>
  <mail>
    <header>Re: Need to get the Error, Failure and the CallStack after each testcase run</header>
    <body>No not exactly. David can you please help me on the code that is metioned in the messages ID 22596.</body>
  </mail>
  <mail>
    <header>Re: Re: Need to get the Error, Failure and the CallStack after each testcase run</header>
    <body>I'm sorry. There is no way to get the failure trace from within any method marked @Before, @Test, or @After.  There is a way to do it with TestWatchman. Have you tried running the example code from  l On Tue, Mar 30, 2010 at 2:04 AM, gajendranchandrappa 22596.</body>
  </mail>
  <mail>
    <header>Re: Re: Need to get the Error, Failure and the CallStack after each testcase run</header>
    <body>The following code... although not in a tear down, will provide the requirement of placing the information in a database. @Rule It should be noted that this runs after each test.  (I think) One of your later messages, #22597 from groups.yahoo.com message counter thingy, implies that you only want to do this after all the tests.  In that case you'd have to write something to collect the results, and publish them to the database during the @AfterClass annotated method. On Tue, Mar 30, 2010 at 1:04 AM, gajendranchandrappa 22596.</body>
  </mail>
  <mail>
    <header>RE: Re: Need to get the Error, Failure and the CallStack after each testcase run</header>
    <body>To point you in the right direction, you would have a field marked with @Rule, and that field would be something that extends the abstract TestWatchman. From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of David Saff Sent: Tuesday, March 30, 2010 10:24 AM To: junit@yahoogroups.com Subject: Re: [junit] Re: Need to get the Error, Failure and the CallStack after each testcase run I'm sorry. There is no way to get the failure trace from within any method marked @Before, @Test, or @After. There is a way to do it with TestWatchman. Have you tried running the example code from  l David On Tue, Mar 30, 2010 at 2:04 AM, gajendranchandrappa 22596.</body>
  </mail>
  <mail>
    <header>Complete RCP Application Testing</header>
    <body>How can be tested dependable plug-ins, and fragments. To be made JUnits for testing dependable modules.</body>
  </mail>
  <mail>
    <header>RE: Re: @DataPoints called several times for Theories</header>
    <body>My initial post had to do with performance due to the complexity of collecting the datapoints multiple times.  The solution I suggested was to have the class collect the datapoints once, and then copy the datapoints as needed. So it looks as if the patch may solve that part of the issue.  I'll have to look into the strategies as they are listed.  I hope we are not introducing an interface or base class that would be required for the data classes to implement.  That would cause problems with using Theories to test interface contracts. ________________________________ From: junit@yahoogroups.com on behalf of Brett Daniel Sent: Fri 3/12/2010 6:44 PM To: junit@yahoogroups.com Cc: Shin Hwei Tan; Sang Y Baik Subject: Re: [junit] Re: @DataPoints called several times for Theories The undergrads I am advising recently pushed a patch that addresses the issue of mutable data points.  The patch allows developers to define "copy strategies" that duplicate marked data points before every theory execution. In this way, every execution receives a pristine data point, which removes the problems caused when a theory mutates data points. This is orthogonal to datapoint (re)creation, but I think copy strategies may help address the bug that Berin found. The patch creates a new, optional "copyStrategy" parameter for the @DataPoint and @DataPoints annotations. If the developer wants to copy data points, he or she sets the parameter to a class implementing a new CopyStrategy interface. Here is an example: @RunWith(Theories.class) @DataPoint(copyStrategy = MutableWithCopyStrategy.class) @Theory @Theory In the current implementation of JUnit, the second theory may fail because the first theory mutates the datapoint. With a copy strategy enabled, both theories receive a new value. Strategies can do almost anything: clone the data point, call a factory method, or--as in the following implementation--instantaiate a new object with a copy constructor. There are several benefits to this implementation. First, the new parameter is completely optional; if it is omitted, the theory runner behaves as it always has. Second, it doesn't require modifying the data point's class (for example, to add a copy constructor or clone method). Most importantly, it makes it clear to the tester that without a copy strategy one theory execution can impact another. I have CC'd the two students in this email. Please direct any questions to them. Brett On Thu, Feb 18, 2010 at 5:28 PM, Berin &amp;lt;berin.loritsch@...</body>
  </mail>
  <mail>
    <header>RE: Re: @DataPoints called several times for Theories</header>
    <body>I'm still going through the patch.  Is there a default CloneStrategy available? Any cloneable object (implements the Cloneable interface) will be much quicker than another copy strategy.  It's also an interface and a copy strategy that comes with the JVM since before Java 2. Here's a problem I spotted in the implementation: protected Object getCopyStrategyInvokedObject(Object value, Invoking copyStrategy.newInstance() for every object that needs to be copied is going to be a major performance drain.  Not only are we creating more work for the garbage collector, we are going through the overhead of the reflection API to do it.  You will have an order of magnitude better performance if you get your instance of the CopyStrategy first, and pass that as necessary. Perhaps another point of making the code cleaner would be to pull all the data collection stuff into its own API.  It might even be able to support parameterized tests as well as theories.  I imagine that was the idea behind ParameterSupplier? ________________________________ From: junit@yahoogroups.com on behalf of Mike Forsberg Sent: Sun 3/14/2010 12:15 PM To: junit@yahoogroups.com; Shin Hwei Tan; Sang Y Baik Subject: Re: [junit] Re: @DataPoints called several times for Theories Please feel free to join the mailing list. I would find the discussion interesting and wish it would not run offline. Big Mike On Fri, Mar 12, 2010 at 6:44 PM, Brett Daniel &amp;lt;brettdaniel@...</body>
  </mail>
  <mail>
    <header>RE: Re: @DataPoints called several times for Theories</header>
    <body>To put into a frame of reference, in my original post I generated two copies through reflection of the same class.  When I halved that to only one copy through reflection the time went down from 37 seconds to 16 seconds.  Part of that was a geometric reduction in instances that had to be created, but much also stemmed from the .newInstance() calls. ________________________________ From: junit@yahoogroups.com on behalf of Loritsch, Berin C. Sent: Mon 3/15/2010 9:05 AM To: junit@yahoogroups.com; junit@yahoogroups.com; Shin Hwei Tan; Sang Y Baik Subject: RE: [junit] Re: @DataPoints called several times for Theories I'm still going through the patch. Is there a default CloneStrategy available? Any cloneable object (implements the Cloneable interface) will be much quicker than another copy strategy. It's also an interface and a copy strategy that comes with the JVM since before Java 2. Here's a problem I spotted in the implementation: protected Object getCopyStrategyInvokedObject(Object value, Class&amp;lt;? extends CopyStrategy&amp;gt; copyStrategy, int index) throws throw new CopyStrategyFailureException(value, index, Invoking copyStrategy.newInstance() for every object that needs to be copied is going to be a major performance drain. Not only are we creating more work for the garbage collector, we are going through the overhead of the reflection API to do it. You will have an order of magnitude better performance if you get your instance of the CopyStrategy first, and pass that as necessary. Perhaps another point of making the code cleaner would be to pull all the data collection stuff into its own API. It might even be able to support parameterized tests as well as theories. I imagine that was the idea behind ParameterSupplier? ________________________________ From: junit@yahoogroups.com &amp;lt;mailto:junit%40yahoogroups.com&amp;gt;  on behalf of Mike Forsberg Sent: Sun 3/14/2010 12:15 PM To: junit@yahoogroups.com &amp;lt;mailto:junit%40yahoogroups.com&amp;gt; ; Shin Hwei Tan; Sang Y Baik Subject: Re: [junit] Re: @DataPoints called several times for Theories Please feel free to join the mailing list. I would find the discussion interesting and wish it would not run offline. Big Mike On Fri, Mar 12, 2010 at 6:44 PM, Brett Daniel &amp;lt;brettdaniel@...</body>
  </mail>
  <mail>
    <header>Re: Re: @DataPoints called several times for Theories</header>
    <body>On Mon, Mar 15, 2010 at 9:05 AM, Loritsch, Berin C. available?  Any cloneable object (implements the Cloneable interface) will be much quicker than another copy strategy.  It's also an interface and a copy strategy that comes with the JVM since before Java 2. is going to be a major performance drain.  Not only are we creating more work for the garbage collector, we are going through the overhead of the reflection API to do it.  You will have an order of magnitude better performance if you get your instance of the CopyStrategy first, and pass that as necessary. collection stuff into its own API.  It might even be able to support parameterized tests as well as theories.  I imagine that was the idea behind ParameterSupplier? Sadly, ParameterSupplier only applies to one parameter at a time, but I could imagine a unified API that included interfaces for both.  &amp;lt;junit%40yahoogroups.com&amp;gt; &amp;lt;junit%</body>
  </mail>
  <mail>
    <header>Re: Re: @DataPoints called several times for Theories</header>
    <body>David, Berin, and Mike, Thank you very much for the great comments. I have asked Shin Hwei and Sang to provide their thoughts, but until then, here are my answers to your specific questions (SH&amp;amp;S will correct me if I get anything wrong). David wrote... intractable You are correct that copying within a @Datapoint method would create a new data point as needed and would probably be a good workaround for Berin's bug. However, I see two drawbacks in addition to those you mention.  First, one would need to include the copy invocation in every @DataPoint method that used createdOnce. In contrast, annotating the @DataPoint itself would provide all consumers with pristine values.  Second, the solution fails when using @DataPoints with a theory that takes multiple parameters: The code above fails because a and b can be aliases for the same object. It may of course be desirable to run a theory on identical instances, but in that case, the user could make that behavior explicit in another theory. David wrote... ... Do I understand correctly that you are suggesting pulling the PotentialAssignment array out of the internal Theory runner and making it available to developers? I seem to remember that Sang and Shin Hwei experimented with modifications to the PotentialAssignment and ParameterSupplier classes, but they can describe what they did better than I. David wrote... ... I like the idea of allowing data sources that produce things on-demand rather than in a pre-constructed array of values. This gets back to a brief discussion you and I had a long time ago about having the @DataPoints annotation return Iterable&amp;lt;DataPointType&amp;gt;. That would make things like the following possible: I don't know if it is better to overload @DataPoints or define new @DataPointSupplier/@DataPointSource annotations. Berin wrote... Absolutely not. That is one of the benefits of defining copy strategies in the @DataPoint annotations: the data point classes themselves remain unchaged. Berin wrote... Sang and Shin Hwei implemented several copy strategies, including one that uses clone, but they did not include them in the patch in an effort to reduce its size and complexity. Would it be helpful if they pushed some examples? Berin wrote... Thank you very much for looking so closely at Sang and Shin Hwei's code. I have asked them to address any bugs that you or others find. Brett</body>
  </mail>
  <mail>
    <header>RE: Re: @DataPoints called several times for Theories</header>
    <body>would be much better than arrays for @Datapoints.  That would avoid the toArray(new Mutable[collection.size()]) I would have to create and reduce the number of objects in the garbage collector.  I guess that would put me on your side with that particular approach.  BTW, arrays are iterable...  I do create data dynamically for testing theories, particularly if I am testing interface contracts. Regarding extracting the parameters interface, I'm not suggesting making that an API available outside the core.  I'm suggesting a little DRY (Don't Repeat Yourself) to have a class that is responsible for collecting the raw data points (calling the @DataPoint and @DataPoints once), and copying them as necessary to satisfy the parameter sets on the individual tests.  That same approach can theorhetically feed parameterized tests.  The long and short of it is that I am suggesting the change for code maintenance reasons.  That would also make my feature enhancement to track each parameter set as a separate test (@Theory(runDiscretely=true)) a bit easier to implement. I think it would be reasonable to include the CloneableStrategy along with the solution.  That way, you have custom copy strategies, a cloning copy strategy, and I guess the default would be an identity strategy (i.e. not copying at all). With your code example and the current implementation, if the datapoints are defined in the @DataPoints method then you have a fresh instance of each data point--even when the values are identical.  That's due to the bug that I mentioned.  The @DataPoints is called the first time, and for each data point, it is called again to make the combinations.  Using an identity copy strategy (i.e. not copying) will introduce problems with mutable data types. ________________________________ From: junit@yahoogroups.com on behalf of Brett Daniel Sent: Mon 3/15/2010 1:56 PM To: junit@yahoogroups.com Subject: Re: [junit] Re: @DataPoints called several times for Theories David, Berin, and Mike, Thank you very much for the great comments. I have asked Shin Hwei and Sang to provide their thoughts, but until then, here are my answers to your specific questions (SH&amp;amp;S will correct me if I get anything wrong). David wrote... intractable You are correct that copying within a @Datapoint method would create a new data point as needed and would probably be a good workaround for Berin's bug. However, I see two drawbacks in addition to those you mention. First, one would need to include the copy invocation in every @DataPoint method that used createdOnce. In contrast, annotating the @DataPoint itself would provide all consumers with pristine values. Second, the solution fails when using @DataPoints with a theory that takes multiple parameters: new Mutable(), @DataPoints() new Mutable(createdOnce[0]), new Mutable(createdOnce[1]) @Theory The code above fails because a and b can be aliases for the same object. It may of course be desirable to run a theory on identical instances, but in that case, the user could make that behavior explicit in another theory. David wrote... ... Do I understand correctly that you are suggesting pulling the PotentialAssignment array out of the internal Theory runner and making it available to developers? I seem to remember that Sang and Shin Hwei experimented with modifications to the PotentialAssignment and ParameterSupplier classes, but they can describe what they did better than I. David wrote... ... I like the idea of allowing data sources that produce things on-demand rather than in a pre-constructed array of values. This gets back to a brief discussion you and I had a long time ago about having the @DataPoints annotation return Iterable&amp;lt;DataPointType&amp;gt;. That would make things like the following possible: @DataPoints @DataPoints I don't know if it is better to overload @DataPoints or define new @DataPointSupplier/@DataPointSource annotations. Berin wrote... Absolutely not. That is one of the benefits of defining copy strategies in the @DataPoint annotations: the data point classes themselves remain unchaged. Berin wrote... Sang and Shin Hwei implemented several copy strategies, including one that uses clone, but they did not include them in the patch in an effort to reduce its size and complexity. Would it be helpful if they pushed some examples? Berin wrote... Thank you very much for looking so closely at Sang and Shin Hwei's code. I have asked them to address any bugs that you or others find. Brett On Mon, Mar 15, 2010 at 8:51 AM, David Saff &amp;lt;david@...</body>
  </mail>
  <mail>
    <header>RE: Re: @DataPoints called several times for Theories</header>
    <body>David, Berin, Mike and Brett, Thanks for all the helpful comments. Regarding the default CloneStrategy, Sang and I started with the following strategies: 1. Strategy for Collection Class 2. Using the clone() method for DataPoint(s) that implements Cloneable 3. Using Interfaces of DataPoint(s) 4. Using the copy constructor of the DataPoint(s) class 5. Using the copy constructor of the super class of the DataPoint. Below is the method that contains the CloneableStrategy: When we implemented the above default strategies, we had a hard time in deciding which strategy should be used first. I think the same problem will occur if both copy constructor and cloning are available. In that case, I think the user should be able to chose the desired strategy. Berin mentioned the performance issue within the method getCopyStrategyInvokedObject. I agree that creating a new instance for every object will have a significant impact on performance. I will discuss it with Sang and try to fix the problem. To: junit@yahoogroups.com; junit@yahoogroups.com From: berin.loritsch@... Date: Mon, 15 Mar 2010 14:54:12 -0400 Subject: RE: [junit] Re: @DataPoints called several times for Theories Iterable&amp;lt;?&amp;gt; would be much better than arrays for @Datapoints.  That would avoid the toArray(new Mutable[collection.size()]) I would have to create and reduce the number of objects in the garbage collector.  I guess that would put me on your side with that particular approach.  BTW, arrays are iterable...  I do create data dynamically for testing theories, particularly if I am testing interface contracts. Regarding extracting the parameters interface, I'm not suggesting making that an API available outside the core.  I'm suggesting a little DRY (Don't Repeat Yourself) to have a class that is responsible for collecting the raw data points (calling the @DataPoint and @DataPoints once), and copying them as necessary to satisfy the parameter sets on the individual tests.  That same approach can theorhetically feed parameterized tests.  The long and short of it is that I am suggesting the change for code maintenance reasons.  That would also make my feature enhancement to track each parameter set as a separate test (@Theory(runDiscretely=true)) a bit easier to implement. I think it would be reasonable to include the CloneableStrategy along with the solution.  That way, you have custom copy strategies, a cloning copy strategy, and I guess the default would be an identity strategy (i.e. not copying at all). With your code example and the current implementation, if the datapoints are defined in the @DataPoints method then you have a fresh instance of each data point--even when the values are identical.  That's due to the bug that I mentioned.  The @DataPoints is called the first time, and for each data point, it is called again to make the combinations.  Using an identity copy strategy (i.e. not copying) will introduce problems with mutable data types. ________________________________ From: junit@yahoogroups.com on behalf of Brett Daniel Sent: Mon 3/15/2010 1:56 PM To: junit@yahoogroups.com Subject: Re: [junit] Re: @DataPoints called several times for Theories David, Berin, and Mike, Thank you very much for the great comments. I have asked Shin Hwei and Sang to provide their thoughts, but until then, here are my answers to your specific questions (SH&amp;amp;S will correct me if I get anything wrong). David wrote... intractable You are correct that copying within a @Datapoint method would create a new data point as needed and would probably be a good workaround for Berin's bug. However, I see two drawbacks in addition to those you mention. First, one would need to include the copy invocation in every @DataPoint method that used createdOnce. In contrast, annotating the @DataPoint itself would provide all consumers with pristine values. Second, the solution fails when using @DataPoints with a theory that takes multiple parameters: new Mutable(), @DataPoints() new Mutable(createdOnce[0]), new Mutable(createdOnce[1]) @Theory The code above fails because a and b can be aliases for the same object. It may of course be desirable to run a theory on identical instances, but in that case, the user could make that behavior explicit in another theory. David wrote... ... Do I understand correctly that you are suggesting pulling the PotentialAssignment array out of the internal Theory runner and making it available to developers? I seem to remember that Sang and Shin Hwei experimented with modifications to the PotentialAssignment and ParameterSupplier classes, but they can describe what they did better than I. David wrote... ... I like the idea of allowing data sources that produce things on-demand rather than in a pre-constructed array of values. This gets back to a brief discussion you and I had a long time ago about having the @DataPoints annotation return Iterable&amp;lt;DataPointType&amp;gt;. That would make things like the following possible: @DataPoints @DataPoints I don't know if it is better to overload @DataPoints or define new @DataPointSupplier/@DataPointSource annotations. Berin wrote... Absolutely not. That is one of the benefits of defining copy strategies in the @DataPoint annotations: the data point classes themselves remain unchaged. Berin wrote... Sang and Shin Hwei implemented several copy strategies, including one that uses clone, but they did not include them in the patch in an effort to reduce its size and complexity. Would it be helpful if they pushed some examples? Berin wrote... Thank you very much for looking so closely at Sang and Shin Hwei's code. I have asked them to address any bugs that you or others find. Brett On Mon, Mar 15, 2010 at 8:51 AM, David Saff &amp;lt;david@...</body>
  </mail>
  <mail>
    <header>Re: Re: @DataPoints called several times for Theories</header>
    <body>On Mon, Mar 15, 2010 at 2:54 PM, Loritsch, Berin C. Iterable&amp;lt;?&amp;gt; would be much better than arrays for @Datapoints.  That would avoid the toArray(new Mutable[collection.size()]) I would have to create and reduce the number of objects in the garbage collector.  I guess that would put me on your side with that particular approach.  BTW, arrays are iterable...  I do create data dynamically for testing theories, particularly if I am testing interface contracts. an API available outside the core. I _am_ suggesting making that API available to end-users.  I think that copying strategy is just one way in which users will want to customize the data point implementation, and that it's no more work to carve out a generic ParameterSupplier hook than a specific copyStrategy hook. responsible for collecting the raw data points (calling the @DataPoint and @DataPoints once), and copying them as necessary to satisfy the parameter sets on the individual tests.  That same approach can theorhetically feed parameterized tests.  The long and short of it is that I am suggesting the change for code maintenance reasons.  That would also make my feature enhancement to track each parameter set as a separate test (@Theory(runDiscretely=true)) a bit easier to implement. solution.  That way, you have custom copy strategies, a cloning copy strategy, and I guess the default would be an identity strategy (i.e. not copying at all). defined in the @DataPoints method then you have a fresh instance of each data point--even when the values are identical.  That's due to the bug that I mentioned.  The @DataPoints is called the first time, and for each data point, it is called again to make the combinations.  Using an identity copy strategy (i.e. not copying) will introduce problems with mutable data types.  &amp;lt;junit%40yahoogroups.com&amp;gt; on behalf of Mike  &amp;lt;junit%40yahoogroups.com&amp;gt;; Shin Hwei Tan; Sang  &amp;lt;junit%40yahoogroups.com&amp;gt; &amp;lt;mailto:</body>
  </mail>
  <mail>
    <header>Re: Re: @DataPoints called several times for Theories</header>
    <body>You should probably make sure that the class supports cloning before invoking its clone() method, or the result won't be what you expect... -- Cédric</body>
  </mail>
  <mail>
    <header>Re: Re: @DataPoints called several times for Theories</header>
    <body>I'm confused who the secondary consumers are.  Can you give me a code example that requires two copy invocations? a and b _can_ be aliases for the same object under the current definition of Theories.  If the developer doesn't want them to be, she can say: Preventing such aliasing would be a change, rather than an optimization, in the current semantics of Theories. Yes, indeed. I think that allowing Iterable for DataPoints is a good idea on its own, for the reasons you say.  The @DataPointSupplier proposal is another step beyond.</body>
  </mail>
  <mail>
    <header>Dotmesh: get free rich assertions from your existing methods</header>
    <body>Hi, all.  I'd love your opinions on a proposed add-on assertion mechanism for JUnit:  l Share and Enjoy,</body>
  </mail>
  <mail>
    <header>RE: Re: @DataPoints called several times for Theories</header>
    <body>It would be best in this case to limit the CloneablwStrategy to Cloneable objects which make the clone method available.  The main thing that can go wrong have to do with transient values which would need to be reset manually. From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of CÃ©dric Beust ? Sent: Monday, March 15, 2010 4:39 PM To: junit@yahoogroups.com Subject: Re: [junit] Re: @DataPoints called several times for Theories On Mon, Mar 15, 2010 at 1:27 PM, Tan Shin Hwei &amp;lt;shinhwei@... You should probably make sure that the class supports cloning before invoking its clone() method, or the result won't be what you expect... -- Cé¤²ic</body>
  </mail>
  <mail>
    <header>Re: Using @Rule TemporaryFolder in @BeforeClass</header>
    <body>Are any of these solutions acceptable? If no one in JUnit-land has time for this, please let me know. If one of these solutions is acceptable, I could take the time to provide a patch but I will not spin my wheels for naught ;) Kent? Anyone? Bueller? Please advise, thank you, Gary @ClassRule also don't like creating new elements (like the "beforeClass = true") if I can reuse existing elements. When I saw the "@Rule static..." I immediately knew what was wrong, so I find it understandable that static variables containing rules are only executed once. (By symmetry, I suppose "@Before static void..." should be a synonym for @BeforeClass.) In the end, though, my opinion of what is obvious is less important than y'all's. Chime in if you want to be heard. gimmicky and obscure to hang that on if the variable is declared static. if it is before the class or before the test, and then have it validated if the @Rule is on a static or instance variable, as appropriate. I'm not even sure what they mean. Rules are inserted before an individual test is run. Should static rules be inserted before the class is run or before each individual test? Before the class is run, I'm thinking. Opinions? called. Is this by design or a bug? example test shows: and not Rules in general but would be against the advice of create method Javadoc.</body>
  </mail>
  <mail>
    <header>Re: Re: Using @Rule TemporaryFolder in @BeforeClass</header>
    <body>Gary, I have a strong preference for: @ClassRule The only questions in my mind are the name of the annotation, and the name of the type of the annotated field, since they can't both be BeforeClass.  We've actually reached a point, I think, where a more general rule for these names would be nice.  See an upcoming mail... That said, if you're OK with the assertion that I'm likely to ask for name changes, but not changes in the substance of the implementation, a patch would be most welcome. also don't like creating new elements (like the "beforeClass = true") if I can reuse existing elements. When I saw the "@Rule static..." I immediately knew what was wrong, so I find it understandable that static variables containing rules are only executed once. (By symmetry, I suppose "@Before static void..." should be a synonym for @BeforeClass.) In the end, though, my opinion of what is obvious is less important than y'all's. Chime in if you want to be heard. gimmicky and obscure to hang that on if the variable is declared static. if it is before the class or before the test, and then have it validated if the @Rule is on a static or instance variable, as appropriate. I'm not even sure what they mean. Rules are inserted before an individual test is run. Should static rules be inserted before the class is run or before each individual test? Before the class is run, I'm thinking. Opinions? called. Is this by design or a bug? example test shows: and not Rules in general but would be against the advice of create method Javadoc.</body>
  </mail>
  <mail>
    <header>RE: Re: Using @Rule TemporaryFolder in @BeforeClass</header>
    <body>Oh yeah, undocumented code styles that may catch you are: *         Use tabs instead of spaces *         If you optimize imports, make sure that the java.* classes come before the remainder of imports *         Place static imports last *         Assignments are "variable= value" (notice no space between = and the variable, but a space between = and the value) This will help avoid having to resend patches. From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of David Saff Sent: Tuesday, March 16, 2010 12:04 PM To: junit@yahoogroups.com Subject: Re: [junit] Re: Using @Rule TemporaryFolder in @BeforeClass Gary, I have a strong preference for: @ClassRule The only questions in my mind are the name of the annotation, and the name of the type of the annotated field, since they can't both be BeforeClass. We've actually reached a point, I think, where a more general rule for these names would be nice. See an upcoming mail... That said, if you're OK with the assertion that I'm likely to ask for name changes, but not changes in the substance of the implementation, a patch would be most welcome. David Saff but I also don't like creating new elements (like the "beforeClass = true") if I can reuse existing elements. When I saw the "@Rule static..." I immediately knew what was wrong, so I find it understandable that static variables containing rules are only executed once. (By symmetry, I suppose "@Before static void..." should be a synonym for @BeforeClass.) In the end, though, my opinion of what is obvious is less important than y'all's. Chime in if you want to be heard. to gimmicky and obscure to hang that on if the variable is declared static. indicates if it is before the class or before the test, and then have it validated if the @Rule is on a static or instance variable, as appropriate. before. I'm not even sure what they mean. Rules are inserted before an individual test is run. Should static rules be inserted before the class is run or before each individual test? Before the class is run, I'm thinking. Opinions? are called. Is this by design or a bug? this example test shows: TemporaryFolder and not Rules in general but would be against the advice of create method Javadoc.</body>
  </mail>
  <mail>
    <header>Re: Re: @DataPoints called several times for Theories</header>
    <body>Here is an alternate idea that just came to me: would it be beneficial to have something like a TheoryRule that intercepts theory arguments (and perhaps PotentialAssignments) prior to theory execution?  Sang and Shin Hwei's extension acts like a filter on arguments, so it seems to make sense to generalize the idea. I can envision one alternate use case in which a TheoryRule removes datapoints from PotentialAssignments that a user would otherwise have to ignore using Assume.* in every theory method. I am not sure what the rule's signature would look like, but perhaps that could provide a hook into PotentialAssignments like David mentioned. Thoughts? Brett</body>
  </mail>
  <mail>
    <header>RE: Re: @DataPoints called several times for Theories</header>
    <body>Interesting.  Combine that with Hamcrest or dotmesh style matchers and that can be very powerful (i.e. no need for assumes and the intent is clear). From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of Brett Daniel Sent: Tuesday, March 16, 2010 5:38 PM To: junit@yahoogroups.com Subject: Re: [junit] Re: @DataPoints called several times for Theories Here is an alternate idea that just came to me: would it be beneficial to have something like a TheoryRule that intercepts theory arguments (and perhaps PotentialAssignments) prior to theory execution? Sang and Shin Hwei's extension acts like a filter on arguments, so it seems to make sense to generalize the idea. I can envision one alternate use case in which a TheoryRule removes datapoints from PotentialAssignments that a user would otherwise have to ignore using Assume.* in every theory method. I am not sure what the rule's signature would look like, but perhaps that could provide a hook into PotentialAssignments like David mentioned. Thoughts? Brett</body>
  </mail>
  <mail>
    <header>Re: Re: @DataPoints called several times for Theories</header>
    <body>Interesting.  The TheoryRule idea would also sync well with the forthcoming Mark2 interface for Categories--we'd probably want to change the TheoryRule name, however, to be parallel with whatever we choose for class filters in that API. That said, I would want to see a couple obvious use cases for the idea before plowing ahead...</body>
  </mail>
  <mail>
    <header>Re: Re: Using @Rule TemporaryFolder in @BeforeClass</header>
    <body>If you use Eclipse, these styles are enforced in the project.  If you use another IDE, and can contribute settings files, please do. Thanks, On Tue, Mar 16, 2010 at 12:19 PM, Loritsch, Berin C.</body>
  </mail>
  <mail>
    <header>RE: Re: Using @Rule TemporaryFolder in @BeforeClass</header>
    <body>My forked copy of JUnit has the project/style files for JetBrains IDEA. From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of David Saff Sent: Wednesday, March 17, 2010 2:38 PM To: junit@yahoogroups.com Subject: Re: [junit] Re: Using @Rule TemporaryFolder in @BeforeClass If you use Eclipse, these styles are enforced in the project. If you use another IDE, and can contribute settings files, please do. Thanks, David Saff On Tue, Mar 16, 2010 at 12:19 PM, Loritsch, Berin C. [mailto:junit@yahoogroups.com &amp;lt;mailto:junit%40yahoogroups.com&amp;gt; ] On Behalf Of example magic executed way it class methods advice</body>
  </mail>
  <mail>
    <header>Re: Using @Rule TemporaryFolder in @BeforeClass</header>
    <body>I do use Eclipse :) Where do I create a ticket to attach a patch file? Gary</body>
  </mail>
  <mail>
    <header>Re: Re: Using @Rule TemporaryFolder in @BeforeClass</header>
    <body>JUnit is using GitHub... if you'd like to submit a patch, fork the source at  KentBeck... Maybe to the dev list?</body>
  </mail>
  <mail>
    <header>Need help with special use case</header>
    <body>Hello, I'm working on an in house test program. We would like to use JUnit, but we cannot find a way to make it do what we want. We have a db that contains some information. The client can choose a number of items in the db. These selected items are the tests to execute. So my question is how can I create and launch a test (suite) based on some dynamic user input. I already looked at Paremeterized class, but it implies that we know statically in advance the data (which in this case should come from the dynamic client selection) A way to make it work is creating the test classes dynamically (code generation) but this is too much overhead. Is there a way to make this work, or is JUnit not intended to do this kind of things? regards hans</body>
  </mail>
  <mail>
    <header>Please someone proide me a solution for this problem in JUnit</header>
    <body>Hi my name is dilip, I got a problem while executing junit test cases. I got a project named JUnit in eclipse.I hav got many modules in that eclipse and i am writing junits for those modules. Once i create a junit test case.The general procedure is to execute it calling methods inside the static block. The problem i am facing now is : -Methods getting called without executing public static test suite() block. -Even if i remove the public static test suite() block the methods are getting executed and am gettint the output. -Even if i run the junit as code coverage option.The public static test suite() block in junit test case is not covered. -In eclipse platform i hav chosen junit3. -some one please give me a solution.</body>
  </mail>
  <mail>
    <header>JUnit test case threshould</header>
    <body>I would like to fail the build if the JUnit test case failures/Errors are greater than a threshold level. How it can be configured in ANT? Any suggestions please?</body>
  </mail>
  <mail>
    <header>Re: JUnit test case threshould</header>
    <body>Hari, There's no default way I know of.  Is your goal to fail more quickly if a lot of tests are failing, or to pass even with some tests failing?  In my experience, number of failures doesn't have a great correlation with any inutitive definition of "brokenness".  Is your experience different? greater than a threshold level. How it can be configured in ANT? Any suggestions please?</body>
  </mail>
  <mail>
    <header>Re: Please someone proide me a solution for this problem in JUnit</header>
    <body>Dilip, In certain cases, Eclipse will run every method whose name starts with "test", regardless of whether you have a suite() method.  What behavior are you hoping for? and i am writing junits for those modules. methods inside the static block. executed and am gettint the output. suite() block in junit test case is not covered.</body>
  </mail>
  <mail>
    <header>Re: Need help with special use case</header>
    <body>Hans, Could you use this pattern? @RunWith(Parameterized.class) //... @Parameters cannot find a way to make it do what we want. items in the db. These selected items are the tests to execute. dynamic user input. statically in advance the data (which in this case should come from the dynamic client selection) generation) but this is too much overhead. things?</body>
  </mail>
  <mail>
    <header>Alternative to repeating @ContextConfiguration</header>
    <body>I am using JUnit 4 annotations to run my tests. @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(locations = "file:src/test/resources/test-applicationContext.xml") It's not very DRY to have to copy @ContextConfiguration into every test. Other than going back to JUnit 3 and extending TestCase again is their another option to constantly repeating @ContextConfiguration(locations = "file:src/test/resources/test-applicationContext.xml")?</body>
  </mail>
  <mail>
    <header>Injection in Constructor V @Before</header>
    <body>Can someone explain to me why datasource is not available in the constructor but in the @Before method it is? @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(locations = "file:src/test/resources/test-applicationContext.xml") public class MyTest public MyTest() null @Autowired @Before public void setUp() injected</body>
  </mail>
  <mail>
    <header>Re: JUnitBenchmarks (application of @Rule)</header>
    <body>that might fit this solution well. Â In essence, the project I Oh, interesting. are processed in a separate thread. a lot of objects, you can see as much as 100% speed gains. Â Essentially, by short I mean less than a millisecond in duration. Â The speed gains are achieved by not penalizing the tests while you write to the console. Â In more substantive tests you will not see as much of a speed gain. Micro-benchmarking is tricky itself, no library is going to guarantee common sense here. What you're talking about is really a bad benchmark -- if you include an operation with such a large time variance (writing to console), the results will have a high variance too, of course. of runs, parameters, etc. Â My hope is that at the very This library I posted does have some sort of this -- there are annotations that drive the benchmarking process (number of warmup runs, benchmarks runs, reset for the GC on every round, etc.). regular unit testing. I believe it may be, don't know much about QoS. JVM implementations only increment the system clock every 10ms. Â Thatâs fine enough for telling the time, but when your individual tests are typically faster than 10ms that lack of granularity can hurt. In fact they are both equally unreliable, so changing to theoretically smaller granularity is not really going to help. From our experience, you need to design a benchmark that takes a more significant amount of time (in the order of milliseconds at least) and make sure HotSpot has done its job (and no deoptimizations occur). In any other scenario benchmark results will be too close to noise and prone to large variance distortions due to background processes and other activity. Dawid</body>
  </mail>
  <mail>
    <header>RE: JUnitBenchmarks (application of @Rule)</header>
    <body>Iâm not going to argue at all about the benchmark comments.  Essentially we are in agreement.  Since most of my tests (currently only self tests) are less than a ms, very minor differences in timing can affect the speed of the tests to a very large degree.  For example, running my own tests within the Maven infrastructure has provided a variance between 2ms and 9ms to run the entire suite of tests.  That variance depends on whether the garbage collector is running during testing or not. The goal of the library isnât so much to work miracles as it is to make it easier to do this type of testing. For QoS testing, letâs say you have a suite of tests that simply verify correctness.  For a simple system, that can be enough.  However, you may discover race conditions and deadlocks in parallel code in a production environment.  The idea is to run all those correctness tests over and over until the system passes with a high enough degree of certainty or you introduce a failure.  In addition to ensuring correctness under load, the test framework will allow you to ensure that all the responses are within a certain timeout threshold. At least that is the end goal.  Another short win would be when there are a mix of short and long running tests.  Unless you have a suite of many long running tests, running the tests in parallel will allow you to shorten the clock time of testing.  Shorter clock times mean quicker turn around for testing.  That in turn encourages the tests to be run more frequently. Thereâs a lot to be worked out as of yet.  My âHoly Grailâ, so to speak, is to have the executing tests behave as if it were running single threaded from the perspective of the test writer.  That is my real end goal.  QoS testing would be a nice and easy win along with the project. From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of Dawid Weiss Sent: Monday, March 08, 2010 2:37 PM To: junit@yahoogroups.com Subject: Re: [junit] JUnitBenchmarks (application of @Rule) that might fit this solution well.  In essence, the project I Oh, interesting. are processed in a separate thread. a lot of objects, you can see as much as 100% speed gains.  Essentially, by short I mean less than a millisecond in duration.  The speed gains are achieved by not penalizing the tests while you write to the console.  In more substantive tests you will not see as much of a speed gain. Micro-benchmarking is tricky itself, no library is going to guarantee common sense here. What you're talking about is really a bad benchmark -- if you include an operation with such a large time variance (writing to console), the results will have a high variance too, of course. of runs, parameters, etc.  My hope is that at the very This library I posted does have some sort of this -- there are annotations that drive the benchmarking process (number of warmup runs, benchmarks runs, reset for the GC on every round, etc.). regular unit testing. I believe it may be, don't know much about QoS. implementations only increment the system clock every 10ms.  Thatâs fine enough for telling the time, but when your individual tests are typically faster than 10ms that lack of granularity can hurt. In fact they are both equally unreliable, so changing to theoretically smaller granularity is not really going to help. From our experience, you need to design a benchmark that takes a more significant amount of time (in the order of milliseconds at least) and make sure HotSpot has done its job (and no deoptimizations occur). In any other scenario benchmark results will be too close to noise and prone to large variance distortions due to background processes and other activity. Dawid</body>
  </mail>
  <mail>
    <header>Using @Rule TemporaryFolder in @BeforeClass</header>
    <body>@Rule objects are not initialized before @BeforeClass methods are called. Is this by design or a bug? For example: Having the TemporaryFolder Rule declared as static is OK as this example test shows: How can @Rules be used from @BeforeClass? Calling TemporaryFolder.create() would work only for TemporaryFolder and not Rules in general but would be against the advice of create method Javadoc.</body>
  </mail>
  <mail>
    <header>Re: Using @Rule TemporaryFolder in @BeforeClass</header>
    <body>Hmmm... I don't think we ever tried @Rule on a static variable before. I'm not even sure what they mean. Rules are inserted before an individual test is run. Should static rules be inserted before the class is run or before each individual test? Before the class is run, I'm thinking. Opinions? Kent this by design or a bug? shows: Rules in general but would be against the advice of create method Javadoc.</body>
  </mail>
  <mail>
    <header>Re: Using @Rule TemporaryFolder in @BeforeClass</header>
    <body>I'm all for a Rule before the class is run, but I think it is way to gimmicky and obscure to hang that on if the variable is declared static. I would instead think that the @Rule should have a method which indicates if it is before the class or before the test, and then have it validated if the @Rule is on a static or instance variable, as appropriate. Something like: even sure what they mean. Rules are inserted before an individual test is run. Should static rules be inserted before the class is run or before each individual test? Before the class is run, I'm thinking. Opinions? this by design or a bug? test shows: Rules in general but would be against the advice of create method Javadoc.</body>
  </mail>
  <mail>
    <header>Re: Re: Using @Rule TemporaryFolder in @BeforeClass</header>
    <body>This is an interesting design tradeoff. I don't like implicit magic but I also don't like creating new elements (like the "beforeClass = true") if I can reuse existing elements. When I saw the "@Rule static..." I immediately knew what was wrong, so I find it understandable that static variables containing rules are only executed once. (By symmetry, I suppose "@Before static void..." should be a synonym for @BeforeClass.) In the end, though, my opinion of what is obvious is less important than y'all's. Chime in if you want to be heard. Kent and obscure to hang that on if the variable is declared static. it is before the class or before the test, and then have it validated if the @Rule is on a static or instance variable, as appropriate. not even sure what they mean. Rules are inserted before an individual test is run. Should static rules be inserted before the class is run or before each individual test? Before the class is run, I'm thinking. Opinions? Is this by design or a bug? test shows: not Rules in general but would be against the advice of create method Javadoc.</body>
  </mail>
  <mail>
    <header>Re: Using @Rule TemporaryFolder in @BeforeClass</header>
    <body>Some context: In this test, we want to configure a server, start it, run tests, shutdown the server and clear any evidence left on disk. I was hoping this would map to JUnit as follows: - configure the server: Use a TemporaryFolder Rule to create server configuration files. - start the server in @BeforeClass using the configuration files. - run tests in @Test methods - shutdown the server in @AfterClass - clear configuration files and anything else the server created there (logs and other temp files) is done automatically by the TemporaryFolder Rule Gary even sure what they mean. Rules are inserted before an individual test is run. Should static rules be inserted before the class is run or before each individual test? Before the class is run, I'm thinking. Opinions? this by design or a bug? test shows: Rules in general but would be against the advice of create method Javadoc.</body>
  </mail>
  <mail>
    <header>Re: Re: Using @Rule TemporaryFolder in @BeforeClass</header>
    <body>Gosh, that almost looks like a test :-) Kent tests, shutdown the server and clear any evidence left on disk. configuration files. and other temp files) is done automatically by the TemporaryFolder Rule not even sure what they mean. Rules are inserted before an individual test is run. Should static rules be inserted before the class is run or before each individual test? Before the class is run, I'm thinking. Opinions? Is this by design or a bug? test shows: not Rules in general but would be against the advice of create method Javadoc.</body>
  </mail>
  <mail>
    <header>Re: Re: Using @Rule TemporaryFolder in @BeforeClass</header>
    <body>don't like creating new elements (like the "beforeClass = true") if I can reuse existing elements. When I saw the "@Rule static..." I immediately knew what was wrong, so I find it understandable that static variables containing rules are only executed once. (By symmetry, I suppose "@Before static void..." should be a synonym for @BeforeClass.) Or, by (almost) symmetry, the following? @Before public void... @After public void... @Rule public MethodRule... @BeforeClass public static void... @AfterClass public static void... @RuleOnClass public static ClassRule... In the end, though, my opinion of what is obvious is less important than y'all's. Chime in if you want to be heard. and obscure to hang that on if the variable is declared static. it is before the class or before the test, and then have it validated if the @Rule is on a static or instance variable, as appropriate. not even sure what they mean. Rules are inserted before an individual test is run. Should static rules be inserted before the class is run or before each individual test? Before the class is run, I'm thinking. Opinions? Is this by design or a bug? test shows: not Rules in general but would be against the advice of create method Javadoc.</body>
  </mail>
  <mail>
    <header>Re: Re: Using @Rule TemporaryFolder in @BeforeClass</header>
    <body>Sounds like issue #29 @BeforeClass Rule:  Please vote it up if you feel you need it. Which reminds me to pull from latest master and re-apply my 'patch' so it can finally be properly submitted with a pull request. :) - a --</body>
  </mail>
  <mail>
    <header>Re: Using @Rule TemporaryFolder in @BeforeClass</header>
    <body>Ah! "Almost" is the key word since it does not work! :) Yet. All joking aside, @Rule (TemporaryFolder or any rule) is a nice idiom, it would be nice to get it to work with JUnits once-per-test and once-per-class patterns like @Before and @BeforeClass. It feels more like a @ClassRule is needed or @BeforeClass and @AfterClass could be deprecated in favor of (ducks from tomatoes) an annotation attribute than can be slapped on anything appropriate: @Before|@Rule(ExecutionPolicy.CLASS|ExecutionPolicy.INSTANCE or @Before|@Rule(ExecutionPolicy="once_per_class"|"once_per_test") or /something/. G tests, shutdown the server and clear any evidence left on disk. configuration files. and other temp files) is done automatically by the TemporaryFolder Rule not even sure what they mean. Rules are inserted before an individual test is run. Should static rules be inserted before the class is run or before each individual test? Before the class is run, I'm thinking. Opinions? called. Is this by design or a bug? test shows: not Rules in general but would be against the advice of create method Javadoc.</body>
  </mail>
  <mail>
    <header>Re: Using @Rule TemporaryFolder in @BeforeClass</header>
    <body>WRT: @RuleOnClass public static ClassRule... @ClassRule public static ClassRule... @ClassRule reads better to me than @RuleOnClass and the symmetry with @Before/@BeforeClass is nice. Gary also don't like creating new elements (like the "beforeClass = true") if I can reuse existing elements. When I saw the "@Rule static..." I immediately knew what was wrong, so I find it understandable that static variables containing rules are only executed once. (By symmetry, I suppose "@Before static void..." should be a synonym for @BeforeClass.) gimmicky and obscure to hang that on if the variable is declared static. if it is before the class or before the test, and then have it validated if the @Rule is on a static or instance variable, as appropriate. I'm not even sure what they mean. Rules are inserted before an individual test is run. Should static rules be inserted before the class is run or before each individual test? Before the class is run, I'm thinking. Opinions? called. Is this by design or a bug? example test shows: and not Rules in general but would be against the advice of create method Javadoc.</body>
  </mail>
  <mail>
    <header>Re: Re: Using @Rule TemporaryFolder in @BeforeClass</header>
    <body>I like the idea of an explicit @ClassRule. Static alone is too implicit, I think. Greetings,</body>
  </mail>
  <mail>
    <header>Re: Re: Using @Rule TemporaryFolder in @BeforeClass</header>
    <body>I'm agnostic with regards to name (although I reserve my right to hate whatever you pick as a matter of principle), but I agree that having a static @Rule be implicitly a class level rule is too much like voodoo. Extending the existing pattern gets my vote. Clive -- Clive Evans "Black holes are where God divides by zero" - anon</body>
  </mail>
  <mail>
    <header>Re: Re: Using @Rule TemporaryFolder in @BeforeClass</header>
    <body>Unfortunately, the same class can't be both an annotation and a type. Further suggestions? also don't like creating new elements (like the "beforeClass = true") if I can reuse existing elements. When I saw the "@Rule static..." I immediately knew what was wrong, so I find it understandable that static variables containing rules are only executed once. (By symmetry, I suppose "@Before static void..." should be a synonym for @BeforeClass.) gimmicky and obscure to hang that on if the variable is declared static. if it is before the class or before the test, and then have it validated if the @Rule is on a static or instance variable, as appropriate. I'm not even sure what they mean. Rules are inserted before an individual test is run. Should static rules be inserted before the class is run or before each individual test? Before the class is run, I'm thinking. Opinions? called. Is this by design or a bug? example test shows: and not Rules in general but would be against the advice of create method Javadoc.</body>
  </mail>
  <mail>
    <header>RE: Re: Using @Rule TemporaryFolder in @BeforeClass</header>
    <body>Not sure if this applies,  it just popped into my head.  Since this is a brain storming session, I wanted to chime in. Would there be a case for @Rule to be added to Parameterized instances.  The reason I asked this, back in the day when I could contribute, I suggested/submitted a patch for @BeforeParameterized @AfterParameterized. (Issue 45)  My mind just associated the two after seeing the discussion of Rules for Suites. This makes me think that each unit test and grouping of unit test needs some things... setup, tear down, assertions, and invariants.  It may be the case that all groupings of units needs to have these things.  Thus if you group at the Suite, Parameter, Class all things need to be present. Am I making sense? Big Mike From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of David Saff Sent: Wednesday, March 10, 2010 8:22 AM To: junit@yahoogroups.com Subject: Re: [junit] Re: Using @Rule TemporaryFolder in @BeforeClass Unfortunately, the same class can't be both an annotation and a type. Further suggestions? David On Tue, Mar 9, 2010 at 11:04 PM, Gary also don't like creating new elements (like the "beforeClass = true") if I can reuse existing elements. When I saw the "@Rule static..." I immediately knew what was wrong, so I find it understandable that static variables containing rules are only executed once. (By symmetry, I suppose "@Before static void..." should be a synonym for @BeforeClass.) gimmicky and obscure to hang that on if the variable is declared static. if it is before the class or before the test, and then have it validated if the @Rule is on a static or instance variable, as appropriate. I'm not even sure what they mean. Rules are inserted before an individual test is run. Should static rules be inserted before the class is run or before each individual test? Before the class is run, I'm thinking. Opinions? called. Is this by design or a bug? example test shows: and not Rules in general but would be against the advice of create method Javadoc.</body>
  </mail>
  <mail>
    <header>Re: Re: Using @Rule TemporaryFolder in @BeforeClass</header>
    <body>On Wed, Mar 10, 2010 at 11:40 AM, Forsberg, Mike storming session, I wanted to chime in. reason I asked this, back in the day when I could contribute, I suggested/submitted a patch for @BeforeParameterized @AfterParameterized. (Issue 45)  My mind just associated the two after seeing the discussion of Rules for Suites. things... setup, tear down, assertions, and invariants.  It may be the case that all groupings of units needs to have these things.  Thus if you group at the Suite, Parameter, Class all things need to be present. Quite possibly.  I can imagine creating a @ParameterSetRule annotation to the Parameterized runner to complete the symmetry. Saff also don't like creating new elements (like the "beforeClass = true") if I can reuse existing elements. When I saw the "@Rule static..." I immediately knew what was wrong, so I find it understandable that static variables containing rules are only executed once. (By symmetry, I suppose "@Before static void..." should be a synonym for @BeforeClass.) gimmicky and obscure to hang that on if the variable is declared static. if it is before the class or before the test, and then have it validated if the @Rule is on a static or instance variable, as appropriate. I'm not even sure what they mean. Rules are inserted before an individual test is run. Should static rules be inserted before the class is run or before each individual test? Before the class is run, I'm thinking. Opinions? called. Is this by design or a bug? example test shows: and not Rules in general but would be against the advice of create method Javadoc.</body>
  </mail>
  <mail>
    <header>Re: Using @Rule TemporaryFolder in @BeforeClass</header>
    <body>What does ClassRule clash with? Alternates: - StaticRule - PerClassRule - OneTimeRule - SingletonRule more? Gary also don't like creating new elements (like the "beforeClass = true") if I can reuse existing elements. When I saw the "@Rule static..." I immediately knew what was wrong, so I find it understandable that static variables containing rules are only executed once. (By symmetry, I suppose "@Before static void..." should be a synonym for @BeforeClass.) gimmicky and obscure to hang that on if the variable is declared static. indicates if it is before the class or before the test, and then have it validated if the @Rule is on a static or instance variable, as appropriate. I'm not even sure what they mean. Rules are inserted before an individual test is run. Should static rules be inserted before the class is run or before each individual test? Before the class is run, I'm thinking. Opinions? called. Is this by design or a bug? example test shows: and not Rules in general but would be against the advice of create method Javadoc.</body>
  </mail>
  <mail>
    <header>Re: Re: Using @Rule TemporaryFolder in @BeforeClass</header>
    <body>You wrote @ClassRule public static ClassRule..., which can't be valid Java.  Does that answer the question? I also don't like creating new elements (like the "beforeClass = true") if I can reuse existing elements. When I saw the "@Rule static..." I immediately knew what was wrong, so I find it understandable that static variables containing rules are only executed once. (By symmetry, I suppose "@Before static void..." should be a synonym for @BeforeClass.) gimmicky and obscure to hang that on if the variable is declared static. indicates if it is before the class or before the test, and then have it validated if the @Rule is on a static or instance variable, as appropriate. before. I'm not even sure what they mean. Rules are inserted before an individual test is run. Should static rules be inserted before the class is run or before each individual test? Before the class is run, I'm thinking. Opinions? called. Is this by design or a bug? example test shows: TemporaryFolder and not Rules in general but would be against the advice of create method Javadoc.</body>
  </mail>
  <mail>
    <header>Re: Using @Rule TemporaryFolder in @BeforeClass</header>
    <body>Ah, right bad example, which should not invalidate the ClassRule rule name. but I also don't like creating new elements (like the "beforeClass = true") if I can reuse existing elements. When I saw the "@Rule static..." I immediately knew what was wrong, so I find it understandable that static variables containing rules are only executed once. (By symmetry, I suppose "@Before static void..." should be a synonym for @BeforeClass.) gimmicky and obscure to hang that on if the variable is declared static. indicates if it is before the class or before the test, and then have it validated if the @Rule is on a static or instance variable, as appropriate. before. I'm not even sure what they mean. Rules are inserted before an individual test is run. Should static rules be inserted before the class is run or before each individual test? Before the class is run, I'm thinking. Opinions? called. Is this by design or a bug? example test shows: TemporaryFolder and not Rules in general but would be against the advice of create method Javadoc.</body>
  </mail>
  <mail>
    <header>Code Reuse and Modify</header>
    <body>Can i reuse the code which is provided by junit.jar. if so, can i modify the code according to my need. if possible how can i do it. Please can any one help me in this regard?</body>
  </mail>
  <mail>
    <header>Re: Code Reuse and Modify</header>
    <body>Just to be clear, are you asking for technical assistance or legal guidance?</body>
  </mail>
  <mail>
    <header>Re: Code Reuse and Modify</header>
    <body>JUnit source is released under the CPL.  The FAQ and source forge differ on the licensing version though... - 0.5 - The CPL is described here --  Personally I think this information should appear in the source code files, not the whole license, but some sort of copyright.  But maybe that is not the author's intent. If you'd like to develop with/on the code you can obtain the latest source from Hope I helped, Big Mike P.S. There is more information on the FAQ --</body>
  </mail>
  <mail>
    <header>Re: Using @Rule TemporaryFolder in @BeforeClass</header>
    <body>So, summarizing the proposed solutions: - Add an element to @Rule, for example @Rule(beforeClass=true) - Add a new rule that is initialized before @BeforeClass, for example @ClassRule - Reuse an existing annotation or element and use it with @Rule, for example: - Other? Please chime in. Gary don't like creating new elements (like the "beforeClass = true") if I can reuse existing elements. When I saw the "@Rule static..." I immediately knew what was wrong, so I find it understandable that static variables containing rules are only executed once. (By symmetry, I suppose "@Before static void..." should be a synonym for @BeforeClass.) In the end, though, my opinion of what is obvious is less important than y'all's. Chime in if you want to be heard. gimmicky and obscure to hang that on if the variable is declared static. it is before the class or before the test, and then have it validated if the @Rule is on a static or instance variable, as appropriate. not even sure what they mean. Rules are inserted before an individual test is run. Should static rules be inserted before the class is run or before each individual test? Before the class is run, I'm thinking. Opinions? called. Is this by design or a bug? test shows: not Rules in general but would be against the advice of create method Javadoc.</body>
  </mail>
  <mail>
    <header>Re: Code Reuse and Modify</header>
    <body>it's technical assitance. i need to create a similar wizard with some modifications. so can i reuse and modify the existing code in eclipse environment?</body>
  </mail>
  <mail>
    <header>Re: Re: Code Reuse and Modify</header>
    <body>By "wizard", you mean the UI for running JUnit tests that comes with Eclipse? modifications. so can i reuse and modify the existing code in eclipse environment?</body>
  </mail>
  <mail>
    <header>Re: Re: @DataPoints called several times for Theories</header>
    <body>The undergrads I am advising recently pushed a patch that addresses the issue of mutable data points.  The patch allows developers to define "copy strategies" that duplicate marked data points before every theory execution. In this way, every execution receives a pristine data point, which removes the problems caused when a theory mutates data points. This is orthogonal to datapoint (re)creation, but I think copy strategies may help address the bug that Berin found. The patch creates a new, optional "copyStrategy" parameter for the @DataPoint and @DataPoints annotations. If the developer wants to copy data points, he or she sets the parameter to a class implementing a new CopyStrategy interface. Here is an example: In the current implementation of JUnit, the second theory may fail because the first theory mutates the datapoint. With a copy strategy enabled, both theories receive a new value. Strategies can do almost anything: clone the data point, call a factory method, or--as in the following implementation--instantaiate a new object with a copy constructor. There are several benefits to this implementation. First, the new parameter is completely optional; if it is omitted, the theory runner behaves as it always has. Second, it doesn't require modifying the data point's class (for example, to add a copy constructor or clone method). Most importantly, it makes it clear to the tester that without a copy strategy one theory execution can impact another. I have CC'd the two students in this email. Please direct any questions to them. Brett</body>
  </mail>
  <mail>
    <header>Re: Re: @DataPoints called several times for Theories</header>
    <body>Please feel free to join the mailing list.  I would find the discussion interesting and wish it would not run offline. Big Mike</body>
  </mail>
  <mail>
    <header>Re: Re: @DataPoints called several times for Theories</header>
    <body>Brett, If developer 1 needs a fresh data point created every time, and developer 2 needs to re-use an expensive-to-create immutable data point, I definitely want to make it as easy as possible for both to do what they need to do.  Just to be clear, do you agree the below would work with the current implementation of Theories?  It's four lines more of boilerplate, but not totally intractable, in my humble opinion: @RunWith(Theories.class) I think though, that requiring both the field and the method to be there in the class could restrict the ability to share data and concepts.  What would you think of allowing fields or methods to return PontentialAssignment, the type of named references to data values used in the Theories runner?  Then we could have: @RunWith(Theories.class) Here, I'm guessing about the typing on PotentialAssignment and the name of the DataPointSource annotation, but perhaps the idea is clear?</body>
  </mail>
  <mail>
    <header>Re: Re: @DataPoints called several times for Theories</header>
    <body>After further thought, the ParameterSupplier class is even better for this kind of thing: Thus: @RunWith(Theories.class) This would allow a supplier to supply zero, one, or many inputs to a parameter signature.  Here's a supplier for all ints from -10 to 10: @DataSupplier public static OneTypeSupplier&amp;lt;Integer&amp;gt; ints = Here's one that supplies null for any type that can take them: @DataSupplier public static ParameterSupplier nullsEverywhere = And something crazy and experimental that will keep pumping out values until half a second has passed: @DataSupplier public static ParameterSupplier timeLimited = (This one would require the return type from ParameterSupplier#getValueSources to be Iterable, which I think would be a good idea anyway) And one that combines many other suppliers, for easy sharing 'twixt test classes: @DataSupplier public static ParameterSupplier combined = new Thus, in another class: This begins to approach the "Rule" threshhold for triggering a lot of very plausible ideas with only small changes to interface and implementation.  Shin, Sang, would you like to recast your patch to include this interface contribution? @RunWith(Theories.class)</body>
  </mail>
  <mail>
    <header>Re: Re: Can't add labels to entries in github issues</header>
    <body>Urggh.  Sounds like another bug.  Would you mind taking it up with github at here?  Thanks, On Fri, Feb 26, 2010 at 1:51 PM, Loritsch, Berin C.</body>
  </mail>
  <mail>
    <header>RE: Re: Can't add labels to entries in github issues</header>
    <body>Ok.  Done:  issues-i-created Thank you. From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of David Saff Sent: Monday, March 01, 2010 9:44 AM To: junit@yahoogroups.com Subject: Re: [junit] Re: Can't add labels to entries in github issues Urggh. Sounds like another bug. Would you mind taking it up with github at here? Thanks, David Saff On Fri, Feb 26, 2010 at 1:51 PM, Loritsch, Berin C. I [mailto:junit@yahoogroups.com &amp;lt;mailto:junit%40yahoogroups.com&amp;gt; ] On Behalf Of collaborators? something,</body>
  </mail>
  <mail>
    <header>RE: Re: Can't add labels to entries in github issues</header>
    <body>Apparently, in order to help you at all with the issues I need to be a collaborator.  While I don't understand this design constraint that github has imposed, that is where we are.  I assume that granting someone collaborator status also grants permissions to push code up to the master.  I understand that is something that you'll want to protect. Essentially I'd love to mark the issues as bugs, or change the title to include "[bug]", but I can't do that based on Github's rules. From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of Loritsch, Berin C. Sent: Monday, March 01, 2010 10:08 AM To: junit@yahoogroups.com Subject: RE: [junit] Re: Can't add labels to entries in github issues Ok. Done:  issues-i-created Thank you. [mailto:junit@yahoogroups.com &amp;lt;mailto:junit%40yahoogroups.com&amp;gt; ] On Behalf Of David Saff Sent: Monday, March 01, 2010 9:44 AM Subject: Re: [junit] Re: Can't add labels to entries in github issues Urggh. Sounds like another bug. Would you mind taking it up with github at here? Thanks, David Saff On Fri, Feb 26, 2010 at 1:51 PM, Loritsch, Berin C. I Behalf Of collaborators? something,</body>
  </mail>
  <mail>
    <header>[RT] JUnit Core, Parallelism, Documentation</header>
    <body>RT = Random Thought.  It's a habit I picked up from Stefano Mazzocchi when I used to work with him on the Cocoon project.  Essentially, it's a structured brain dump based on observations of the internals of a project (as such it is longer than most posts).  My apologies if this is not the forum for this. == Code Maintenance Thoughts == I've been going through some of the JUnit Core to add some JavaDocs (it's in my forked copy if you want me to do a Push request), and made a few observations.  I can definitely see how JUnit has begun to evolve over the years, and as is natural with a couple missteps along the way. It's hard to get rid of those missteps because some people may have extended them.  Some of the classes have been deprecated with the promise that they would be removed in the next revision (as of 4.4) and they are still there.  I'm not saying that the current solution is a misstep, just that it is hard to separate the past ones from the current preferred solution. Part of managing a codebase like this includes separating the public and private API.  Some of that has been done with the "internal" package. There is no reason to worry about deprecating classes and methods in the internal package because they are not part of the public API.  But I did notice that when some classes got moved, the old class in full was kept in the original location.  A low maintenance way of performing a move like that makes use of inheritance.  Essentially the newer class is moved so there is one maintenance location, and the deprecated class extends the newer class.  Kind of like how the JUnit4 runner provides a preferred alias to the BlockJUnit4Runner class. Part of the core includes a nice little callback interface (the RunListener).  I imagine that a number of integrations make good use of this little class.  However, with the implementation as it is currently written, the RunListener can affect the run performance and parallelism available.  Essentially, the act of calling a method is a synchronous function.  That means a poorly written runner can detrimentally affect the performance of JUnit.  The one that is included with JUnit is pretty tame, doing the absolute minimum it has to do to track the test progress.  However, if your tests execute slower in an IDE than with JUnit alone, it's probably the RunListener slowing things down. == Parallelism Thoughts == Some of the architectural decisions in JUnit's core definitely reflect the synchronous nature that the tests were designed to be written.  I don't think there is going to be an easy solution to that problem, unless you stick to a test class per thread model.  More on that a bit latter. When designing for parallel execution of tests (the ParallelComputer hints at this), you usually don't want an unbounded number of threads to be executed in the system.  A fairly common approach to taming the thread/work apportioning beast is to use queues and worker threads. Essentially, each test (including the set up and tear down parts) gets pushed on to the queue, while the executor pops it off on the other side in another process.  Essentially the relationship to executors to work queues depends on whatever rules you've set up.  For JUnit a simple mapping of executors to the number of processors (cores) or some multiple of that would be sufficient.  This model is closer to how JMS works without all the quality of service overhead.  As the executor runs the test, it sends notification objects to the notification queue. Using one line of ASCII art, the process looks like this: Classes/Suite ==&amp;gt; Executor ==&amp;gt; Notifier Each "==&amp;gt;" represents a queue.  The notification mechanism then becomes more like Swing events.  We could even cheat and use an Java 5 enum for the types of events.  This provides the same interface for all the events, and the convenience of an enum for determining the type of event.  If we take this approach a step further, if we substitute a PriorityQueue for the first queue, we get a way to prefer some tests over others (e.g. using categories as a priority mechanism).  Collecting the results in a separate thread than they are being executed protects the execution of tests from poorly written listeners. We could go to a very fine level of detail (i.e. each individual test) if it weren't for the class setup/tear down methods.  Those kind of tests would force some sort of ordering.  It's not entirely impossible, but does require more care. Such an approach may be over-engineering things a bit, and for short runs of a couple hundred tests that takes less than a second to run definitely overkill.  However for larger projects with much larger execution times, it may be a way to short circuit the execution a bit. Essentially the win here would be the ability to execute tests while they are still being parsed and prepared.  That can help with things like Theories where collecting a large number of DataPoints can have a profound impact on the time it takes to run. It would be pretty easy to ensure that no more than n+2 threads are used in a system, where n = Runtime.availableProcessors().</body>
  </mail>
  <mail>
    <header>Re: [RT] JUnit Core, Parallelism, Documentation</header>
    <body>Hi Berin, interesting ideas. A small warning at the beginning: I don't know enough about JUnits inner workings, really. Changing JUnit to execute tests in parallel is an interesting, but somewhat dangerous idea. Sequential is easier to reason about and easier to get right. I sure don't want to get my tests wrong! It's easy enough to get my programms wrong... I don't think we can change the default to multi-threaded. This would lead to all kind of trouble. Since tests that can be executed in parallel need to be programmed that way. So it would have to be an option. This requires some thinking, how the two approaches might be mixed. I agree that class level paralellization is probaby a good start. Though I don't see a real problem with @Before and @After with regard to parallel execution, only with @BeforeClass and @AfterClass setup. The real problem has more to do with the user supplied code. If I think about my test suite now, that uses Spring, I don't know for sure what would happen, would I execute all the tests in parallel. I suspect all kinds of oddeties would occour... Greetings,</body>
  </mail>
  <mail>
    <header>RE: [RT] JUnit Core, Parallelism, Documentation</header>
    <body>Right.  I wouldn't necessarily suggest making parallel execution the default, and your observation is the same as mine. Spring code is threadsafe, or at least designed to work in a heavily threaded environment like serving up web pages.  There are ways of enforcing a perceived order, even if the actual order is different. That's basically how Tomcat and Apache operate with the non-blocking IO. From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of Malte Finsterwalder Sent: Tuesday, March 02, 2010 3:36 AM To: junit@yahoogroups.com Subject: Re: [junit] [RT] JUnit Core, Parallelism, Documentation Hi Berin, interesting ideas. A small warning at the beginning: I don't know enough about JUnits inner workings, really. Changing JUnit to execute tests in parallel is an interesting, but somewhat dangerous idea. Sequential is easier to reason about and easier to get right. I sure don't want to get my tests wrong! It's easy enough to get my programms wrong... I don't think we can change the default to multi-threaded. This would lead to all kind of trouble. Since tests that can be executed in parallel need to be programmed that way. So it would have to be an option. This requires some thinking, how the two approaches might be mixed. I agree that class level paralellization is probaby a good start. Though I don't see a real problem with @Before and @After with regard to parallel execution, only with @BeforeClass and @AfterClass setup. The real problem has more to do with the user supplied code. If I think about my test suite now, that uses Spring, I don't know for sure what would happen, would I execute all the tests in parallel. I suspect all kinds of oddeties would occour... Greetings, Malte</body>
  </mail>
  <mail>
    <header>Re: [RT] JUnit Core, Parallelism, Documentation</header>
    <body>That's not what I meant. I know that Spring itself is thread safe, but since Spring uses mostly singletons, my spring beans have to be thread safe. And if I execute n tests in parallel in any random order and they all execute on the same object (singleton spring bean), this might result in problems. Maybe that's just part of a good test, because my beans need to be thread safe anyhow. But maybe not. Greetings,</body>
  </mail>
  <mail>
    <header>Spring in JUnit (was RE: [RT] JUnit Core, Parallelism, Documentation)</header>
    <body>That brings up a good point about Spring.  I personally would prefer not to set up a Spring environment in my code for the purpose of testing, but Spring has so many goodies that add to the desired function of what you are writing you can't do otherwise. For example, the Spring/Hibernate integration is a pretty common solution for most folks.  The problem is that ThreadSafe bound transaction manager.  Maybe I just need to know how to configure the transaction manager to always roll back the transaction at the end of a test, but essentially this combination forces you down the road of performing integration tests when all you want to do is perform unit tests.  There's a really good video out there on why "Integration Tests are a Scam", which describes in pretty simple terms the problem of this approach. I really am not a fan of frameworks that don't let you do perform simple unit testing.  At the same time these frameworks are very useful and help solve problems more quickly.  I just want my cake and eat it too. From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of Malte Finsterwalder Sent: Tuesday, March 02, 2010 7:50 AM To: junit@yahoogroups.com Subject: Re: [junit] [RT] JUnit Core, Parallelism, Documentation On 2 March 2010 13:27, Loritsch, Berin C. &amp;lt;berin.loritsch@... IO. That's not what I meant. I know that Spring itself is thread safe, but since Spring uses mostly singletons, my spring beans have to be thread safe. And if I execute n tests in parallel in any random order and they all execute on the same object (singleton spring bean), this might result in problems. Maybe that's just part of a good test, because my beans need to be thread safe anyhow. But maybe not. Greetings, Malte</body>
  </mail>
  <mail>
    <header>Regarding testing Web Services</header>
    <body>Hi Moderator and Group, I am doing project called testing the web services . what i am doing is I am converting the any web services WSDL or endpoint API to Java stub classes using apache axis2. then i am testing the java code using Junit. but i am facing some issues regarding this web services. if anybody sucessfully tested web services using programmtically (without any automated tool like Soapui) let me know.another method is also fine with me. Thanks for your help. Thanks, Krunal Naik</body>
  </mail>
  <mail>
    <header>Re: [RT] JUnit Core, Parallelism, Documentation</header>
    <body>Berin, Thanks for this!  I can't touch here on all of your ideas, so feel free to repeat any points you'd like to prioritize in the discussion. With regard to deprecation, we've definitely begun to feel the weight of the old code, but have indeed felt that it's not clear whether being very aggressive would be in the best interests of users: thanks to the fact that many users of tools like Eclipse and Maven have their JUnit version automatically updated without explicit intervention, it's easy to be the cause of breaking something that's been working for years.  That said, I think it is time for a little housecleaning. I've mentioned to Kent that we should do a codesearch.google.com smackdown, and start kicking the least-used public method or class "off the island" with each release. As you mention, I think that the biggest obstacle to real parallelism is an replacement or enhancement of the BeforeClass/AfterClass idiom that is well-defined outside of a single-threaded execution.  As two examples, (1) it's not well-defined whether a BeforeClass method should be able to be run more than once per test suite execution, (2) it's not well-defined whether one class can correctly start before another class's AfterClass method has been called. On Mon, Mar 1, 2010 at 5:17 PM, Loritsch, Berin C.</body>
  </mail>
  <mail>
    <header>Re: Spring in JUnit (was RE: [RT] JUnit Core, Parallelism, Documentation)</header>
    <body>Just for the record; Spring's SpringJUnit4ClassRunner is not thread safe without the patch in (vote please!). We use stub-wired spring tests for running unit tests of gui-layer controls, which is a really nice way to avoid 10 tons of mocks and/or redundant construction of "hard to construct" classes. We also use spring in our selenium tests. So there are different use cases that may have value with spring; we run all of these tests concurrently. Judging by this discussion it seems to me like documentation on the concurrency features probably needs to be created/updated, since the visibility of these features seem to be limited. I am also not sure if the design is final in any real way. As for the design; I think the current implementation allows a "ParalellComputer" to choose between a "queue of tasks" approach or any other solution. I think this is a real benefit; I can easily see scenarios where an external source actually wants to control the allocation of threading resources to a given test runner ( a concurrent multi-module maven build would be one such case, where an external scheduler would prioritize different modules)  ith.html Kristian ti., 02.03.2010 kl. 08.31 -0500, skrev Loritsch, Berin C.:</body>
  </mail>
  <mail>
    <header>Re: Re: Can't add labels to entries in github issues</header>
    <body>That's really unfortunate.  For now, I'll serve as human message queue.  Can you remind me the labels you wanted to add? On Mon, Mar 1, 2010 at 2:23 PM, Loritsch, Berin C.</body>
  </mail>
  <mail>
    <header>RE: Re: Can't add labels to entries in github issues</header>
    <body>Sure.  These two are bugs:  I'll be sure to add "[bug]" to the title of future bugs. From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of David Saff Sent: Tuesday, March 02, 2010 9:35 AM To: junit@yahoogroups.com Subject: Re: [junit] Re: Can't add labels to entries in github issues That's really unfortunate. For now, I'll serve as human message queue. Can you remind me the labels you wanted to add? David Saff On Mon, Mar 1, 2010 at 2:23 PM, Loritsch, Berin C. protect. to [mailto:junit@yahoogroups.com &amp;lt;mailto:junit%40yahoogroups.com&amp;gt; ] On Behalf Of</body>
  </mail>
  <mail>
    <header>RE: [RT] JUnit Core, Parallelism, Documentation</header>
    <body>Well, getting to the core, it is not very clear what is the _internal_ API and what is the _external_ API.  For something like JUnit there are actually two external APIs to worry about: *         The API for Test Writers *         The API for IDE/tool writers The JavaDocs do have to be very clear on what is likely to change, and what is meant to be stable.  This approach allows you to clean up cruft over time. The first misstep I saw was the move from using the Description object to build the tree of tests to using a Plan to build the tree of tests. The addChild() and getChildren() methods of the Description object are deprecated, yet JUnit creates the Plan from the description object.  I believe that the new direction of using a Plan instead of a hierarchy of descriptions is the correct one from a conceptual standpoint. The API for testers is pretty well understood, and I would be very resistant to arbitrarily changing that.  I think most people would be as well. What is less understood is where JUnit is designed to integrate with IDEs and tool vendors.  How much of the Computer/Plan/Filtering/Ordering do we want to expose?  What are we confident with?  The rest, as they say, making sure our internals work with that spec.  None of the internals should rely on deprecated features.  Anything in the "internal" package should be considered, by definition, internal.  That means anything in there that is deprecated should be free to be removed. At least, this is how I've evolved libraries before (I've worked on a few Apache projects in the past). From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of David Saff Sent: Tuesday, March 02, 2010 9:32 AM To: junit@yahoogroups.com Subject: Re: [junit] [RT] JUnit Core, Parallelism, Documentation Berin, Thanks for this! I can't touch here on all of your ideas, so feel free to repeat any points you'd like to prioritize in the discussion. With regard to deprecation, we've definitely begun to feel the weight of the old code, but have indeed felt that it's not clear whether being very aggressive would be in the best interests of users: thanks to the fact that many users of tools like Eclipse and Maven have their JUnit version automatically updated without explicit intervention, it's easy to be the cause of breaking something that's been working for years. That said, I think it is time for a little housecleaning. I've mentioned to Kent that we should do a codesearch.google.com smackdown, and start kicking the least-used public method or class "off the island" with each release. As you mention, I think that the biggest obstacle to real parallelism is an replacement or enhancement of the BeforeClass/AfterClass idiom that is well-defined outside of a single-threaded execution. As two examples, (1) it's not well-defined whether a BeforeClass method should be able to be run more than once per test suite execution, (2) it's not well-defined whether one class can correctly start before another class's AfterClass method has been called. David On Mon, Mar 1, 2010 at 5:17 PM, Loritsch, Berin C. a is a way. and current and the did kept a of currently parallelism pretty to side runs becomes for Collecting impossible, used</body>
  </mail>
  <mail>
    <header>Re: [RT] JUnit Core, Parallelism, Documentation</header>
    <body>On Tue, Mar 2, 2010 at 12:47 PM, Loritsch, Berin C. That's very, very, in-progress code, currently very changed from the most recent release (4.8.1), and certain to change before the next release (4.9).  This particular point is more about recognizing that with github, more people are probably watching HEAD, and we should consider a development branch, than anything to do with the public/private APIs when a release version does come out. No disagreement here.  As you see individual steps to take us in that direction, please bring them to our attention.</body>
  </mail>
  <mail>
    <header>Re: Re: Can't add labels to entries in github issues</header>
    <body>Done and done. On Tue, Mar 2, 2010 at 12:13 PM, Loritsch, Berin C.</body>
  </mail>
  <mail>
    <header>Re: Use of JExample for maintaining order of execution for tests</header>
    <body>Sorry for letting you wait. I am in the final strokes of my PhD thesis. Tests for @AfterClass are implementes, I'll see this week that I can implement the actual code as well. AA</body>
  </mail>
  <mail>
    <header>New user can't post to forum</header>
    <body>(not sure where else to send this) Hi! I created a new user account at login it says on all pages: You are not allowed to post a new forum topic. Is this normal? There is no explanation to be found about this. For the actual reason I subscribed, I'll post a separate message. Regards, David</body>
  </mail>
  <mail>
    <header>Per test fixture?</header>
    <body>Hi! What is the recommended way to setup test data for one test method only? Just do it at the beginning of the test method? Example: public void setUp() public void testOne() // do the testing 1.... public void testTwo() // do the testing 2.... Or is there special support from JUnit for this? Regards, David</body>
  </mail>
  <mail>
    <header>JUnitBenchmarks (application of @Rule)</header>
    <body>Hi there! I hope this will be interesting to folks listening on this mailing list. We have recently written a simple benchmarking suite on top of JUnit. Benchmarks are basically a custom @Rule added to your tests, so can be easily tuned, enabled/ disabled, etc. We found this package so useful that we decided to share it under Apache2 license. More information about the library here:  Thanks for your hard work on improving JUnit, Dawid</body>
  </mail>
  <mail>
    <header>Re: JUnitBenchmarks (application of @Rule)</header>
    <body>Dawid, This is really cool.  Thank you! On Mon, Mar 8, 2010 at 6:33 AM, dawid_weiss have recently written a simple benchmarking suite on top of JUnit. Benchmarks are basically a custom @Rule added to your tests, so can be easily tuned, enabled/ disabled, etc. We found this package so useful that we decided to share it under Apache2 license. More information about the library here:</body>
  </mail>
  <mail>
    <header>Re: Per test fixture?</header>
    <body>That's right--at the beginning of the method.</body>
  </mail>
  <mail>
    <header>Re: New user can't post to forum</header>
    <body>David, Those forums were purposely shut down, in favor of this mailing list, but the archives were left up as search-engine targets.  I thought the home page of the forums used to have a very prominent notice to this effect.  I'll look into it.</body>
  </mail>
  <mail>
    <header>Re: JUnitBenchmarks (application of @Rule)</header>
    <body>I agree, it is quite cool. We have found JUnit tests to be extremely helpful in micro-benchmarks. Basically, all the infrastructure is out there, you can run micro-benchmarks from within Eclipse or any other IDE, draw charts immediately... very helpful. One thing we did have a problem with was to attach a listener to the build runner from within Rule's implementation. It seems to me it's basically impossible at the moment. Perhaps it's a bad smell in design, but capturing end-of-all-tests event would be very helpful for applications like this one (to generate summaries, charts, etc.). For now, we use a workaround of capturing JVM shutdown... works well in most scenarios, but is dirty, brr. Dawid have recently written a simple benchmarking suite on top of JUnit. Benchmarks are basically a custom @Rule added to your tests, so can be easily tuned, enabled/ disabled, etc. We found this package so useful that we decided to share it under Apache2 license. More information about the library here:</body>
  </mail>
  <mail>
    <header>Re: JUnitBenchmarks (application of @Rule)</header>
    <body>That does sound useful.  Can you log a feature request so we don't forget it? On Mon, Mar 8, 2010 at 9:47 AM, Dawid Weiss have recently written a simple benchmarking suite on top of JUnit. Benchmarks are basically a custom @Rule added to your tests, so can be easily tuned, enabled/ disabled, etc. We found this package so useful that we decided to share it under Apache2 license. More information about the library here:</body>
  </mail>
  <mail>
    <header>Re: Per test fixture?</header>
    <body>You are correct... You might also try using the latest JUnit, and annotations, instead of naming tests with the prefix test. Hope I helped, Big Mike</body>
  </mail>
  <mail>
    <header>Re: JUnitBenchmarks (application of @Rule)</header>
    <body>I filed a feature request here:  Dawid have recently written a simple benchmarking suite on top of JUnit. Benchmarks are basically a custom @Rule added to your tests, so can be easily tuned, enabled/ disabled, etc. We found this package so useful that we decided to share it under Apache2 license. More information about the library here:</body>
  </mail>
  <mail>
    <header>Re: New user can't post to forum</header>
    <body>No, there is no notice. There is a login link, then a "register new user" link. It takes the account data, sends a conifrmation email etc... Only after logging in all posting is disabled. David</body>
  </mail>
  <mail>
    <header>Re: New user can't post to forum</header>
    <body>Agreed and acknowledged that current behavior is wrong.  I believe it was right in the past, and will make sure it becomes right in the near future.  :-)</body>
  </mail>
  <mail>
    <header>RE: JUnitBenchmarks (application of @Rule)</header>
    <body>I started a new project to flesh out my ideas from the RT I posted last week that might fit this solution well.  In essence, the project I started is intended for QoS testing (Quality of Service) which I define as correctness under duress.  I havenât gotten very far, but at least Iâve gotten it to the place where it can run its own tests and the result events are processed in a separate thread. On a minor side note, when the bulk of your tests are short and do not involve a lot of objects, you can see as much as 100% speed gains.  Essentially, by short I mean less than a millisecond in duration.  The speed gains are achieved by not penalizing the tests while you write to the console.  In more substantive tests you will not see as much of a speed gain. Essentially the QoS testing framework will have some hooks to specify numbers of runs, parameters, etc.  My hope is that at the very least there can be a symbiotic relationship between the projects.  I think it would be really cool for the two to even merge one day.  However, testing for benchmarks and quality of service is a little different from regular unit testing. Also note: for more accurate test timing, use the System.nanoTime().  Most JVM implementations only increment the system clock every 10ms.  Thatâs fine enough for telling the time, but when your individual tests are typically faster than 10ms that lack of granularity can hurt. I would be very interested in what kind of needs you may have. From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of Dawid Weiss Sent: Monday, March 08, 2010 11:28 AM To: junit@yahoogroups.com Subject: Re: [junit] JUnitBenchmarks (application of @Rule) I filed a feature request here:  Dawid On Mon, Mar 8, 2010 at 4:02 PM, David Saff &amp;lt;david@... have recently written a simple benchmarking suite on top of JUnit. Benchmarks are basically a custom @Rule added to your tests, so can be easily tuned, enabled/ disabled, etc. We found this package so useful that we decided to share it under Apache2 license. More information about the library here:</body>
  </mail>
  <mail>
    <header>Re: Cannot use @Rule in Scala</header>
    <body>I've been thinking about allowing this: If that works in Java, then this should work in Scala, right? @Rule def mongo = new MongoResource("test_insight")</body>
  </mail>
  <mail>
    <header>Re: Additional assertions/hamcrest verifiers</header>
    <body>Berin, I've been working on, but not publicizing, an alternative assertion package for Java test frameworks called dotmesh, which automatically creates assertions for every public boolean method on non-final classes, which would allow: On Thu, Feb 18, 2010 at 2:24 PM, Loritsch, Berin C. Don't have a good one for this. Nothing magic from dotmesh for this one.  However, with a sensible date/time framework like Joda, this might be easier. The main holdups for dotmesh are: 1) Finding time to document well 2) Figuring out the right thing to do with third-party final classes.</body>
  </mail>
  <mail>
    <header>Re: Something is bothering me about assumptions</header>
    <body>From a conceptual point of view, assumptions should result in the test being marked as ignored.  Unfortunately, until assumptions were added, the correct behavior of an IDE that saw this sequence was undefined: testStarted testIgnored testFinished I'd love to go back and fix this. passes.  I then ran into the test case that confirms that action.  Coming from the aspect that I want to have confidence that my code and tests are functioning properly, I honestly think that is the wrong action. ignored.  To say the test passes because something failed is like saying you don't have a cavity because the dentist doesn't have the right tool.  You don't know one way or the other, and the test won't be able to run properly when the assumption is violated. needs to be a certain precondition to the test passing, I will add those assertions before I perform the action that needs to be tested.  To me, it is a failure if the test could not be set up properly. assumption is equivalent to the @Ignore annotation.  You'll see in the summary that X number of tests were run, Y number of tests ignored, and Z number of tests failed.  Although, for ignored tests I'd like to see what the reason was (failed assumption or manually ignored through the attribute). security about your code.  What is happening is that the test just wasn't run, and there may be a legitimate problem hiding.  To me that is the most dangerous part of that solution.  I'd rather get the bad news straight than trust faulty information.</body>
  </mail>
  <mail>
    <header>RE: Additional assertions/hamcrest verifiers</header>
    <body>I find Hamcrest is a reasonable framework, so some of my custom assertions I can write as Hamcrest classes.  The dotmesh framework sounds interesting. I'd like to contribute a lot of JavaDocs for JUnit, because they have been sorely lacking.  Now that I have a better idea of what is available with JUnit 4, I'm regretting not adopting it sooner. My assertRecent() method looks like this: compared will If the older, considered good [%d].", It's not too difficult.  If dotmesh is extensible, you could have something like: From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of David Saff Sent: Friday, February 19, 2010 2:22 PM To: junit@yahoogroups.com Subject: Re: [junit] Additional assertions/hamcrest verifiers Berin, I've been working on, but not publicizing, an alternative assertion package for Java test frameworks called dotmesh, which automatically creates assertions for every public boolean method on non-final classes, which would allow: On Thu, Feb 18, 2010 at 2:24 PM, Loritsch, Berin C. just point to: collection.size(), Don't have a good one for this. within that Nothing magic from dotmesh for this one. However, with a sensible date/time framework like Joda, this might be easier. conforms clean The main holdups for dotmesh are: 1) Finding time to document well 2) Figuring out the right thing to do with third-party final classes. David Saff</body>
  </mail>
  <mail>
    <header>Re: Additional assertions/hamcrest verifiers</header>
    <body>On Fri, Feb 19, 2010 at 2:58 PM, Loritsch, Berin C. Due to the type-munging required by Java, that would probably be: Or some such thing.</body>
  </mail>
  <mail>
    <header>RE: Additional assertions/hamcrest verifiers</header>
    <body>You might consider not making it depend on the current time, but specifying the expected value explicitly. For example, NUnit uses Assert.That(someDate, Charlie</body>
  </mail>
  <mail>
    <header>RE: Additional assertions/hamcrest verifiers</header>
    <body>The main reason for the assertRecent() I wrote was for testing an audit log.  By definition, I cannot supply the date-or the entries could be spoofed or doctored.  As long as it was within a reasonable amount of time I'd be good.  For example 100ms is more than enough time, but 10ms might be too optimistic due to where the clock is ticking. From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of Charlie Poole Sent: Friday, February 19, 2010 3:25 PM To: junit@yahoogroups.com Subject: RE: [junit] Additional assertions/hamcrest verifiers You might consider not making it depend on the current time, but specifying the expected value explicitly. For example, NUnit uses Assert.That(someDate, Charlie [mailto:junit@yahoogroups.com &amp;lt;mailto:junit%40yahoogroups.com&amp;gt; ] On [mailto:junit@yahoogroups.com &amp;lt;mailto:junit%40yahoogroups.com&amp;gt; ]</body>
  </mail>
  <mail>
    <header>Re: Cannot use @Rule in Scala</header>
    <body>Yup, that will work in scala. -- View this message in context:  Sent from the JUnit - User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: Cannot use @Rule in Scala</header>
    <body>Can you add a feature request for this, then?  Thanks,</body>
  </mail>
  <mail>
    <header>Re: Cannot use @Rule in Scala</header>
    <body>Thanks David!  -- View this message in context:  Sent from the JUnit - User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Can't add labels to entries in github issues</header>
    <body>Perhaps there is something wrong with the permissions or something, but I can't mark the two bugs I entered as being bugs.  The use interface just doesn't respond.</body>
  </mail>
  <mail>
    <header>Re: Can't add labels to entries in github issues</header>
    <body>So it works for me when I: - Select the checkbox next to an item. - Select the dropdown on the "bug" label. - Select "Apply to selection" Just to confirm, is that the process you're following? On Tue, Feb 23, 2010 at 8:20 AM, Loritsch, Berin C.</body>
  </mail>
  <mail>
    <header>Thoughts on Suites in modern testing</header>
    <body>When JUnit first started out, there really wasn't any way to collect all the tests without writing a Suite.  Now Ant, Maven, and other build tools collect all the test classes and execute them.  Essentially, the usefulness of test Suites has been greatly diminished.  The problem that the build tools answered quite nicely was the fact that manually maintaining the test suites can be a problem.  People routinely forget to add test classes to the test suites, and it's not a question of laziness.  It's just a question of it being that "one more thing" to remember that is so easily overlooked. The Categories test runner provides a nice extension to Suites that give them some value again.  However, I'd like to make use of them without explicitly listing all the classes included in the suite.  Essentially, I'd either like the Categories test runner to collect all the test classes itself and apply the category filters, or have that built into the main JUnit runner.  Adding support for a class collector is possible, and may even be preferable in today's testing. Currently some projects keep unit tests, slow tests, and installation tests in separate directory structures so that Ant or whatever build tool they choose can run them separately.  Categories will allow these projects to clearly mark the tests, possibly even assigning multiple categories to the tests.  This provides great flexibility in how things are run. Of course, this includes corresponding support in ANT to execute the proper categories, or at the very least call the Categories test suites we've set up.  Since JUnit takes care of collecting the classes for us, it makes leveraging that support as simple as calling a single test case which all the build tools already support. What thoughts do you have on this?</body>
  </mail>
  <mail>
    <header>Re: Can't add labels to entries in github issues</header>
    <body>I don't see any check boxes, and there are no drop downs for me.  That's the problem I'm seeing.  Is that only available to collaborators?</body>
  </mail>
  <mail>
    <header>Re: Re: Can't add labels to entries in github issues</header>
    <body>Apparently, yes.  Didn't realize that.  Can you prefix the title with [bug], then?  Thanks, problem I'm seeing.  Is that only available to collaborators?</body>
  </mail>
  <mail>
    <header>Re: Thoughts on Suites in modern testing</header>
    <body>I've long had a hope that we could incorporate Johannes Link's excellent cpsuite runner into the core JUnit distribution:  Would such a move handle your needs? On Tue, Feb 23, 2010 at 10:30 AM, Loritsch, Berin C.</body>
  </mail>
  <mail>
    <header>RE: Thoughts on Suites in modern testing</header>
    <body>It looks promissing, and the only issue I see is the GPL license might not be compatible.  GPL is definitely not an option for stuff that will be sold. Licensing issues aside, as long as that solution will also respect the categories (a ClassPathCategories test runner?) it would be perfect. From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of David Saff Sent: Wednesday, February 24, 2010 2:18 PM To: junit@yahoogroups.com Subject: Re: [junit] Thoughts on Suites in modern testing I've long had a hope that we could incorporate Johannes Link's excellent cpsuite runner into the core JUnit distribution:  Would such a move handle your needs? David On Tue, Feb 23, 2010 at 10:30 AM, Loritsch, Berin C. all that give Essentially, things suites us, case</body>
  </mail>
  <mail>
    <header>C unit testing framework?</header>
    <body>All, Sorry for a slight off-topic query.  I need to help a team familiar with JUnit that just adopted a project written in C (not C++).  Any suggestions which of the options at  team?  Many thanks,</body>
  </mail>
  <mail>
    <header>Re: Thoughts on Suites in modern testing</header>
    <body>Johannes, Would you consider releasing cpsuite under the CPL as well? On Wed, Feb 24, 2010 at 2:43 PM, Loritsch, Berin C.</body>
  </mail>
  <mail>
    <header>RE: C unit testing framework?</header>
    <body>Hmm.  Boost and CppUnit are pretty decent, but they are C++ libraries. Many of the options look specific to a particular toolkit (GUnit, QtUnit, etc.) so they'd be eliminated. I've only done C++ and Java, so I'm probably not the best to help.  Does C Unit or CGreen look like a decent match.  You are looking at a switch from object oriented to procedural programming, so the mental shift will be fairly big. From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of David Saff Sent: Thursday, February 25, 2010 9:06 AM To: junit@yahoogroups.com Subject: [junit] C unit testing framework? All, Sorry for a slight off-topic query. I need to help a team familiar with JUnit that just adopted a project written in C (not C++). Any suggestions which of the options at  team? Many thanks, David Saff</body>
  </mail>
  <mail>
    <header>Re: C unit testing framework?</header>
    <body>We've been using something called embUnit for C testing.  The project may be dead but we've been improving it and want to post our changes back to some shared repository. I've CCed Keith Ray, who could answer specific questions about this. -- best regards, jk Industrial Logic, Inc. Joshua Kerievsky Founder, Extreme Programmer &amp;amp; Coach Twitter: @JoshuaKerievsky Learn Code Smells, Refactoring and TDD at</body>
  </mail>
  <mail>
    <header>RE: C unit testing framework?</header>
    <body>Hi David, Is there any obstacle to using a C++ framework to test the C code? If all testing is on a desktop platform, I'd guess not, but if you need to run tests on an embedded platform it would depend on what cross-compilers are available. Assuming you can use a C++ framework, my own current favorites are CPPUnitLite for apps with an embedded component and Google test for desktop apps. CPPUnitLite is also a good choice if you expect to modify the framework, because it's small - and expects you to modify it. BTW, I think the differences between JUnit and any C/C++ framework are much bigger than the differences between the individual frameworks, so the team will have a lot to unlearn/learn no matter what the choice. Charlie</body>
  </mail>
  <mail>
    <header>@After: doesn't work when tests run from JUnitCore?</header>
    <body>Greetings, I am working in Eclipse.  I have defined an @After method in the superclass of all my test classes.  When I invoke the tests individually through Eclipse, my @After method gets invoked as I expect. We have written a program that uses JUnitCore to execute tests.  It runs all the tests as expected, except it does not execute the @After method for each test. Is there something obvious I am missing or something I need to do to get JUnitCore to execute the @After routine? -Sam</body>
  </mail>
  <mail>
    <header>Re: @After: doesn't work when tests run from JUnitCore?</header>
    <body>The problem was at my end.  Sorry for bothering the group. all my test classes.  When I invoke the tests individually through Eclipse, my @After method gets invoked as I expect. the tests as expected, except it does not execute the @After method for each test. JUnitCore to execute the @After routine?</body>
  </mail>
  <mail>
    <header>Re: C unit testing framework?</header>
    <body>Charlie, The code is used in many places--we're not sure how extensively, so the feeling is that more people will add and run tests if they don't have to extend their software or wetware tool chain. Thanks! On Thu, Feb 25, 2010 at 2:38 PM, Charlie Poole</body>
  </mail>
  <mail>
    <header>Re: C unit testing framework?</header>
    <body>Joshua, Thanks!  embUnit looks very promising. On Thu, Feb 25, 2010 at 10:16 AM, Joshua Kerievsky</body>
  </mail>
  <mail>
    <header>RE: Re: Can't add labels to entries in github issues</header>
    <body>I've tried a few times to change the title.  Unfortunately, every time I clicked on "edit" I got sent to the main list again. From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of David Saff Sent: Wednesday, February 24, 2010 2:10 PM To: junit@yahoogroups.com Subject: Re: [junit] Re: Can't add labels to entries in github issues Apparently, yes. Didn't realize that. Can you prefix the title with [bug], then? Thanks, David On Tue, Feb 23, 2010 at 1:35 PM, Berin &amp;lt;berin.loritsch@... That's the problem I'm seeing.  Is that only available to collaborators? but interface</body>
  </mail>
  <mail>
    <header>RE: C unit testing framework?</header>
    <body>Hi David, Fair enough. Thinking about it, my successes with using C++ to test C all involved developers who already used C++  and liked it better than C. Charlie</body>
  </mail>
  <mail>
    <header>junit.framework.AssertionFailedError</header>
    <body>I am a Newbie to Junit...i was trying a practice application in JBPM part of the code i have wriiten from that tutorial of JBPM is --------------------------------------------------------------------------------\ --------------------------------------------------------------------------------\ ------------- assertEquals( "Instance is in start state", instance.getRootToken().getNode().getName(), assertNull( "Message variable should not exist yet", assertEquals( "Instance is in auction state", instance.getRootToken().getNode().getName(), assertEquals( "Message variable contains message", instance.getContextInstance().getVariable("message"), "Going to the first state!-auction" assertEquals( "Instance is in end state", instance.getRootToken().getNode().getName(), assertEquals( "Message variable is changed", instance.getContextInstance().getVariable("message"), --------------------------------------------------------------------------------\ --------------------------------------------------------------------------------\ ---------- i am getting the following error... ===== junit.framework.AssertionFailedError: Message variable contains message at junit.framework.Assert.fail(Assert.java:47) at junit.framework.Assert.failNotEquals(Assert.java:282) at junit.framework.Assert.assertEquals(Assert.java:64) at com.jbay.SampleTest.testSimpleProcess(SampleTest.java:37) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:25) at java.lang.reflect.Method.invoke(Method.java:597) at junit.framework.TestCase.runTest(TestCase.java:154) at junit.framework.TestCase.runBare(TestCase.java:127) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestR\ eference.java:130) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\ .java:467) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\ .java:683) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java\ :390) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.jav\ a:197) --------------------------------------------------------------------------------\ ---------------------------------------------------------------------------- please someone help me!! -- View this message in context:  tml Sent from the JUnit - User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: junit.framework.AssertionFailedError</header>
    <body>When writing tests, one verifies expected behavior by writing assertions. Assertions are method calls, (e.g. assertTrue, assertEquals, and many others explained in against values produced by the test.  They throw AssertionFailedError when a particular condition is not met. The exception you got shows that the following assertion failed: There are three arguments to this assertEquals assertion. First, the string is a message that is printed when the assertion fails. The messages are usually used to help with debugging by describing what an assertion does in a human-readable way.  The second argument is the expected value and the third is the actual value. In your example, the arguments are backward. It is most common for the expected side to be a literal (in this case a String) and the actual side to be the result of the computation that you want to test. Back to your error. When assertEqual fails, it shows the string values of the expected and actual sides to again aid in debugging. Therefore, the exception you got is telling you that the getVariable method returned null when it should have instead returned the string "Going to the first state!-auction". The test has failed and you need to start debugging to find out why. Brett sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:25) org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestR\ eference.java:130) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\ .java:467) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\ .java:683) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java\ :390) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.jav\ a:197)  tml</body>
  </mail>
  <mail>
    <header>RE: Re: SureFire Plugin: "parallel" attribute</header>
    <body>I assume you have one or two @Test(timeout=1050) in your code? Each timeout test spawns another thread in which the actual test is performed.  The timing is maintained in the current thread that is executing the other tests in the class.  One of the caveats with running testing in parallel is that the actual time spent within the thread is longer than if the tests were run sequentially.  That's because you are utilizing more of your computer's resources at once.  It could very well be that if your timeout tests were barely passing before, it is enough of a difference to cause you problems now. From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of Douglas Ferguson Sent: Sunday, February 14, 2010 10:20 AM To: junit@yahoogroups.com Subject: Re: [junit] Re: SureFire Plugin: "parallel" attribute I just tried to install ConfigurableParallelComputer and got this test error: both mode at 600ms per class violates maximal expected runtime1050" type="java.lang.AssertionError"&amp;gt;java.lang.AssertionError: Actual runtime 1072 for 5 threads running 7 classes in both mode at 600ms per class violates maximal expected runtime1050 at org.junit.Assert.fail(Assert.java:91) at org.junit.Assert.assertTrue(Assert.java:43) at org.jdogma.junit.JUnitCorePerformanceTest.validateBounds(JUnitCorePerfor manceTest.java:141) at org.jdogma.junit.JUnitCorePerformanceTest.testSpeedWithBoth(JUnitCorePer formanceTest.java:132) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.jav a:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessor Impl.java:43) at java.lang.reflect.Method.invoke(Method.java:616) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMet hod.java:44) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallab le.java:15) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMetho d.java:41) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod .java:20) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner .java:76) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner .java:50) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184) at org.junit.runners.ParentRunner.run(ParentRunner.java:236) at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.jav a:62) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSe t(AbstractDirectoryTestSuite.java:140) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(Abstr actDirectoryTestSuite.java:127) at org.apache.maven.surefire.Surefire.run(Surefire.java:177) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.jav a:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessor Impl.java:43) at java.lang.reflect.Method.invoke(Method.java:616) at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(Suref ireBooter.java:345) at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java :1009) Got it, everything makes sense now. Would I be safe to download this and add it to our internal maven repo?  Also, Just out of curiosity, what happens thread count wise when you aren't using ConfigurableParallelComputer, does it literally fire up a thread per test? D/ I'm not too worried about my tests, as they all run on isolated data sets. We are still build them up... I think the thing you're missing is that maven surefire 2.5 works with JUST junit 4.7+ or a *combination* of junit 4.7+ /and/ ConfigurableParallelComputer. When using surefire with junit /alone/ it does not support threadCount. You will need to use the /combination/ to restrict threadCount. Since you're a selenium user you WILL need to limit threads, which means you *cannot* get by with just junit 4.7+, but you *will* need ConfigurableParallelComputer. I will update the surefire docs to be a bit clearer on this restriction. I know at least three selenium projects that are doing exactly what you want. Most run with parallel=classes and a thread restriction, since this allows a smooth number of concurrent tests, something that is good for your grid. My current firefox runs went from 45 minutes single thread to 8 minutes concurrent, so there's definitely a huge upside. This does not mean it's a simple task, since most selenium test suites are not written with concurrency support in mind. Quite frankly, if you think getting surefire/junit to work is hard you can rest assured that the worst part is still ahead of you.</body>
  </mail>
  <mail>
    <header>@DataPoints called several times for Theories</header>
    <body>I created a set of theories to verify the equals(), hashCode() relationship.  While I had the equals and reciprocal equals working properly, I was surprised at the unintended hashCode collisions I had in my code.  More importantly I was surprised at how often the @DataPoints method was called to set up the tests.  It was called no less than 61 times for 60 discrete data points.  That seems a bit excessive to me. I set up a bunch of data with the assumption that it was set up once, and then the contents were copied as needed.  Essentially the expensive set up work is done 61 times, accounting for a large portion of the 37 seconds it takes to run all my tests.  If the @DataPoints method is only called once, and the values are copied as necessary, then the implementation would be much faster.</body>
  </mail>
  <mail>
    <header>RE: Re: SureFire Plugin: "parallel" attribute</header>
    <body>From our experiments. If you fire up 4 threads against a single instance of RC it queues up all the requests and only runs them 1 at time. not use grid. Instead we let a single build run with 4 threads towards a single instance of selenium RC (with firefox). This has (Windows) pizza boxes running RC+ firefox, for a grand total selenium-TDD-based development that has allowed us</body>
  </mail>
  <mail>
    <header>RE: Re: SureFire Plugin: "parallel" attribute</header>
    <body>and user-modifyable - which is really the important thing. Actually, I suppose at some point in time Kent/David make up their mind &amp;gt;about how to solve issue 18. I've spent quite a lot of time refining the CPC and they're more than welcome to supplement/replace ParallelComputer with my implementation. Just remember to vote for issue &amp;gt;18 ;) [DF] Where do I vote? maven with overriding values on our build box: hooks. [DF] From the looks of it, you aren't running these in parallel? You are kicking off separate runs for different browsers? Our goal is to have all the tests get kicked off in the "integration-test" maven phase.</body>
  </mail>
  <mail>
    <header>RE: Re: SureFire Plugin: "parallel" attribute</header>
    <body>Something is serializing your traffic. We do this on /windows/ rc's with firefox. I do it every day using just maven + rc + firefox on my local machine. Browser windows are exploding all over the place. I am almost certain your problem lies within your junit+selenium fixture. Please make sure that you need to have one instance of the Selenium object PER THREAD within the junit fixtures, and you must do thread-based browser instance management within your code. While not exactly rocket science, it's not the kind of code you write without any well-defined use-case. Since you only managed to get running with threads or so yesterday I wouldn't be expecting this code to be ready today ;) You *could* make multiple bindings of the surefire mojo in maven and fork multiple executions, still using the same scheme. Our "critical" chain is about 10 minutes long and involves unit tests, concurrent integration tests and concurrent selenium tests on firefox. The thing is that we have a quite long build chain, with a short critical chain. Getting Selenium tests to run 24/7 stable on 3 browser families is pretty darn close to an art form. So if you mash 30-40 minutes "linear time" testing with 3-4 browsers into one huge build, you'll simply never get a green build. IE is mostly going to be linear time anyway. But I would advise you to keep your ambitions low regarding running everything as one big pile. If you decompose into per-browser modules, you can just let your CI server build these in parallel instead. And all the browser that support it run multi-threaded within the builds. If you use maven profiles you can suppress most non-selenium related stuff in the builds running selenium tests. Kristian</body>
  </mail>
  <mail>
    <header>RE: Re: SureFire Plugin: "parallel" attribute</header>
    <body>[DF] Actually, we are using selenium grid. This could be serializing our requests. [DF] If you fork the sure fire execution will then maven would exit before the tests are done and then the integration server wouldn't be able to quantify the build as healthy or not.. [DF] What's the deal with IE?</body>
  </mail>
  <mail>
    <header>RE: Re: SureFire Plugin: "parallel" attribute</header>
    <body>When running in parallel, does JUnit create a new class for each thread/method or is the class instance shared across threads/methods? D/</body>
  </mail>
  <mail>
    <header>RE: Re: SureFire Plugin: "parallel" attribute</header>
    <body>[DF] If you fork the sure fire execution will then maven would exit before the tests are done and then the integration server wouldn't be able to quantify the build as healthy or not.. Also, according to this, it is already forking by default... forkMode  String  2.1  Option to specify the forking mode. Can be "never", "once" or "always". "none" and "pertest" are also accepted for backwards compatibility. Default value is: once.</body>
  </mail>
  <mail>
    <header>Re: Re: SureFire Plugin: "parallel" attribute</header>
    <body>But there's no point in bashing the default implementation; it's extensible and user-modifyable - which is really the important thing. Actually, I suppose at some point in time Kent/David make up their mind about how to solve issue 18. I've spent quite a lot of time refining the CPC and they're more than welcome to supplement/replace ParallelComputer with my implementation. Just remember to vote for issue 18 ;) [DF] How do I do that? These are "sensible default values" in our environment and we just invoke maven with overriding values on our build box: install The we just have a number of automatic builds that are triggered by commit hooks. I know it's not very glorious, but it works really well in the trenches. Ah, so you aren't running all the browsers in parallel? You are kicking them off individually with separate maven runs? My goal is to have the itegration tests (selenium) run during continuous integration and all run in parallel so that that it doesn't take forever. D/</body>
  </mail>
  <mail>
    <header>Re: Re: SureFire Plugin: "parallel" attribute</header>
    <body>thread/method or is the class instance shared across threads/methods? A new instance for every method being run. &amp;gt;Actually, we are using selenium grid.  This could be serializing our requests. No. It's your code. &amp;gt;If you fork the sure fire execution will then maven would exit before the tests are done &amp;gt; and then the integration server wouldn't be able to quantify the build as healthy or not.. If you want to run multiple browsers concurrently you can't have multiple surefire executions. But don't do this. You're trying to run marathon even though you're clearly demonstrating you're not even walking properly yet. &amp;gt;[DF] What's the deal with IE? I've already answered this. One instance only per windows installation. Probably bad os, bad browser or both. Kristian</body>
  </mail>
  <mail>
    <header>Re: Re: SureFire Plugin: "parallel" attribute</header>
    <body>requests. No. It's your code. [DF] Well I created a test harness that just fired up a bunch of threads and each thread just created a new DefaultSelenium. The only way I could get the tests from blocking was to start multiple clients connecting to the grid hub. Is it possible that the hub will only give 1 request to a worker at a time?</body>
  </mail>
  <mail>
    <header>Re: Re: SureFire Plugin: "parallel" attribute</header>
    <body>and each thread just created a new DefaultSelenium.The only way I could get the tests from blocking was to start multiple clients &amp;gt;connecting to the grid hub.Is it possible that the hub will only give 1 request to a worker at a time? Try with RC instead. They're drop-in replacements of each other. You're kind-of saying that "select is broken", which is why I'm just saying no. I'm repeatedly saying "learn to walk before you run", and I'm not sure I'm getting across clearly. I assume you're starting firefox and not IE ? Maybe you should try to run 1 instance of DefaultSelenium in two different VM; in that way you can assert that 1 node works properly and just add more nodes. You'll honestly have to talk to the people on the selenium mailing list about grid. I tried it once, and it worked concurrently but not at the level of stability we required - which is high. That may have changed since then. Kristian</body>
  </mail>
  <mail>
    <header>Re: Re: SureFire Plugin: "parallel" attribute</header>
    <body>It works fine with RC, i.e. fires up multiple browsers. Unfortunately the selenium list doesn't seem to answer many questions about grid or RC. Thanks for all your time. It's been really helpful. D/</body>
  </mail>
  <mail>
    <header>Annotations vs. extending TestCase</header>
    <body>When using JUnit4 is there any functional difference between extending TestCase and using the @Test annotation? i.e. If I continue to extends TestCase and I try to use the new parallel tests features am I in trouble of  "mixing" the old with the new? D/</body>
  </mail>
  <mail>
    <header>RE: Annotations vs. extending TestCase</header>
    <body>If all you are using is the @Test annotation, there is little difference.  However, there are some features that are not available with the old style test case: *         The ability to disable tests with @Ignore *         The ability to do test class set up and tear down (i.e. for the set of tests instead of each test individually) Additionally, JUnit 4 has several features that are accessible only with the @RunWith attribute.  The short list includes: *         Test categories with @Category (essentially run all tests that fit a certain category so you can separate slow tests and quick tests) *         Parameterized tests to feed the tests with a data set up in advance *         Theories to test behaviors between several objects, using several data points In short, it is worth moving on toward the new JUnit features and abandoning the old way of doing things.  The JUnit 3 compatibility allows you to keep the tests you've written so far, taking advantage of the new features with the new tests you write. From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of Douglas Ferguson Sent: Tuesday, February 16, 2010 2:23 AM To: junit@yahoogroups.com Subject: [junit] Annotations vs. extending TestCase When using JUnit4 is there any functional difference between extending TestCase and using the @Test annotation? i.e. If I continue to extends TestCase and I try to use the new parallel tests features am I in trouble of "mixing" the old with the new? D/</body>
  </mail>
  <mail>
    <header>RE: Annotations vs. extending TestCase</header>
    <body>I forgot two items that are available just on the @Test attribute that make certain testing easier: @Test(expected=IllegalArgumentException.class) Gives you the ability to force code to fail, and the framework will match the exception type thrown against what you said was expected. @Test(timeout=300) // time in ms Gives you the ability to ensure that a test takes no more than a specific amount of time to perform.  The test is run in a separate thread, so don't expect to be able to use information tied to a ThreadLocal in your class set up code here.  However, if you have performance criteria on specific actions it is a good way to enforce it. From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of Loritsch, Berin C. Sent: Tuesday, February 16, 2010 8:37 AM To: junit@yahoogroups.com Subject: RE: [junit] Annotations vs. extending TestCase If all you are using is the @Test annotation, there is little difference. However, there are some features that are not available with the old style test case: * The ability to disable tests with @Ignore * The ability to do test class set up and tear down (i.e. for the set of tests instead of each test individually) Additionally, JUnit 4 has several features that are accessible only with the @RunWith attribute. The short list includes: * Test categories with @Category (essentially run all tests that fit a certain category so you can separate slow tests and quick tests) * Parameterized tests to feed the tests with a data set up in advance * Theories to test behaviors between several objects, using several data points In short, it is worth moving on toward the new JUnit features and abandoning the old way of doing things. The JUnit 3 compatibility allows you to keep the tests you've written so far, taking advantage of the new features with the new tests you write. [mailto:junit@yahoogroups.com &amp;lt;mailto:junit%40yahoogroups.com&amp;gt; ] On Behalf Of Douglas Ferguson Sent: Tuesday, February 16, 2010 2:23 AM Subject: [junit] Annotations vs. extending TestCase When using JUnit4 is there any functional difference between extending TestCase and using the @Test annotation? i.e. If I continue to extends TestCase and I try to use the new parallel tests features am I in trouble of "mixing" the old with the new? D/</body>
  </mail>
  <mail>
    <header>Re: Annotations vs. extending TestCase</header>
    <body>Where can I read more about this one? * Theories to test behaviors between several objects, using several data points</body>
  </mail>
  <mail>
    <header>RE: Annotations vs. extending TestCase</header>
    <body>&lt;a href="http://bloritsch.d-haven.net/articles/2010/02/09/using-junit-4-theories-"&gt; to-test-contracts  opment/using-junit-datapoints-and-theories/  From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of Douglas Ferguson Sent: Tuesday, February 16, 2010 10:23 AM To: junit@yahoogroups.com Subject: Re: [junit] Annotations vs. extending TestCase Where can I read more about this one? * Theories to test behaviors between several objects, using several data points</body>
  </mail>
  <mail>
    <header>Re: @DataPoints called several times for Theories</header>
    <body>Yuck.  Please log in github, and apply the "bug" tag! On Mon, Feb 15, 2010 at 2:15 PM, Loritsch, Berin C.</body>
  </mail>
  <mail>
    <header>Re: When to use parameterized tests vs. theories?</header>
    <body>Berin, Charlie may already have said it all better than I can, so I'll try a brief summary. Parameterized tests are an answer key: a = 3, b =  4 =&amp;gt; foo(a,b) = 5 a = 5, b = 12 =&amp;gt; foo(a,b) = 13 a = 0, b =  4 =&amp;gt; foo(a,b) = 4 Theories are a universal truth: a^2 + b^2 = foo(a,b)^2 Sometimes answer keys are easier to write than universal truths.  If you are using parameterized tests as a way to supply examples to a universal truth, please log a bug about why it was hard to do with Theories.  :-)  Thanks, On Fri, Feb 12, 2010 at 2:12 PM, Loritsch, Berin C.</body>
  </mail>
  <mail>
    <header>Re: Putting all your JUnit tests in separate Eclipse project?</header>
    <body>Eclipse project, rather than keeping them within your main project? Yep, very happily, and many times.  The only times I don't: 1) Very early in an experimental greenfield project that I might throw away (actually, then, my movement is usually to move the system code to another project, keeping the first project as the test project) 2) When existing project structure before I joined makes it difficult.</body>
  </mail>
  <mail>
    <header>Re: Cannot use @Rule in Scala</header>
    <body>Sorry, just back from vacation. I assume then that some public accessor method gets generated for the field?  Is there any way to have the annotation attach to the Java method rather than the field? Just brainstorming how to make this work.  Thanks. org.junit.runners.BlockJUnit4ClassRunner.validateRuleField(BlockJUnit4ClassRunne\ r.java:184)</body>
  </mail>
  <mail>
    <header>RE: @DataPoints called several times for Theories</header>
    <body>I created the issue:  how do you apply the "bug" tag. From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of David Saff Sent: Thursday, February 18, 2010 11:24 AM To: junit@yahoogroups.com Subject: Re: [junit] @DataPoints called several times for Theories Yuck. Please log in github, and apply the "bug" tag! David On Mon, Feb 15, 2010 at 2:15 PM, Loritsch, Berin C. in @DataPoints expensive only</body>
  </mail>
  <mail>
    <header>Vote for Discrete Theories</header>
    <body>A while back I posted some changes I would like to see to make using Theories to test interface contracts more useful.  Essentially, this includes recording each run of the theory as a separate test.  I've prepared a patch to make it possible, and to get it applied I need your support.  The way it works is that you mark the theory you want to be recorded separately like this: @DataPoints @Theory(runDiscretely=true) If you have 6 data points, your test results will have 6 tests recorded like this: myTheory[1] = passed myTheory[2] = passed myTheory[3] = failed myTheory[5] = passed myTheory[8] = failed myTheory[13] = passed The advantage of this approach is that each failure is recorded separately.  When you are evaluating a number of implementations of the interface, you can find all the failures in one pass instead of fixing one failure to reveal another. Additionally, the value in the square brackets can be customized with the toString() method of your objects under test.  The test names are built with String.valueOf() on the data point value (handles null as well).  This works well when you dynamically build the data points in a method like the example I provided above.  Without this solution, the only clue is in the exception thrown which gives you the name of the @DataPoints method (fibonnacciSeries) and the index ([2]) with the first failure above.  The patch I have does not remove this functionality, so you have both solutions available.  The discrete test name includes the String value of the object and the exception thrown gives you the name of the data point and index (if applicable). If you believe that this will be helpful, vote for the issue at the beginning of the email.  If you want to try it out, you can get it from github here:</body>
  </mail>
  <mail>
    <header>Additional assertions/hamcrest verifiers</header>
    <body>There are some assertions that I find myself re-implementing a lot, including regex matching, collection checking, etc.  Of course, I'm just recently upgrading to JUnit 4 so if I'm missing something, please point me in the right direction.  Below is my list and what they might map to: assertDifferent(Object first, Object second) -&amp;gt; assertThat(first, not( assertEmpty(Collection&amp;lt;?&amp;gt; collection) -&amp;gt; assertThat( collection.size(), Note: I would like a nice one that reads like this: assertThat( assertContains(T item, Collection&amp;lt;T&amp;gt; collection) -&amp;gt; assertThat( assertMinimum(int num, Collection&amp;lt;?&amp;gt; collection) -&amp;gt; assertThat( Note: It might be nice have one that reads like this: assertThat( What I can't find an equivalent for is: assertRecent(Date timeStamp, long numMillis) -&amp;gt; Ensures a date is within a certain number of milliseconds of now.  Useful when testing dates that are created by an object as a result of an action (like last modified dates). assertMatches(String regex, String content) -&amp;gt; Ensure a string conforms to the regex.  Useful when testing string results that embed values including dates or system values.  The format of the string is important, but the variable aspects are problematic to generate a clean equalTo clause.</body>
  </mail>
  <mail>
    <header>RE: @DataPoints called several times for Theories</header>
    <body>Berin, When a theory mutates data points, it might be beneficial to recreate the data point for every theory invocation. Doing so prevents one theory execution from affecting others. I wrote about this issue in the following weblog post: You are correct, though, that copying would avoid some of the overhead in calling datapoint methods. It is interesting you mention this idea, because I am currently overseeing two students who for their senior thesis project are implementing framework for copying datapoints. I will post more information to the mailing list as the project continues. Brett</body>
  </mail>
  <mail>
    <header>Re: Cannot use @Rule in Scala</header>
    <body>Yes, a method of the same as the variable is declared public. eg, Will result in a public method foo() So I suppose BlockJUnit4ClassRunner#rules, ruleFields, createRules,  could be overriden to use FrameworkMethod. While that would not require classpath hack I'm currently using to override BlockJUnit4ClassRunner, it would still require putting a @RunWith annotation on every test, no? It would be so much nicer if junit could be configurable without having to pollute all the tests with this implementation detail. Having said that I'm not sure on what approach would be appropriate and lightweight to extend/modify the internals of junit in this way. But why is it necessary or even good to require @Rule fields to be public? -barry -- View this message in context:  Sent from the JUnit - User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>RE: When to use parameterized tests vs. theories?</header>
    <body>David, I'm pretty sure I didn't. :-) Charlie</body>
  </mail>
  <mail>
    <header>Re: @DataPoints called several times for Theories</header>
    <body>I agree with your prognosis, about fresh data points for testing the theories. That is precisely why I proposed reading them once, and cloning them (making a copy) as needed for each theory.  With that approach we even get the protection from mutated data points when you use the @DataPoint to mark a static field. Cloning is a much quicker operation, does not execute any constructors.  It merely copies the contents of the object memory verbatim. With the current implementation, if you are not prepared for the combinatorial affect of 60 data points combined with 60 data points for each theory there is a major disconnect.  The majority of the overhead in this particular scenario has to do with creating objects (with the additional overhead of doing it by reflection). When I created only one instance of each class instead of two, the performance was twice as fast (i.e. 37 seconds down to about 16 seconds). Essentially the number of times your @DataPoints method is called depends on the number of parameters in your @Theory and how many theories you have. Essentially the formula for my theory (ha, ha) of the execution is like this: N^(p-1) + 1 where: N is the number of data points returned by the method p is the number of parameters and the + 1 represents the run where the data point is read the first time So for 60 data points it is run 61 times for two parameters.  With three parameters it would be called 3601 times.  I have to verify with three parameters.  The theory is called N^p times for sure and that is expected. With the above formula, the mapping of number of calls to parameters for 60 data points would be: 1 -&amp;gt; 2 (I know this is wrong which gives me doubts on the formula) 2 -&amp;gt; 61 3 -&amp;gt; 3601 3 -&amp;gt; 216001 Essentially when the Assignments class needs to make the combinations, it will collect the data points initially for each theory.  It then calls the data points again for each existing data point it collected from the first read. With a third parameter it would take all those combinations again, to add all the permutations for the next round. I might be wrong and the real formula would be like this: N^0 + N^1 ... + N^(p-1) If this is the correct formula, then if you have 60 data points the number of times the method is called would map to the number of parameters like this: 1 -&amp;gt; 1 2 -&amp;gt; 61 3 -&amp;gt; 3661 4 -&amp;gt; 219661</body>
  </mail>
  <mail>
    <header>Re: When to use parameterized tests vs. theories?</header>
    <body>That makes sense, and fits my thinking.  When I was challenged by someone why I used theories instead of a parameterized test to test an interface contract I did not have a good answer.  This helps me with having that good answer.</body>
  </mail>
  <mail>
    <header>RE: Re: Something is bothering me about assumptions</header>
    <body>Assumptions allow a theory to specify the conditions under which it applies - the "given" part of the specification. By testing those assumptions within the body of the theory, a set of sample data can be used for many different purposes. For example, if I were testing division, I might have one theory about what happens with a zero divisor and another for non-zero divisors. Charlie</body>
  </mail>
  <mail>
    <header>RE: Something is bothering me about assumptions</header>
    <body>I recently forked the repository to do the work to allow theories to run discretely (i.e. one entry in the test report per combination of parameters). Under this approach I definitely want the test marked ignored if the assumptions failed. What I really don't like is how do you know when an assumption fails the way the theory is implemented now?  How many of the data point combinations got skipped? Why?  That's all very useful information. -----Original Message----- From: junit@yahoogroups.com on behalf of Charlie Poole Sent: Thu 2/11/2010 3:08 PM To: junit@yahoogroups.com Subject: RE: [junit] Something is bothering me about assumptions Hi Rocco, Yes, that's what I would expect when all assumptions fail. What happens when it's not a theory and an assumption is used and fails would have to depend on whether you want to support / encourage that use. Charlie</body>
  </mail>
  <mail>
    <header>RE: Something is bothering me about assumptions</header>
    <body>Someone else will have to answer you - my comments are from the point of view of a user of JUnit and an implementor of Theories under NUnit... My initial reaction is that if you want to run individual test cases, you aren't using the higher level generalization that a theory represents, so why bother with them at all? Charlie</body>
  </mail>
  <mail>
    <header>RE: Something is bothering me about assumptions</header>
    <body>Do parametrized tests give me what I'm looking for? Essentially, I need to dynamically gather all classes that implement an interface, extend a base class, or are marked with an annotation and then perform contract tests on them.  I need to know: * If any implementation is not compliant * Exactly which ones are not compliant I do not want to do the base class approach to creating the contract tests because people get lazy and it is extra work that doesn't necessarily have to be done. -----Original Message----- From: junit@yahoogroups.com on behalf of Charlie Poole Sent: Thu 2/11/2010 4:49 PM To: junit@yahoogroups.com Subject: RE: [junit] Something is bothering me about assumptions Someone else will have to answer you - my comments are from the point of view of a user of JUnit and an implementor of Theories under NUnit... My initial reaction is that if you want to run individual test cases, you aren't using the higher level generalization that a theory represents, so why bother with them at all? Charlie</body>
  </mail>
  <mail>
    <header>Putting all your JUnit tests in separate Eclipse project?</header>
    <body>Hi, Has anyone out there tried moving all of your JUnit test cases into a separate Eclipse project, rather than keeping them within your main project? I couldn't find any info on this option when I searched on google for "junit separate eclipse project" and "junit different eclipse project". I looked through the JUnit FAQ, and found this:  ...which describes having parallel source folders within the same project -- one for main code, and one for test code. But nothing found about having separate projects. I see the following advantages in having a separate Eclipse project for the JUnit tests: 1) The ability to set your project-specific settings for your test project to something other than what is set for the main project. Not all project settings are available in the runtime configs (such as builder configurations), and so moving the test code to a separate project would allow for setting whatever test-specific project settings are desired. The main project can be added as a project dependency of the test project, and so the parallel source dirs design can still exist and the test project can continue to access all of the main project's code. 2) Reduced risk in having your main code accidentally depend on a test (not likely to happen, but possible with single project). 3) Reduced risk in accidentally shipping test-specific jars with your production code. 4) The freedom to add any version of a lib that you need for your tests. For example, let's say that your main code depends on google-collections-0.9.jar. And your tests can benefit from some new method introduced in a new version -- google-collection-1.0.jar. So, you'd like to use v1.0 with your test code but don't want to touch the main code's libs. If you have a separate test project, then that's not a problem -- you just add v1.0 to the test project's lib dir. But if you have a single main project that includes your test code, then your either stuck with v0.9 -- or you'll have to use a custom classloader to load your entire test code (and the test-specific libs) so that you can load v1.0 and not v0.9. I'd say that the separate-project-option would do well when needing test-specific project settings and with dealing with transitive dependencies. For the disadvantages of having a separate project, I can't think of any besides: 1) Having one more project to maintain. Is that really a disadvantage, though? Maybe. Can you list any other disadvantages? Maybe a more fundamental question is: Should an eclipse project that contains your production code (and jars used by your production code at runtime) also contain non-production code (eg, test code and test-specific jars) or should non-production code+artifacts be placed in a separate Eclipse project while still maintaining a parallel dir structure for tests? I welcome all your thoughts! Thank you. Cheers, Will</body>
  </mail>
  <mail>
    <header>Re: Putting all your JUnit tests in separate Eclipse project?</header>
    <body>Hi, Will. Since you said you welcome our thoughts, let me share/compare to how we do it.. We use Maven, and m2eclipse. Maven, by convention, locates 'production' source code under "src/main/java" and test source code under "src/test/java". m2eclipse then sets up two separate source paths under the same Eclipse project. 1) The ability to set your project-specific settings for your test project to something other than what is set for the main project. As you know, run-time configuration can be configured per test/suite under Eclipse. Using Maven, you can specify some run-time configuration that'll only get applied when running (all) unit tests. I'm not sure why you'd need separate build configuration, except for your point #4: libraries only needed for unit tests, which I'll get to below. 2) Reduced risk in having your main code accidentally depend on a test (not likely to happen, but possible with single project). When Maven to perform the final build, the 'compile' phase executes before the 'compile tests' phase; If any production code has hard dependencies on test code then the compile will fail. Eclipse won't raise any errors at all, though; so we need to depend on the Maven build to catch this situation. 3) Reduced risk in accidentally shipping test-specific jars with your production code. Again, like in #2 by using the Maven build we cleanly separate the production code from test code. 4) The freedom to add any version of a lib that you need for your tests. To a large extent, Maven lets you use a separate build classpath for tests and production code. You can certainly specify libraries with only "test scope". You can even use different test resources (e.g., configuration .properties or .XML files, test data/fixtures) which are all invisible to the production code. However, I'm unsure of how it'll work if you use a different or newer version of the same dependency in your test scope. The Maven-Eclipse project certainly doesn't complainâbut again, I suspect Maven will (properly) fail to compile if your test code which was written against the old library is broken by the new test library. Overall, Maven+Eclipse is not 100% ideal compared to what you seem to want to accomplish using separate projects. It does, however, let us separate test code and production code with relative ease, without having to manage two separate projects. The best part is how the whole compile, test, package, distribute and deploy cycle can be configured/managed using a single tool, which can even be run in an automated fashion (within a continuous integration system). Using Eclipse alone, with two separate projects, you'd have to manually run tests in the test project, before building the main project (or write your own script to do so), and so on by hand. Hope this helps. - alistair --</body>
  </mail>
  <mail>
    <header>When to use parameterized tests vs. theories?</header>
    <body>I know I'm a little slow on the uptake, but I'm asking these questions so that I can formulate how I'm going to mentor my team to make the most of their testing investment. There is a certain amount of overlap between parameterized tests and but they provide a little more control over how things get matched up. Of course, theories allow for much more robust data sets by combining all the data points in every way.  This can provide an order of magnitude more tests automatically, but care has to be taken.  For example, the number of actual tests run is D^P where D is the number of data points and P is the number of parameters on any given theory.  This can generate a lot of tests quickly, and the "runDiscretely" option I hacked together for theories would definitely not be a preferable. I now know that assumptions are filtering devices for theories, so it does not mark the test as failed.  Essentially, the reason that an assumption is marked as passing for the theory is that the assumption successfully filtered out that data combination.  I get that now, but I probably will use that feature very sparingly. The question I have is what problem was the reason parameterized tests supposed to solve, and how is that different than the problem that theories are supposed to solve?</body>
  </mail>
  <mail>
    <header>Re: When to use parameterized tests vs. theories?</header>
    <body>If my understanding is correct, there is definitely an overlap between parameterized tests and theories. Theories generate a set of tuples representing the combination of a data set, while parameterized can return... well, any data set.  From that angle, theories are a subset of parameterized tests, and as such, might have been better off implemented as a utility function rather than a full fledged feature. -- Cedric -- ***Cédric *</body>
  </mail>
  <mail>
    <header>Re: When to use parameterized tests vs. theories?</header>
    <body>My basic understanding of the _practical_ difference between them is that parameterized tests have more restrictions on how the data is set up.  For example, parameterized tests have an array of arrays, each internal array is a set of parameters to apply to the test.  Essentially, there is more onus on the test writer to know what parameters are important to test, and how they are supposed to relate. Theories have much less restrictions on the data, and instead force the test writer to focus on the function of the theory independent of the data.  That's a good thing IMO. My guess is that parameterized tests came first, and because of the limitations it forced on the test writer theories came later.  That is only a guess. In some ways I would like to pair the expected result with the passed in parameter, but that solution requires a parameterized test.  In most applications, I care more about the behavior of a class implementing an interface, or something of that nature. What I'm missing here is what is the _philosophical_ difference?</body>
  </mail>
  <mail>
    <header>SureFire Plugin: "parallel" attribute</header>
    <body>I posted this to the maven list but didn't get an answer. Perhaps someone here can help? plugin docs? try to run all your test methods in separate threads, except for methods that depend on each other, which will be run in the same thread in order to respect their order of execution. as controlled by threadCount. synchronously, however when I set parallel = classes, it runs the classes in parallel. I haven't been able to find good documentation for this anywhere.. Does anybody know of any good resources? or does it run the methods in parallel by class? i.e. 1 class at a time but all the methods in that class are parallel? I.E. I've read a little bit on ConfigurableParallelComputer but I'm not sure what it's all about..</body>
  </mail>
  <mail>
    <header>Re: Putting all your JUnit tests in separate Eclipse project?</header>
    <body>My cheap two cents... I really like the parallel source-test code convention. Could you explain "project-specific settings for your test project" a little more.  When I test, I want to be able to configure the environment of my code as much as possible.  My test code creates many different situations for my code under test.  This way I know that my code under test can perform in different scenarios.  To enable this ability, I like to limit my configuration, so my code under test is as nimble as possible.  It should work under many configurations and not depend "too much" on resource files, project configurations, the weather, a specific server... I think number 2 &amp;amp; 3 are the same.  Where I work, we are leaning towards shipping the test code in our distributable.  It is an option to install, which shows the confidence we have in our code base.  All the tests pass, and you know what's under test will work.  I've seen some companies required to show coverage analysis along with the tests to prove the code is exercised before it is installed. We are lucky that our customer is internal. For reason number 4...  If I had to maintain two sets of libraries, I'd have problems figuring out which version of a jar I'm using.  Especially when my test code calls into my code under test with one of the shared jars.  (Is this the "jar hell" many speak of?)  If one follows the apache version number conventions... there are problems with changing the x and y numbers in a x.y.z version scheme between projects. Why should the test code have additional functionality that the code under test can't.  Is the test code performing the same work as the production code.  I like to limit my test code to set up, tear down, and assertions logic.  If I'm doing something that the code under test should do, I wonder why it is so hard to test.  (In those cases maybe I wrote a bad API for myself.) Basically, when it comes down to it... I'm lazy and hate having to set up two environments.  I already pull my hair out when ant and eclipse function differently because someone, &amp;lt;cough "myself"/&amp;gt; forgets to make the classpaths match.</body>
  </mail>
  <mail>
    <header>Maven SureFire - parallel attribute</header>
    <body>Can anybody shed light on this comment from the docs? ...... parallel String  2.2  (TestNG only) When you use the parallel attribute, TestNG will try to run all your test methods in separate threads, except for methods      that depend on each other, which will be run in the same thread in order to respect their order of execution. In JUnit 4.7 the values are classes/methods/both to run in separate threads, as controlled by threadCount. ..... I have junit test tests and when I set parallel = methods it runs everything synchronously, however when I set parallel = classes, it runs the classes in parallel. I haven't been able to find good documentation for this anywhere.. Does anybody know of any good resources? Also, assuming I can get methods to work, does it run all methods in parallel or does it run the methods in parallel by class? i.e. 1 class at a time but all the methods in that class are parallel? Are there other gotchas or configuration settings I should be considering? I.E. I've read a little bit on ConfigurableParallelComputer but I'm not sure what it's all about..</body>
  </mail>
  <mail>
    <header>Re: SureFire Plugin: "parallel" attribute</header>
    <body>Hi, Douglas, As far as TestNG is concerned, the documentation for "parallel" can be found here:  that the documentation that you quote below is outdated:  dependent tests are now using thread pools while preserving the ordering that you specified. The implementation I am using is described in these two posts:   -- ***Cédric *</body>
  </mail>
  <mail>
    <header>Re: Putting all your JUnit tests in separate Eclipse project?</header>
    <body>While I recognize the potential for the issues you raise, I have never seen any of them in any of my JUnit experience (seven, maybe eight years now). I use the parallel directory structure approach and never had a problem with that either. The biggest problem is getting programmers to write tests, followed by getting them to write good tests that actually test all aspects of the code. My 1/50th of a US Federal Reserve note. Simon (One of the JUnit mailing list moderators) -- simonpeter.org | simonpeter.com | newlife-upc.org | wisconsindistrictnews.org</body>
  </mail>
  <mail>
    <header>Re: Maven SureFire - parallel attribute</header>
    <body>The surefire docs are probably a bit "thin" in the sense that they expect the user to access the docs of the actual testing framework for the meaning of the actual values. Now I'm not entirely sure classes starts each class in a thread of its own, methods runs all the methods of each class in its own thread. "both" is actually the vaguest of the two, but it does both ;) Junit 4.7+ itself comes with what I like to think of as a reference implemention of a parallel computer. As can be seen by this issue ( known gotchas to this implementation. Surefire knows how to use both ParallelComputer (junit) and ConfigurableParallelComputer (mine). Check blog post at  ith.html I have actually created several revisions of ConfigurableParallelComputer since last time dsaff looked at it, and in its current incarnation it's much more similar to ParallelComputer but without the gotchas. I am hererby --&amp;gt; . &amp;lt;--- requesting ConfigurableParallelComputer and its test-cases to be accepted as  a submission to junit as a patch for issue 18. Being the original author of all, I'll grant the CPL lisence. I will try to update the surefire docs somewhat, it's on my todo list. But it seems like most of your question actually should be answered somewhere in junit. Kristian try to run all your test methods in separate threads, except for methods that depend on each other, which will be run in the same thread in order to respect their order of execution. as controlled by threadCount. synchronously, however when I set parallel = classes, it runs the classes in parallel. I haven't been able to find good documentation for this anywhere.. Does anybody know of any good resources? or does it run the methods in parallel by class? i.e. 1 class at a time but all the methods in that class are parallel? I.E. I've read a little bit on ConfigurableParallelComputer but I'm not sure what it's all about..</body>
  </mail>
  <mail>
    <header>Re: Maven SureFire - parallel attribute</header>
    <body>The "Computer" architecture in Junit 4.7+ is open to extension, and the ConfigurableParallelComputer provides the ability to run with a limited number of threads, as well as more efficient thread handling than the junit 4.7+ "ParallelComputer". Especially users of multi-module maven builds will find the threading models in junit 4.7 ParallelComputer to be quite slow. There is a fairly decent unit test within lob/master/src/test/java/org/jdogma/junit/JUnitCorePerformanceTest.java#\ L83 behaviour of JunitCore combined with ConfigurableParallelComputer . I am not sure if the same kind of test exists for ParallelComputer within Junit, but his test case could easily be extended to cover that as well. Remember that both surefire and ConfigurableParallelComputer contain demultiplexing run listeners that make output appear in "correct order" (the one in ConfigurableParallelComputer being somewhat better than the one in Surefire ATM) I always found in my own testing that the problem with "methods" is that the run-time of the individual test methods is fairly small part of the entire test run-time (classloading and setup taking most of the time), and I have never been able to get much of a speed improvement out of "methods". "classes" is also usually a lot safer &amp;amp; easier to get running. I  am reasonably sure that "methods" works in the surefire-2.5+junit4.8.1+ConfigurableParallelComputer combination, but I'll definitiely accept surprises. Any specific issues should be filed either with ConfigurableParallelComputer at github or the apache surefire issue tracker.</body>
  </mail>
  <mail>
    <header>Re: SureFire Plugin: "parallel" attribute</header>
    <body>Cedric emailed me offline, about TestNG, but does JUnit work at all in parallel? I posted this to the maven list but didn't get an answer. Perhaps someone here can help? plugin docs? to run all your test methods in separate threads, except for methods that depend on each other, which will be run in the same thread in order to respect their order of execution. as controlled by threadCount. synchronously, however when I set parallel = classes, it runs the classes in parallel. I haven't been able to find good documentation for this anywhere.. Does anybody know of any good resources? or does it run the methods in parallel by class? i.e. 1 class at a time but all the methods in that class are parallel? I.E. I've read a little bit on ConfigurableParallelComputer but I'm not sure what it's all about..</body>
  </mail>
  <mail>
    <header>Re: SureFire Plugin: "parallel" attribute</header>
    <body>parallel? I am assuming you've read the two length replies I sent this morning (although It doesn't seem that way). Yes it works. Kristian</body>
  </mail>
  <mail>
    <header>RE: Re: When to use parameterized tests vs. theories?</header>
    <body>Hi, Think of a test as a set of predicates that have to return true in order for the test to succeed. Think of a theory as two sets of predicates, one set having to return true in order for the theory to even be applicable and another set that works just as for tests. Now add data... Normal tests can either introduce data as parameters or internally. We call the former parameterized tests. We don't seem to have any special name for the latter. I use the term test case for the combination of a test (set of predicates) with a single set of parameters to which it is applied. In theory &amp;lt;g&amp;gt; Theories could also introduce data internally, but this doesn't seem very practical. So theories are parameterized in practice, if not by nature. This tends to make them look like parameterized tests when viewed from outside. And of course, the implementation of a parameterized test in an xUnit-style is typically a method with arguments. The implementation of a Theory is also a method with arguments. Again, this makes them look like the same thing - or as if a Theory is a specialization of a parameterized test. I don't think that's the case. Or at least I don't think it's the most useful way to view things. Dr. Who looks human, but he has two hearts. Those two sets of predicates at the heart of a Theory are what make it what it is. We could say - in either case - that the doctor/theory is a subset of humans/parameterized-tests, with the addition of some extra functionality, but this only makes sense at a very superficial level. Use parameterized tests if you have a set of examples you need to make work. Use Theories... well... if you have a theory that needs to be demonstrated. In some kinds of work, we start with a theory. In other kinds, we start with examples and have to work our way toward a mental model. IME, the former is more typical in implementing algorithms while the latter is more typical of business programming. Also IME, premature speculation about the underlying theory/model, rather than just listening to the customer, is a pretty common anti-pattern. Fair warning: what I know about Theories is based on my interpretation of some of David's papers and my efforts to implement it in NUnit, where it (a) works pretty well and (b) is poorly understood by most users. I'm generally familiar with how the JUnit implementation works, but I don't know all the intimate details. Charlie</body>
  </mail>
  <mail>
    <header>Re: Re: SureFire Plugin: "parallel" attribute</header>
    <body>As I wrote in one of my posts, ConfigurableParallelComputer allows you to limit the total threads, which you will need with grid. --- In junit@yahoogroups.com&amp;lt;mailto:junit%40yahoogroups.com&amp;gt;, Douglas Ferguson parallel? I am assuming you've read the two length replies I sent this morning (although It doesn't seem that way). Yes it works. Kristian</body>
  </mail>
  <mail>
    <header>Re: Re: SureFire Plugin: "parallel" attribute</header>
    <body>Sorry for some reason there was a delay in me getting emails from the list. I'm still confused about why parallel methods should work and why my testing could get it to work at all. Douglas Ferguson 512-293-7279 Sent from my iPhone On Feb 13, 2010, at 8:31 AM, "krosenvold" --- In junit@yahoogroups.com&amp;lt;mailto:junit%40yahoogroups.com&amp;gt;, Douglas Ferguson parallel? I am assuming you've read the two length replies I sent this morning (although It doesn't seem that way). Yes it works. Kristian</body>
  </mail>
  <mail>
    <header>Re: SureFire Plugin: "parallel" attribute</header>
    <body>I think the thing you're missing is that maven surefire 2.5 works with JUST junit 4.7+ or a *combination* of  junit 4.7+ /and/ ConfigurableParallelComputer. When using surefire with junit /alone/ it does not support threadCount. You will need to use the /combination/ to restrict threadCount. Since you're a selenium user you WILL need to limit threads, which means you *cannot* get by with just junit 4.7+, but you *will* need ConfigurableParallelComputer. I will update the surefire docs to be a bit clearer on this restriction. I know at least three selenium projects that are doing exactly what you want. Most run with parallel=classes and a thread restriction, since this allows a smooth number of concurrent tests, something that is good for your grid. My current firefox runs went from 45 minutes single thread to 8 minutes concurrent, so there's definitely a huge upside. This does not mean it's a simple task, since most selenium test suites are not written with concurrency support in mind. Quite frankly, if you think getting surefire/junit to work is hard you can rest assured that the worst part is still ahead of you.</body>
  </mail>
  <mail>
    <header>Re: Re: SureFire Plugin: "parallel" attribute</header>
    <body>1 more thing, do any of the selenium projects you speak of use the selenium grid with windows? We are having a hell of a time getting that working too. We have the hub on Ubuntu and windows slaves don't play nice but Ubuntu slaves work fine. I haven't found much info on the issues we are seeing nor have a I gotten any responses on the Selenium mailing list.  We may just have to skip IE testing for now and running everything on firefox Ubuntu. D/ I think the thing you're missing is that maven surefire 2.5 works with JUST junit 4.7+ or a *combination* of junit 4.7+ /and/ ConfigurableParallelComputer. When using surefire with junit /alone/ it does not support threadCount. You will need to use the /combination/ to restrict threadCount. Since you're a selenium user you WILL need to limit threads, which means you *cannot* get by with just junit 4.7+, but you *will* need ConfigurableParallelComputer. I will update the surefire docs to be a bit clearer on this restriction. I know at least three selenium projects that are doing exactly what you want. Most run with parallel=classes and a thread restriction, since this allows a smooth number of concurrent tests, something that is good for your grid. My current firefox runs went from 45 minutes single thread to 8 minutes concurrent, so there's definitely a huge upside. This does not mean it's a simple task, since most selenium test suites are not written with concurrency support in mind. Quite frankly, if you think getting surefire/junit to work is hard you can rest assured that the worst part is still ahead of you.</body>
  </mail>
  <mail>
    <header>Re: Re: SureFire Plugin: "parallel" attribute</header>
    <body>Got it, everything makes sense now. Would I be safe to download this and add it to our internal maven repo?  Also, Just out of curiosity, what happens thread count wise when you aren't using ConfigurableParallelComputer, does it literally fire up a thread per test? D/ I'm not too worried about my tests, as they all run on isolated data sets. We are still build them up... I think the thing you're missing is that maven surefire 2.5 works with JUST junit 4.7+ or a *combination* of junit 4.7+ /and/ ConfigurableParallelComputer. When using surefire with junit /alone/ it does not support threadCount. You will need to use the /combination/ to restrict threadCount. Since you're a selenium user you WILL need to limit threads, which means you *cannot* get by with just junit 4.7+, but you *will* need ConfigurableParallelComputer. I will update the surefire docs to be a bit clearer on this restriction. I know at least three selenium projects that are doing exactly what you want. Most run with parallel=classes and a thread restriction, since this allows a smooth number of concurrent tests, something that is good for your grid. My current firefox runs went from 45 minutes single thread to 8 minutes concurrent, so there's definitely a huge upside. This does not mean it's a simple task, since most selenium test suites are not written with concurrency support in mind. Quite frankly, if you think getting surefire/junit to work is hard you can rest assured that the worst part is still ahead of you.</body>
  </mail>
  <mail>
    <header>Re: Re: SureFire Plugin: "parallel" attribute</header>
    <body>I just tried to install ConfigurableParallelComputer and got this test error: mode at 600ms per class  violates maximal expected runtime1050" type="java.lang.AssertionError"&amp;gt;java.lang.AssertionError: Actual runtime 1072 for 5 threads running 7 classes in both mode at 600ms per class  violates maximal expected runtime1050 at org.junit.Assert.fail(Assert.java:91) at org.junit.Assert.assertTrue(Assert.java:43) at org.jdogma.junit.JUnitCorePerformanceTest.validateBounds(JUnitCorePerformanceTes\ t.java:141) at org.jdogma.junit.JUnitCorePerformanceTest.testSpeedWithBoth(JUnitCorePerformance\ Test.java:132) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:43) at java.lang.reflect.Method.invoke(Method.java:616) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java\ :44) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:\ 15) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:4\ 1) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20\ ) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76\ ) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50\ ) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184) at org.junit.runners.ParentRunner.run(ParentRunner.java:236) at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:62) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(Abstra\ ctDirectoryTestSuite.java:140) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirec\ toryTestSuite.java:127) at org.apache.maven.surefire.Surefire.run(Surefire.java:177) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:43) at java.lang.reflect.Method.invoke(Method.java:616) at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBoote\ r.java:345) at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1009) Got it, everything makes sense now. Would I be safe to download this and add it to our internal maven repo?  Also, Just out of curiosity, what happens thread count wise when you aren't using ConfigurableParallelComputer, does it literally fire up a thread per test? D/ I'm not too worried about my tests, as they all run on isolated data sets. We are still build them up... I think the thing you're missing is that maven surefire 2.5 works with JUST junit 4.7+ or a *combination* of junit 4.7+ /and/ ConfigurableParallelComputer. When using surefire with junit /alone/ it does not support threadCount. You will need to use the /combination/ to restrict threadCount. Since you're a selenium user you WILL need to limit threads, which means you *cannot* get by with just junit 4.7+, but you *will* need ConfigurableParallelComputer. I will update the surefire docs to be a bit clearer on this restriction. I know at least three selenium projects that are doing exactly what you want. Most run with parallel=classes and a thread restriction, since this allows a smooth number of concurrent tests, something that is good for your grid. My current firefox runs went from 45 minutes single thread to 8 minutes concurrent, so there's definitely a huge upside. This does not mean it's a simple task, since most selenium test suites are not written with concurrency support in mind. Quite frankly, if you think getting surefire/junit to work is hard you can rest assured that the worst part is still ahead of you.</body>
  </mail>
  <mail>
    <header>Re: SureFire Plugin: "parallel" attribute</header>
    <body>Install, or if your internal requirements mandate it, build from source. It's only about 4-5 pages of code to read it all if you're security concerned. The test failure basically tells me you have the slowest computer to ever run these tests ;) Or, as the javadocs from the test-class say: /** * These tests assert that the expected peformance of classes/methods/both. * * While the occasional glitch in computing power can make these tests fail (if actual time exceeds expected + 33%), * the lower bound should *never* be violated. * * These tests usually fail if run in a debugger, due to the changed timings. * */ using ConfigurableParallelComputer, does it literally fire up a thread per test? Yes, in "methods" mode it's one thread per test method. Classes mode is one per class. Both is, well, both. In my 10+ years as test-infected, I have really never ever had a use-case where this kind of solution would be appropriate (maybe some kind of really slow database with unlimited cheap connections). With thousands of test classes you come to a grinding halt with any of these options. grid with windows? We are having a hell of a time getting &amp;gt;that working too. We have the hub on Ubuntu and windows slaves don't &amp;gt;play nice but Ubuntu slaves work fine. I haven't found much info on &amp;gt;the issues we are seeing nor have a I gotten any responses on the &amp;gt;Selenium mailing list. We may just have to skip IE testing for now &amp;gt;and running everything on firefox Ubuntu. We run all our browser-bots on windows, and the CI is bamboo on linux. We do not use grid. Instead we let a single build run with 4 threads towards a single instance of selenium RC (with firefox). This has proved to be a nice, stable setup that gives us a lot of punch. Now we also partition the entire build into 2, so we have two separate (Windows) pizza boxes running RC+ firefox, for a grand total of 8 available browsers. This allows us to use firefox as the backbone in our selenium-TDD-based development that has allowed us virtually regression free frequent deployments. We run Internet Explorer and Opera on separate boxes. Opera Selenium tests are hard to make stable, but they also work concurrently. Internet Exploder is a strict one-instance per box for any kind of stability. I know some people use virtualization. We just add boxes. The other projects do much the same, but they all pre-date grid somewhat. We're also planning to try out Chrome once we upgrade to Selenium 2.0, we really need something webkit based. Kristian</body>
  </mail>
  <mail>
    <header>Re: Re: SureFire Plugin: "parallel" attribute</header>
    <body>See below.. using ConfigurableParallelComputer, does it literally fire up a thread per test? Yes, in "methods" mode it's one thread per test method. Classes mode is one per class. Both is, well, both. In my 10+ years as test-infected, I have really never ever had a use-case where this kind of solution would be appropriate (maybe some kind of really slow database with unlimited cheap connections). With thousands of test classes you come to a grinding halt with any of these options. That's insane... grid with windows? We are having a hell of a time getting &amp;gt;that working too. We have the hub on Ubuntu and windows slaves don't &amp;gt;play nice but Ubuntu slaves work fine. I haven't found much info on &amp;gt;the issues we are seeing nor have a I gotten any responses on the &amp;gt;Selenium mailing list. We may just have to skip IE testing for now &amp;gt;and running everything on firefox Ubuntu. We run all our browser-bots on windows, and the CI is bamboo on linux. We do not use grid. Instead we let a single build run with 4 threads towards a single instance of selenium RC (with firefox). This has proved to be a nice, stable setup that gives us a lot of punch. Now we also partition the entire build into 2, so we have two separate (Windows) pizza boxes running RC+ firefox, for a grand total of 8 available browsers. This allows us to use firefox as the backbone in our selenium-TDD-based development that has allowed us virtually regression free frequent deployments So are you saying that you have 2 windows machines running selenium RC and you have your test runner that round robins between the two rather than using the grid? Just out of curiosity, what are you using to kick off the tests? We run Internet Explorer and Opera on separate boxes. Opera Selenium tests are hard to make stable, but they also work concurrently. Internet Exploder is a strict one-instance per box for any kind of stability. I know some people use virtualization. We just add boxes. When you add boxes, each one runs a separate selenium rc server? How do you distribute the tests to them? The other projects do much the same, but they all pre-date grid somewhat. We're also planning to try out Chrome once we upgrade to Selenium 2.0, we really need something webkit based. Kristian</body>
  </mail>
  <mail>
    <header>Re: Re: SureFire Plugin: "parallel" attribute</header>
    <body>Adding more formating.. from my reader this was easy to read but not after going through the mailing list.. Now mine start with [DF] See below.. using ConfigurableParallelComputer, does it literally fire up a thread per test? Yes, in "methods" mode it's one thread per test method. Classes mode is one per class. Both is, well, both. In my 10+ years as test-infected, I have really never ever had a use-case where this kind of solution would be appropriate (maybe some kind of really slow database with unlimited cheap connections). With thousands of test classes you come to a grinding halt with any of these options. [DF] That's insane... grid with windows? We are having a hell of a time getting &amp;gt;that working too. We have the hub on Ubuntu and windows slaves don't &amp;gt;play nice but Ubuntu slaves work fine. I haven't found much info on &amp;gt;the issues we are seeing nor have a I gotten any responses on the &amp;gt;Selenium mailing list. We may just have to skip IE testing for now &amp;gt;and running everything on firefox Ubuntu. We run all our browser-bots on windows, and the CI is bamboo on linux. We do not use grid. Instead we let a single build run with 4 threads towards a single instance of selenium RC (with firefox). This has proved to be a nice, stable setup that gives us a lot of punch. Now we also partition the entire build into 2, so we have two separate (Windows) pizza boxes running RC+ firefox, for a grand total of 8 available browsers. This allows us to use firefox as the backbone in our selenium-TDD-based development that has allowed us virtually regression free frequent deployments [DF] So are you saying that you have 2 windows machines running selenium RC and you have your test runner that round robins between the two rather than using the grid? Just out of curiosity, what are you using to kick off the tests? We run Internet Explorer and Opera on separate boxes. Opera Selenium tests are hard to make stable, but they also work concurrently. Internet Exploder is a strict one-instance per box for any kind of stability. I know some people use virtualization. We just add boxes. [DF] When you add boxes, each one runs a separate selenium rc server? How do you distribute the tests to them? The other projects do much the same, but they all pre-date grid somewhat. We're also planning to try out Chrome once we upgrade to Selenium 2.0, we really need something webkit based. Kristian</body>
  </mail>
  <mail>
    <header>Re: SureFire Plugin: "parallel" attribute</header>
    <body>using ConfigurableParallelComputer, does it literally fire up a thread per test? per class. Both is, well, both. In my 10+ years as test-infected, I have really never ever had a use-case where this kind of solution would be appropriate (maybe some kind of really slow database with unlimited cheap connections). With thousands of test classes you come to a grinding halt with any of these options. Well I'll be 100% correct here, it does not fire one thread per test. It  makes one CachedThreadPool per test class, and schedules runnables on it. Unfortunately the CachedThreadPool is not designed to be used this way, and it needs to be shut down properly or each instance will stay around for 60 seconds consuming more resources. So if you have 500 tests with 5 methods each in one module you'll have a maximum of 2500 threads running in 500 instances of CachedThreadPool; and currently those 2500 threads will stay around for a minute. This is actually a lot less efficient than just doing new Thread(runnable).start(), which is also a bit crazy. But there's no point in bashing the default implementation; it's extensible and user-modifyable - which is really the important thing. Actually, I suppose at some point in time Kent/David make up their mind about how to solve issue 18. I've spent quite a lot of time refining the CPC and they're more than welcome to supplement/replace ParallelComputer with my implementation. Just remember to vote for issue 18 ;) you distribute the tests to them? These are "sensible default values" in our environment and we just invoke maven with overriding values on our build box: mvn -Dselenium.rc.server=firstrcbox.com -Dselenium.browser=*opera install The we just have a number of automatic builds that are triggered by commit hooks. I know it's not very glorious, but it works really well in the trenches. Kristian</body>
  </mail>
  <mail>
    <header>RE: Re: When to use parameterized tests vs. theories?</header>
    <body>Thank you for taking the time to help me understand the difference.  The fog is slowly lifting, and it is making sense. From: junit@yahoogroups.com [mailto:junit@yahoogroups.com] On Behalf Of Charlie Poole Sent: Saturday, February 13, 2010 2:47 PM To: junit@yahoogroups.com Subject: RE: [junit] Re: When to use parameterized tests vs. theories? Hi, Think of a test as a set of predicates that have to return true in order for the test to succeed. Think of a theory as two sets of predicates, one set having to return true in order for the theory to even be applicable and another set that works just as for tests. Now add data... Normal tests can either introduce data as parameters or internally. We call the former parameterized tests. We don't seem to have any special name for the latter. I use the term test case for the combination of a test (set of predicates) with a single set of parameters to which it is applied. In theory &amp;lt;g&amp;gt; Theories could also introduce data internally, but this doesn't seem very practical. So theories are parameterized in practice, if not by nature. This tends to make them look like parameterized tests when viewed from outside. And of course, the implementation of a parameterized test in an xUnit-style is typically a method with arguments. The implementation of a Theory is also a method with arguments. Again, this makes them look like the same thing - or as if a Theory is a specialization of a parameterized test. I don't think that's the case. Or at least I don't think it's the most useful way to view things. Dr. Who looks human, but he has two hearts. Those two sets of predicates at the heart of a Theory are what make it what it is. We could say - in either case - that the doctor/theory is a subset of humans/parameterized-tests, with the addition of some extra functionality, but this only makes sense at a very superficial level. Use parameterized tests if you have a set of examples you need to make work. Use Theories... well... if you have a theory that needs to be demonstrated. In some kinds of work, we start with a theory. In other kinds, we start with examples and have to work our way toward a mental model. IME, the former is more typical in implementing algorithms while the latter is more typical of business programming. Also IME, premature speculation about the underlying theory/model, rather than just listening to the customer, is a pretty common anti-pattern. Fair warning: what I know about Theories is based on my interpretation of some of David's papers and my efforts to implement it in NUnit, where it (a) works pretty well and (b) is poorly understood by most users. I'm generally familiar with how the JUnit implementation works, but I don't know all the intimate details. Charlie [mailto:junit@yahoogroups.com &amp;lt;mailto:junit%40yahoogroups.com&amp;gt; ] On</body>
  </mail>
</mails>

