<?xml version="1.0" encoding="UTF-8"?>
<mails>
  <mail>
    <header>How to mock a method that uses call-by-reference ?</header>
    <date>Thu Jul 14 14:58:00 CEST 2011</date>
    <body>Hi, I would like to mock a method that makes use of call-by-reference: "void myMethod(Object request, Object reply)". I've been reading the documentation of EasyMock, but I haven't found any description how this could be achieved. I would be glad if someone could help me with this issue :o) Regards, Stefan Lecho.</body>
  </mail>
  <mail>
    <header>Re: How to mock a method that uses call-by-reference ?</header>
    <date>Fri Jul 15 14:15:00 CEST 2011</date>
    <body>Meaning that your method modifies the passed in params?  If so, it seems you have 2 options. 1) pass in non-mock params and assert values afterwards or 2) pass in mock objects that have the appropriate expectations setup and then call verify after your method call myMethod(Object request, Object reply)". I've been reading the documentation of EasyMock, but I haven't found any description how this could be achieved.</body>
  </mail>
  <mail>
    <header>203 - 468 US dollars each day</header>
    <date>Sat Jul 16 04:33:00 CEST 2011</date>
    <body>easymock@yahoogroups.com, I'm merely writing you to tell you that I'm definitely not trying to avoid you.  I've just been seriously busy with side projects that have been bringing in insane amounts of extra money. It truly is crazy how incredibly easy it will be to make even more than I am in less than couple weeks.  If you don't make it happen, you might be kicking yourself within a week. want to take up too much of your spare time writing about how much cash I'm producing when you can just read the post to hear on your own how convenient it really is.  It can be extremely tempting to talk about the wealth with almost everyone you meet but try not to end up speaking about it a lot more than you're working on it.  The work only requires a few hours a couple days a week anyhow. You won't believe it before you check it out for yourself but remember, almost every check is larger than the last one. Don't forget who mentioned it first!</body>
  </mail>
  <mail>
    <header>FW: tmjxwqagf</header>
    <date>Sun Jul 17 05:50:00 CEST 2011</date>
    <body>easymock@yahoogroups.com, I'm only writing this to you to let you know that I'm not trying to avoid you at all.  I've been seriously busy working on side projects that have been bringing in insane amounts of cash. It's insane how simple it will be to start making just as much as I am in less than couple of days. I've been tripling my own salary after using this less than a week from the house.  If you find out about this woman you are going to realise why I decided to use it out.  You're going to be making a great deal of cash with it. Try it out and get back to me as soon as you become comfortable showing off all your success. I really hope you try this out becauseI've never seen anything like this before and the dough keeps on flowing. You might appreciate me for this.</body>
  </mail>
  <mail>
    <header>nice mocks: verify a call does not happen</header>
    <date>Thu Dec 08 00:54:00 CET 2011</date>
    <body>I'm using easymock in a project, and for various reasons I'm using a nice mock in a particular test. However, I want to make sure that a particular call never happens. I tried calling: But easymock complained about this. The most succinct way I found of doing this is: Is there any easier way?</body>
  </mail>
  <mail>
    <header>SSL certificates setting - Easy Mock</header>
    <date>Sat Oct 06 22:32:00 CEST 2012</date>
    <body>How to set SSL certificates using Easy Mock unit tests in the TestNG framework ?</body>
  </mail>
  <mail>
    <header>Misleading error message when matches are type promoted</header>
    <date>Thu Jun 06 18:12:00 CEST 2013</date>
    <body>Hi. The following unit test: produces the following confusing error message: java.lang.AssertionError: org.easymock.internal.MockInvocationHandler.invoke(MockInvocationHandler.java:44\ ) org.easymock.internal.ObjectMethodsFilter.invoke(ObjectMethodsFilter.java:85) In case the formatting is screwed up, you can see it here:  Why is Interface.method(1) unexpected when the very next line says that it is expected? The reason is that eq() received an int, and the interface uses a long. Equals.equals returns false because Int and Long are of different classes. Can we change Equals.equals to be more forgiving around numeric type promotion, or else change ArgumentToString.appendArgument to print more precise literals, such as 1l instead of 1? Thanks.</body>
  </mail>
  <mail>
    <header>How to mock a message driven bean (MDB) ?</header>
    <date>Wed Feb 09 14:10:00 CET 2011</date>
    <body>Hi, In our application we're using a message driven bean (MDB) to get messages from a queue. In order to prevent the definition of this queue in an application server, I would like to mock the MDB. This would allow me to test the 'onMessage' method out of the container. Do you have any advice on how to mock a MDB ? Regards, Stefan Lecho.</body>
  </mail>
  <mail>
    <header>Re: How to mock a message driven bean (MDB) ?</header>
    <date>Wed Feb 09 21:31:00 CET 2011</date>
    <body>Hi, You should consider letting your MDB dispatch message handling to a "regular" POJO - and then mock the Message object that gets passed to the POJO - this will allow you to "short-circuit" the app server and test message handling logic outside of the container. Otherwise you'll be forced to mock all that nasty stuff the container is supposed to do. /rasmus from a queue. In order to prevent the definition of this queue in an application server, I would like to mock the MDB. This would allow me to test the 'onMessage' method out of the container.</body>
  </mail>
  <mail>
    <header>EasyMock 2.2 question</header>
    <date>Thu Apr 28 17:45:00 CEST 2011</date>
    <body>Hi, Need help on the following case.   I need to test a service's API. public interface MyDao public class ServiceImpl implement Servce public class ServiceImplTest I know I have to implement an IArgumentMatcher to define the match rule of "mock.getModel(model)",  but the "mock.getModel(..)" is NOT using the input object "model" I created.  It just matches it. How can I make EasyMock to use the input object for the expected method call? Thanks, Luke</body>
  </mail>
  <mail>
    <header>Re: replay() doesn't act like I expect (and as described in the documentation)?</header>
    <date>Thu May 05 06:29:00 CEST 2011</date>
    <body>Exact! I found out this morning while stepping through EasyMock's source code. +1 for open source! -1 for Java varargs. Thanks a lot, Henri. Dirk sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:43) org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java\ :44) org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:\ 15) org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:4\ 1) org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20\ ) org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28) org.junit.runners.BlockJUnit4ClassRunner.runNotIgnored(BlockJUnit4ClassRunner.ja\ va:79) org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:71\ ) org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49\ ) org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReferen\ ce.java:49) org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\ .java:467) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\ .java:683) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java\ :390) org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.jav\ a:197)</body>
  </mail>
  <mail>
    <header>Matchers in SUT method calls, reset, and test isolation</header>
    <date>Wed May 11 08:48:00 CEST 2011</date>
    <body>Hello EasyMock users, I've just been hit by an issue which already occured in past, and I'm wondering if anything can be done in EasyMock to prevent this. A developer new to EasyMock in one unit test resets mocks, records expected behavior, replays mocks, and in call to SUT method(s) by mistake passes EasyMock.isA(..), as one of arguments. Verification and asserts pass for that test as test doesn't make any special use of passed argument - that argument is just passed to method of a service whose behavior has been mocked. Calling isA, although it doesn't affect test where it was called, it alters threadToArgumentMatcherStack since InstanceOf matcher is reported. Any other test (typically in different test class, with different SUT and mocks) which is executed in same thread, because of this shared thread local stack, fails when recording expected behavior (1 matchers expected, 2 recorded - 1 recored from isA call from previous test, 1 records in current test), even though that other test resets its mocks properly. Typically we're using TestNG + EasyMock for unit tests, Eclipse + TestNG plugin to implement and run tests, and Maven + Surefire to build and run tests. This behavior would not show up in Eclipse, but it would in Maven build with default Surefire forkMode (once), and EasyMock would report error in one test class, although actual error is in another. I guess there are no means to verify whether "isA" is passed when recording expected behavior or when exercising SUT. Except for educating devs new to EasyMock not to make mistakes like this, is there any way to prevent this unwanted behavior, or at least make it easier to debug? Regards, Stevo.</body>
  </mail>
  <mail>
    <header>Test of methode that instantiates a mocked class</header>
    <date>Wed May 11 09:05:00 CEST 2011</date>
    <body>Hello everyone, I'm doing unit testing with JUnit and EasyMock, I met this difficulty that I can not get around : how to test a method of a class that instantiates a mocked class. thank you in advance</body>
  </mail>
  <mail>
    <header>Re: Test of methode that instantiates a mocked class</header>
    <date>Wed May 11 12:49:00 CEST 2011</date>
    <body>Can you extract a method to wrap the instantiation of the mocked class, then subclass and override? Do you have a few lines of code to show us so we can better understand the question? -Matt-</body>
  </mail>
  <mail>
    <header>PowerMock(1.4.8) mock static question</header>
    <date>Fri May 13 21:09:00 CEST 2011</date>
    <body>Hi, I am write a TestNG test using PowerMock 1.4.8 to mock a static method . @PrepareForTest(StaticMethodClass.class) public class TestClass public class StaticMethodClass But I got this exception: java.lang.IllegalArgumentException: StaticMethodClass is not an interface at org.easymock.internal.JavaProxyFactory.createProxy(JavaProxyFactory.java:13) at org.easymock.internal.MocksControl.createMock(MocksControl.java:40) at org.powermock.api.easymock.PowerMock.doCreateMock(PowerMock.java:2212) at org.powermock.api.easymock.PowerMock.doMock(PowerMock.java:2163) at org.powermock.api.easymock.PowerMock.mockStatic(PowerMock.java:287) It must be something wrong I configured.  Any idea? Thanks, Luke</body>
  </mail>
  <mail>
    <header>PODAM 2.3.0.RELEASE just released</header>
    <date>Sat May 14 12:46:00 CEST 2011</date>
    <body>This is a major release which provides the @PodamStrageyValue annotation to declare a data provider strategy at the POJO attribute level. Additionally the same capability has been added to @PodamCollection for Collections, Maps and Arrays. The full documentation can be found on PODAM homepage at:</body>
  </mail>
  <mail>
    <header>PODAM 2.3.4.RELEASE just released</header>
    <date>Wed May 18 21:39:00 CEST 2011</date>
    <body>This is a major release to which you should upgrade to. This release makes PODAM very fault-taulerant. PODAM will create a POJO no matter which constructor type you declared (public no-arg, private no-arg, public with args, non-public with args). The difference between 2.3.3 is that while before non-public, non- default constructors were not covered now they are; additionally while before in case of non JavaBean standard constuctors PODAM created an instance but did not populate its attributes, now it both creates an instance and populates its attributes. PODAM documentation can be found at: Regards, Marco</body>
  </mail>
  <mail>
    <header>Project Status?</header>
    <date>Wed May 25 00:32:00 CEST 2011</date>
    <body>Hi all- I emailed Henri directly, but I'm just curious in general what the status of this project is, I completely understand as a developer how projects can sideline others, but there are a few big bugs that have patches posted in the bugtracker, and I'm wondering if there is any plan to at least do a maintenance release soon that includes them? Thanks, David</body>
  </mail>
  <mail>
    <header>Is verify necessary for writing unit tests?</header>
    <date>Wed Jun 01 11:17:00 CEST 2011</date>
    <body>In most cases, I don't want my unit tests to know about the internals of my routines so I use expect to stub out values but I don't use verify.  From the point of view of best practices, is this considered an acceptable use of EasyMock?</body>
  </mail>
  <mail>
    <header>Re: Is verify necessary for writing unit tests?</header>
    <date>Sun Jun 05 00:30:00 CEST 2011</date>
    <body>For what it's worth, I rarely use verify either.  I find the default behavior of EasyMock is quite strict.  If I have a truly mission critical class to test, I will use a strict mock in the unit test.  It can be time consuming to get the unit test running with a strict mock, but I get the sense that I really have the code nailed down if I can get it passing with a strict mock.</body>
  </mail>
  <mail>
    <header>Re: Is verify necessary for writing unit tests?</header>
    <date>Sun Jun 05 01:04:00 CEST 2011</date>
    <body>Hi klbcolt, routines so I use expect to stub out values but I don't use verify. of EasyMock? That depends on the scenario you would like to test. The mock object should test exactly the behavior you expect your code to use  no more, no less. - If you care about the order of calls, use a strict mock. If you don't care about the order, use a default mock. - If you care about the expected calls to happen, call verify(). If you don't care, don't call verify(). Two examples: - Let's say you have an object under test which writes log messages to an object of type ILogger. If you want to test that the log messages are written in the correct order, use a strict mock (for order checking), feed in the expected calls, and call verify() in the end. If your test does test another aspect of the object under test and you don't care about the logger at all, but need one to get the stuff running, use a nice mock for the logger, don't feed in any calls, and don't call verify() in the end. - Let's say you have an object under test which reads data from an interface IListSource. IListSource has two methods numberOfItems() and itemAt(int index). If your object under test renders all items, your mock object should expect at least one call to numberOfItems() and at least one call for each index to itemAt(index), and you should call verify() in the end to ensure that you haven't skipped an item. Hope that helps, Tammo</body>
  </mail>
  <mail>
    <header>Partial mocks with generics</header>
    <date>Wed Jun 22 00:24:00 CEST 2011</date>
    <body>Hello, I'm trying to create a partial mock of a generic class and don't quite understand the behavior I'm seeing. As an example, I've used a mock builder to create a partial mock with no mocked methods (for the sake of brevity, I've omitted adding any mocked methods). I've noticed that when my non-mock method a() is called directly everything works as expected. However, when called indirectly via indirectA(), a mock version of a() is (undesirably) used. Could anyone explain this behavior, and suggest the correct solution? Thanks! call a(42)"</body>
  </mail>
  <mail>
    <header>method chaining</header>
    <date>Sat Oct 09 02:31:00 CEST 2010</date>
    <body>Is there any way to make it easier to mock chained method calls: Assuming this is application code: and this is the test: ... Can you add feature to EasyMock framework to make something like this possible:</body>
  </mail>
  <mail>
    <header>Downloading easymock</header>
    <date>Thu Oct 28 18:23:00 CEST 2010</date>
    <body>The zip file that I get seems to be reports from Clover, not source code. Rich</body>
  </mail>
  <mail>
    <header>Re: Downloading easymock</header>
    <date>Thu Oct 28 18:38:00 CEST 2010</date>
    <body>Hello Rich, in , the sources can be found in easymock-3.0-sources.jar. If you have trouble uncompressing it, just rename it to easymock-3.0-sources.zip. Hope that helps, Tammo</body>
  </mail>
  <mail>
    <header>Re: method chaining</header>
    <date>Thu Nov 04 00:19:00 CET 2010</date>
    <body>I agree that this would be a very useful feature. possible:</body>
  </mail>
  <mail>
    <header>Re: Save mocks to xml</header>
    <date>Thu Nov 04 00:15:00 CET 2010</date>
    <body>Is there any interest to persisting mock recordings to XML? My use has tended to be in the area of functional testing, while EasyMock has historically played in the realm of unit testing, but maybe there could be value in pushing EasyMock into new places without compromising the core of what makes EasyMock great. I would really like to contribute this to EasyMock, and if people don't think this particular idea is useful, I would still like to contribute in other areas of EasyMock. Please let me know what you think.</body>
  </mail>
  <mail>
    <header>Re: Save mocks to xml</header>
    <date>Thu Nov 04 00:25:00 CET 2010</date>
    <body>Is there any interest to persisting mock recordings to XML? My use has tended to be in the area of functional testing, while EasyMock has historically played in the realm of unit testing, but maybe there could be value in pushing EasyMock into new places without compromising the core of what makes EasyMock great. I would really like to contribute this to EasyMock, and if people don't think this particular idea is useful, I would still like to contribute in other areas of EasyMock. Please let me know what you think.</body>
  </mail>
  <mail>
    <header>Re: Complex EasyMock Use case - for me! - need help</header>
    <date>Wed Nov 24 16:28:00 CET 2010</date>
    <body>Hi, [] call? the local implementation of answer(), correct? A capture should do what you would like: expect(commonDAO.createEntity(capture(operationCapture))).andAnswer(new //  replay etc. // assertions using capturedOperation You could also consider returning another operation (or even nil) when createEntity() is called to simplify your test. Your test checks whether createEntity is called and whether the  argument (the operation) is built correctly, and not more. But as I don't have the full source code, I can't tell whether returning nil would be fine or not: //  replay etc. // assertions using capturedOperation Hope that helps, Tammo Freese</body>
  </mail>
  <mail>
    <header>Re: Complex EasyMock Use case - for me! - need help</header>
    <date>Thu Dec 02 04:46:00 CET 2010</date>
    <body>Fantastic, it works great! In my case, I need to validate the content of the created Operation, but it's good to know you can return nil as well. Thanks A LOT Tammo call? in the local implementation of answer(), correct? createEntity() is called to simplify your test. Your test checks whether createEntity is called and whether the  argument (the operation) is built correctly, and not more. But as I don't have the full source code, I can't tell whether returning nil would be fine or not:</body>
  </mail>
  <mail>
    <header>Problem with Netty (jboss)</header>
    <date>Mon Dec 06 14:45:00 CET 2010</date>
    <body>I am using EasyMock to build junit tests for an application based on the jboss Netty project. There are several classes in the application that extend the SimpleChannelHandler class, implementing messageReceived() and writeRequested() methods as shown below. My problem with this is twofold. First, how do I test for a successful readBytes(), which is a void method that fills the byte array passed to it? Second, how do I create a MessageEvent with the input for the transformation. I'm still new to Java, and this is my first attempt at writing junit tests, but even the two experts here did not have any suggestions on how to do this. Is there a way to test this code with EasyMock without rewriting major sections of this application? Thank you, Bob McConnell CODE: e) do my transformation here. END:</body>
  </mail>
  <mail>
    <header>RE: Problem with Netty (jboss)</header>
    <date>Wed Dec 08 13:32:00 CET 2010</date>
    <body>Hi Henri, The code I included is from a method I am trying to test. I have five methods with this sequence scattered over three classes, where only the transformation varies between them. The problem is that I don't know how to write this test. There don't appear to be any descriptions or examples of using EasyMock to test a void method that modifies a variable or a member of the class. It looks to me like I need to build a real message event object, inserting my test data into it before I can call messageReceived(). But I don't know if I have to build that event from scratch, or can EasyMock build it for me so I only have to insert the source array? If I use a Mock event, can I insert specific data into the array that readBytes() will extract, or can I insert data into buf in that call instead of capturing it? Is there any way to look at the content of msg after the call to readBytes(), or do I have to wait and capture the transformed array in the writeBytes() call? Yeah, I'm new at this. I'm much more comfortable writing and testing in Assembler. Thank you, Bob McConnell -----Original Message----- From: Henri Tremblay Sent: Tuesday, December 07, 2010 7:35 PM Hi, I'm not sure what is tested and what is mocked  here. If the call to readBytes() is mocked, you can use a capture to get the byte content and assert it. And the MessageEvent will probably be mocked and recorded according to your needs. But a test example will help to provide a better answer I am using EasyMock to build junit tests for an application based on the jboss Netty project. There are several classes in the application that extend the SimpleChannelHandler class, implementing messageReceived() and writeRequested() methods as shown below. My problem with this is twofold. First, how do I test for a successful readBytes(), which is a void method that fills the byte array passed to it? Second, how do I create a MessageEvent with the input for the transformation. I'm still new to Java, and this is my first attempt at writing junit tests, but even the two experts here did not have any suggestions on how to do this. Is there a way to test this code with EasyMock without rewriting major sections of this application? Thank you, Bob McConnell CODE: // Incoming traffic moves upstream. @Override public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) do my transformation here. END:</body>
  </mail>
  <mail>
    <header>RE: Problem with Netty (jboss)</header>
    <date>Fri Dec 10 14:07:00 CET 2010</date>
    <body>This has been bugging me all week, even though I have been working on other projects. But I have an idea about this issue, I just don't know enough about Java or EasyMock to know if it will work. Is it possible to write an inverse to Capture() that will inject specific data into a variable? In the case of this specific Netty class, could it do something like this: -----8&amp;lt;--------------------------------------------------- buffer // --&amp;gt;&amp;gt;   The Inject here is the inverse of capture. -----8&amp;lt;--------------------------------------------------- Is this even feasible? Bob McConnell -----Original Message----- From: Bob McConnell Sent: Wednesday, December 08, 2010 8:32 AM To: easymock@yahoogroups.com Subject: RE: [easymock] Problem with Netty (jboss) Hi Henri, The code I included is from a method I am trying to test. I have five methods with this sequence scattered over three classes, where only the transformation varies between them. The problem is that I don't know how to write this test. There don't appear to be any descriptions or examples of using EasyMock to test a void method that modifies a variable or a member of the class. It looks to me like I need to build a real message event object, inserting my test data into it before I can call messageReceived(). But I don't know if I have to build that event from scratch, or can EasyMock build it for me so I only have to insert the source array? If I use a Mock event, can I insert specific data into the array that readBytes() will extract, or can I insert data into buf in that call instead of capturing it? Is there any way to look at the content of msg after the call to readBytes(), or do I have to wait and capture the transformed array in the writeBytes() call? Yeah, I'm new at this. I'm much more comfortable writing and testing in Assembler. Thank you, Bob McConnell -----Original Message----- From: Henri Tremblay Sent: Tuesday, December 07, 2010 7:35 PM Hi, I'm not sure what is tested and what is mocked here. If the call to readBytes() is mocked, you can use a capture to get the byte content and assert it. And the MessageEvent will probably be mocked and recorded according to your needs. But a test example will help to provide a better answer On Mon, Dec 6, 2010 at 3:45 PM, Bob McConnell &amp;lt;rvm@... I am using EasyMock to build junit tests for an application based on the jboss Netty project. There are several classes in the application that extend the SimpleChannelHandler class, implementing messageReceived() and writeRequested() methods as shown below. My problem with this is twofold. First, how do I test for a successful readBytes(), which is a void method that fills the byte array passed to it? Second, how do I create a MessageEvent with the input for the transformation. I'm still new to Java, and this is my first attempt at writing junit tests, but even the two experts here did not have any suggestions on how to do this. Is there a way to test this code with EasyMock without rewriting major sections of this application? Thank you, Bob McConnell CODE: // Incoming traffic moves upstream. @Override public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) do my transformation here. END:</body>
  </mail>
  <mail>
    <header>RE: Problem with Netty (jboss)</header>
    <date>Mon Dec 20 16:39:00 CET 2010</date>
    <body>Henri, I still don't understand how this would work. I don't believe I can use expect because readBytes() is a null method. It just copies bytes from itself into the array passed to it in the first parameter using the second and third parameters as the starting offset (in the destination array) and the number of bytes to copy, adjusting internal pointers accordingly. Bob McConnell From: Henri Tremblay know to the how But EasyMock in in and</body>
  </mail>
  <mail>
    <header>RE: Problem with Netty (jboss)</header>
    <date>Tue Dec 21 16:19:00 CET 2010</date>
    <body>Henri, Ok, I'll plug that in and see if it works. But I have no clue what it does nor how you came up with it. As I said, I am new to Java and OOP. I am particularly confused by the third line which appears to me to be an inline definition of a class without calling it a class. I see the same coding style for Netty ChannelFutureListener, and can't see what it accomplishes there either. Thank you, Bob McConnell From: Henri Tremblay</body>
  </mail>
  <mail>
    <header>Re: Trigger wanted (or alternative suggestion)</header>
    <date>Mon Jul 12 08:31:00 CEST 2010</date>
    <body>ah, ok. Now i have test code like this: This works fine but has two minor nuisances: -the returning null business -this code actually doesn't answer anything, it triggers a side effect How about adding a public static void andTriggerSideEffect( ISideEffect s ) method to IExpectation? (with ISideEffect defining a public void sideEffect() method)</body>
  </mail>
  <mail>
    <header>Re: Trigger wanted (or alternative suggestion)</header>
    <date>Mon Jul 12 10:08:00 CEST 2010</date>
    <body>Hi, yeah, that's not so nice... I found a good solution though: I wrote a new abstract helper class so now i can write which looks ok for me. Do you want to add this class to EasyMock? :-) (You may rename the class to ISideEffect, thats ok :-) Cheers, Stephan</body>
  </mail>
  <mail>
    <header>Misleading "unexpected method call" error report</header>
    <date>Mon Jul 19 13:31:00 CEST 2010</date>
    <body>A collegue developer by mistake has put EasyMock.isA(Stirng.class) call as parameter to actual method under test. This broke different test method in same test class which also makes use of same mock object. It was hard to debug what the actual error was since EasyMock reported "unexpected method call" on second test method even though it was ok. EasyMock.reset is called before every test method on a mock object that these two methods share, but some state it seems doesn't get reset causing this misleading error message. EasyMock 3.0 is being used. Hopefully something can be done to better handle this scenario. Regards, Stevo.</body>
  </mail>
  <mail>
    <header>OSGI tests failing on trunk Maven build</header>
    <date>Wed Aug 25 09:59:00 CEST 2010</date>
    <body>I've been building trunk to get around the cglib-requirement bug in 3.0, and found that a few of the OSGI integration tests fail for me, with some Spring/log4j resource-related errors: Tests in error: ------------------------------------------------------------------------------- Test set: org.easymock.itests.InterfaceOnlyTest ------------------------------------------------------------------------------- FAILURE! ERROR! java.io.FileNotFoundException: C:\Users\brandall\.m2\repository\org\springframework\osgi\log4j.osgi\1.2.15-SNAP\ SHOT\log4j.osgi-1.2.15-SNAPSHOT.jar (The system cannot find the path specified) at java.io.FileInputStream.open(Native Method) at java.io.FileInputStream.&amp;lt;init&amp;gt;(FileInputStream.java:106) at org.springframework.core.io.FileSystemResource.getInputStream(FileSystemResource\ .java:108) at org.springframework.osgi.test.AbstractOsgiTests.installBundle(AbstractOsgiTests.\ java:323) at org.springframework.osgi.test.AbstractOsgiTests.startup(AbstractOsgiTests.java:2\ 53) at org.springframework.osgi.test.AbstractOsgiTests.prepareTestExecution(AbstractOsg\ iTests.java:374) at org.springframework.osgi.test.AbstractOsgiTests.runBare(AbstractOsgiTests.java:2\ 03) at org.springframework.osgi.test.AbstractOsgiTests$1.protect(AbstractOsgiTests.java\ :184) at junit.framework.TestResult.runProtected(TestResult.java:124) at org.springframework.osgi.test.AbstractOsgiTests.run(AbstractOsgiTests.java:181) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83) at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:59) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(Abstra\ ctDirectoryTestSuite.java:115) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirec\ toryTestSuite.java:140) at org.apache.maven.surefire.Surefire.run(Surefire.java:109) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBoote\ r.java:290) at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1017) testCanUseMatchers(org.easymock.itests.InterfaceOnlyTest)  Time elapsed: 0.001 sec  &amp;lt;&amp;lt;&amp;lt; ERROR! java.lang.NullPointerException at org.springframework.osgi.test.AbstractOsgiTests.invokeOSGiTestExecution(Abstract\ OsgiTests.java:395) at org.springframework.osgi.test.AbstractOsgiTests.runBare(AbstractOsgiTests.java:2\ 06) at org.springframework.osgi.test.AbstractOsgiTests$1.protect(AbstractOsgiTests.java\ :184) at junit.framework.TestResult.runProtected(TestResult.java:124) at org.springframework.osgi.test.AbstractOsgiTests.run(AbstractOsgiTests.java:181) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83) at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:59) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(Abstra\ ctDirectoryTestSuite.java:115) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirec\ toryTestSuite.java:140) at org.apache.maven.surefire.Surefire.run(Surefire.java:109) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBoote\ r.java:290) at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1017) Any idea what is going on there?  Of course I can skip-tests ...</body>
  </mail>
  <mail>
    <header>SVN:r196 Tests fail</header>
    <date>Thu Sep 09 05:56:00 CEST 2010</date>
    <body>I got the SVN trunk (r196) and tried to get it installed in my local maven repository, but there are some open issues. Can someone confirm that and what can be done to fix them? Greetings, Raphael java version "1.6.0_21" Java(TM) SE Runtime Environment (build 1.6.0_21-b06) Java HotSpot(TM) Server VM (build 17.0-b16, mixed mode) Failed tests: Tests in error: ------------------------------------------------------------------------------- Test set: org.easymock.tests2.CaptureTest ------------------------------------------------------------------------------- FAILURE! ERROR! java.lang.NullPointerException at org.easymock.tests2.CaptureTest.testCaptureType(CaptureTest.java:57) at org.easymock.tests2.CaptureTest.testCaptureFirst(CaptureTest.java:76) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:25) at java.lang.reflect.Method.invoke(Method.java:592) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java\ :44) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:\ 15) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:4\ 1) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20\ ) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76\ ) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50\ ) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184) at org.junit.runners.ParentRunner.run(ParentRunner.java:236) at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:59) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(Abstra\ ctDirectoryTestSuite.java:115) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirec\ toryTestSuite.java:102) at org.apache.maven.surefire.Surefire.run(Surefire.java:180) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:25) at java.lang.reflect.Method.invoke(Method.java:592) at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBoote\ r.java:350) at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1021) ERROR! java.lang.IllegalStateException: 1 matchers expected, 2 recorded. This exception usually occurs when matchers are mixed with raw values when recording a method: foo(5, eq(6)); // wrong You need to use no matcher at all or a matcher for every single param: foo(eq(5), eq(6)); // right foo(5, 6); // also right at org.easymock.internal.ExpectedInvocation.createMissingMatchers(ExpectedInvocatio\ n.java:48) at org.easymock.internal.ExpectedInvocation.&amp;lt;init&amp;gt;(ExpectedInvocation.java:41) at org.easymock.internal.RecordState.invoke(RecordState.java:79) at org.easymock.internal.MockInvocationHandler.invoke(MockInvocationHandler.java:41\ ) at org.easymock.internal.ObjectMethodsFilter.invoke(ObjectMethodsFilter.java:73) at $Proxy5.oneArg(Unknown Source) at org.easymock.tests2.CaptureTest.testCaptureType(CaptureTest.java:54) at org.easymock.tests2.CaptureTest.testCaptureLast(CaptureTest.java:82) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:25) at java.lang.reflect.Method.invoke(Method.java:592) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java\ :44) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:\ 15) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:4\ 1) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20\ ) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76\ ) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50\ ) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184) at org.junit.runners.ParentRunner.run(ParentRunner.java:236) at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:59) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(Abstra\ ctDirectoryTestSuite.java:115) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirec\ toryTestSuite.java:102) at org.apache.maven.surefire.Surefire.run(Surefire.java:180) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:25) at java.lang.reflect.Method.invoke(Method.java:592) at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBoote\ r.java:350) at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1021) ERROR! java.lang.NullPointerException at org.easymock.tests2.CaptureTest.testCaptureType(CaptureTest.java:57) at org.easymock.tests2.CaptureTest.testCaptureAll(CaptureTest.java:88) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:25) at java.lang.reflect.Method.invoke(Method.java:592) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java\ :44) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:\ 15) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:4\ 1) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20\ ) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76\ ) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50\ ) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184) at org.junit.runners.ParentRunner.run(ParentRunner.java:236) at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:59) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(Abstra\ ctDirectoryTestSuite.java:115) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirec\ toryTestSuite.java:102) at org.apache.maven.surefire.Surefire.run(Surefire.java:180) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:25) at java.lang.reflect.Method.invoke(Method.java:592) at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBoote\ r.java:350) at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1021) ERROR! java.lang.IllegalStateException: 1 matchers expected, 2 recorded. This exception usually occurs when matchers are mixed with raw values when recording a method: foo(5, eq(6)); // wrong You need to use no matcher at all or a matcher for every single param: foo(eq(5), eq(6)); // right foo(5, 6); // also right at org.easymock.internal.ExpectedInvocation.createMissingMatchers(ExpectedInvocatio\ n.java:48) at org.easymock.internal.ExpectedInvocation.&amp;lt;init&amp;gt;(ExpectedInvocation.java:41) at org.easymock.internal.RecordState.invoke(RecordState.java:79) at org.easymock.internal.MockInvocationHandler.invoke(MockInvocationHandler.java:41\ ) at org.easymock.internal.ObjectMethodsFilter.invoke(ObjectMethodsFilter.java:73) at $Proxy5.oneArg(Unknown Source) at org.easymock.tests2.CaptureTest.testCaptureType(CaptureTest.java:54) at org.easymock.tests2.CaptureTest.testCaptureNone(CaptureTest.java:94) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:25) at java.lang.reflect.Method.invoke(Method.java:592) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java\ :44) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:\ 15) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:4\ 1) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20\ ) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76\ ) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50\ ) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184) at org.junit.runners.ParentRunner.run(ParentRunner.java:236) at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:59) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(Abstra\ ctDirectoryTestSuite.java:115) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirec\ toryTestSuite.java:102) at org.apache.maven.surefire.Surefire.run(Surefire.java:180) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:25) at java.lang.reflect.Method.invoke(Method.java:592) at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBoote\ r.java:350) at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1021) testPrimitiveVsObject(org.easymock.tests2.CaptureTest)  Time elapsed: 0.001 sec java.lang.AssertionError: at org.easymock.internal.MockInvocationHandler.invoke(MockInvocationHandler.java:45\ ) at org.easymock.internal.ObjectMethodsFilter.invoke(ObjectMethodsFilter.java:73) at $Proxy5.oneArg(Unknown Source) at org.easymock.tests2.CaptureTest.testPrimitiveVsObject(CaptureTest.java:130) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:25) at java.lang.reflect.Method.invoke(Method.java:592) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java\ :44) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:\ 15) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:4\ 1) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20\ ) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76\ ) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50\ ) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184) at org.junit.runners.ParentRunner.run(ParentRunner.java:236) at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:59) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(Abstra\ ctDirectoryTestSuite.java:115) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirec\ toryTestSuite.java:102) at org.apache.maven.surefire.Surefire.run(Surefire.java:180) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:25) at java.lang.reflect.Method.invoke(Method.java:592) at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBoote\ r.java:350) at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1021) FAILURE! java.lang.AssertionError: at org.easymock.internal.MockInvocationHandler.invoke(MockInvocationHandler.java:45\ ) at org.easymock.internal.ObjectMethodsFilter.invoke(ObjectMethodsFilter.java:73) at $Proxy5.oneArg(Unknown Source) at org.easymock.tests2.CaptureTest.testPrimitive(CaptureTest.java:176) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:25) at java.lang.reflect.Method.invoke(Method.java:592) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java\ :44) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:\ 15) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:4\ 1) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20\ ) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76\ ) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50\ ) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184) at org.junit.runners.ParentRunner.run(ParentRunner.java:236) at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:59) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(Abstra\ ctDirectoryTestSuite.java:115) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirec\ toryTestSuite.java:102) at org.apache.maven.surefire.Surefire.run(Surefire.java:180) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:25) at java.lang.reflect.Method.invoke(Method.java:592) at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBoote\ r.java:350) at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1021)</body>
  </mail>
  <mail>
    <header>Re: SVN:r196 Tests fail</header>
    <date>Fri Sep 10 06:40:00 CEST 2010</date>
    <body>Hi Henri, my previous email contains the output of the surfire directory related to that faild test case. I've applied the following patch in order to get EasyMock compiled with J6SE. Could you please review this patch? Maybe it's one source of my failed test case. Greetings, Raphael ---8&amp;lt;---8&amp;lt;---8&amp;lt;---8&amp;lt;---8&amp;lt;---8&amp;lt;---8&amp;lt;---8&amp;lt;---8&amp;lt;---8&amp;lt;--- diff -r 4178009e3823 -r 0c423c506c41 src/main/java/org/easymock/EasyMock.java --- a/src/main/java/org/easymock/EasyMock.java Wed Sep 08 12:30:57 2010 +0200 +++ b/src/main/java/org/easymock/EasyMock.java Thu Sep 09 08:07:04 2010 +0200 @@ -1875,90 +1875,6 @@ -     * Expect any boolean but captures it for later use. -     * -     * @param captured -     *            Where the parameter is captured -     */ - -    /** -     * Expect any int but captures it for later use. -     * -     * @param captured -     *            Where the parameter is captured -     */ - -    /** -     * Expect any long but captures it for later use. -     * -     * @param captured -     *            Where the parameter is captured -     */ - -    /** -     * Expect any float but captures it for later use. -     * -     * @param captured -     *            Where the parameter is captured -     */ - -    /** -     * Expect any double but captures it for later use. -     * -     * @param captured -     *            Where the parameter is captured -     */ - -    /** -     * Expect any byte but captures it for later use. -     * -     * @param captured -     *            Where the parameter is captured -     */ - -    /** -     * Expect any char but captures it for later use. -     * -     * @param captured -     *            Where the parameter is captured -     */ - -    /** ---&amp;gt;8---&amp;gt;8---&amp;gt;8---&amp;gt;8---&amp;gt;8---&amp;gt;8---&amp;gt;8---&amp;gt;8---&amp;gt;8---&amp;gt;8---</body>
  </mail>
  <mail>
    <header>Save mocks to xml</header>
    <date>Tue Sep 28 03:19:00 CEST 2010</date>
    <body>I have created a little tool that has many of the same features of EasyMock, and I was wondering if others would find it beneficial to contribute it to EasyMock. It could fit in nicely. In short, it allows you to save your mocks as an xml file. Once the mock is saved as xml and put in the test class path, you can simply load it. You could end up using it like this: Basically, this would have the recording phase already done in the xml, and all you have to do is use it. The benefits are for things where you just need stubs. The best use that I have gotten from this tool is mocking external service calls in running applications using some Spring AOP interceptors. This gives me control over these external services when running my Selenium tests. Without this, my Selenium tests could break unexpectedly when data from an external service changed. But because it works off of interfaces, you could use it to stub out anything. Does this sound like something that would be worth contributing to EasyMock, or do people think that it should live as its own open source project?</body>
  </mail>
  <mail>
    <header>Mock objects executing in a seperate thread</header>
    <date>Thu Sep 30 18:16:00 CEST 2010</date>
    <body>We're trying to use easymock to unit test some multi-threaded code, and I'm seeing a problem catching certain types of errors. I'm wondering whether there are any best practices to deal with this or whether there is something that could be added to the package to help address these. Basically, our tests look something like the following: Thread A: createMock() specify expected behavior replay(mock) queue test wait verify(mock) check results Thread B: dequeue work and execute All the operations that the mock object is validating happen in Thread B as work is dequeued. The problem I'm seeing is that when unexpected behavior occurs, such as unexpected function calls, there is no way for verify() and the checking code in Thread A to get notice of the failure. I know that the Mock object will throw an exception when unexpected functions are called, and in single threaded test cases, this can be caught by JUnit and used to fail the test. But in the multithreaded case, there is no way for the thread (A) driving the test case to be notified of the failure. Instead, an exception is thrown in Thread B, propagates up, and ends up being printed to the Console. I don't mind that the exception is thrown in Thread B. Obviously, if an unexpected call is made to the mock object, there is no way for it to predictably respond, either to that call or any subsequent call, so throwing an exception is really the only option. But I really need a way to be notified of the exception in my driving thread as well. Ideally, calling verify() would thrown the same exception, but that doesn't seem to be happening. Any ideas on the best way to handle this in our test cases? We don't really want to change our threading mechanism, and changing the application code to install additional exception handlers just so the JUnit test cases work seems to be counter to non-intrusive testing. Any help would be appreciated, Will</body>
  </mail>
  <mail>
    <header>Re: Re: Mock objects executing in a seperate thread</header>
    <date>Thu Sep 30 20:18:00 CEST 2010</date>
    <body>Your code does have to have a design that is testable, so there is no such thing as "non-intrusive" testing. For mock object testing, that means that you have to be able to inject a thread, or be able to control how the thread is made. Experience has taught me that almost all of the time, properly written/modular code is testable, and making untestable code testable improves its design in ways that expand beyond making it simply work in the test. That means either the queue that starts up reading is either a Runnable or if it makes threads, it takes a factory to make threads. If it is a Runnable, then you might be able to just run it directly, in which case your test is now single threaded. If it really must be in a thread, then you can make a wrapper around it to catch exceptions, cache them and return. If you have something that takes a thread factory, then make a thread with an appropriate UncaughtExceptionHandler, which would let you capture and cache the EasyMock exception to return when you "join" that thread. I'm sure any of the above techniques can be encapsulated into testing-code-only utility methods/classes to reuse them. Why there isn't any in JUnit I don't know. My personal preference is to run code that normally runs in threads but run it in a single thread if possible, because controlling things in a multi-threaded test is much harder and annoying. That eliminates the need to "capture" the exceptions in thread B to rethrow in A, and all of the boilerplate I described above. You might say "well it doesn't test for race conditions" or "the environment's not like the real one". Well you certainly can't guarantee that with multiple threads; a quad core will run it differently than a 2ghz dual core or differently on a continuous integration server running 5 builds at once. A better way might be to control the sequence of events, instead, but that can be hard based on the design. Jason objects to test an existing API. The idea is to be able to test an existing interface without changing the interface. The goal of using Mock objects in the unit testing is so that the existing interface could be validated, not to change the interface to accomidate the testing tool.</body>
  </mail>
  <mail>
    <header>Re: Re: Mock objects executing in a seperate thread</header>
    <date>Thu Sep 30 20:27:00 CEST 2010</date>
    <body>If B isn't a Runnable or a Thread then he has to change the API. In order to do mock testing you have to have seams, which is places to inject mocks or other testing functionality. If the code is new B().processMessages(), then there's no way to get at those exceptions if it starts a thread that throws away all of the exceptions. but that's super hacky and changing global variables, and that would start a whole new thread about global JDK state that pollutes other tests unless you are really, really good about setUp/tearDown (referring to JUnit here). Although my suggestion still is if he has "start B; wait for B to be done" then I suggest making B a runnable and calling B.run() right in the test to eliminate threads and also the Runnable wrapper entirely. Jason</body>
  </mail>
  <mail>
    <header>Re: easyMock Question</header>
    <date>Thu Oct 07 16:50:00 CEST 2010</date>
    <body>No, you can't a static method with EasyMock, at least not that I know of. I believe PowerMock can do it but I've never used it. You need to introduce a "seam" into the code. I'm presuming that the call to create AntennaMount is hidden inside of your unit under test. That is the problem -- you really should pass in an AntennaMount to that class (or a factory for one), and mock that. Don't mock the second level dependencies of a class, or you're really doing an integration test (unless that's what you want) and just making it harder on yourself. If AntennaMount is actually the class under test, then I don't get your question, because you would just pass mockANT to the constructor rather than call getDefault. Jason</body>
  </mail>
  <mail>
    <header>Re: easyMock Question</header>
    <date>Thu Oct 07 19:34:00 CEST 2010</date>
    <body>Wow I feel dumb. I must be off today, for some reason I read that like AntennaType.getDefault(), thinking getDefault was like the common "getInstance" pattern. Wow, sorry about that, so disregard my message then. But in the code, the method is used before replay. It should be recorded and given a behavior first. But I don't think we know entirely what he is trying to do here? Jason I to than</body>
  </mail>
  <mail>
    <header>RE: easyMock Question</header>
    <date>Thu Oct 07 19:40:00 CEST 2010</date>
    <body>Problem solved... I just stubbed things out. -----Original Message----- From: easymock@yahoogroups.com [mailto:easymock@yahoogroups.com] On Behalf Of Jason Winnebeck Sent: Thursday, October 07, 2010 1:34 PM To: easymock@yahoogroups.com Subject: Re: [easymock] easyMock Question Wow I feel dumb. I must be off today, for some reason I read that like AntennaType.getDefault(), thinking getDefault was like the common "getInstance" pattern. Wow, sorry about that, so disregard my message then. But in the code, the method is used before replay. It should be recorded and given a behavior first. But I don't think we know entirely what he is trying to do here? Jason I to than ------------------------------------ Yahoo! Groups Links</body>
  </mail>
  <mail>
    <header>Re: Replacements for setDefaultVoidCallable and expectAndDefaultReturn?</header>
    <date>Fri Feb 26 15:37:00 CET 2010</date>
    <body>I've tried some of the suggestions to no avail so let me ask this question differently with some pseduo code. So I have a Spring Controller method: public ModelAndView controllerMethod(HttpServletRequest request, ... ... ... ... //Inside of the method is a call to a void method The void method is: .. Now when I try to mock all of this up in my unit test the old way we did this was: When we update to 2.5.2 I replaced this with: expectLastCall(); //I've tried it with and without this expect call The problem with what I changed it to for 2.5.2 is that when I run the controller.controllerMethod(request, response) call followed by a verify(mock) So I debugged the code and it looks like when I call the controller's method and it hits the void method call it just walks right over it.  So I commented out the mock.voidMethod and replay(mock) calls and reran my test case and it passed just fine. Is this something new in 2.5.2 that I don't need to mock up the void method calls inside of the controller that I'm testing?  And if so, is this the replacement to having to use the deprecated setDefaultVoidCallble method that the older version of EasyMock had to call? 2.5.2.  I've been updating all of our deprecated code but recently I've come across two method calls that I can't figure out how to recreate with the updated version. methods.  I create my mock object and instead of running an expect around it I just run it normally like mock.method(value);  then I do a replay(mock); after it.  The problem is that when I run the actually controller I keep getting an AssertionError of expected: 1, actual 0 for my object.  This is before the verify(mock) method is even called. recreate it with a basic expect and .andReturn method but I get the same AssertionError of expect: 1, actual 0. Tom</body>
  </mail>
  <mail>
    <header>IMocksControl and JUnit Rule for automatic verify</header>
    <date>Fri Apr 09 12:54:00 CEST 2010</date>
    <body>I tried out the new JUnit @Rule feature to setup an IMocksControl to automatically verify my mocks at the end of a test. It turns out that it works pretty well. The syntax ends up looking like this: There are a couple of interesting things to notice. If the object that you are testing allows the mocks to be provided through the constructor (i.e. constructor injection), then you can do away with the @Before method entirely. This will automatically call mocks.verify() at the end of your test. How often have you forgotten to verify your mocks? Well, now you don't have to. Additionally, it has to implicitly do mocks.reset() before the test. If you need more control over which IMocksControl to use, just add another constructor to EasyMockJUnitRule so you can do this: @Rule public Another nice point is that EasyMockJUnitRule runs before and after the @Before and @After methods. This way you can put things in @Before and @After to, for example, stub some of the mocked methods. I thought that this would be a nice addition to EasyMock. All you have to do is have EasyMockJUnitRule implement IMocksControl and org.junit.rules.MethodRule. To make it so EasyMock doesn't require JUnit on the classpath, just have it mark the JUnit dependency in the pom.xml as an optional dependency. As long as nobody tries to instantiate that class, they can still use TestNG, for example, just as they do today. The only other thing that this EasyMockJUnitRule object needs to be aware of is if it is in record mode. This way if a particular test doesn't every do mocks.replay(), it won't fail the test because. But this was handled by a simple boolean variable. So, what do people think?</body>
  </mail>
  <mail>
    <header>Re: IMocksControl and JUnit Rule for automatic verify</header>
    <date>Fri Apr 09 12:59:00 CEST 2010</date>
    <body>The problem I've had with putting verify in the @After/teardown is when a test fails, it still runs the teardown method. This often causes the verify to fail because the test did not run to completion. So the error reported by JUnit is that the "verify" failed, and it masks the original error. Does this still happen with the @Rule? Jason automatically verify my mocks at the end of a test.</body>
  </mail>
  <mail>
    <header>Re: IMocksControl and JUnit Rule for automatic verify</header>
    <date>Fri Apr 09 13:46:00 CEST 2010</date>
    <body>I have tried the exact same thing that you just described. The method that I describe here does not suffer from this problem. If any assertion fails, or any other exception occurs, the verify does not occur. This way you don't lose the original exception or assertion failure. It just works. automatically verify my mocks at the end of a test.</body>
  </mail>
  <mail>
    <header>Re: IMocksControl and JUnit Rule for automatic verify</header>
    <date>Mon May 03 12:31:00 CEST 2010</date>
    <body>Judging from the lack of responses, this must not be very useful. If it ever becomes important, just let me know. I would like to submit it as an enhancement.</body>
  </mail>
  <mail>
    <header>Trying to EasyMock BufferedReader to produce IOException</header>
    <date>Fri May 07 23:26:00 CEST 2010</date>
    <body>All, The code below, in two classes, seems like most of the answer to mocking the BufferedReader to produce an IOException.  When executed  as a JUnit test, it reports: java.lang.IllegalStateException: no last call on a mock available at org.easymock.EasyMock.getControlForLastCall(EasyMock.java:202) ... Please give it a run and let me know what I'm doing wrong. Thanks, Ray</body>
  </mail>
  <mail>
    <header>Re: Trying to EasyMock BufferedReader to produce IOException</header>
    <date>Sat May 08 10:44:00 CEST 2010</date>
    <body>Thanks for your help Henri!</body>
  </mail>
  <mail>
    <header>Easier argument matchers</header>
    <date>Tue Jun 01 23:58:00 CEST 2010</date>
    <body>I've always found it to be a pain to write EasyMock IArgumentMatcher classes. Then I noticed easymock-propertyutils, and it gave me an idea. What if there was an easier way writer matchers, and have them survive refactorings. I have to admit, with the addition of the Capture objects, I don't usually need argument matchers, but there are times when they are still necessary. Wouldn't it be nice if I could write this: MyParameter param = createArgumentMatcher(MyParameter.class); // new API expect(some.methodCall(eq(param, param.getString(), expect(some.methodCall(eq(param, param.getString(), What this would do is create a matcher that matches param when param.toString() equals "hi". Another matcher is created to match when param.toString() equals "there". Notice how param is a matcher that is a proxy object (just like mocks themselves) used for recording what method the matcher needs to call, and what the expected value is. You could even put multiple tests on the matcher like this: expect(some.methodCall(and(eq(param, param.getString(), "hi"), eq(param, This creates a matcher for param that matches when param.getString() equals "hi" and param.getInt() equals 1. You could even take this a step further so that you could dig into sub-properties: expect(some.methodCall(eq(param, param.getParent().getId(), Notice how this is going multiple levels deep to match param.getParent().getId(). While we're at it, why not add a new static method called argThat which takes Hamcrest matchers: expect(some.methodCall(argThat(param, param.getString(), Of course, this would require some additions to EasyMock. For one, that createArgumentMatcher(Class&amp;lt;?&amp;gt; classToMatch) method, as well as additional versions of all the static methods that create matchers today, like eq, lt, ... The things I like is that I don't have to write any matcher classes, and it will survive some types of refactoring. I don't think that this would have to change the core of EasyMock in any way. I don't have anything like this written yet, but I was wondering if others thought that this would be useful.</body>
  </mail>
  <mail>
    <header>How to "expect" call on Constructor i.e. How to test if constructor is called</header>
    <date>Thu Jul 01 13:10:00 CEST 2010</date>
    <body>Hi All, I am very new to easymock and I have a very small query. I want to write a test which calls a method whose sole purpose is create an instance of a given class given a certain condition i.e. the method under test calls the constructor of a given class. However, I am not too sure how to go about telling my mock to expect a call on a constructor. At the moment, I am doing something akin to what is demonstrated below but I keep getting the exception "java.lang.IllegalStateException: no last call on a mock available". I was wondering if one you will be kind enough to point me in the right direction what I want to know is, how do I tell my mock to "expect" a method call on its concrete class's constructor? The scenario is as follows: [code] //**** At this point, how do I tell my mock(myObjMock) to expect a call on its concrete class's (MyObjectImpl) Constructor? //**** the  code below is incorrect and throws the "java.lang.IllegalStateException: no last call on a mock available" //*** At the moment, I dont know how to tell the mock to expect a call on the constructor // createMyObject just calls the Constructor of MyObjectImpl // and returns an instance of IMyObjectImpl see code below [/code] In ClassUnderTest [code] ... //Somewhere in ClassUnderTest // Assume that createMyObject(int id) is a member of the IMyObject interface // ***** At this point, how how do I tell my mock from the test method above // **** to expect a call on the contructor of MyObjectImpl? if (some_condition_is_met ) else ... [/code] I hope its clear as to what I am trying to achieve. Please let me know if you need more clarification. Regards quophyie</body>
  </mail>
  <mail>
    <header>Re: Create mock object using a constructor with parameters</header>
    <date>Thu Jul 08 09:31:00 CEST 2010</date>
    <body>Hi Tim I have come across this thread as I am having problems trying to mock a call to a constructor . I see you did say that you have written certain methods that allow you to achieve this. Albeit an old thread, you did attach the code to the thread but it seems that it is no longer available. I was wondering whether you'll be able to provide me with that code if that was at all possible?. regards George puter+monitoring+software&amp;amp;w2=Software&amp;amp;w3=Computer+and+internet+software&amp;amp;w4=Free+\ computer+monitoring+software&amp;amp;c=4&amp;amp;s=123&amp;amp;.sig=zb3sFxhi-tmca0EDuSrdbg tware&amp;amp;w2=Software&amp;amp;w3=Computer+and+internet+software&amp;amp;w4=Free+computer+monitoring+\ software&amp;amp;c=4&amp;amp;s=123&amp;amp;.sig=I7EBHfo5x5ryPp_cfIwsbg omputer+monitoring+software&amp;amp;w2=Software&amp;amp;w3=Computer+and+internet+software&amp;amp;w4=Fre\ e+computer+monitoring+software&amp;amp;c=4&amp;amp;s=123&amp;amp;.sig=oV1vUZqKIG_WNHYmy3y9mA 1=Computer+monitoring+software&amp;amp;w2=Software&amp;amp;w3=Computer+and+internet+software&amp;amp;w4=\ Free+computer+monitoring+software&amp;amp;c=4&amp;amp;s=123&amp;amp;.sig=RishPPW2ja69fF9T9jDp4g easymock-unsubscribe@yahoogroups.com&amp;lt;easymock-unsubscribe@yahoogroups.com?subjec\</body>
  </mail>
  <mail>
    <header>Re: Trigger wanted (or alternative suggestion)</header>
    <date>Fri Jul 09 12:35:00 CEST 2010</date>
    <body>Use expectLastCall with methods returning void. Anything you could use with expect works with expectLastCall. Jason &amp;gt; The underlying problem seems to be that flush() having no return value &amp;gt; and no parameter gives me no opportunity to execute code! &amp;gt; summary: &amp;gt; -in methods with parameters you can execute code by using/extending Capture &amp;gt; -in methods with a return value you can execute code by using/extending &amp;gt; IAnswer &amp;gt; -in methods without paramter and a return value, you can't execute code &amp;gt; mimicing functionalty not present because you use a mock at this point &amp;gt; (or am i mistaken here???)</body>
  </mail>
  <mail>
    <header>Does EasyMock have a test-isolation problem?</header>
    <date>Fri Nov 27 09:14:00 CET 2009</date>
    <body>Hi, I just started working with EasyMock on a big development project and I am very impressed. I do, however, have some difficulties when I integrate my mock-tests into our test suite. It seems that the different tests affect each other. If the first easymock test, A, (located in one class) fails then a separate easymock test, B, (located in another class) will also fail. The error message in test B is something like: "...2 matchers expected, 0 recorded.." When debugging, I can see that test B is looking for the two matchers that were defined in test A. In the source code for test B, there are, however, no matchers expected. It seems that even though I'm using different mock controls to create my mocks, the matchers are somehow carried on to the next easymock test. In a test suite with 1000+ tests, that is really a show-stopper, so I hope someone here has experienced a similar problem and can provide me with a solution. -- Anders PS. I'm using v. 2.5.2 and the test suite runs in a Eclipse-Plugin environment.</body>
  </mail>
  <mail>
    <header>Usage of Capture</header>
    <date>Thu Jan 07 03:15:00 CET 2010</date>
    <body>From 2.4, EasyMock introduced Capture I have used it. I introduce two samples of using Capture: 1. Enable simple getter/setter for mock object, using capture and IAnswer together. 2. Enable accept a visitor on mock object</body>
  </mail>
  <mail>
    <header>Capture the boolean primitive</header>
    <date>Tue Jan 19 08:24:00 CET 2010</date>
    <body>There are capture methods for primitive arguments in EasyMock class. public static int capture(Capture&amp;lt;Integer&amp;gt; captured) public static long capture(Capture&amp;lt;Long&amp;gt; captured) ...and so on... But why EasyMock doesn't have the capture method for boolean primitive type? smth like: public static boolean capture(Capture&amp;lt;Boolean&amp;gt; captured) What is the correct way for boolean argument capturing?</body>
  </mail>
  <mail>
    <header>Re: Capture the boolean primitive</header>
    <date>Tue Jan 19 10:36:00 CET 2010</date>
    <body>I need it when method has several arguments and one of them is boolean primitive. Then I have to capture all. It seems, it is not allowed to capture one argument and do not capture another argument. Am I right?</body>
  </mail>
  <mail>
    <header>Re: Capture the boolean primitive</header>
    <date>Thu Jan 21 04:51:00 CET 2010</date>
    <body>here's an example long catcher @Override // TODO make sure they pass in a long, ok? @Override // never get here, it's the error case</body>
  </mail>
  <mail>
    <header>suggestion: disallow returning null for a method that returns a boolean</header>
    <date>Thu Jan 21 04:54:00 CET 2010</date>
    <body>Currently if you &amp;lt;cough&amp;gt; accidentally write something like expect(a.foo()).andReturn(null); // foo is typed to return a boolean you run into a seemingly surprising error message where a NullPointerException is thrown when the method is called, later, despite nothing *looking* like it's null. (i.e. this line, later: boolean b = a.foo(); // throws a NullPointerException, despite a not being null This causes some confusion and frustration. Proposal: disallow returning null if a boolean/long/int is the return type (if that's even possible). Thanks for easymock! -r</body>
  </mail>
  <mail>
    <header>Re: suggestion: disallow returning null for a method that returns a boolean</header>
    <date>Thu Jan 21 15:34:00 CET 2010</date>
    <body>Thanks for your help there. -r</body>
  </mail>
  <mail>
    <header>Error attempting to create a mock using classextension</header>
    <date>Fri Jan 29 15:05:00 CET 2010</date>
    <body>I'm trying to use EasyMock class extension 2.5.2 and cglib 2.2 within JDeveloper 11g. On trying to create a mock, I get the following exception: java.lang.NoClassDefFoundError: org/objenesis/ObjenesisHelper org.easymock.classextension.internal.ObjenesisClassInstantiator.newInstance(Obje\ nesisClassInstantiator.java:23) org.easymock.classextension.internal.ClassProxyFactory.createProxy(ClassProxyFac\ tory.java:229) com.symmetry.dashboard.panels.view.debtors.backing.DebtorsTest.testProcessClickO\ nPie(DebtorsTest.java:26) sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:25) org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java\ :44) org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:\ 15) org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:4\ 1) org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20\ ) org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28) org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:73\ ) org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:46\ ) Caused by: java.lang.ClassNotFoundException: org.objenesis.ObjenesisHelper It looks like initialisation of some static field within ObjenesisHelper is failing, causing a ClassNotFoundException. Any ideas on what the problem might be? Thanks, Joe</body>
  </mail>
  <mail>
    <header>sniff...not enough matchers...sniff</header>
    <date>Fri Jan 29 17:23:00 CET 2010</date>
    <body>Question. Currently I sometimes get messages like... Testcase: withDaxAndMigrationTapesItShouldFinish(org.familysearch.digitalarchive.tapeinges\ treader.TapeReaderPollerTest):        Caused an ERROR 8 matchers expected, 7 recorded. for example when I accidentally put in a null instead of an eq(null) Would it perhaps be possible to avoid this error by assuming the eq(whatever) matcher for items passed in that aren't matchers?  Just wondering out loud. Thanks. -r</body>
  </mail>
  <mail>
    <header>Re: sniff...not enough matchers...sniff</header>
    <date>Tue Feb 02 05:43:00 CET 2010</date>
    <body>If you want to find a matcher can match any value, I think Capture is what you want. withDaxAndMigrationTapesItShouldFinish(org.familysearch.digitalarchive.tapeinges\ treader.TapeReaderPollerTest):</body>
  </mail>
  <mail>
    <header>Missing dependency from EasyMock CE documentation</header>
    <date>Thu Feb 04 14:40:00 CET 2010</date>
    <body>Hi Henri, I've just noticed that the EasyMock CE documentation at  includes dependency information in the Requirements section. However, this hasn't been updated since EasyMock CE stopped bundling Objenesis, and this dependency isn't mentioned on that page (it's implied much further down the page). Am I right in thinking that it depends on Objenesis 1.2? Many thanks, Neil.</body>
  </mail>
  <mail>
    <header>Mocking 'toString' methods.</header>
    <date>Wed Feb 10 16:55:00 CET 2010</date>
    <body>I find myself mocking the 3rd party library Apache XmlBeans and in particular the interface XmlObject. A main method on XmlObject is 'toString', which prettyprints the XML the object represents. Currently I can't mock 'toString' with EasyMock: it is treated like a 'final' method, as from what I've read on this list, 'toString' is used to get information out of the proxy class whent he proxy is in an error state. Is it a potentiallity that, in future versions of EasyMock, 'toString' be mockable on interfaces, and that perhaps it's behavior changes dependent on wether the proxy is in an error state or not? When not in an error state, the expected value is returned, when in an error state, proxy state information returned? Thanks for the great software! Martin</body>
  </mail>
  <mail>
    <header>Re: Mocking methods that use generics for strong typing</header>
    <date>Wed Feb 17 18:24:00 CET 2010</date>
    <body>Again Henri, thank you very much for your informative reply! Your response caused me to look again at the available information on Java generics and on the ability to use generic wildcards (my initial design) and generic methods (your first suggestion). Refactoring my code to use a generic methods works fine and also agrees with EasyMock too. This was also a new way of approachng the problem for me - very illuminating. Thank you, Martin</body>
  </mail>
  <mail>
    <header>Replacements for setDefaultVoidCallable and expectAndDefaultReturn?</header>
    <date>Fri Feb 26 13:17:00 CET 2010</date>
    <body>So we've been using an older version of EasyMock and recently upgraded to 2.5.2. I've been updating all of our deprecated code but recently I've come across two method calls that I can't figure out how to recreate with the updated version. 1.  setDefaultVoidCallable - We have spring controllers that access void methods.  I create my mock object and instead of running an expect around it I just run it normally like mock.method(value);  then I do a replay(mock); after it.  The problem is that when I run the actually controller I keep getting an AssertionError of expected: 1, actual 0 for my object.  This is before the verify(mock) method is even called. 2. expectAndDefaultReturn - The old method is deprecated and I've tried to recreate it with a basic expect and .andReturn method but I get the same AssertionError of expect: 1, actual 0. Any ideas or information on what I'm doing wrong would be great.  Thanks. - Tom</body>
  </mail>
  <mail>
    <header>Re: Replacements for setDefaultVoidCallable and expectAndDefaultReturn?</header>
    <date>Fri Feb 26 13:31:00 CET 2010</date>
    <body>I'm not a user of EasyMock for long enough to remember the expectAndDefaultReturn -- but is this the same as expect( ).andStubReturn? What does setDefaultVoidCallable do? Your description of just calling the void method directly to record it does work in current EasyMock: verify( mock ); //pass, we did get a single call... Jason 2.5.2.  I've been updating all of our deprecated code but recently I've come across two method calls that I can't figure out how to recreate with the updated version. methods.  I create my mock object and instead of running an expect around it I just run it normally like mock.method(value);  then I do a replay(mock); after it.  The problem is that when I run the actually controller I keep getting an AssertionError of expected: 1, actual 0 for my object.  This is before the verify(mock) method is even called. recreate it with a basic expect and .andReturn method but I get the same AssertionError of expect: 1, actual 0. Tom</body>
  </mail>
  <mail>
    <header>Re: Question about IMocksControl.verify()</header>
    <date>Fri Sep 04 20:28:00 CEST 2009</date>
    <body>Ok, thanks for the feedback. I should probably ignore finalize calls.</body>
  </mail>
  <mail>
    <header>EasyMock 2.5.2 was just released</header>
    <date>Sat Sep 12 19:44:00 CEST 2009</date>
    <body>Hi, Basically a maintenance release with the following changes: However, the second one is a new feature. A lots of people were asking about a way to replay/verify all mocks in one shot. This class meant to help you do that. Have a look to the SupportTest in the samples to know how to use it. I'm looking forward for your feedback. Cheers, Henri</body>
  </mail>
  <mail>
    <header>Re: EasyMock 2.5.2 was just released</header>
    <date>Tue Sep 15 13:28:00 CEST 2009</date>
    <body>Dear Henri, Can EasyMock 2.4 Class Extension (2008-08-30) be used in combination with EasyMock 2.5.2? Its release notes only specify EasyMock 2.4 as a dependency. Kind regards, Martin</body>
  </mail>
  <mail>
    <header>EasyMock 2.5.2 feedback, varargs</header>
    <date>Thu Sep 24 06:17:00 CEST 2009</date>
    <body>I'm having a problem with mocking a method which uses varargs: The trouble is that the varargs are not required to be in a specific order.  So, these two calls are equivalent: My problem is that even if I create my own argument matcher (which matches the varargs Array) like this: then EasyMock will throw an exception like: It seems to do this because the method is (internally) called as indicated above, ie. with 2 separate arguments, instead of just an array.  Both of which are valid for vararg-style methods. Is there any solution for this kind of problem?  We'd prefer not to have to adjust production code to play nicely with tests like this. Best Regards, John Hendrikx</body>
  </mail>
  <mail>
    <header>Re: EasyMock 2.5.2 feedback, varargs</header>
    <date>Thu Sep 24 14:59:00 CEST 2009</date>
    <body>Really what you are trying to pass is a Set, then. You could make your own argument matcher that takes all of the elements in the array, puts them into a Set, then compares the sets for equality. Attention will be needed to what the requirement is that you want to enforce if you have two of the same lunch items (duplicates). Jason</body>
  </mail>
  <mail>
    <header>Re: EasyMock 2.5.2 feedback, varargs</header>
    <date>Fri Sep 25 06:08:00 CEST 2009</date>
    <body>Yes, I created my own argument matcher as I said in my post, however it gives me the following exception when two LunchItems are passed: This is because in the expect call I'm only giving one parameter (my argument matcher which matches against the array you get from a varargs argument).  However, it seems that each LunchItem passed is counted as an argument.  So passing 15 LunchItems would give me: The expect call I'm using looks like this: where aryContentEq will check for the existance of the items without enforcing a certain order. Varargs constructs like this are used fairly commonly to pass options to methods as well, like for example in the new NIO framework, where copyTo() and moveTo() are defined like: Where CopyOption is an enum, allowing you to pass 0 or more options. The order of these is irrelevant.  It is I think not possible to write a correct expect for this with EasyMock at this time. I hope this clarifies it a bit further. --John</body>
  </mail>
  <mail>
    <header>Re: EasyMock 2.5.2 feedback, varargs</header>
    <date>Mon Sep 28 07:43:00 CEST 2009</date>
    <body>Thank you, using a Capture works for me.  Although I'm not 100% sure it is allowed to capture multiple values with a Capture, but it seems to Use it like this: Thanks for the help :) Regards, John Hendrikx</body>
  </mail>
  <mail>
    <header>Re: EasyMock 2.5.1</header>
    <date>Tue Sep 29 10:57:00 CEST 2009</date>
    <body>Will EasyMock Class Extension follow the move to Apache 2 license? Regards, Stevo.</body>
  </mail>
  <mail>
    <header>Matcher &amp;amp; multiple calls</header>
    <date>Thu Oct 01 09:03:00 CEST 2009</date>
    <body>Below is a test I have knocked up that uses its own matcher. I know in this case I could use a standard matcher but in my real code I need a more complicated one. The test passes - tick VG. The issue is that there appears to be an extra call to IArgumentMatcher.matches() method that returns false, and yet the test passes. Tried with  2.4 and 2.5.1 The logger output I get is:   30-09-2009 16:12:23 [main] ERROR - MATCH - expected[aa], actual[aa]   30-09-2009 16:12:23 [main] ERROR - MISMATCH - expected[aa], actual[bb]   30-09-2009 16:12:23 [main] ERROR - MATCH - expected[bb], actual[bb] So the question is why am I getting the MISMATCH line, and have I done something incorrectly ? The test code is: /**  *  */ //test method @Override @Override /** * @see org.easymock.IArgumentMatcher#matches(java.lang.Object) */        mLogger.error("MATCH - expected[" + mExpected + "], actual[" +      mLogger.error("MISMATCH - expected[" + mExpected + "], actual[" + /**     * @see org.easymock.IArgumentMatcher#appendTo(java.lang.StringBuffer)     */ -- Regards Bill Comer blog:</body>
  </mail>
  <mail>
    <header>An idea to simplify EasyMock usage that I've used in my own work</header>
    <date>Sat Nov 07 04:26:00 CET 2009</date>
    <body>Hi, I've used EasyMock quite extensively in my development.  To make it easier for me to use EasyMock, I created one simple class (which acts as a superclass for my tests) that has significantly reduced the amount of code I have to write to use EasyMock. I'd like to share my ideas with you - and will share my code, too, if you think it's worthwhile. Here's a quick before-and-after creating my new class: Before, I'd repeat these familiar EasyMock steps: - Then, in each test method: Now (After), I no longer write step 0.  That's all done within the superclass. Step 3 is now a single method invocation in each of my tests (and it's the same method in every test class).  I no longer write step 5 anymore, either - that's done by the superclass, too. And, the code understands interfaces vs class mock types and uses the EasyMock or classextension implementations as appropriate. I have some ideas on how to make it even simpler than I have so far but haven't needed those features yet. If you think you might be interested, please let me know and I'd be glad to discuss it further with you. Regards, Al</body>
  </mail>
  <mail>
    <header>EasyMockSupport for EasyMock CE</header>
    <date>Wed Nov 11 16:13:00 CET 2009</date>
    <body>Hi, I'm a big fan of my own EasyMockSupport class but was suffering from the lack of class extension support. So, while waiting for EasyMock CE to be delivered, I've put an implementation with class support in the file section ( It's roughly tested but should meet your needs. It sure meets mines. Cheers, Henri</body>
  </mail>
  <mail>
    <header>How to mock the objects which are created by "new" statement in the testing method?</header>
    <date>Thu Nov 12 08:47:00 CET 2009</date>
    <body>hi all, I'm a freshman on EasyMock.  There is a question about how to use EasyMock in our test. First, please look at the example source: /*-----------------------------------------------------------------*/ /*---------------------------------------------------------------*/ Question is: in this case, how can I use EasyMock to mock the class B's object in the A.ma()? ¡ùI'm using EasyMock 1.2, EasyMock 1.2 ClassExtension, J2SE1.4.2_19, JUnit3.8.2 Best regards. Guo</body>
  </mail>
  <mail>
    <header>Re: How to mock the objects which are created by "new" statement in the testing method?</header>
    <date>Thu Nov 12 09:27:00 CET 2009</date>
    <body>2009/11/12 Guo Tianchong &amp;lt;guotc@...&amp;gt;: our test. A.ma()? JUnit3.8.2 Hi Guo, In this case, you can't use any mocking framework to create a mock of class B (as far as I know). The easiest way to do it is to add a parameter of type B to the method A.ma, so the code becomes something like this: ... Then in the production code, you can call and in the test code, you can call something like Of course, mocking a void method doesn't really demonstrate the power of using a mocking framework, but hopefully this will give you a start. HTH, Neil.</body>
  </mail>
  <mail>
    <header>How can I solve this problem about "super" &amp;amp; "this" keywords?</header>
    <date>Thu Nov 19 07:38:00 CET 2009</date>
    <body>hi all, Please look at my case first: /*---------------------------¢­¢­¢­¢­¢­¢­¢­¢­-----------------------------\ ----*/ /*---------------------------¢¬¢¬¢¬¢¬¢¬¢¬¢¬¢¬-----------------------------\ ----*/ Then, I isolated the "invoke()" &amp;amp; "setTarget()" to test "execute()" like this: /*---------------------------¢­¢­¢­¢­¢­¢­¢­¢­-----------------------------\ ----*/ /*---------------------------¢¬¢¬¢¬¢¬¢¬¢¬¢¬¢¬-----------------------------\ ----*/ When I run this testcase, the following error occured: junit.framework.AssertionFailedError Unexpected method call invoke(): ...... ...... ...... But when I deleted the "super" &amp;amp; "this" keywords in execute() method, then this testcase passed. If I can't delete the "super" &amp;amp; "this" keywords, does anybody know how can I solve this problem? Best Regards. Guo</body>
  </mail>
  <mail>
    <header>Re: Cannot throw an IOException on last method called?</header>
    <date>Sun Jun 07 20:48:00 CEST 2009</date>
    <body>In this case I don't agree on the call for refactoring. If order to test the refactored method I should add its signature to the interface, but this would be a typical private (or protected) method. This would seem to me refactoring for the sake of testing...While testing is useful writing code explicitly for testing sometimes isn't. You are absolutely right about the check on the writer. Thanks, I added it. The clearDocumentsIndexCache is related to this method since this method writes the content of the cache to disk and when it's done, the cache is cleared from memory. I do agree though that probably its best place would be in the "normal use case scenario", however this is a business decision. Nothing would restrict this method from being in the finally clause. Its outcomes are just to deep clean a Map and therefore I can't see how this could throw an exception, and even if it did, I'd prefer an exception to be thrown on this activity and leave the writer open than ensuring the writer to close. And in fact the approach that I've always seen in code is just to log a warning when the closure of an input/output stream fails, not to throw an exception. This sounds interesting and exactly what I'd need. Thanks.</body>
  </mail>
  <mail>
    <header>Getting started - documentation</header>
    <date>Wed Jun 10 19:37:00 CEST 2009</date>
    <body>I am deciding beween a few mock frameworks and Easymock is one of them.  However the documentation is really confusing me.  Is there any better example code to look at instead of Collaborator and listener.  Myabe use something simple like a Person class or something realistic like an action class and service?  Seriously my head hurts from looking at all that. Thx</body>
  </mail>
  <mail>
    <header>Newbie Question: Mocking setter methods</header>
    <date>Sat Jul 25 03:13:00 CEST 2009</date>
    <body>I've run into an interesting issue that I can't seem to find an answer for.  I have a method I am trying to test that contains a set method (myObject.setVariable(variable)).  myObject is a mock created in my test. Easymock seems to blow up when I use the mock at the point of the setter being called. Is there a way to indicate to the mock object to accept an input variable when a call is made to a mocked method? Thanks in advance. MiKey</body>
  </mail>
  <mail>
    <header>Re: Newbie Question: Mocking setter methods</header>
    <date>Sat Jul 25 03:49:00 CEST 2009</date>
    <body>Thanks.  I knew I was missing it somehow.  I get the idea now.  Appreciate the wakeup call :)</body>
  </mail>
  <mail>
    <header>Re: AssertionError: Unexpected method call happening in thread?</header>
    <date>Tue Aug 04 20:54:00 CEST 2009</date>
    <body>I think I answered my own question... I understand that once a mocked object is in the "replay" state that any unexpected method call results in an AssertionError.  What I think I can do to work around this is have my Runnable trap the Exception and then allow my test to later use it to assert if any exceptions did in fact occur. I guess it would be cool if EasyMock had a way of "delaying" so to speak AssertionErrors so and then act on any encountered exceptions when you are ready to deal with them.</body>
  </mail>
  <mail>
    <header>Re: HowTo: Record getters, setters in Easymock 1.2</header>
    <date>Fri Aug 14 21:06:00 CEST 2009</date>
    <body>This sounds like the basic EasyMock operation? Are you asking about just mocking get methods of an interface? //run your code -- inf.getSomething() will return 5 the first time it is //called. //If you want to ensure the get was called:</body>
  </mail>
  <mail>
    <header>Re: HowTo: Record getters, setters in Easymock 1.2</header>
    <date>Fri Aug 14 21:22:00 CEST 2009</date>
    <body>2009/8/14 Jason Winnebeck &amp;lt;addr2@...&amp;gt;: //called. You can't do this in 1.2. It doesn't support generics, so the syntax is very different. Rahul, is there any reason you can't update to a more recent version of EasyMock? If you can't update, look at   still using a Java version earlier than Java 5. Also, posting the code that you currently have and including the detailed stack trace of any exception will help us to help you much quicker. Without this, we're taking a stab in the dark... Cofion/Regards, Neil.</body>
  </mail>
  <mail>
    <header>Re: Strange behavior mocking restlet. [2 Attachments]</header>
    <date>Wed Aug 19 19:09:00 CEST 2009</date>
    <body>Wow, that was tricky. - Client extends Uniform - Uniform implement handle(Request request) as a final method - Final methods can't be mocked. Their normal behavior is called - Uniform.handle calls handle(Request request, Response response) - So it's handle(Request request, Response response) that is recorder and it takes 2 parameters - Thus the error since you only pass one matcher You can workaround this by - Using class instrumentation removing the final. - Calling the method with two parameters directly - Mock the method with two params instead (but keep calling the one with one params) Personally, I'll pick the last solution. Cheers, Henri</body>
  </mail>
  <mail>
    <header>Testing anonymous classes</header>
    <date>Tue Aug 25 16:27:00 CEST 2009</date>
    <body>Hi I am using EasyMock for testing some GWT code (google web toolkit). GWT is mostly an asynchronous programming environment for UI.  It has lots of things like ClickHandlers, etc. for buttons, and these are most often setup as anonymous classes. Consider the following snippet: I'm having a hard time figuring out how to test something like this. That is where I'm stuck - it passes an anonymous class as the parameter.  I could make it not be an anonymous class, and instead use a getter method: But this does not work in the test case, b/c I call #getHandler() in the mock before the Presenter ctor is called: so, this means I'd have to make the handler a static reference, and make the #getHandler() method static, but this causes some possible ugly side-effects in my handler implementations. Is there a good way around this problem?</body>
  </mail>
  <mail>
    <header>Re: Testing anonymous classes</header>
    <date>Tue Aug 25 21:01:00 CEST 2009</date>
    <body>Hi, Here it seems your goal is just to make sure a ClickHandler is added. You don't really care which one since it's an inner class and so it's part of the inner implementation of the class. So I think I would just do something like: or // if addClickHandler isn't type to take a ClickHandler in parameter. If you really want to have a look at the final ClickHandler, you can use a capture matcher to get it. Cheers, Henri</body>
  </mail>
  <mail>
    <header>IllegalStateException : no last call on a mock available - why?</header>
    <date>Thu Aug 27 21:36:00 CEST 2009</date>
    <body>The mocked class here is  This promptly throws: java.lang.IllegalStateException: no last call on a mock available at org.easymock.EasyMock.getControlForLastCall(EasyMock.java:202) at org.easymock.EasyMock.expect(EasyMock.java:183) Why?</body>
  </mail>
  <mail>
    <header>Re: IllegalStateException : no last call on a mock available - why?</header>
    <date>Thu Aug 27 22:10:00 CEST 2009</date>
    <body>You're absolutly right. On Thu, Aug 27, 2009 at 11:50 PM, Stephen Duncan</body>
  </mail>
  <mail>
    <header>IllegalStateException when using easymock and maven surefire plugin</header>
    <date>Wed Sep 02 17:17:00 CEST 2009</date>
    <body>My tests all run from within eclipse and from Ant, but I am trying to migrate to Maven and I have a confusing problem. For any test that uses the org.easymock.classextension classes, I get the following stack trace (or similar): java.lang.IllegalStateException: Unknown callback class org.easymock.classextension.internal.ClassProxyFactory$1 at net.sf.cglib.proxy.CallbackUtils.getGenerator(CallbackUtils.java:102) at net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:314) at net.sf.cglib.proxy.Enhancer.createClass(Enhancer.java:278) at org.easymock.classextension.internal.ClassProxyFactory.createProxy(ClassProxyFac\ tory.java:107) at org.easymock.internal.MocksControl.createMock(MocksControl.java:51) at org.easymock.classextension.EasyMock.createMock(EasyMock.java:46) at com.dbo2.pipeline.model.safety.inspections.UpdateInspectionTypeAssociationsTest.\ setUp(UpdateInspectionTypeAssociationsTest.java:53) at junit.framework.TestCase.runBare(TestCase.java:128) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:120) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.apache.maven.surefire.junit.JUnitTestSet.execute(JUnitTestSet.java:213) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(Abstra\ ctDirectoryTestSuite.java:140) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirec\ toryTestSuite.java:127) at org.apache.maven.surefire.Surefire.run(Surefire.java:177) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBoote\ r.java:345) at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1009) Since the ClassProxyFactory is in the stack trace itself, I don't know how it could be missing.  Is the $1 the problem and if so, what can I do about it?</body>
  </mail>
  <mail>
    <header>Re: IllegalStateException when using easymock and maven surefire plugin</header>
    <date>Wed Sep 02 20:36:00 CEST 2009</date>
    <body>That's weird. My guess would be that you are not using the right version of cglib (version 1 might be in the classpath, try mvn dependency:tree to know what you are using). Otherwise, can you tell me the EasyMock version you are using and maybe provide a test case and a pom? Thanks, Henri org.easymock.classextension.internal.ClassProxyFactory.createProxy(ClassProxyFac\ tory.java:107) com.dbo2.pipeline.model.safety.inspections.UpdateInspectionTypeAssociationsTest.\ setUp(UpdateInspectionTypeAssociationsTest.java:53) sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:25) org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(Abstra\ ctDirectoryTestSuite.java:140) org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirec\ toryTestSuite.java:127) sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:25) org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBoote\ r.java:345)</body>
  </mail>
  <mail>
    <header>Re: IllegalStateException when using easymock and maven surefire plugin</header>
    <date>Wed Sep 02 21:15:00 CEST 2009</date>
    <body>Yes. Use cglib 2.1_3. Having both can really mess the things up. org.easymock.classextension.internal.ClassProxyFactory.createProxy(ClassProxyFac\ tory.java:107) com.dbo2.pipeline.model.safety.inspections.UpdateInspectionTypeAssociationsTest.\ setUp(UpdateInspectionTypeAssociationsTest.java:53) sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:25) org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(Abstra\ ctDirectoryTestSuite.java:140) org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirec\ toryTestSuite.java:127) sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:25) org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBoote\ r.java:345) org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1009)</body>
  </mail>
  <mail>
    <header>Re: Question about IMocksControl.verify()</header>
    <date>Thu Sep 03 21:17:00 CEST 2009</date>
    <body>Hi, It is impossible for EasyMock to expect a method that isn't recorded. So it must be. One possibility is that it's hidden in a final or private method that can't be mocked. Another which is that there's some multithreading taking place. I suggest to upgrade to EasyMock 2.5.x which will give you a better error message and/or result. If it still not working, I'll need a test case to have a look. Cheers, Henri</body>
  </mail>
  <mail>
    <header>Re: Question about IMocksControl.verify()</header>
    <date>Thu Sep 03 22:57:00 CEST 2009</date>
    <body>I should have told you. Naming mocks can be really useful. However, this can't be caused by not recording anything. It could be that finalize is recorded because the object is recycled during recording phase... When the mock control is verified it might occurs. But that's quite unlikely since the mock should be referenced in some way be the mock controls. Still, finalize needs to be implemented somewhere.</body>
  </mail>
  <mail>
    <header>Re: Question about IMocksControl.verify()</header>
    <date>Fri Sep 04 19:26:00 CEST 2009</date>
    <body>Good to know. There's no WeakReference from as far as I remember. Since you solved your issue, I'll keep this as a mystery for now. Cheers, Henri</body>
  </mail>
  <mail>
    <header>Re: Easy Mock on Java EE Application Server</header>
    <date>Wed Apr 22 08:00:00 CEST 2009</date>
    <body>I uploaded the Example Application on the Files-area. "EasymockEjb.zip". Check out the Javadoc for "EasymockEjbTest\src\easymocktest\EasyMockTest.java". It contains the prerequisites for how to deploy the EAR and runt the TestCase. Erik com.sun.corba.ee.impl.logging.ORBUtilSystemException.valuehandlerReadException(O\ RBUtilSystemException.java:8428) com.sun.corba.ee.impl.encoding.CDRInputStream_1_0.readRMIIIOPValueType(CDRInputS\ tream_1_0.java:973) com.sun.corba.ee.impl.encoding.CDRInputStream_1_0.read_value(CDRInputStream_1_0.\ java:1052) com.sun.corba.ee.impl.encoding.CDRInputStream.read_value(CDRInputStream.java:475\ ) com.sun.corba.ee.impl.io.IIOPInputStream.inputObjectField(IIOPInputStream.java:1\ 974) com.sun.corba.ee.impl.io.IIOPInputStream.inputClassFields(IIOPInputStream.java:2\ 199) com.sun.corba.ee.impl.io.IIOPInputStream.inputObject(IIOPInputStream.java:1211) sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:25)</body>
  </mail>
  <mail>
    <header>Re: Easy Mock on Java EE Application Server</header>
    <date>Mon Apr 27 08:20:00 CEST 2009</date>
    <body>Thank you Henri, Lots of valuable information. Fun to see that you made it work on WebLogic. We tried it on the new JDK (update 14) but the problem remains. We have initiated contact with people on Sun to see if we can track the problem together. I'll update this thread with any further information. What do you think about our usage of easymock? Do you beleive that EJB support is something to add? As a first step one could include deployment of the delegator and upload/download of mock objects as part of the framework. /Erik com.sun.corba.ee.impl.logging.ORBUtilSystemException.valuehandlerReadException(O\ RBUtilSystemException.java:8428) com.sun.corba.ee.impl.encoding.CDRInputStream_1_0.readRMIIIOPValueType(CDRInputS\ tream_1_0.java:973) com.sun.corba.ee.impl.encoding.CDRInputStream_1_0.read_value(CDRInputStream_1_0.\ java:1052) com.sun.corba.ee.impl.encoding.CDRInputStream.read_value(CDRInputStream.java:475\ ) com.sun.corba.ee.impl.io.IIOPInputStream.inputObjectField(IIOPInputStream.java:1\ 974) com.sun.corba.ee.impl.io.IIOPInputStream.inputClassFields(IIOPInputStream.java:2\ 199) com.sun.corba.ee.impl.io.IIOPInputStream.inputObject(IIOPInputStream.java:1211) sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:25)</body>
  </mail>
  <mail>
    <header>Re: EasyMock 2.5</header>
    <date>Wed Apr 29 05:08:00 CEST 2009</date>
    <body>Hi Henri, I submitted a patch to improve partial mocking some time ago, well over a year now. It allows methods to have expectations set on them whilst in record mode simply by calling the method. The patch should still be accessible in the files area. Will you accept this patch for 2.5? Regards Ben -- *Ben Hutchison Senior Developer * Level 2 476 St Kilda Road Melbourne VIC 3004 T 613 8807 5252 | F 613 8807 5203 | M 0423 879 534 |</body>
  </mail>
  <mail>
    <header>Re: Easy Mock on Java EE Application Server</header>
    <date>Thu Apr 30 11:25:00 CEST 2009</date>
    <body>On the way trying to track the problem with the Sun-guys you could maybe help us with some information. We have a ClassCastException between following classes: - org.easymock.internal.ObjectMethodsFilter - org.easymock.internal.MethodSerializationWrapper Are the classes related in some way? If they are we maybe are facing a ClassLoader problem. /Erik com.sun.corba.ee.impl.logging.ORBUtilSystemException.valuehandlerReadException(O\ RBUtilSystemException.java:8428) com.sun.corba.ee.impl.encoding.CDRInputStream_1_0.readRMIIIOPValueType(CDRInputS\ tream_1_0.java:973) com.sun.corba.ee.impl.encoding.CDRInputStream_1_0.read_value(CDRInputStream_1_0.\ java:1052) com.sun.corba.ee.impl.encoding.CDRInputStream.read_value(CDRInputStream.java:475\ ) com.sun.corba.ee.impl.io.IIOPInputStream.inputObjectField(IIOPInputStream.java:1\ 974) com.sun.corba.ee.impl.io.IIOPInputStream.inputClassFields(IIOPInputStream.java:2\ 199) com.sun.corba.ee.impl.io.IIOPInputStream.inputObject(IIOPInputStream.java:1211) sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:25)</body>
  </mail>
  <mail>
    <header>Re: Array comparison weirdness</header>
    <date>Mon May 04 21:41:00 CEST 2009</date>
    <body>Hello Stefan, This should not work! The problem here is that arr1 and arr2 are equal. If you use expectLastCall().atLeastOnce() on the first expectation, the second expectation would never been used, as the first one will always match for this parameter. So EasyMock would always fail, as the expectations are used up in the order of definition. To prevent this from happening, EasyMock fails with an exception with the (maybe too cryptic message) 'last method called on mock already has a non-fixed count set'. Hope that helps, Tammo</body>
  </mail>
  <mail>
    <header>Re: Array comparison weirdness</header>
    <date>Mon May 04 21:53:00 CEST 2009</date>
    <body>Hello Stefan, it may make sense overriding equals(), while hashCode() from the superclass should be fine (it throws an exception ;)). But I find it hard to think of a failing test in this scenario which is driven by a requirement. Thanks for your feedback, Tammo</body>
  </mail>
  <mail>
    <header>Mocking Super Methods</header>
    <date>Wed May 06 17:09:00 CEST 2009</date>
    <body>I'm trying to test a class.  One of the class's methods makes a call to the "super" version of the same method.  Actually, another person details a perfect example here:  I have been unable to figure out how to mock this super call.  I also share the same concerns as the person who has posted in the comments in that we're simply moving the testing gap to another location and not actually testing expectated behavior (I'm trying to get to 100% coverage). Does EasyMock provide a facility to get around this? Thanks! Leo</body>
  </mail>
  <mail>
    <header>Re: Mocking Super Methods</header>
    <date>Wed May 06 19:19:00 CEST 2009</date>
    <body>Ummm...I guess I could use composition.  Another (framework) class is expecting a class that inherits from the super class. I suppose I could inherit from that super class and then inject the same super class, but that feels very hack-ish to me. Don't get me wrong:  I'm all about composition and injection vs inheritance, but this inheritance is being pushed upon us in this case.  I was just hoping there was some fancy EasyMock partial mock I could create. I've tried mocking the method with a ThisClass.class.getSuperclass().getMethod("methodName"), but the super.methodName method isn't recognized during execution.</body>
  </mail>
  <mail>
    <header>Re: Mocking Super Methods</header>
    <date>Thu May 07 14:36:00 CEST 2009</date>
    <body>Assuming I'm using the classextensions library, would I be able to then? Doesn't that latter approach just move the gap in coverage to another location? I still can't test the behavior in innerFoo().</body>
  </mail>
  <mail>
    <header>Re: Mocking Super Methods</header>
    <date>Wed May 13 02:07:00 CEST 2009</date>
    <body>Ive been in your situation before. My sympathies. Powermock is a good option for you. Its built over Easymock. -Ben "super" version of the same method.  Actually, another person details a perfect example here: the same concerns as the person who has posted in the comments in that we're simply moving the testing gap to another location and not actually testing expectated behavior (I'm trying to get to 100% coverage). -- *Ben Hutchison Senior Developer * Level 2 476 St Kilda Road Melbourne VIC 3004 T 613 8807 5252 | F 613 8807 5203 | M 0423 879 534 |</body>
  </mail>
  <mail>
    <header>Re: Mocking Super Methods</header>
    <date>Wed May 13 13:00:00 CEST 2009</date>
    <body>This looks like it might do the trick.  I'll give it a look.  Thanks! "super" version of the same method.  Actually, another person details a perfect example here: the same concerns as the person who has posted in the comments in that we're simply moving the testing gap to another location and not actually testing expectated behavior (I'm trying to get to 100% coverage).</body>
  </mail>
  <mail>
    <header>EasyMock 2.5</header>
    <date>Sun May 24 13:03:00 CEST 2009</date>
    <body>Hello everyone, I'm extremely proud to announce that EasyMock 2.5 was just delivered. It contains a lots of features and improvements. Mostly requested by you. I also did the version 2.4 post mortem and decided that it has been a really bad idea to check thread-safety by default. So it's not anymore. However, mocks are now thread-safe by default. But adding a property system, I made sure you can change the default easily in case your tests are expecting on different set of defaults. I'm really looking forward to get your feedback (good or bad) on this one. Especially about thread-safety and deadlocking. But also Capture and error messages. I should be available in the maven central repository after the next rsync. Also, EasyMock jar is now an OSGi bundle. Below, the release notes and change log. For details on the new features, see the documentation. Regards, Henri --------------------------------------------------------------------------------\ ------------------------- Notes: This release is meant to provide backward compatibility with version 2.3 and 2.4. However the default behavior is in the middle - No thread-safety check by default (like in 2.3) - Thread-safe (like in 2.4) You can change these two by setting properties to change the default or calling specific methods for a given mock (checkIsUsedInOneThread and makeThreadSafe). The capture was also greatly improves to be more user-friendly and to have new possibilities. The default behavior is quite close to the one in 2.4 but still might break some of your tests if you worked-around some 2.4 issues. Error messages were improved from user suggestions. A new refactoring safe way to use getCurrentArgument called andDelegateTo was added. And finally, the jar is now an OSGi bundle. See documentation for details on all these features. --------------------------------------------------------------------------------\ -------------------- Changes: easymock.enableThreadSafetyCheckByDefault properties provide backward compatibility (2169027) delegated answer to help debugging tests (2771518)</body>
  </mail>
  <mail>
    <header>Roadmap</header>
    <date>Sun May 24 13:13:00 CEST 2009</date>
    <body>One last thing For those who wonder, the next steps are: - Move EasyMock from MIT to Apache license (for complex legal reasons). So version 2.5.1 will be under Apache - EasyMock CE 2.5 (later this year probably). Mostly to include all your requests. - EasyMock CE will also go under Apache (and as a matter of fact, Objenesis too) ... and of course, quick maintenance releases if needed... Cheers, Henri</body>
  </mail>
  <mail>
    <header>Cannot throw an IOException on last method called?</header>
    <date>Sun Jun 07 15:34:00 CEST 2009</date>
    <body>Hi all, I've got the following method which I want to test for failures: [code] writer = new BufferedWriter(new FileWriter(new File(indexHelper NavigableMap&amp;lt;Long, IIndexedDocument&amp;gt; documentIndex = new ConcurrentSkipListMap&amp;lt;Long, IIndexedDocument&amp;gt;( [/code] And the following test: [code] @Test (expected = FidoIndexerError.class) EasyMock.expect(indexHelperMock.getDocumentIndexCachePath()).andThrow( [/code] I mocked the indexHelper and I instructed it to throw an IOException, so that the catch block gets invoked and a new FidoIndexerError exception is called. However when running this test I get the following: [stackTrace] java.lang.IllegalArgumentException: last method called on mock cannot throw java.io.IOException at org.easymock.internal.MocksControl.andThrow(MocksControl.java:98) at uk.co.jemos.fido.unit.model.TopKRepositoryTest.testDrainDocumentIndexCacheToDisk\ WithNonExistentFile(TopKRepositoryTest.java:101) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.junit.internal.runners.TestMethod.invoke(TestMethod.java:59) at org.junit.internal.runners.MethodRoadie.runTestMethod(MethodRoadie.java:98) at org.junit.internal.runners.MethodRoadie$2.run(MethodRoadie.java:79) at org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters(MethodRoadi\ e.java:87) at org.junit.internal.runners.MethodRoadie.runTest(MethodRoadie.java:77) at org.junit.internal.runners.MethodRoadie.run(MethodRoadie.java:42) at org.junit.internal.runners.JUnit4ClassRunner.invokeTestMethod(JUnit4ClassRunner.\ java:88) at org.junit.internal.runners.JUnit4ClassRunner.runMethods(JUnit4ClassRunner.java:5\ 1) at org.junit.internal.runners.JUnit4ClassRunner$1.run(JUnit4ClassRunner.java:44) at org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:27) at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:37) at org.junit.internal.runners.JUnit4ClassRunner.run(JUnit4ClassRunner.java:42) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReferen\ ce.java:45) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\ .java:460) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\ .java:673) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java\ :386) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.jav\ a:196) [/stackTrace] Is there a reason why I shouldn't be able to instruct the mocker to throw an IOException if this is the only thing done by the test? Regards, M.</body>
  </mail>
  <mail>
    <header>Re: Cannot throw an IOException on last method called?</header>
    <date>Sun Jun 07 19:56:00 CEST 2009</date>
    <body>Ok, but in this case how could I simulate an IOException from within the method the write operation may generate an IOException. I'd like to simulate that, but BufferedWriter does not implement an interface. So what should I do?</body>
  </mail>
  <mail>
    <header>Capture and Answer</header>
    <date>Tue Mar 10 02:53:00 CET 2009</date>
    <body>I'm pleased to see that the recent easymock included a Capture option for parameters.  Sometimes I'm lazy in a way that makes this quite useful.  I have a very similar class that I implemented for 2.3. There are few differences, but some of these might be worth considering. Major differences: - I do type checking at runtime in the matcher, so instantiation requires passing a Class&amp;lt;? extends T&amp;gt;.  This is mainly for providing a nice toString(), but it also allows for more stringent checks. - I see no need for the static method EasyMock.capture().  I put this method on the actual capture object. - The argument matcher can be used multiple times, but each time after the first it asserts that the same object has been passed to it. - Have the Capture class implement IAnswer&amp;lt;T&amp;gt;, which lets you provide a response without actually running the test code.  I found this useful and even necessary in one or two places (such as cases like below). This gives code like: BTW, the toString() of Capture&amp;lt;T&amp;gt; uses: String.valueOf(value) might be a better choice. Regards, Martin</body>
  </mail>
  <mail>
    <header>Re: Complete mocking of interface</header>
    <date>Fri Mar 13 14:12:00 CET 2009</date>
    <body>You need to create mocks for ICar and IWheels and IEngine: If you are doing this often, or have to go down more than one level (since ICar is a factory), then you are probably violating "Law of Demeter" which basically says don't pass A to B, when the only thing B does is give A to C. If you are finding you have to mock too many levels, you are probably confusing the responsibility of business logic with the responsibility of object creation in your code. Instead of your code taking ICar just to get IWheels, consider having it take IWheels instead. Jason</body>
  </mail>
  <mail>
    <header>Re: Complete mocking of interface</header>
    <date>Sat Mar 14 05:01:00 CET 2009</date>
    <body>Hi Jason, Thanks a lot for your response. 1. I can do what you have mentioned in the code. This is normal way of mocking. But i don't want to do that, but i am asking if there is a easy way to provide the mock for all the method that return an interface. In my case for the wheels and Engine since they interface themselves I understand the law of demeter, unfortunately i depend on an external api and don't have a control over it and we have to live with  it. Said that we cannot go without unit testing our code. The problem with above example is i have to create mock for the engine and the wheel and set it as an expectation on the mock car. There are many such instances where i want all the mock to be got one shot, else it is too much of effort to get it done. Is there a better way of doing this other than doing this with reflection where i identify each of the interface and set the mock of these in the main interface say here the ICar mock. My question is, has anyone faced such situation and have come up with a better solution to this? Thanks, Vijay Venkataraman</body>
  </mail>
  <mail>
    <header>Re: Re: Complete mocking of interface</header>
    <date>Sat Mar 14 13:14:00 CET 2009</date>
    <body>Hi, There was some work on this. To create mocks using reflection. You can have a look on the archive of this mailing list. One was about using a @Mock annotation on methods to create a mock. But I'm still not sure I like it. It puts a test annotation on business code. Cheers, Henri On Sat, Mar 14, 2009 at 6:01 AM, vijay.venkataraman</body>
  </mail>
  <mail>
    <header>Re: Re: Complete mocking of interface</header>
    <date>Sat Mar 14 19:06:00 CET 2009</date>
    <body>mocking. But i don't want to do that, but i am asking if there is a easy way to provide the mock for all the method that return an interface. In my case for the wheels and Engine since they interface themselves don't have a control over it and we have to live with  it. Said that we cannot go without unit testing our code. wheel and set it as an expectation on the mock car. There are many such instances where i want all the mock to be got one shot, else it is too much of effort to get it done. where i identify each of the interface and set the mock of these in the main interface say here the ICar mock. solution to this? The way I posted is the only way I know of in EasyMock. I'm not sure another solution is even possible without using reflection. I imagine that EasyMock is using reflection under the hood anyway with proxy interfaces. I'm sure you could make a utility method createDeepMocks( Whatever.class ) such that you make a mock for all interfaces using reflection. You're faced with this hard problem but eliminated all of the tools that can be used to solve this. If the API is bad, another common approach is to write something around it to "refactor" the bad API. For example if you have an API that is untestable because it forces you to use globals (I've heard old-style JSP is this way), you minimize the "untestable" code and write a class that does the absolute minimum amount of work with the bad API (singletons/globals) and delegates it to testable code, and use techniques such as code review and system tests to address the "untestable" code. Jason</body>
  </mail>
  <mail>
    <header>mock legacy class?</header>
    <date>Sun Mar 15 22:48:00 CET 2009</date>
    <body>Hi! I am working on EMF/CDO and I test a custom component we have in our transport framework (net4j). I therefore tried to mock ByteBuffer (java.nio) without luck for now. What I get for the moment is a cglib instrumented class (I see that in the toString() ouput), but none of the methods are mocked - all calls just get to the original implementation. I guess cglib does not mock that class correctly. Do I miss something? I'd appreciate any hints a lot! Thanks in advance. Cheers André</body>
  </mail>
  <mail>
    <header>Re: mock legacy class?</header>
    <date>Sun Mar 15 23:10:00 CET 2009</date>
    <body>Hi, The problem comes from methods in the Buffer class. Some are final. EasyMock can't mock final methods since it can't override them. The solution is to remove the final with class instrumentation but I'm not sure it can be done on java.* packages. But it's probably easier to use a real ByeBuffer no? Cheers, Henri On Sun, Mar 15, 2009 at 11:48 PM, andre.dietisheim</body>
  </mail>
  <mail>
    <header>Re: mock legacy class?</header>
    <date>Sun Mar 15 23:50:00 CET 2009</date>
    <body>Hi Henri thanks for your ultrafast reply! ;-) Yep, I thought that this might be the reason (for ex. position()). I would have used the original ByteBuffer in normal circumstances. The Test I write wants to ensure that the ByteBuffer user code does the right calls in the right moment (multi-threading). That's the main motivation behind this test and the main reason for not having viable alternatives (I could rewrite the user code to use a delegate, but that's not really a good choice). I guess I'll have to additionally take something like JMockit for those cases. Thanks + Cheers André</body>
  </mail>
  <mail>
    <header>Re: Testing the order of execution of mock objects</header>
    <date>Mon Mar 23 01:56:00 CET 2009</date>
    <body>Use the IMocksControl. See the section "Checking Method Call Order Between Mocks" in the documentation:  However, if you are really using EasyMock 1.1, that is far older than I've ever seen so maybe it doesn't have the IMocksControl. In fact, 1.1 isn't even listed on the site. I don't see this section in the 1.2 docs (the oldest listed), so maybe you might need to upgrade to use that feature. Jason</body>
  </mail>
  <mail>
    <header>Birthday Please</header>
    <date>Sun Mar 29 09:11:00 CEST 2009</date>
    <body>Hello Click on the link below and please enter your birthday for me.  It will take less than one minute.  Thank You, Pankaj</body>
  </mail>
  <mail>
    <header>Re: Nice Mocks - but not too nice</header>
    <date>Tue Mar 31 20:44:00 CEST 2009</date>
    <body>You can achieve this by using "andStubReturn" or "asStub" on the mock:  expectLastCall().asStub(); //call 0 or more times, like nice mock The main (only?) difference between nice mock and standard mock is that by default every method is like "asStubReturn"/"asStub" by default no a nice mock, and on standard mock the default is that any calls mean an error. To set which methods you care about (and how you care about them) you use the normal record and replay functionality. Note that the standard mock is not the same as a "strict" mock, which additionally checks for the order of the calls. Jason</body>
  </mail>
  <mail>
    <header>IllegalStateException: missing behaviour error- but have expect and replay setup</header>
    <date>Mon Apr 06 03:00:00 CEST 2009</date>
    <body>G'day all. I am getting a "missing behavior definition for the preceeding method call getDataServerName()" exception on some of my tests - and I am tearing my hair out trying to solve it...  I suspect it is classpath related, but cannot nail it.  Working under eclipse (Run-As), but not under ant (commandline). Using Eclipse Europa - tests work. Using commandline ant test target - tests fail. Using ivy to manage dependances. Java 1.5 (cannot upgrade as companion product does not support 1.6 yet), ant 1.7.0 and jUnit 4.1 Was using 2.3 with 2.2.2 Class Extensions - but have upgraded this morning to eliminate that. Have added the EasyMock jars into the ant libs dir too - jic. An edited version of some of the classpath is at the end. Test Case details (pieces).... @Test Stacktrace getDataServerName() preceeding method call getDataServerName() org.easymock.internal.MockInvocationHandler.invoke(MockInvocationHandler.java:30\ ) org.easymock.internal.ObjectMethodsFilter.invoke(ObjectMethodsFilter.java:61) org.easymock.classextension.internal.ClassProxyFactory$1.intercept(ClassProxyFac\ tory.java:79) com.calypso.tk.service.DSConnection$$EnhancerByCGLIB$$f3fce13.getRemoteBO(&amp;lt;gener\ ated&amp;gt;) au.com.nabCapital.tk.bo.document.MQSeriesGatewayFaxPDFDocumentSender.handleError\ (MQSeriesGatewayFaxPDFDocumentSender.java:342) au.com.nabCapital.tk.bo.document.MQSeriesGatewayFaxPDFDocumentSender.&amp;lt;init&amp;gt;(MQSe\ riesGatewayFaxPDFDocumentSender.java:120) au.com.nabCapital.tk.bo.document.MQSeriesGatewayFaxPDFDocumentSenderTest.testMQS\ eriesGatewayFaxPDFDocumentSender(MQSeriesGatewayFaxPDFDocumentSenderTest.java:18\ 7) The call to the method in question is within the constructor where initialisation is taking place. When there is a failure (this particular test case) it logs the problem for intervension, disables the facility within the application then completes. Have also tried expect(mockDS.getDataServerName()).andReturn("test"); and expect(mockDS.getDataServerName()).andReturn("test").anyTimes(); without success. mockDS is using the classExtensions, while mockBO is using the Interface mechanism.  The stack is thrown at the call where mockBO is used. Almost like it is not picking up the first expect() call. This normally just works which is why this is so frustrating!!! ANY help would be greatly appreciated...Thanks...Andrew Classpath extract. ;\other\Tidy\Tidy-jTidy.r7.jar ;\other\core-renderer\core-renderer-8.pre2.jar ;\other\itext-paulo\itext-paulo-155.jar ;\other\jaxen\jaxen-1.1.1.jar ;\other\jdom\jdom-1.1.jar ;\other\jms\com.ibm.mq-6.jar ;\other\jms\com.ibm.mqjms-6.jar ;\other\jms\commonservices-6.jar ;\other\jms\dhbcore-6.jar ;\other\jms\jms-1.1.jar ;\other\jms\jta-6.jar ;\other\jms\tibcrypt-4.4.2.jar ;\other\jms\tibjms-4.4.2.jar ;\other\xalan\xalan-2.6.0.jar ;\other\xml-apis\xml-apis-2.6.0.jar ;\internal\cib-database\cib-database-1.5.3.jar ;\internal\cib-exception\cib-exception-1.0.1.jar ;\internal\cib-jms\cib-jms-1.4.9.jar ;\internal\cib-message\cib-message-1.3.2.jar ;\internal\helpers\helpers-2.1.1.33.jar ;\internal\market_data\market_data-2.1.2.16.jar ;\apache\commons-beanutils-core\commons-beanutils-core.jar ;\apache\commons-collections\commons-collections-3.2.1.jar ;\apache\commons-configuration\commons-configuration-1.5.jar ;\apache\commons-dbcp\commons-dbcp-1.2.1.jar ;\apache\commons-digester\commons-digester-1.8.jar ;\apache\commons-lang\commons-lang-2.4.jar ;\apache\commons-logging\commons-logging-1.1.1.jar ;\apache\commons-pool\commons-pool-1.2.jar ;\apache\log4j\log4j-1.2.8.jar ;\escc\dbcommand\dbcommand-1.0.3a.jar ;\internal\test_helpers\test_helpers-2.1.1.3.jar ;\sun\connector-api\connector-api-1.5.jar ;\sybase\jconn2\jconn2-5.5.0.jar ;\testing\cglib-nodep\cglib-nodep-2.1_2.jar ;\testing\easymock\easymock-2.4.jar ;\testing\easymockclassextension\easymockclassextension-2.4.jar ;\testing\jmockit\hibernate3emul-jmockit-0.85.jar ;\testing\jmockit\jmockit-0.85.jar ;\testing\jmockit\jmockit-asm2-0.85.jar ;...</body>
  </mail>
  <mail>
    <header>Re: IllegalStateException: missing behaviour error- but have expect and replay setup</header>
    <date>Wed Apr 15 05:51:00 CEST 2009</date>
    <body>Henri Thanks for your response. Trying to put together something to send you and stumbled on the answer. When I tried to run just the single test class that was failing, it showed as passing...  But failed when run with the other test classes. Investigated a little more and for some reason (person who set our original ant project has moved on), they have the ant / jUnit standard for fork.mode to perBatch.  Changed this to perTest inline with your comment about threading and now everything is passing. Strangely, only this particular test class is acting this way - works fine in other areas of our code with perBatch. Again, thanks for your assistance....Andrew</body>
  </mail>
  <mail>
    <header>Easy Mock on Java EE Application Server</header>
    <date>Wed Apr 15 08:11:00 CEST 2009</date>
    <body>Hi, We are trying to utilize the Serialization benefits of version 2.4 but we fail. We have written JUnit tests in eclipse towards a remote EJB component on a Java EE Application Server (GlassFish). We wish to put expectations on the EJB component's dependencies using EasyMock. After setting expectations and replaying the EasyMock object we upload it to the Java EE server (using Remote EJB). Then we invoke the test method and let it process the request towards the uploaded EasyMock object. Then we download the EasyMock object again and finally we verify it. We fail deserializing the object due to a ClassCastException (during upload). We don't get this exception if we don't add any expectations to the object before uploading it. javax.ejb.EJBException: nested exception is: java.rmi.MarshalException: CORBA MARSHAL 1398079699 Maybe; nested exception is: org.omg.CORBA.MARSHAL:   vmcid: SUN  minor code: 211 completed: Maybe com.sun.corba.ee.impl.logging.ORBUtilSystemException.valuehandlerReadException(O\ RBUtilSystemException.java:8428) com.sun.corba.ee.impl.encoding.CDRInputStream_1_0.readRMIIIOPValueType(CDRInputS\ tream_1_0.java:973) com.sun.corba.ee.impl.encoding.CDRInputStream_1_0.read_value(CDRInputStream_1_0.\ java:1052) com.sun.corba.ee.impl.encoding.CDRInputStream.read_value(CDRInputStream.java:475\ ) com.sun.corba.ee.impl.io.IIOPInputStream.inputObjectField(IIOPInputStream.java:1\ 974) com.sun.corba.ee.impl.io.IIOPInputStream.inputClassFields(IIOPInputStream.java:2\ 199) com.sun.corba.ee.impl.io.IIOPInputStream.inputObject(IIOPInputStream.java:1211) ................ Caused by: java.lang.ClassCastException: org.easymock.internal.ObjectMethodsFilter cannot be cast to org.easymock.internal.MethodSerializationWrapper sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:25) I have a couple questions. - Do anyone have an idea of what are causing my problem? - Have anyone considered (or maybe tried) this way of using of EasyMock? - Is it in the roadmap to enable EasyMock support for Remote EJB interfaces on a Java EE server?</body>
  </mail>
  <mail>
    <header>Re: Easy Mock on Java EE Application Server</header>
    <date>Mon Apr 20 13:34:00 CEST 2009</date>
    <body>Hi Henry, First I want you to know that I have tried serialize/deserialize to/from file and that seams to work well. It sounds strange to me that deserializing the object on an App Server leads to ClassCastException while deserializing in a Java Client env works fine. However, that seams to be the case here... Here is my test case: Note that all interface ending with "Remote" is remote interfaces refering to EJBs on an App Server. We run our EJBs on GlassFish. If you want me to send my example application (ear, ejb &amp;amp; client jar) as well, let me know how I can do that. Thanks, /Erik com.sun.corba.ee.impl.logging.ORBUtilSystemException.valuehandlerReadException(O\ RBUtilSystemException.java:8428) com.sun.corba.ee.impl.encoding.CDRInputStream_1_0.readRMIIIOPValueType(CDRInputS\ tream_1_0.java:973) com.sun.corba.ee.impl.encoding.CDRInputStream_1_0.read_value(CDRInputStream_1_0.\ java:1052) com.sun.corba.ee.impl.encoding.CDRInputStream.read_value(CDRInputStream.java:475\ ) com.sun.corba.ee.impl.io.IIOPInputStream.inputObjectField(IIOPInputStream.java:1\ 974) com.sun.corba.ee.impl.io.IIOPInputStream.inputClassFields(IIOPInputStream.java:2\ 199) com.sun.corba.ee.impl.io.IIOPInputStream.inputObject(IIOPInputStream.java:1211) sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\ a:25)</body>
  </mail>
</mails>

