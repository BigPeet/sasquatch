<?xml version="1.0" encoding="UTF-8"?>
<mails>
  <mail>
    <header>Almost there just need a little more help...</header>
    <body>Hi All,   I am currently using JAX-WS and have been working on using JAX-RS using Jersey and Apache Http Client. I have gotten requests to work between between my client and jax-rs service. When I tried in an environment where NTLM is used I could not get my http requests to go through the network. Now I remember having to work through this with JAX-WS but I am not sure what to get http client to work using NTLM. What I want to have happen is the first time I try to connect using apache http client I want a dialog to show asking for login/password and after that is done be able to create requests that go all the way through to my remote server running my web services.   So how can I do that? Is there an example somewhere on how to make it work that way without a lot of coding?   Thanks for the help. -Tony</body>
  </mail>
  <mail>
    <header>Re: Almost there just need a little more help...</header>
    <body>I did find an example called  ClientAuthentication but it looks like it assumes you always have to authenticate but I only want to do that if needed. So if in a coffee shop where NTLM is not needed for example I do not want to do that but if in a location where NTLM is needed I do want to do the call httpclient.getCredentialsProvider().setCredentials().   Thanks for the advice. -Tony Subject: Almost there just need a little more help... To: httpclient-users@hc.apache.org Date: Monday, December 31, 2012, 8:47 PM Hi All,   I am currently using JAX-WS and have been working on using JAX-RS using Jersey and Apache Http Client. I have gotten requests to work between between my client and jax-rs service. When I tried in an environment where NTLM is used I could not get my http requests to go through the network. Now I remember having to work through this with JAX-WS but I am not sure what to get http client to work using NTLM. What I want to have happen is the first time I try to connect using apache http client I want a dialog to show asking for login/password and after that is done be able to create requests that go all the way through to my remote server running my web services.   So how can I do that? Is there an example somewhere on how to make it work that way without a lot of coding?   Thanks for the help. -Tony</body>
  </mail>
  <mail>
    <header>Re: Almost there just need a little more help...</header>
    <body>Ok I found his example that might almost do what I need but I want the user id and password coming from a popup dialog like the one I have seen coming from Metro (JAX-WS).       client.getState().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(user.getUsername(), I will keep looking. -Tony Subject: Re: Almost there just need a little more help... Date: Monday, December 31, 2012, 8:58 PM I did find an example called  ClientAuthentication but it looks like it assumes you always have to authenticate but I only want to do that if needed. So if in a coffee shop where NTLM is not needed for example I do not want to do that but if in a location where NTLM is needed I do want to do the call httpclient.getCredentialsProvider().setCredentials().   Thanks for the advice. -Tony Subject: Almost there just need a little more help... To: httpclient-users@hc.apache.org Date: Monday, December 31, 2012, 8:47 PM Hi All,   I am currently using JAX-WS and have been working on using JAX-RS using Jersey and Apache Http Client. I have gotten requests to work between between my client and jax-rs service. When I tried in an environment where NTLM is used I could not get my http requests to go through the network. Now I remember having to work through this with JAX-WS but I am not sure what to get http client to work using NTLM. What I want to have happen is the first time I try to connect using apache http client I want a dialog to show asking for login/password and after that is done be able to create requests that go all the way through to my remote server running my web services.   So how can I do that? Is there an example somewhere on how to make it work that way without a lot of coding?   Thanks for the help. -Tony</body>
  </mail>
  <mail>
    <header>Re: Almost there just need a little more help...</header>
    <body>Ok maybe this is not about NTLM but instead finding the proxy. I get these connot connect then retry verbage when running from within a company. So maybe it can not find the proxy? I tried some solutions but none worked so far because I am using HttpClient(cm) in order to use the multithreaded connection manager but the examples I have found seem to want only DefaultHttpClient.   Any suggestions?   Thks, Tony Subject: Re: Almost there just need a little more help... Date: Monday, December 31, 2012, 9:17 PM Ok I found his example that might almost do what I need but I want the user id and password coming from a popup dialog like the one I have seen coming from Metro (JAX-WS).       client.getState().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(user.getUsername(), I will keep looking. -Tony Subject: Re: Almost there just need a little more help... Date: Monday, December 31, 2012, 8:58 PM I did find an example called  ClientAuthentication but it looks like it assumes you always have to authenticate but I only want to do that if needed. So if in a coffee shop where NTLM is not needed for example I do not want to do that but if in a location where NTLM is needed I do want to do the call httpclient.getCredentialsProvider().setCredentials().   Thanks for the advice. -Tony Subject: Almost there just need a little more help... To: httpclient-users@hc.apache.org Date: Monday, December 31, 2012, 8:47 PM Hi All,   I am currently using JAX-WS and have been working on using JAX-RS using Jersey and Apache Http Client. I have gotten requests to work between between my client and jax-rs service. When I tried in an environment where NTLM is used I could not get my http requests to go through the network. Now I remember having to work through this with JAX-WS but I am not sure what to get http client to work using NTLM. What I want to have happen is the first time I try to connect using apache http client I want a dialog to show asking for login/password and after that is done be able to create requests that go all the way through to my remote server running my web services.   So how can I do that? Is there an example somewhere on how to make it work that way without a lot of coding?   Thanks for the help. -Tony</body>
  </mail>
  <mail>
    <header>Re: Almost there just need a little more help...</header>
    <body>Problem solved. It turned out I needed to supply proxy name and port.   Regards, -Tony Subject: Re: Almost there just need a little more help... Date: Tuesday, January 1, 2013, 1:18 AM Ok maybe this is not about NTLM but instead finding the proxy. I get these connot connect then retry verbage when running from within a company. So maybe it can not find the proxy? I tried some solutions but none worked so far because I am using HttpClient(cm) in order to use the multithreaded connection manager but the examples I have found seem to want only DefaultHttpClient.   Any suggestions?   Thks, Tony Subject: Re: Almost there just need a little more help... Date: Monday, December 31, 2012, 9:17 PM Ok I found his example that might almost do what I need but I want the user id and password coming from a popup dialog like the one I have seen coming from Metro (JAX-WS).       client.getState().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(user.getUsername(), I will keep looking. -Tony Subject: Re: Almost there just need a little more help... Date: Monday, December 31, 2012, 8:58 PM I did find an example called  ClientAuthentication but it looks like it assumes you always have to authenticate but I only want to do that if needed. So if in a coffee shop where NTLM is not needed for example I do not want to do that but if in a location where NTLM is needed I do want to do the call httpclient.getCredentialsProvider().setCredentials().   Thanks for the advice. -Tony Subject: Almost there just need a little more help... To: httpclient-users@hc.apache.org Date: Monday, December 31, 2012, 8:47 PM Hi All,   I am currently using JAX-WS and have been working on using JAX-RS using Jersey and Apache Http Client. I have gotten requests to work between between my client and jax-rs service. When I tried in an environment where NTLM is used I could not get my http requests to go through the network. Now I remember having to work through this with JAX-WS but I am not sure what to get http client to work using NTLM. What I want to have happen is the first time I try to connect using apache http client I want a dialog to show asking for login/password and after that is done be able to create requests that go all the way through to my remote server running my web services.   So how can I do that? Is there an example somewhere on how to make it work that way without a lot of coding?   Thanks for the help. -Tony</body>
  </mail>
  <mail>
    <header>Limit respons size?</header>
    <body>Hi, Is there a way to limit the respons size? Like, if I call http://my.domain.com/my/page and it's trying to return me a 5GB ISO file, I don't want to consume that. I want to abort the call as soon as it's over a certain amount of bytes. If I do response.getEntity() is it going to give the control back only when ALL the data will be retreived? Thanks, JM</body>
  </mail>
  <mail>
    <header>Re: Limit respons size?</header>
    <body>You could take a look at HTTP range requests, if you know that the server will support it.</body>
  </mail>
  <mail>
    <header>Re: Limit respons size?</header>
    <body>But the probleme is that I can't trust the server. I need to make sure that the client is robust so in case server is failing or not supporting the HTTP range request, client is still exiting after a certain quantity of bytes received... 2013/1/1, James Shaw &amp;lt;js102@zepler.net&amp;gt;:</body>
  </mail>
  <mail>
    <header>Re: Limit respons size?</header>
    <body>Positively not. We have the same problem and we solve it like this: &amp;#009;&amp;#009;@Override &amp;#009;&amp;#009;public Void handleResponse( HttpResponse response ) throws ClientProtocolException, IOException &amp;#009;&amp;#009;&amp;#009;// Do stuff with your response (headers, etc.) &amp;#009;&amp;#009;&amp;#009;&amp;#009;// Do stuff with the limited stream, reading it until EOF. &amp;#009;// Process exception ByteStreams from Google Guava. Ciao, &amp;#009;&amp;#009;&amp;#009;&amp;#009;&amp;#009;seba</body>
  </mail>
  <mail>
    <header>Re: Limit respons size?</header>
    <body>Hi Sabastiano, Thanks for sharing. Previously I was doing: With you code, it's not returning anything. How should I get the HttpResponse from this? Thanks, JM 2013/1/1, Sebastiano Vigna &amp;lt;vigna@di.unimi.it&amp;gt;:</body>
  </mail>
  <mail>
    <header>Re: Limit respons size?</header>
    <body>I think I found... By replacing Void by HttpResponse and returning the response instead of null... Thanks! I will continue to dig that way. JM 2013/1/4, Jean-Marc Spaggiari &amp;lt;jean-marc@spaggiari.org&amp;gt;:</body>
  </mail>
  <mail>
    <header>Set host name verifier for SystemDefaultHttpClient</header>
    <body>Looking through the code I am have a hard time trying to understand the easiest way to get a SystemDefaultHttpClient with the host name verifier set to ALLOW_ALL_HOSTNAME_VERIFIER. I have the following code: client.getConnectionManager().getSchemeRegistry().register(new The problem with this is that the sf.setHostnameVerifier(...) is depreciated.  Looking at the depreciation comments I do not see and hints on what I should use to set the host name verifier. I don't really want to duplicate all the code to pull in the system properties to create  a 'System' SocketFactory, but I see no other way to set the host name verifier. Any ideas? Thanks in advance! Billy</body>
  </mail>
  <mail>
    <header>Re: Set host name verifier for SystemDefaultHttpClient</header>
    <body>It is not possible to choose a custom HostnameVerifier when using system configuration. Please raise a change request in JIRA for this issue. For the time being there is no way around using the deprecated setter method. Oleg</body>
  </mail>
  <mail>
    <header>Re: On Linux, Java issues reverse DNS lookups when a socket is opened.</header>
    <body>According to the latest post [1]: "In the end, the only real problem was that I was not giving tcpdump the -n option. The reverse lookup I was observing were just tcpdump's." i.e. not a problem. [1] http://stackoverflow.com/a/14150693</body>
  </mail>
  <mail>
    <header>Re: AbstractNIOConnPool memory leak?</header>
    <body>(I thought I answered this, but it's not on the archive. Boh.) Having a few thousands connection open is the only way to retrieve data respecting politeness (e.g., not banging the same site too often). I have another question: is there any suggestion for parameters of the asynchronous client in case of several thousands parallel requests (e.g., for the IOReactor)? We are experimenting both with DefaulHttpClient and DefaultHttpAsyncClient, and with the same configuration (e.g., 4000 threads using DefaultHttpClient or 64 threads pushing 4000 async requests into a default DefaultHttpAsyncClient) we see completely different behaviours. The sync client fetches more than 10000 pages/s, the async client speed fetches 50 p/s. Should we increase the number of threads or the I/O interval of the IOReactor? -- View this message in context: http://httpcomponents.10934.n7.nabble.com/AbstractNIOConnPool-memory-leak-tp18554p18641.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: AbstractNIOConnPool memory leak?</header>
    <body>Huh? There are surely other ways to achieve that goal. Please start a new thread for a new question.</body>
  </mail>
  <mail>
    <header>Re: AbstractNIOConnPool memory leak?</header>
    <body>For a beefy server, having a few thousand open connections (one per domain or IP address) is a standard solution for web crawling. There may well be better solutions, but from personal experience even on a "small" server (e.g. Amazon m1.large, so roughly 4 wimpy cores) you can effectively use 500+ threads. So on a large box (e.g. 24 more powerful cores) I could see using upward of 10K threads being the optimal number. This assumes you've got a big pipe, and a pretty good DNS system/cache. This also assumes that you're not trying to parse the downloaded files at the same time, as otherwise available CPU will be the limiting factor. Just FYI about two years ago we were using big servers with lots of threads during a large-scale web crawl, and we did run into interesting bottlenecks in HttpClient 4.0.1 (?) with lots of simultaneous threads. I haven't had to revisit those issues with a recent release, so maybe those have been resolved. -- Ken -------------------------------------------- http://about.me/kkrugler +1 530-210-6378</body>
  </mail>
  <mail>
    <header>Re: AbstractNIOConnPool memory leak?</header>
    <body>We are working to make 20-30K connections work on 64 cores. Can you elaborate on that? I guess it would be priceless knowledge :). Ciao, &amp;#009;&amp;#009;&amp;#009;&amp;#009;&amp;#009;seba -- View this message in context: http://httpcomponents.10934.n7.nabble.com/AbstractNIOConnPool-memory-leak-tp18554p18646.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: AbstractNIOConnPool memory leak?</header>
    <body>1. CookieStore access inspecting the results. A very high percentage (typically &amp;gt; 1/3) were blocked while waiting to get access to the cookie store. By default there's only one of these per HttpClient. for each request: 2. Scheme registry through. For example, at irregular intervals the bulk of my fetcher threads are blocked on getting the scheme registry I believe this one has been fixed via the patch for https://issues.apache.org/jira/browse/HTTPCLIENT-903, and is in the current release of HttpClient. 3. Global lock on connection pool Oleg had written: I don't know if this has been resolved. My work-around from a few years ago was to rely on having multiple Hadoop reducers running on the server (each in their own JVM), where I could then limit each JVM to at most 300 connections. HTH, -- Ken -------------------------- Ken Krugler +1 530-210-6378 http://www.scaleunlimited.com custom big data solutions &amp;amp; training Hadoop, Cascading, Cassandra &amp;amp; Solr</body>
  </mail>
  <mail>
    <header>HttpClient performance with multiple threads; Re: AbstractNIOConnPool memory leak?</header>
    <body>and inspecting the results. A very high percentage (typically &amp;gt; 1/3) were blocked while waiting to get access to the cookie store. By default there's only one of these per HttpClient. context for each request: working through. For example, at irregular intervals the bulk of my fetcher threads are blocked on getting the scheme registry and is in the current release of HttpClient. Ken, You might want to have a look at the lest code in SVN trunk (to be released as 4.3). Several classes such as the scheme registry that previously had to be synchronized in order to ensure thread safety have been replaced with immutable equivalents. There is also now a way to create HttpClient in a minimal configuration without authentication, state management (cookies), proxy support and other non-essential functions. These functions are not merely disabled but physically removed from the processing pipeline, which should result in somewhat better performance in high threads contention scenarios, as the only synchronization point involved in request execution would be the lock of the connection pool. Minimal HttpClient may be particularly useful for anonymous web crawling when authentication and state management are not required. on having multiple Hadoop reducers running on the server (each in their own JVM), where I could then limit each JVM to at most 300 connections. I experimented with the idea of lock-less (unlimited) connection manager but in my tests it did not perform any better than the standard connection manager. I am attaching the source code of my experimental connection manager. Feel free to improve on it and see if produces better results for your particular application. Oleg</body>
  </mail>
  <mail>
    <header>Re: HttpClient performance with multiple threads; Re: AbstractNIOConnPool memory leak?</header>
    <body>Hi Oleg, [snip] That sounds interesting - any hints as to how to create this minimal HttpClient? rely on having multiple Hadoop reducers running on the server (each in their own JVM), where I could then limit each JVM to at most 300 connections. Previously I'd asked: enforce limits on per route/total connections? Any thoughts on that approach? E.g. have a map from route to atomic counter, and a single atomic counter for total connections? Thanks, -- Ken -------------------------- Ken Krugler +1 530-210-6378 http://www.scaleunlimited.com custom big data solutions &amp;amp; training Hadoop, Cascading, Cassandra &amp;amp; Solr</body>
  </mail>
  <mail>
    <header>Re: HttpClient performance with multiple threads; Re: AbstractNIOConnPool memory leak?</header>
    <body>The new API is not yet final and not properly documented. Presently this can be done with HttpClients#createMinimal was to rely on having multiple Hadoop reducers running on the server (each in their own JVM), where I could then limit each JVM to at most 300 connections. &amp;amp; enforce limits on per route/total connections? atomic counter for total connections? This may be worthwhile to try. However, in theory this should not perform any better than the approach I took with my experiments. The main problem is, though, that I do not have a good test framework that emulates an environment a web crawler is expected to operate in (and have no justification for building one in my spare time). So, this kind of effort ideally should be led by an external contributor. Oleg</body>
  </mail>
  <mail>
    <header>Re: HttpClient performance with multiple threads; Re: AbstractNIOConnPool memory leak?</header>
    <body>Hi Oleg, Thanks for the responses. I've filed a Bixo issue to try using the new minimal version of HttpClient, and also the unlimited connection manager. I'll try to test using an existing crawl workflow that hits the top-level pages for 60K domains, though that's not exactly the same as a large-scale crawl. -- Ken up may was to rely on having multiple Hadoop reducers running on the server (each in their own JVM), where I could then limit each JVM to at most 300 connections. &amp;amp; enforce limits on per route/total connections? a single atomic counter for total connections? -------------------------- Ken Krugler +1 530-210-6378 http://www.scaleunlimited.com custom big data solutions &amp;amp; training Hadoop, Cascading, Cassandra &amp;amp; Solr -------------------------- Ken Krugler +1 530-210-6378 http://www.scaleunlimited.com custom big data solutions &amp;amp; training Hadoop, Cascading, Cassandra &amp;amp; Solr</body>
  </mail>
  <mail>
    <header>Re: AbstractNIOConnPool memory leak?</header>
    <body>I could not agree more. I personally think that closing idle connections and letting the server reclaim the resources associated with them (potentially enabling the server to serve other clients) would be more 'polite'. It is cheaper for both the client and the server to close connections more frequently than keeping them alive just in case. Oleg</body>
  </mail>
  <mail>
    <header>Re: AbstractNIOConnPool memory leak?</header>
    <body>It seems like we are talking about different things. The thousands of open connections move beween *hundreds of thousands* of servers. You do not keep connections open—and anyway people often sets Apache's httpd timeout for reusing connections below a reasonable politeness threshold (e.g., 5s). We close connections immediately and move to a new server. -- View this message in context: http://httpcomponents.10934.n7.nabble.com/AbstractNIOConnPool-memory-leak-tp18554p18649.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: AbstractNIOConnPool memory leak?</header>
    <body>I am not sure. You said previously that you wanted to keep ten thousands of concurrently open connections for the sake of 'politeness'. To me that pretty much implies that the I/O reactor has to select through tens of thousand connections, most of which are not utilized. This certainly carries a significant cost in terms of performance. (Unless I am missing something). Oleg PS: I'll be off-line shortly and will pick up this thread tomorrow eventing.</body>
  </mail>
  <mail>
    <header>Re: AbstractNIOConnPool memory leak?</header>
    <body>Oh, well, I'm sorry, I'm not really a network person :). I meant that we want to keep 20K connections busy and transferring data while respecting politeness, not to keep them open in the TCP sense. My fault. -- View this message in context: http://httpcomponents.10934.n7.nabble.com/AbstractNIOConnPool-memory-leak-tp18554p18654.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>When less is more; Re: AbstractNIOConnPool memory leak?</header>
    <body>Try reducing the number of concurrent connections from 20k to, say, 2k and you may be surprised to find out that a smaller number of connections can actually chew through the same workload faster. If the JVM spends less time switching between contexts (be it thread context switching or switching channels in a i/o selector) it is more likely to spend more time actually doing something useful like reading and processing data. So, it is _really_ that necessary to keep 20k connections open at the same time? Oleg</body>
  </mail>
  <mail>
    <header>Re: When less is more; Re: AbstractNIOConnPool memory leak?</header>
    <body>Well... no. :) We have an experimental setup with a local proxy generating a "fake web" that we use to check the speed of the pipeline independently of the network conditions. With 1000 parallel DefaultHttpClient instances (different instances, not one instance with pooling) we download &amp;gt;10000 pages/s. With 1000 parallel requests on a DefaultHttpAsyncClient we download &amp;gt;500 pages/s, but as soon as we try to increase the number of parallel requests the speed drops to 100 pages/s, which makes the client useless for us at the moment. Of course this is somewhat artificial—you don't actually download at 100MB/s. But the fact that actually with 2000 parallel requests you go *slower* is a problem. -- View this message in context: http://httpcomponents.10934.n7.nabble.com/AbstractNIOConnPool-memory-leak-tp18554p18667.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: When less is more; Re: AbstractNIOConnPool memory leak?</header>
    <body>I am sorry but I fail to see how that all proves your point (or disproves mine). It even sounds completely unrelated to what I was trying to tell you. Well, then, let us just agree to disagree. Oleg</body>
  </mail>
  <mail>
    <header>Re: AbstractNIOConnPool memory leak?</header>
    <body>Just to clarify, for our web crawl we were using a connection pool and letting idle connections be reclaimed. But we were also doing small batches of URLs (e.g. 5 at a time) when hitting the same server, keeping the connection open. This was an attempt to balance the cost to the target server of establishing a new connection, versus being polite. For typical web sites this feels like a win, but low-traffic sites that have complex pages being generated by JSP code (for example) could be unhappy. I know that Heritrix uses a strategy of varying their crawl delay based on the response time of the server, which could be a better approach to constraining the # of keep-alive requests. -- Ken -------------------------- Ken Krugler +1 530-210-6378 http://www.scaleunlimited.com custom big data solutions &amp;amp; training Hadoop, Cascading, Mahout &amp;amp; Solr</body>
  </mail>
  <mail>
    <header>Suggested parameters for highly parallel async client</header>
    <body>Is there any suggestion for parameters of the asynchronous client in case of several thousands parallel requests (e.g., for the IOReactor)? We are experimenting both with DefaulHttpClient and DefaultHttpAsyncClient, and with the same configuration (e.g., 4000 threads using DefaultHttpClient or 64 threads pushing 4000 async requests into a default DefaultHttpAsyncClient) we see completely different behaviours. The sync client fetches more than 10000 pages/s, the async client speed fetches 50 p/s. Should we increase the number of threads or the I/O interval of the IOReactor? Or are we doing something really stupid? -- View this message in context: http://httpcomponents.10934.n7.nabble.com/Suggested-parameters-for-highly-parallel-async-client-tp18644.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: Suggested parameters for highly parallel async client</header>
    <body>expected to outperform a decent non-blocking HTTP client by 50 to 100%, but such a massive difference does look very suspicious. My guess, though, that the way pages are being processed can be a limiting factor more more than the way they are being retrieved. How do you parse / process the content of the pages? Is your processing code based on standard java InputStream APIs? No, you should not. There is no point having more I/O threads than the number of physical CPU cores. No, you should not. This will have no impact on performance of what so ever. By reducing the select interval one can get more granular socket timeouts (which is cannot be less than 1 second with the default select interval of 1 second). Oleg</body>
  </mail>
  <mail>
    <header>The digest authentication doesn't work when using proxy</header>
    <body>Hello, I came across the following issue. If I configure the HttpClient with proxy(no-auth) then the digest authentication is failed by the server with 400 Bad request. After short analysis I have found out that the digest authentication request contains an absolute URI instead of a relative URI.The absolute URI is set in the DefaultRequestDirector.execute() by calling of DefaultRequestDirector.rewriteRequestURI() in case the proxy is configured. The parsed log from netmon is in the attachment. Originally I have found the problem with my own Digest Authentication Scheme (using Windows SSPI). After that I tried the build-in Digest auth scheme and I was able to reproduce the issue. I noticed that the request arg in the Schema.Authenticate is RequestWrapper, so i tried to use RequestWrapper.getOriginal() for retrieving of URI, but I had n o success. It returns also an absolute URI. I believe it is a bug in the HttpClient. Besides that I would like to address this problem in our DigestAuthScheme before it will be fixed in the HttpClient. Is there some consistent way how how to get relative URI from the HttpRequest or HttpContext passed into authenticate() method? I know I can use the URI class to get a relative path, but it seems just like a workaround. Environment: JRE 1.6.0_23, Windows 7 SP1 dependencies: commons-codec-1.6.jar commons-logging-1.1.1.jar fluent-hc-4.2.2.jar httpclient-4.2.2.jar httpclient-cache-4.2.2.jar httpcore-4.2.3.jar httpmime-4.2.2.jar Thanks, Bronislav Gabrhelik</body>
  </mail>
  <mail>
    <header>Re: The digest authentication doesn't work when using proxy</header>
    <body>Bronislav Similar issue was reported in the past. I think HttpClient's behavior is correct and is compliant with the requirements of the HTTP specification. The problem is on the proxy side. For details please see: https://issues.apache.org/jira/browse/HTTPCLIENT-1071 Feel free to report this problem to developers of the proxy server. Oleg</body>
  </mail>
  <mail>
    <header>Re: The digest authentication doesn't work when using proxy</header>
    <body>Oleg, thanks for pointing this out.  I have realized that it is my fault after that I verified that the proxy is transparent. The problem is missing slash at the end of URI while constructing the HttpGet(). "http://auth-digest2.brno.local" vs. "http://auth-digest2.brno.local/" The question is if user shouldn't be forced to use the ending slash in all cases even if proxy is not used. I understand that HttpClient tries to be tolerant, but the use of API would be more consistent. Thanks for your help, Bronislav</body>
  </mail>
  <mail>
    <header>Re: The digest authentication doesn't work when using proxy</header>
    <body>Yes, the ending slash should be enforced. If it is not the case, this is definitely a bug. Please raise a JIRA for this defect. Oleg</body>
  </mail>
  <mail>
    <header>SPNEGO authentication not working with IBM JRE 1.6</header>
    <body>Hi, I am unable to get the HttpClient to work with SPNEGO authentication using the IBM JRE.  I have successfully gotten it to work with the Oracle JRE and the login.conf file that is recommended for Oracle, so I know that my configuration and test code is generally working.  My test code is a modification of the ClientKerberosAuthentication example. Is the IBM JRE supported for SPNEGO authentication or is this a known limitation?  Is my login.conf file incorrect for the IBM JRE?  I've tried multiple permutations and encounter the same error each time. Configuration: Client: Windows 2008 R2 64-bit / HttpComponents 4.2.2 Server: Windows 2008 R2 w/ Websphere Application Server 8.5 64-bit Active Directory: Windows 2008 R2 64-bit JRE: 1.6.0 Java(TM) SE Runtime Environment (build pwa6460sr11-20120806_01 (SR11)) Error: I get the following error when attempting to connect.  This seems to imply that my com.ibm.security.jgss.initiate setting is incorrect and that I cannot obtain the proper credentials to send to the server in its response for the negotiate header.  I have all of the debug on and this is all I get. Jan 7, 2013 4:10:37 PM org.apache.http.client.protocol.RequestAuthenticationBase process WARNING: NEGOTIATE authentication error: No valid credentials provided (Mechanism level: No valid credentials provided (Mechanism level: Attempt to obtain new INITIATE credentials failed! (null))) IBM login.conf: Heather Sterling Rational Jazz Development Phone:  919-254-7163 T/L: 444-7163 Cell: 919-423-3143 Email: hsterl@us.ibm.com</body>
  </mail>
  <mail>
    <header>Re: SPNEGO authentication not working with IBM JRE 1.6</header>
    <body>Heather, Kerberos and SPNego authentication support in HttpClient is based entirely on contributions of external contributors. We have no means of testing it against various commercial products or different JREs. In fact we have almost zero test coverage for Kerberos and SPNego code and we mostly rely on our users' feedback to find out what works and what does not. As far as IBM WebSphere products are concerned I am not aware of anyone having conducted compatibility tests. We do not specifically test HttpClient for compatibility with IBM JRE. This is the area where our corporate users might make valuable contributions to the project. Oleg</body>
  </mail>
  <mail>
    <header>java.lang.NoSuchMethodError: org.apache.http.conn.scheme.Scheme.&amp;lt;init&amp;gt;</header>
    <body>First of all my environment: Android application using Eclipse httpclient-4.2.2.jar This is my piece of intelligent code: //        Scheme sch = new Scheme("http",  80, All builds fine. When running the application I got into the Fatal exception telling me that org.apache.http.conn.scheme.Scheme.&amp;lt;init&amp;gt;  method is not found. Further investigation seems that there the problem is when a new Scheme object is created. So I added the code (commented out in the example above) which is used inside the PoolingClientConnectionManager class: I am getting an compile error telling me: Searchiing the documentation it seems that this constructor is used for library 4.2.2. However the error tels met that it expects: new but this is, again according to the documentation, 4.1 and is deprecated. documentation taken from: http://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/conn/scheme/Scheme.html I have absolutely  no idea. I also rebuilded the httpclient source code cause the code seems ok, but that did not help, What am I missing here help... -- View this message in context: http://httpcomponents.10934.n7.nabble.com/java-lang-NoSuchMethodError-org-apache-http-conn-scheme-Scheme-init-tp18698.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: java.lang.NoSuchMethodError: org.apache.http.conn.scheme.Scheme.&amp;lt;init&amp;gt;</header>
    <body>Android ships with a very outdated ALPHA version of HttpClient 4.0. One cannot use newer versions of HttpClient on Android without moving all my.company.http). This is really a monumental f**kup but there is nothing we can do about it until either Google completely removes old HttpClient from their default Android distribution or we start producing Android specific distribution of HttpClient (which is not likely to happen soon). There is already a repackaged version which you might want to try out: http://code.google.com/p/httpclientandroidlib/ Oleg</body>
  </mail>
  <mail>
    <header>Re: java.lang.NoSuchMethodError: org.apache.http.conn.scheme.Scheme.&amp;lt;init&amp;gt;</header>
    <body>Many thanks for your response Oleg, That was indeed the problem. I am using the library suggested and it all works now, Many thanks! -- View this message in context: http://httpcomponents.10934.n7.nabble.com/java-lang-NoSuchMethodError-org-apache-http-conn-scheme-Scheme-init-tp18698p18727.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re:</header>
    <body>created issue https://issues.apache.org/jira/browse/HTTPCLIENT-1293 i have tried changing the GGSSchemeBase.java my change is working in my setup added my change in comments.</body>
  </mail>
  <mail>
    <header>Re:</header>
    <body>Thank you very much Dilip, Oleg. We need to get latest release of HttpClient 4.2.3 with this bug fix very urgently. Can you please also tell me how to get the latest jar files (httpclient-4.2.3.jar etc...) for the latest code or if I should build jar files locally on my machine then which branch should I use to check out the code, and what is the process for building jar files? Following are the branches I think I should use for the 4.2.3 code but not sure if I am correct. Please tell me the correct branch. http://svn.apache.org/repos/asf/httpcomponents/httpclient/tags/4.2.3/ http://svn.apache.org/repos/asf/httpcomponents/httpclient/tags/4.2.3-RC1/ http://svn.apache.org/repos/asf/httpcomponents/httpcore/tags/4.2.3/ http://svn.apache.org/repos/asf/httpcomponents/httpcore/tags/4.2.3-RC1/ thank you for helps, deepak</body>
  </mail>
  <mail>
    <header>Re: Re:</header>
    <body>HttpClient 4.2.3 should be available in the Maven central by now. I am going to send a formal release announcement in a short while. Oleg</body>
  </mail>
  <mail>
    <header>Re: Re:</header>
    <body>Thank you very much Oleg. I got the latest build from following URL http://archive.apache.org/dist/httpcomponents/httpclient/binary/ I need one more help from you. Can you please give me a sample program that communicates through proxy server using kerberos authentication. I am successfully able to communicate to an internet URL through proxy server using kerberos authentication, but it asks for UserName and password twice; although I have specified the username and password in the program. Following is the sample program. httpClient.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY, AuthScope authScope = new AuthScope("proxyserver.test.local", 3128, UsernamePasswordCredentials creds = new thank you.</body>
  </mail>
  <mail>
    <header>http client and SSLContext.getDefault</header>
    <body>Hi, It seems that http client (at least 4.1.3) does not honor SSLContext.getDefault, i.e. does not pickup SSLContext configured using SSLContext.setDefault. The problem is that I want to override default SSLContext at a runtime and do not have control over all httpclient usages, i.e. can not instrument all http client instances using "getConnectionManager().getSchemeRegistry().register(scheme)" spell. I was thinking that httpclient should use default SSLContext by default, but apparently it's not. I've found HTTPCLIENT-789 and it says that the reason is that SSLContext.getDefault() is Java 6/7 only. I'm wondering if it makes sense to use reflection here and honor default SSLContext on Java 6/7 platforms. Any opinions? Thanks in advance, Alexey</body>
  </mail>
  <mail>
    <header>Re: http client and SSLContext.getDefault</header>
    <body>My preference would be to make Java 6 the minimum requirement. Gary -- E-Mail: garydgregory@gmail.com | ggregory@apache.org JUnit in Action, 2nd Ed: &amp;lt;http://goog_1249600977&amp;gt;http://bit.ly/ECvg0 Spring Batch in Action: &amp;lt;http://s.apache.org/HOq&amp;gt;http://bit.ly/bqpbCK Blog: http://garygregory.wordpress.com Home: http://garygregory.com/ Tweet! http://twitter.com/GaryGregory</body>
  </mail>
  <mail>
    <header>Re: http client and SSLContext.getDefault</header>
    <body>Start with 4.3 I should have added. Gary -- E-Mail: garydgregory@gmail.com | ggregory@apache.org JUnit in Action, 2nd Ed: &amp;lt;http://goog_1249600977&amp;gt;http://bit.ly/ECvg0 Spring Batch in Action: &amp;lt;http://s.apache.org/HOq&amp;gt;http://bit.ly/bqpbCK Blog: http://garygregory.wordpress.com Home: http://garygregory.com/ Tweet! http://twitter.com/GaryGregory</body>
  </mail>
  <mail>
    <header>Re: http client and SSLContext.getDefault</header>
    <body>Gary My understanding is that even the latest versions of Android are still based on Java 5. Even though Google have treated us the way they did, I think we should try to keep HttpClient Android friendly. I simply see no convincing reason to upgrade to Java 6. What does this exactly buy us? If we were to bump the minimal JRE level, we should probably go to Java 7 or even 8. Oleg</body>
  </mail>
  <mail>
    <header>Re: http client and SSLContext.getDefault</header>
    <body>It's more about changing SSLContext at a runtime. Please also see similar stackoverflow question - http://stackoverflow.com/questions/8764845/setting-the-default-java-sslcontext-from-a-resource-at-runtime -- View this message in context: http://httpcomponents.10934.n7.nabble.com/http-client-and-SSLContext-getDefault-tp18762p18784.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>RE: http client and SSLContext.getDefault</header>
    <body>I am pretty sure it is up to Java 6 now.  In the project properties in Eclipse, you can set the Java compiler to be 1.6.  This makes the compiler not complain about the @Override annotation on interface implementation methods. Java 7 will not work. Maybe it is using the Java 6 compiler but outputting a Java 5 class file?  ...I have not played around with things like this much, so I can't really speak much to that. I don't have much of an opinion on what the source code level of HttpClient should be.  We don't use Java 5 anymore, but it doesn't bother me that HttpClient works with Java 5.  That being said, it seems that it should probably just stay where it is unless there is a compelling reason to move. Mark -----Original Message----- From: Alexey Serba [mailto:aserba@gmail.com] Sent: Friday, January 11, 2013 6:10 AM To: httpclient-users@hc.apache.org Subject: Re: http client and SSLContext.getDefault It's more about changing SSLContext at a runtime. Please also see similar stackoverflow question - http://stackoverflow.com/questions/8764845/setting-the-default-java-sslcontext-from-a-resource-at-runtime -- View this message in context: http://httpcomponents.10934.n7.nabble.com/http-client-and-SSLContext-getDefault-tp18762p18784.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>httpcore + ssl... is NIO the only way?</header>
    <body>I'm currently using httpcore to access the Twitter api. It's been a life-saver since Twitter needs RFC 3986 encoding and HttpClient defaults to (and seems difficult to un-default from) a lower URL encoding (17xx, can't remember exactly). Everything is working perfectly at the moment with http, but I really should be using https. Looking around for an example of HTTPS with httpcore, all I could find were some examples using the NIO package. Is NIO the only (or simplest) way to form SSL requests with httpcore? Cyrus</body>
  </mail>
  <mail>
    <header>Re: httpcore + ssl... is NIO the only way?</header>
    <body>As of version 4.3 HttpClient will also execute requests with non-standard request URIs, if that helps. Absolutely not. Blocking HTTP connections can be bound to any arbitrary socket (plain or SSL) --- socket.connect( --- Hope this helps Oleg</body>
  </mail>
  <mail>
    <header>Re: httpcore + ssl... is NIO the only way?</header>
    <body>Very much so. Thank you</body>
  </mail>
  <mail>
    <header>Siteminder session expired issues with http client 4</header>
    <body>Hi Team We are using the http client v4.2.2 and we are using pooling client connection manager for connections, When we test the application we get siteminder session expired message, and it tries to forward to login page. Please need your help in this regard. Thanks in advance, Gouri.</body>
  </mail>
  <mail>
    <header>[ANNOUNCEMENT] HttpComponents HttpClient 4.2.3 GA release</header>
    <body>The HttpComponents project is pleased to announce 4.2.3 GA release of Apache HttpClient. This is a bug fix release that addresses a number of issues reported since release 4.2.2. This release also includes a thoroughly reworked NTLM authentication engine  which should result in a better compatibility with the newest Microsoft products. Users of HttpClient 4.x are advised to upgrade. ------------------- Download - Release notes - HttpComponents site - ------------------- About Apache HttpClient Although the java.net package provides basic functionality for accessing resources via HTTP, it doesn't provide the full flexibility or functionality needed by many applications. HttpClient seeks to fill this void by providing an efficient, up-to-date, and feature-rich package implementing the client side of the most recent HTTP standards and recommendations. Designed for extension while providing robust support for the base HTTP protocol, HttpClient may be of interest to anyone building HTTP-aware client applications such as web browsers, web service clients, or systems that leverage or extend the HTTP protocol for distributed communication.</body>
  </mail>
  <mail>
    <header>Re: [ANNOUNCEMENT] HttpComponents HttpClient 4.2.3 GA release</header>
    <body>Hi Oleg, Into httpcomponents-client-4.2.3 zip file there is httpcore-4.2.2 file. Should it not be httpcore-4.2.3? JM 2013/1/15, Oleg Kalnichevski &amp;lt;olegk@apache.org&amp;gt;:</body>
  </mail>
  <mail>
    <header>Re: [ANNOUNCEMENT] HttpComponents HttpClient 4.2.3 GA release</header>
    <body>Damn, I overlooked that. While unfortunate, it is not a major issue. All fixes in HttpCore 4.2.3 but one were in the NIO module. Oleg</body>
  </mail>
  <mail>
    <header>Unit test failure</header>
    <body>I am trying to compile HttpClient 4.2.2, but I run into a unit test failure every time.  It doesn't say much so I am not sure what to do.  Could it be my environment?  All the other tests in all the other packages succeed. Running org.apache.http.impl.client.TestStatefulConnManagement Tests run: 2, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.262 sec &amp;lt;&amp;lt;&amp;lt; FAILURE! Thanks Mark</body>
  </mail>
  <mail>
    <header>RE: Unit test failure</header>
    <body>Guess I will try 4.2.3 quick. -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Tuesday, January 15, 2013 12:26 PM To: 'HttpClient User Discussion' Subject: Unit test failure I am trying to compile HttpClient 4.2.2, but I run into a unit test failure every time.  It doesn't say much so I am not sure what to do.  Could it be my environment?  All the other tests in all the other packages succeed. Running org.apache.http.impl.client.TestStatefulConnManagement Tests run: 2, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.262 sec &amp;lt;&amp;lt;&amp;lt; FAILURE! Thanks Mark</body>
  </mail>
  <mail>
    <header>RE: Unit test failure</header>
    <body>I will get a unit test failure in the same place.  Any ideas? Running org.apache.http.impl.client.TestRequestRetryHandler Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 sec Running org.apache.http.impl.client.TestRequestWrapper Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.018 sec Running org.apache.http.impl.client.TestStatefulConnManagement Tests run: 2, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.283 sec &amp;lt;&amp;lt;&amp;lt; FAILURE! Running org.apache.http.impl.conn.TestAbortHandling Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.186 sec Running org.apache.http.impl.conn.TestBasicConnManager -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Tuesday, January 15, 2013 12:35 PM To: 'HttpClient User Discussion' Subject: RE: Unit test failure Guess I will try 4.2.3 quick. -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Tuesday, January 15, 2013 12:26 PM To: 'HttpClient User Discussion' Subject: Unit test failure I am trying to compile HttpClient 4.2.2, but I run into a unit test failure every time.  It doesn't say much so I am not sure what to do.  Could it be my environment?  All the other tests in all the other packages succeed. Running org.apache.http.impl.client.TestStatefulConnManagement Tests run: 2, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.262 sec &amp;lt;&amp;lt;&amp;lt; FAILURE! Thanks Mark</body>
  </mail>
  <mail>
    <header>RE: Unit test failure</header>
    <body>Sorry, I bit of a type-o there. I "still" get a unit test failure in the same place.  I am going to see if I can try a build on another machine. -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Tuesday, January 15, 2013 12:46 PM To: 'HttpClient User Discussion' Subject: RE: Unit test failure I will get a unit test failure in the same place.  Any ideas? Running org.apache.http.impl.client.TestRequestRetryHandler Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 sec Running org.apache.http.impl.client.TestRequestWrapper Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.018 sec Running org.apache.http.impl.client.TestStatefulConnManagement Tests run: 2, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.283 sec &amp;lt;&amp;lt;&amp;lt; FAILURE! Running org.apache.http.impl.conn.TestAbortHandling Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.186 sec Running org.apache.http.impl.conn.TestBasicConnManager -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Tuesday, January 15, 2013 12:35 PM To: 'HttpClient User Discussion' Subject: RE: Unit test failure Guess I will try 4.2.3 quick. -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Tuesday, January 15, 2013 12:26 PM To: 'HttpClient User Discussion' Subject: Unit test failure I am trying to compile HttpClient 4.2.2, but I run into a unit test failure every time.  It doesn't say much so I am not sure what to do.  Could it be my environment?  All the other tests in all the other packages succeed. Running org.apache.http.impl.client.TestStatefulConnManagement Tests run: 2, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.262 sec &amp;lt;&amp;lt;&amp;lt; FAILURE! Thanks Mark</body>
  </mail>
  <mail>
    <header>Re: Unit test failure</header>
    <body>FAILURE! Have a look at the relevant Surefire details file under target/surefire-reports This will give more info on the error. It doesn't say much so I am not sure what FAILURE!</body>
  </mail>
  <mail>
    <header>RE: Unit test failure</header>
    <body>Thanks! Connect to localhost:54964 Since the other tests succeeded, I can't tell if they had been using this port or not.  netstat does not show it in use now (when the tests are not running). type="org.apache.http.conn.ConnectTimeoutException" message="Connect to localhost:54964 timed out"&amp;gt;org.apache.http.conn.ConnectTimeoutException: Connect to localhost:54964 timed out at org.apache.http.conn.scheme.PlainSocketFactory.connectSocket(PlainSocketFactory.java:129) at org.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:180) at org.apache.http.impl.conn.ManagedClientConnectionImpl.open(ManagedClientConnectionImpl.java:294) at org.apache.http.impl.client.DefaultRequestDirector.tryConnect(DefaultRequestDirector.java:645) at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:480) at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:906) at org.apache.http.impl.client.TestStatefulConnManagement$HttpWorker.run(TestStatefulConnManagement.java:177) -----Original Message----- From: sebb [mailto:sebbaz@gmail.com] Sent: Tuesday, January 15, 2013 12:57 PM To: HttpClient User Discussion Subject: Re: Unit test failure FAILURE! Have a look at the relevant Surefire details file under target/surefire-reports This will give more info on the error. environment?  All the other tests in all the other packages succeed. FAILURE!</body>
  </mail>
  <mail>
    <header>Re: Unit test failure</header>
    <body>netstat does not show it in use now (when timed out at at at at at at Try running just that test case: mvn test -Dtest=TestStatefulConnManagement What JVM and OS are you using? FAILURE! my environment?  All the other tests in all the FAILURE!</body>
  </mail>
  <mail>
    <header>RE: Unit test failure</header>
    <body>That works. I am using Java 6 update 38 My laptop is running Windows Vista ------------------------------------------------------- T E S T S ------------------------------------------------------- Results : Tests run: 0, Failures: 0, Errors: 0, Skipped: 0 [INFO] ------------------------------------------------------------------------ [ERROR] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] No tests were executed!  (Set -DfailIfNoTests=false to ignore this error.) [INFO] ------------------------------------------------------------------------ [INFO] For more information, run Maven with the -e switch [INFO] ------------------------------------------------------------------------ [INFO] Total time: 18 seconds [INFO] Finished at: Tue Jan 15 13:39:06 EST 2013 [INFO] Final Memory: 45M/108M [INFO] ------------------------------------------------------------------------ -----Original Message----- From: sebb [mailto:sebbaz@gmail.com] Sent: Tuesday, January 15, 2013 1:26 PM To: HttpClient User Discussion Subject: Re: Unit test failure Try running just that test case: mvn test -Dtest=TestStatefulConnManagement What JVM and OS are you using? FAILURE! FAILURE!</body>
  </mail>
  <mail>
    <header>RE: Unit test failure</header>
    <body>It has not been a good day for me as far as jumping to conclusions and type-os.  It actually failed. ------------------------------------------------------- T E S T S ------------------------------------------------------- Running org.apache.http.impl.client.TestStatefulConnManagement Tests run: 2, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 4.712 sec &amp;lt;&amp;lt;&amp;lt; FAILURE! Results : Tests in error: testStatefulConnections(org.apache.http.impl.client.TestStatefulConnManagement): Connect to localhost:58094 timed out Tests run: 2, Failures: 0, Errors: 1, Skipped: 0 [INFO] ------------------------------------------------------------------------ [ERROR] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] There are test failures. Please refer to C:\dsi\opensource\HttpClient-4.2.3\httpcomponents-client-4.2.3\httpclient\target\surefire-reports for th [INFO] ------------------------------------------------------------------------ [INFO] For more information, run Maven with the -e switch [INFO] ------------------------------------------------------------------------ [INFO] Total time: 10 seconds [INFO] Finished at: Tue Jan 15 13:41:21 EST 2013 [INFO] Final Memory: 45M/108M [INFO] ------------------------------------------------------------------------ -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Tuesday, January 15, 2013 1:41 PM To: 'HttpClient User Discussion' Subject: RE: Unit test failure That works. I am using Java 6 update 38 My laptop is running Windows Vista ------------------------------------------------------- T E S T S ------------------------------------------------------- Results : Tests run: 0, Failures: 0, Errors: 0, Skipped: 0 [INFO] ------------------------------------------------------------------------ [ERROR] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] No tests were executed!  (Set -DfailIfNoTests=false to ignore this error.) [INFO] ------------------------------------------------------------------------ [INFO] For more information, run Maven with the -e switch [INFO] ------------------------------------------------------------------------ [INFO] Total time: 18 seconds [INFO] Finished at: Tue Jan 15 13:39:06 EST 2013 [INFO] Final Memory: 45M/108M [INFO] ------------------------------------------------------------------------ -----Original Message----- From: sebb [mailto:sebbaz@gmail.com] Sent: Tuesday, January 15, 2013 1:26 PM To: HttpClient User Discussion Subject: Re: Unit test failure Try running just that test case: mvn test -Dtest=TestStatefulConnManagement What JVM and OS are you using? FAILURE! FAILURE!</body>
  </mail>
  <mail>
    <header>RE: Unit test failure</header>
    <body>I tried it on a different machine, this one running the same version of Java, but on a Windows 7 machine (64 bit OS, 32 bit VM). I get the same result.  Only this time is has "Connect to localhost:56701 timed out" -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Tuesday, January 15, 2013 1:42 PM To: 'HttpClient User Discussion' Subject: RE: Unit test failure It has not been a good day for me as far as jumping to conclusions and type-os.  It actually failed. ------------------------------------------------------- T E S T S ------------------------------------------------------- Running org.apache.http.impl.client.TestStatefulConnManagement Tests run: 2, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 4.712 sec &amp;lt;&amp;lt;&amp;lt; FAILURE! Results : Tests in error: testStatefulConnections(org.apache.http.impl.client.TestStatefulConnManagement): Connect to localhost:58094 timed out Tests run: 2, Failures: 0, Errors: 1, Skipped: 0 [INFO] ------------------------------------------------------------------------ [ERROR] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] There are test failures. Please refer to C:\dsi\opensource\HttpClient-4.2.3\httpcomponents-client-4.2.3\httpclient\target\surefire-reports for th [INFO] ------------------------------------------------------------------------ [INFO] For more information, run Maven with the -e switch [INFO] ------------------------------------------------------------------------ [INFO] Total time: 10 seconds [INFO] Finished at: Tue Jan 15 13:41:21 EST 2013 [INFO] Final Memory: 45M/108M [INFO] ------------------------------------------------------------------------ -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Tuesday, January 15, 2013 1:41 PM To: 'HttpClient User Discussion' Subject: RE: Unit test failure That works. I am using Java 6 update 38 My laptop is running Windows Vista ------------------------------------------------------- T E S T S ------------------------------------------------------- Results : Tests run: 0, Failures: 0, Errors: 0, Skipped: 0 [INFO] ------------------------------------------------------------------------ [ERROR] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] No tests were executed!  (Set -DfailIfNoTests=false to ignore this error.) [INFO] ------------------------------------------------------------------------ [INFO] For more information, run Maven with the -e switch [INFO] ------------------------------------------------------------------------ [INFO] Total time: 18 seconds [INFO] Finished at: Tue Jan 15 13:39:06 EST 2013 [INFO] Final Memory: 45M/108M [INFO] ------------------------------------------------------------------------ -----Original Message----- From: sebb [mailto:sebbaz@gmail.com] Sent: Tuesday, January 15, 2013 1:26 PM To: HttpClient User Discussion Subject: Re: Unit test failure Try running just that test case: mvn test -Dtest=TestStatefulConnManagement What JVM and OS are you using? FAILURE! FAILURE!</body>
  </mail>
  <mail>
    <header>Re: Unit test failure</header>
    <body>a Windows 7 machine (64 bit OS, 32 bit VM). failed. It turned out the test had a very low (10 ms) connection timeout setting. Fixed in 4.2.x HEAD http://svn.apache.org/viewvc?view=revision&amp;amp;revision=1433614 Oleg FAILURE! to localhost:58094 timed out for th [INFO] FAILURE! FAILURE!</body>
  </mail>
  <mail>
    <header>RE: Unit test failure</header>
    <body>Thanks!  My test laptops are not too fast, so I am guessing that this might be the issue. I am not too familiar with the ins and outs of maven.  Is there a way I can remove this test from my local lists of tests and run the build successfully? Mark -----Original Message----- From: Oleg Kalnichevski [mailto:olegk@apache.org] Sent: Tuesday, January 15, 2013 3:25 PM To: HttpClient User Discussion Subject: Re: Unit test failure a Windows 7 machine (64 bit OS, 32 bit VM). failed. It turned out the test had a very low (10 ms) connection timeout setting. Fixed in 4.2.x HEAD http://svn.apache.org/viewvc?view=revision&amp;amp;revision=1433614 Oleg FAILURE! FAILURE! FAILURE!</body>
  </mail>
  <mail>
    <header>RE: Unit test failure</header>
    <body>Better than that, I went ahead and just changed the source file of the test to have a timeout of 100 instead of 10.  I got past this point and is continuing the build! Thanks! -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Tuesday, January 15, 2013 3:40 PM To: 'HttpClient User Discussion' Subject: RE: Unit test failure Thanks!  My test laptops are not too fast, so I am guessing that this might be the issue. I am not too familiar with the ins and outs of maven.  Is there a way I can remove this test from my local lists of tests and run the build successfully? Mark -----Original Message----- From: Oleg Kalnichevski [mailto:olegk@apache.org] Sent: Tuesday, January 15, 2013 3:25 PM To: HttpClient User Discussion Subject: Re: Unit test failure a Windows 7 machine (64 bit OS, 32 bit VM). failed. It turned out the test had a very low (10 ms) connection timeout setting. Fixed in 4.2.x HEAD http://svn.apache.org/viewvc?view=revision&amp;amp;revision=1433614 Oleg FAILURE! FAILURE! FAILURE!</body>
  </mail>
  <mail>
    <header>Re: Unit test failure</header>
    <body>test from my local lists of tests and run the build successfully? I am not sure individual test can be excluded through maven configuration without patching the source. Oleg</body>
  </mail>
  <mail>
    <header>Connection Reset errors</header>
    <body>I have a user getting a lot of Connection Reset errors.  I did not think this had do to with HttpClient, so much as other factors on her machine and the server.  However, I did a bit of searching and see that people have commented on this error with HttpClient before.  I just upgraded to HttpClient 4.2.3 to see if that would help at all, and it didn't. This user is fine for a while, and then will get the Connection Reset error.  She then just retries the request, and it works.  Any tips on how to resolve this would be greatly appreciated. Thanks, Mark We are using Tomcat 7.0.27, and the Connector is configured like this:  ciphers="SSL_RSA_WITH_RC4_128_SHA,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_DSS_WITH_AES ---- (1) ---- Throwable - Class (class java.net.SocketException)</body>
  </mail>
  <mail>
    <header>RE: Connection Reset errors</header>
    <body>I noticed that there is a stale connection check: Is this something that I should be using?  I am connecting to the same source over and over again. Mark -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Wednesday, January 16, 2013 3:07 PM To: 'HttpClient User Discussion' Subject: Connection Reset errors I have a user getting a lot of Connection Reset errors.  I did not think this had do to with HttpClient, so much as other factors on her machine and the server.  However, I did a bit of searching and see that people have commented on this error with HttpClient before.  I just upgraded to HttpClient 4.2.3 to see if that would help at all, and it didn't. This user is fine for a while, and then will get the Connection Reset error.  She then just retries the request, and it works.  Any tips on how to resolve this would be greatly appreciated. Thanks, Mark We are using Tomcat 7.0.27, and the Connector is configured like this:  ciphers="SSL_RSA_WITH_RC4_128_SHA,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_DSS_WITH_AES ---- (1) ---- Throwable - Class (class java.net.SocketException)</body>
  </mail>
  <mail>
    <header>Re: Connection Reset errors</header>
    <body>Basically 'connection reset' errors are a direct result of a general limitation of the blocking I/O model: when not blocked in an I/O operation there is no way for the socket to get notified of the opposite endpoint terminating the connection. While kept alive in the pool blocking HTTP connections can get stale. However, the only way to find it out is to try to attempt an I/O operation on such connection. over again. Yes, this is what you should be using. Another alternative would be pro-actively evicting expired connections and connections that have been idle longer than a given period of time. Oleg to with HttpClient, so much as other factors on commented on this error with HttpClient didn't. just retries the request, and it works.  Any</body>
  </mail>
  <mail>
    <header>RE: Connection Reset errors</header>
    <body>Thanks for the explanation. Seems like just doing the stale check would more reliable, and speed does not seem to be a factory (especially with 4.2.3) I got in configured and distributed to this user and she is still having the same problem. Any other ideas?  I double checked my code, and it looks like everything is correct.  (She is not using a proxy.) &amp;#009;Method that makes the request (from multiple threads) &amp;#009;Bulk of configuration method (MAX is 10, CONNECTION_ESTABLISH_TIMEOUT = 10) &amp;#009;&amp;#009;&amp;#009;params.setIntParameter(AllClientPNames.CONNECTION_TIMEOUT, CONNECTION_ESTABLISH_TIMEOUT &amp;#009;&amp;#009;&amp;#009;//SSL or not, we set the proxy up as HTTP &amp;#009;&amp;#009;&amp;#009;&amp;#009;//If the scheme is HTTPS, we need to register an HTTP scheme for the proxy. -----Original Message----- From: Oleg Kalnichevski [mailto:olegk@apache.org] Sent: Thursday, January 17, 2013 7:21 AM To: HttpClient User Discussion Subject: Re: Connection Reset errors Basically 'connection reset' errors are a direct result of a general limitation of the blocking I/O model: when not blocked in an I/O operation there is no way for the socket to get notified of the opposite endpoint terminating the connection. While kept alive in the pool blocking HTTP connections can get stale. However, the only way to find it out is to try to attempt an I/O operation on such connection. over again. Yes, this is what you should be using. Another alternative would be pro-actively evicting expired connections and connections that have been idle longer than a given period of time. Oleg on this error with HttpClient before.  I just upgraded to HttpClient 4.2.3 to see if that would help at all, and it didn't. this would be greatly appreciated.</body>
  </mail>
  <mail>
    <header>Re: Connection Reset errors</header>
    <body>be a factory (especially with 4.2.3) Any other ideas?  I double checked my code, and it looks like everything is correct.  (She is not using a proxy.) This can also be genuine network stability issues. Essentially, connection resets are inevitable and robust HTTP services have to be prepared to deal with them (most likely by re-trying idempotent methods automatically and reporting the problem back to the caller otherwise). Oleg blocking I/O model: when not blocked in an I/O operation there is no way for the socket to get notified of the opposite endpoint terminating the connection. While kept alive in the pool blocking HTTP connections can get stale. However, the only way to find it out is to try to attempt an I/O operation on such connection. and over again. expired connections and connections that have been idle longer than a given period of time. commented on this error with HttpClient before.  I just upgraded to HttpClient 4.2.3 to see if that would help at all, and it didn't. this would be greatly appreciated.</body>
  </mail>
  <mail>
    <header>RE: Connection Reset errors</header>
    <body>Before I switched to using HttpClient years ago, I used HttpsURLConnection.  Not sure how things were going to turn out with HttpClient, I kept that code in place and made it so I could use either API.  I had her switch back to using the java.net stuff the other day and the problem appeared to go away.  I have configured her system to use the java.net connector again today. Before I make any conclusions I need some more data from her on each connector.  However, the previous data seems to indicate that it is only an issue when using HttpClient (originally 4.1.3, now 4.2.3). Some other things of note: - She is using JRE 6 Update 13.  (There is a long story behind this.) - The application is launched via Webstart -----Original Message----- From: Oleg Kalnichevski [mailto:olegk@apache.org] Sent: Friday, January 18, 2013 6:17 AM To: HttpClient User Discussion Subject: Re: Connection Reset errors This can also be genuine network stability issues. Essentially, connection resets are inevitable and robust HTTP services have to be prepared to deal with them (most likely by re-trying idempotent methods automatically and reporting the problem back to the caller otherwise). Oleg blocking I/O model: when not blocked in an I/O operation there is no way for the socket to get notified of the opposite endpoint terminating the connection. While kept alive in the pool blocking HTTP connections can get stale. However, the only way to find it out is to try to attempt an I/O operation on such connection. and over again. expired connections and connections that have been idle longer than a given period of time. have commented on this error with HttpClient before.  I just upgraded to HttpClient 4.2.3 to see if that would help at all, and it didn't. to resolve this would be greatly appreciated.</body>
  </mail>
  <mail>
    <header>Re: Connection Reset errors</header>
    <body>how things were going to turn out with HttpClient, I kept that code in place and made it so I could use either API.  I had her switch back to using the java.net stuff the other day and the problem appeared to go away.  I have configured her system to use the java.net connector again today.  Before I make any conclusions I need some more data from her on each connector. However, the previous data seems to indicate that it is only an issue when using HttpClient (originally 4.1.3, now 4.2.3). It may well be that HttpURLConnection silently retries failed requests without your knowing about it. It certainly did that when I last touched it (which admittedly was a looooooong time ago), and that was precisely the reason I had to stop using it and to look for a better alternative. I do not thing any of these should matter. Oleg inevitable and robust HTTP services have to be prepared to deal with them (most likely by re-trying idempotent methods automatically and reporting the problem back to the caller otherwise). of the blocking I/O model: when not blocked in an I/O operation there is no way for the socket to get notified of the opposite endpoint terminating the connection. While kept alive in the pool blocking HTTP connections can get stale. However, the only way to find it out is to try to attempt an I/O operation on such connection. over and over again. evicting expired connections and connections that have been idle longer than a given period of time. people have commented on this error with HttpClient before.  I just upgraded to HttpClient 4.2.3 to see if that would help at all, and it didn't. how to resolve this would be greatly appreciated.</body>
  </mail>
  <mail>
    <header>RE: Connection Reset errors</header>
    <body>Looks like the stale connection check is enabled by default anyway, so I must have been using it all along. Is this a common thing to do, like for browsers?  Granted, she is in our app more than most others, but I don't think she experiences issues with other applications. She is not getting a Connection Refused or some other unable to read exception, but a Connection Reset.  The stale connection check passed, so HttpClient thinks this is a good connection, right?  Or are there limits to how reliable a stale connection check can be? -----Original Message----- From: Oleg Kalnichevski [mailto:olegk@apache.org] Sent: Friday, January 18, 2013 11:24 AM To: HttpClient User Discussion Subject: Re: Connection Reset errors how things were going to turn out with HttpClient, I kept that code in place and made it so I could use either API.  I had her switch back to using the java.net stuff the other day and the problem appeared to go away.  I have configured her system to use the java.net connector again today.  Before I make any conclusions I need some more data from her on each connector. However, the previous data seems to indicate that it is only an issue when using HttpClient (originally 4.1.3, now 4.2.3). It may well be that HttpURLConnection silently retries failed requests without your knowing about it. It certainly did that when I last touched it (which admittedly was a looooooong time ago), and that was precisely the reason I had to stop using it and to look for a better alternative. I do not thing any of these should matter. Oleg inevitable and robust HTTP services have to be prepared to deal with them (most likely by re-trying idempotent methods automatically and reporting the problem back to the caller otherwise). of the blocking I/O model: when not blocked in an I/O operation there is no way for the socket to get notified of the opposite endpoint terminating the connection. While kept alive in the pool blocking HTTP connections can get stale. However, the only way to find it out is to try to attempt an I/O operation on such connection. over and over again. evicting expired connections and connections that have been idle longer than a given period of time. people have commented on this error with HttpClient before.  I just upgraded to HttpClient 4.2.3 to see if that would help at all, and it didn't. how to resolve this would be greatly appreciated.</body>
  </mail>
  <mail>
    <header>RE: Connection Reset errors</header>
    <body>While she is testing the java.net stuff, I decided to look into the possibility of retrying the request.  Looking at this more closely, I see that the error is on the reading of the data, and the write seems to succeed.  This gives me something to check on, since I should be able to see whether or not the servlet actually got her request or not. However, is this a common manifestation of the Connection Reset error?  The write succeeds (or fails silently) and then it is on the read the problem can be detected?  Or does this mean that the socket was fine during the write operation, but then was somehow severed before the read? Mark -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Friday, January 18, 2013 12:06 PM To: 'HttpClient User Discussion' Subject: RE: Connection Reset errors Looks like the stale connection check is enabled by default anyway, so I must have been using it all along. Is this a common thing to do, like for browsers?  Granted, she is in our app more than most others, but I don't think she experiences issues with other applications. She is not getting a Connection Refused or some other unable to read exception, but a Connection Reset.  The stale connection check passed, so HttpClient thinks this is a good connection, right?  Or are there limits to how reliable a stale connection check can be? -----Original Message----- From: Oleg Kalnichevski [mailto:olegk@apache.org] Sent: Friday, January 18, 2013 11:24 AM To: HttpClient User Discussion Subject: Re: Connection Reset errors how things were going to turn out with HttpClient, I kept that code in place and made it so I could use either API.  I had her switch back to using the java.net stuff the other day and the problem appeared to go away.  I have configured her system to use the java.net connector again today.  Before I make any conclusions I need some more data from her on each connector. However, the previous data seems to indicate that it is only an issue when using HttpClient (originally 4.1.3, now 4.2.3). It may well be that HttpURLConnection silently retries failed requests without your knowing about it. It certainly did that when I last touched it (which admittedly was a looooooong time ago), and that was precisely the reason I had to stop using it and to look for a better alternative. I do not thing any of these should matter. Oleg inevitable and robust HTTP services have to be prepared to deal with them (most likely by re-trying idempotent methods automatically and reporting the problem back to the caller otherwise). of the blocking I/O model: when not blocked in an I/O operation there is no way for the socket to get notified of the opposite endpoint terminating the connection. While kept alive in the pool blocking HTTP connections can get stale. However, the only way to find it out is to try to attempt an I/O operation on such connection. over and over again. evicting expired connections and connections that have been idle longer than a given period of time. people have commented on this error with HttpClient before.  I just upgraded to HttpClient 4.2.3 to see if that would help at all, and it didn't. how to resolve this would be greatly appreciated.</body>
  </mail>
  <mail>
    <header>RE: Connection Reset errors</header>
    <body>Oh, I forgot to add that all my requests are POST requests. -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Friday, January 18, 2013 1:02 PM To: 'HttpClient User Discussion' Subject: RE: Connection Reset errors While she is testing the java.net stuff, I decided to look into the possibility of retrying the request.  Looking at this more closely, I see that the error is on the reading of the data, and the write seems to succeed.  This gives me something to check on, since I should be able to see whether or not the servlet actually got her request or not. However, is this a common manifestation of the Connection Reset error?  The write succeeds (or fails silently) and then it is on the read the problem can be detected?  Or does this mean that the socket was fine during the write operation, but then was somehow severed before the read? Mark -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Friday, January 18, 2013 12:06 PM To: 'HttpClient User Discussion' Subject: RE: Connection Reset errors Looks like the stale connection check is enabled by default anyway, so I must have been using it all along. Is this a common thing to do, like for browsers?  Granted, she is in our app more than most others, but I don't think she experiences issues with other applications. She is not getting a Connection Refused or some other unable to read exception, but a Connection Reset.  The stale connection check passed, so HttpClient thinks this is a good connection, right?  Or are there limits to how reliable a stale connection check can be? -----Original Message----- From: Oleg Kalnichevski [mailto:olegk@apache.org] Sent: Friday, January 18, 2013 11:24 AM To: HttpClient User Discussion Subject: Re: Connection Reset errors how things were going to turn out with HttpClient, I kept that code in place and made it so I could use either API.  I had her switch back to using the java.net stuff the other day and the problem appeared to go away.  I have configured her system to use the java.net connector again today.  Before I make any conclusions I need some more data from her on each connector. However, the previous data seems to indicate that it is only an issue when using HttpClient (originally 4.1.3, now 4.2.3). It may well be that HttpURLConnection silently retries failed requests without your knowing about it. It certainly did that when I last touched it (which admittedly was a looooooong time ago), and that was precisely the reason I had to stop using it and to look for a better alternative. I do not thing any of these should matter. Oleg inevitable and robust HTTP services have to be prepared to deal with them (most likely by re-trying idempotent methods automatically and reporting the problem back to the caller otherwise). of the blocking I/O model: when not blocked in an I/O operation there is no way for the socket to get notified of the opposite endpoint terminating the connection. While kept alive in the pool blocking HTTP connections can get stale. However, the only way to find it out is to try to attempt an I/O operation on such connection. over and over again. evicting expired connections and connections that have been idle longer than a given period of time. people have commented on this error with HttpClient before.  I just upgraded to HttpClient 4.2.3 to see if that would help at all, and it didn't. how to resolve this would be greatly appreciated.</body>
  </mail>
  <mail>
    <header>RE: Connection Reset errors</header>
    <body>Well, the user went all day without any errors while using the Java.net connector. The error using the HttpClient connector has been happening with HttpClient 4.1 and higher, and did not happen until we upgrade to 4.1.3 (and now is continuing under 4.2.3).  I will have to check on the upgrade path and see if she had been using a 4.0.x version before this, or if they jumped from a version that used a 3.x version. Mark -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Friday, January 18, 2013 1:47 PM To: 'HttpClient User Discussion' Subject: RE: Connection Reset errors Oh, I forgot to add that all my requests are POST requests. -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Friday, January 18, 2013 1:02 PM To: 'HttpClient User Discussion' Subject: RE: Connection Reset errors While she is testing the java.net stuff, I decided to look into the possibility of retrying the request.  Looking at this more closely, I see that the error is on the reading of the data, and the write seems to succeed.  This gives me something to check on, since I should be able to see whether or not the servlet actually got her request or not. However, is this a common manifestation of the Connection Reset error?  The write succeeds (or fails silently) and then it is on the read the problem can be detected?  Or does this mean that the socket was fine during the write operation, but then was somehow severed before the read? Mark -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Friday, January 18, 2013 12:06 PM To: 'HttpClient User Discussion' Subject: RE: Connection Reset errors Looks like the stale connection check is enabled by default anyway, so I must have been using it all along. Is this a common thing to do, like for browsers?  Granted, she is in our app more than most others, but I don't think she experiences issues with other applications. She is not getting a Connection Refused or some other unable to read exception, but a Connection Reset.  The stale connection check passed, so HttpClient thinks this is a good connection, right?  Or are there limits to how reliable a stale connection check can be? -----Original Message----- From: Oleg Kalnichevski [mailto:olegk@apache.org] Sent: Friday, January 18, 2013 11:24 AM To: HttpClient User Discussion Subject: Re: Connection Reset errors how things were going to turn out with HttpClient, I kept that code in place and made it so I could use either API.  I had her switch back to using the java.net stuff the other day and the problem appeared to go away.  I have configured her system to use the java.net connector again today.  Before I make any conclusions I need some more data from her on each connector. However, the previous data seems to indicate that it is only an issue when using HttpClient (originally 4.1.3, now 4.2.3). It may well be that HttpURLConnection silently retries failed requests without your knowing about it. It certainly did that when I last touched it (which admittedly was a looooooong time ago), and that was precisely the reason I had to stop using it and to look for a better alternative. I do not thing any of these should matter. Oleg inevitable and robust HTTP services have to be prepared to deal with them (most likely by re-trying idempotent methods automatically and reporting the problem back to the caller otherwise). of the blocking I/O model: when not blocked in an I/O operation there is no way for the socket to get notified of the opposite endpoint terminating the connection. While kept alive in the pool blocking HTTP connections can get stale. However, the only way to find it out is to try to attempt an I/O operation on such connection. over and over again. evicting expired connections and connections that have been idle longer than a given period of time. people have commented on this error with HttpClient before.  I just upgraded to HttpClient 4.2.3 to see if that would help at all, and it didn't. how to resolve this would be greatly appreciated.</body>
  </mail>
  <mail>
    <header>RE: Connection Reset errors</header>
    <body>I am just not convinced this is a network thing.  It happens too often for her, and never with the java.net connection.  She has a newer machine, maybe threading issues are just more apparent on her hardware. So, maybe the problem is somewhere in my code.  Can you tell me what are the methods that might release a connection back to the pool?  I am wondering if there is a way I could be releasing the connection back to the pool, it gets picked up by something else, and then the original thread tries to close it again or something. The docs say the closing the InputStream will do it, but will anything else do it implicitly? -- Another avenue I am investigating is trying to force the issue by making the connections work harder. I am trying to force the issue doing a lot of requests all at once.  I reduced my MAX down to 1 to force contention.  Everything seems to work pretty well.  However, I did get the Connection Reset error twice on my machine!  The logs were fairly regular looking since there is only one connection at a time.  However, when this happened, it looks like it is sending 2 request at once.  This shouldn't be happening because there is only one connection. (Granted, it is hard to tell if the logging is indicating a threading issue, or if the "Connection Reset" error caused the logging abnormality.) I don't need to block around the "httpClient.execute(request);" do I? I am using HttpClient 4.2.3 (with HttpCore 4.2.3) -- I do this to establish the connection: This is run once in the setup ----------------------------- This is called when I want to make a request -------------------------------------------- -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Friday, January 18, 2013 5:06 PM To: 'HttpClient User Discussion' Subject: RE: Connection Reset errors Well, the user went all day without any errors while using the Java.net connector. The error using the HttpClient connector has been happening with HttpClient 4.1 and higher, and did not happen until we upgrade to 4.1.3 (and now is continuing under 4.2.3).  I will have to check on the upgrade path and see if she had been using a 4.0.x version before this, or if they jumped from a version that used a 3.x version. Mark -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Friday, January 18, 2013 1:47 PM To: 'HttpClient User Discussion' Subject: RE: Connection Reset errors Oh, I forgot to add that all my requests are POST requests. -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Friday, January 18, 2013 1:02 PM To: 'HttpClient User Discussion' Subject: RE: Connection Reset errors While she is testing the java.net stuff, I decided to look into the possibility of retrying the request.  Looking at this more closely, I see that the error is on the reading of the data, and the write seems to succeed.  This gives me something to check on, since I should be able to see whether or not the servlet actually got her request or not. However, is this a common manifestation of the Connection Reset error?  The write succeeds (or fails silently) and then it is on the read the problem can be detected?  Or does this mean that the socket was fine during the write operation, but then was somehow severed before the read? Mark -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Friday, January 18, 2013 12:06 PM To: 'HttpClient User Discussion' Subject: RE: Connection Reset errors Looks like the stale connection check is enabled by default anyway, so I must have been using it all along. Is this a common thing to do, like for browsers?  Granted, she is in our app more than most others, but I don't think she experiences issues with other applications. She is not getting a Connection Refused or some other unable to read exception, but a Connection Reset.  The stale connection check passed, so HttpClient thinks this is a good connection, right?  Or are there limits to how reliable a stale connection check can be? -----Original Message----- From: Oleg Kalnichevski [mailto:olegk@apache.org] Sent: Friday, January 18, 2013 11:24 AM To: HttpClient User Discussion Subject: Re: Connection Reset errors how things were going to turn out with HttpClient, I kept that code in place and made it so I could use either API.  I had her switch back to using the java.net stuff the other day and the problem appeared to go away.  I have configured her system to use the java.net connector again today.  Before I make any conclusions I need some more data from her on each connector. However, the previous data seems to indicate that it is only an issue when using HttpClient (originally 4.1.3, now 4.2.3). It may well be that HttpURLConnection silently retries failed requests without your knowing about it. It certainly did that when I last touched it (which admittedly was a looooooong time ago), and that was precisely the reason I had to stop using it and to look for a better alternative. I do not thing any of these should matter. Oleg inevitable and robust HTTP services have to be prepared to deal with them (most likely by re-trying idempotent methods automatically and reporting the problem back to the caller otherwise). of the blocking I/O model: when not blocked in an I/O operation there is no way for the socket to get notified of the opposite endpoint terminating the connection. While kept alive in the pool blocking HTTP connections can get stale. However, the only way to find it out is to try to attempt an I/O operation on such connection. over and over again. evicting expired connections and connections that have been idle longer than a given period of time. people have commented on this error with HttpClient before.  I just upgraded to HttpClient 4.2.3 to see if that would help at all, and it didn't. how to resolve this would be greatly appreciated.</body>
  </mail>
  <mail>
    <header>RE: Connection Reset errors</header>
    <body>Something else I thought of is this:  We have some transactions where the response is not too important.  For instance, if we send a pulse to the server to let it know we are still here. We don't really care what the response is, if we didn't get an error then we did our part. If we did get and error, we will try again soon anyway, so no big deal. Is there something that needs to be done on a connection that is closed before reading all the data?  I have never experienced reading stale data, so this seems a bit unlikely to me. However, if there is implicit cleanup that is being done, could this be, in some way, causing my problems? -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Thursday, January 24, 2013 10:29 AM To: 'HttpClient User Discussion' Subject: RE: Connection Reset errors I am just not convinced this is a network thing.  It happens too often for her, and never with the java.net connection.  She has a newer machine, maybe threading issues are just more apparent on her hardware. So, maybe the problem is somewhere in my code.  Can you tell me what are the methods that might release a connection back to the pool?  I am wondering if there is a way I could be releasing the connection back to the pool, it gets picked up by something else, and then the original thread tries to close it again or something. The docs say the closing the InputStream will do it, but will anything else do it implicitly? -- Another avenue I am investigating is trying to force the issue by making the connections work harder. I am trying to force the issue doing a lot of requests all at once.  I reduced my MAX down to 1 to force contention.  Everything seems to work pretty well.  However, I did get the Connection Reset error twice on my machine!  The logs were fairly regular looking since there is only one connection at a time.  However, when this happened, it looks like it is sending 2 request at once.  This shouldn't be happening because there is only one connection. (Granted, it is hard to tell if the logging is indicating a threading issue, or if the "Connection Reset" error caused the logging abnormality.) I don't need to block around the "httpClient.execute(request);" do I? I am using HttpClient 4.2.3 (with HttpCore 4.2.3) -- I do this to establish the connection: This is run once in the setup ----------------------------- This is called when I want to make a request -------------------------------------------- -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Friday, January 18, 2013 5:06 PM To: 'HttpClient User Discussion' Subject: RE: Connection Reset errors Well, the user went all day without any errors while using the Java.net connector. The error using the HttpClient connector has been happening with HttpClient 4.1 and higher, and did not happen until we upgrade to 4.1.3 (and now is continuing under 4.2.3).  I will have to check on the upgrade path and see if she had been using a 4.0.x version before this, or if they jumped from a version that used a 3.x version. Mark -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Friday, January 18, 2013 1:47 PM To: 'HttpClient User Discussion' Subject: RE: Connection Reset errors Oh, I forgot to add that all my requests are POST requests. -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Friday, January 18, 2013 1:02 PM To: 'HttpClient User Discussion' Subject: RE: Connection Reset errors While she is testing the java.net stuff, I decided to look into the possibility of retrying the request.  Looking at this more closely, I see that the error is on the reading of the data, and the write seems to succeed.  This gives me something to check on, since I should be able to see whether or not the servlet actually got her request or not. However, is this a common manifestation of the Connection Reset error?  The write succeeds (or fails silently) and then it is on the read the problem can be detected?  Or does this mean that the socket was fine during the write operation, but then was somehow severed before the read? Mark -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Friday, January 18, 2013 12:06 PM To: 'HttpClient User Discussion' Subject: RE: Connection Reset errors Looks like the stale connection check is enabled by default anyway, so I must have been using it all along. Is this a common thing to do, like for browsers?  Granted, she is in our app more than most others, but I don't think she experiences issues with other applications. She is not getting a Connection Refused or some other unable to read exception, but a Connection Reset.  The stale connection check passed, so HttpClient thinks this is a good connection, right?  Or are there limits to how reliable a stale connection check can be? -----Original Message----- From: Oleg Kalnichevski [mailto:olegk@apache.org] Sent: Friday, January 18, 2013 11:24 AM To: HttpClient User Discussion Subject: Re: Connection Reset errors how things were going to turn out with HttpClient, I kept that code in place and made it so I could use either API.  I had her switch back to using the java.net stuff the other day and the problem appeared to go away.  I have configured her system to use the java.net connector again today.  Before I make any conclusions I need some more data from her on each connector. However, the previous data seems to indicate that it is only an issue when using HttpClient (originally 4.1.3, now 4.2.3). It may well be that HttpURLConnection silently retries failed requests without your knowing about it. It certainly did that when I last touched it (which admittedly was a looooooong time ago), and that was precisely the reason I had to stop using it and to look for a better alternative. I do not thing any of these should matter. Oleg inevitable and robust HTTP services have to be prepared to deal with them (most likely by re-trying idempotent methods automatically and reporting the problem back to the caller otherwise). of the blocking I/O model: when not blocked in an I/O operation there is no way for the socket to get notified of the opposite endpoint terminating the connection. While kept alive in the pool blocking HTTP connections can get stale. However, the only way to find it out is to try to attempt an I/O operation on such connection. over and over again. evicting expired connections and connections that have been idle longer than a given period of time. people have commented on this error with HttpClient before.  I just upgraded to HttpClient 4.2.3 to see if that would help at all, and it didn't. how to resolve this would be greatly appreciated.</body>
  </mail>
  <mail>
    <header>Re: Connection Reset errors</header>
    <body>Mark You do not need to do anything special other than closing the content input stream of the response entity (if it is present) to ensure proper resource deallocation. What is important that it has to be done no matter if you need the content or not. I do not think the problem you are dealing with has anything to do with resource management. There are probably several things you might want to try out (1) if you can confirm that this issue is HttpClient version specific and tell me what version of HttpClient exhibited it first (say, after upgrade from 4.0.3 to 4.1) I could analyze the differences and try to figure out what could potentially be the cause of connection resets. (2) This is entirely possible this is somehow SSL related and connection gets reset by the SSL stack. You might want to run your app with SSL debug enabled and see if there is anything in the SSL logs that could help explain connection being reset. (3) Otherwise there is no way around getting very close and personal with Wireshark. Oleg not too important.  For instance, if we send a pulse to the server to let it know we are still here.  We don't really care what the response is, if we didn't get an error then we did our part.  If we did get and error, we will try again soon anyway, so no big deal. all the data?  I have never experienced reading stale data, so this seems a bit unlikely to me.  However, if there is implicit cleanup that is being done, could this be, in some way, causing my problems? with the java.net connection.  She has a newer machine, maybe threading issues are just more apparent on her hardware. that might release a connection back to the pool?  I am wondering if there is a way I could be releasing the connection back to the pool, it gets picked up by something else, and then the original thread tries to close it again or something. work harder. down to 1 to force contention.  Everything seems to work pretty well.  However, I did get the Connection Reset error twice on my machine!  The logs were fairly regular looking since there is only one connection at a time.  However, when this happened, it looks like it is sending 2 request at once.  This shouldn't be happening because there is only one connection. (Granted, it is hard to tell if the logging is indicating a threading issue, or if the "Connection Reset" error caused the logging abnormality.) and did not happen until we upgrade to 4.1.3 (and now is continuing under 4.2.3).  I will have to check on the upgrade path and see if she had been using a 4.0.x version before this, or if they jumped from a version that used a 3.x version. the request.  Looking at this more closely, I see that the error is on the reading of the data, and the write seems to succeed.  This gives me something to check on, since I should be able to see whether or not the servlet actually got her request or not. (or fails silently) and then it is on the read the problem can be detected?  Or does this mean that the socket was fine during the write operation, but then was somehow severed before the read? using it all along. most others, but I don't think she experiences issues with other applications. Connection Reset.  The stale connection check passed, so HttpClient thinks this is a good connection, right?  Or are there limits to how reliable a stale connection check can be? sure how things were going to turn out with HttpClient, I kept that code in place and made it so I could use either API.  I had her switch back to using the java.net stuff the other day and the problem appeared to go away.  I have configured her system to use the java.net connector again today.  Before I make any conclusions I need some more data from her on each connector.  However, the previous data seems to indicate that it is only an issue when using HttpClient (originally 4.1.3, now 4.2.3). about it. It certainly did that when I last touched it (which admittedly was a looooooong time ago), and that was precisely the reason I had to stop using it and to look for a better alternative. are inevitable and robust HTTP services have to be prepared to deal with them (most likely by re-trying idempotent methods automatically and reporting the problem back to the caller otherwise). of the blocking I/O model: when not blocked in an I/O operation there is no way for the socket to get notified of the opposite endpoint terminating the connection. While kept alive in the pool blocking HTTP connections can get stale. However, the only way to find it out is to try to attempt an I/O operation on such connection. source over and over again. evicting expired connections and connections that have been idle longer than a given period of time. that people have commented on this error with HttpClient before.  I just upgraded to HttpClient 4.2.3 to see if that would help at all, and it didn't. on how to resolve this would be greatly appreciated. Source)</body>
  </mail>
  <mail>
    <header>RE: Connection Reset errors</header>
    <body>Before the upgrade, she was using HttpClient 4.01. --- Not sure if it is kosher to send an attachment to the list, but here is a test program.  This errors for me after just a minute or two. The website it is connecting to is just a Tomcat server running the default ROOT webapp. It is delivering the default HTML page we have set up on that.  I would imagine that it is ignoring the POST and treating it like a GET In production, where she is having the problem, it is using the default HttpsURLConnection socket factory.  However, for testing, I am using this one to bypass the normal certificate checks and stuff.  It happens to both of us, so I don't think the error has anything to do with the socket factory.  The message that we send in production are also a lot longer, so I don't think it has anything to do with message size either. -----Original Message----- From: Oleg Kalnichevski [mailto:olegk@apache.org] Sent: Friday, January 25, 2013 7:46 AM To: HttpClient User Discussion Subject: Re: Connection Reset errors Mark You do not need to do anything special other than closing the content input stream of the response entity (if it is present) to ensure proper resource deallocation. What is important that it has to be done no matter if you need the content or not. I do not think the problem you are dealing with has anything to do with resource management. There are probably several things you might want to try out (1) if you can confirm that this issue is HttpClient version specific and tell me what version of HttpClient exhibited it first (say, after upgrade from 4.0.3 to 4.1) I could analyze the differences and try to figure out what could potentially be the cause of connection resets.  (2) This is entirely possible this is somehow SSL related and connection gets reset by the SSL stack. You might want to run your app with SSL debug enabled and see if there is anything in the SSL logs that could help explain connection being reset. (3) Otherwise there is no way around getting very close and personal with Wireshark. Oleg not too important.  For instance, if we send a pulse to the server to let it know we are still here.  We don't really care what the response is, if we didn't get an error then we did our part.  If we did get and error, we will try again soon anyway, so no big deal. all the data?  I have never experienced reading stale data, so this seems a bit unlikely to me.  However, if there is implicit cleanup that is being done, could this be, in some way, causing my problems? with the java.net connection.  She has a newer machine, maybe threading issues are just more apparent on her hardware. that might release a connection back to the pool?  I am wondering if there is a way I could be releasing the connection back to the pool, it gets picked up by something else, and then the original thread tries to close it again or something. work harder. and did not happen until we upgrade to 4.1.3 (and now is continuing under 4.2.3).  I will have to check on the upgrade path and see if she had been using a 4.0.x version before this, or if they jumped from a version that used a 3.x version. the request.  Looking at this more closely, I see that the error is on the reading of the data, and the write seems to succeed.  This gives me something to check on, since I should be able to see whether or not the servlet actually got her request or not. (or fails silently) and then it is on the read the problem can be detected?  Or does this mean that the socket was fine during the write operation, but then was somehow severed before the read? using it all along. most others, but I don't think she experiences issues with other applications. Connection Reset.  The stale connection check passed, so HttpClient thinks this is a good connection, right?  Or are there limits to how reliable a stale connection check can be? sure how things were going to turn out with HttpClient, I kept that code in place and made it so I could use either API.  I had her switch back to using the java.net stuff the other day and the problem appeared to go away.  I have configured her system to use the java.net connector again today.  Before I make any conclusions I need some more data from her on each connector.  However, the previous data seems to indicate that it is only an issue when using HttpClient (originally 4.1.3, now 4.2.3). about it. It certainly did that when I last touched it (which admittedly was a looooooong time ago), and that was precisely the reason I had to stop using it and to look for a better alternative. are inevitable and robust HTTP services have to be prepared to deal with them (most likely by re-trying idempotent methods automatically and reporting the problem back to the caller otherwise). of the blocking I/O model: when not blocked in an I/O operation there is no way for the socket to get notified of the opposite endpoint terminating the connection. While kept alive in the pool blocking HTTP connections can get stale. However, the only way to find it out is to try to attempt an I/O operation on such connection. source over and over again. evicting expired connections and connections that have been idle longer than a given period of time. and see that people have commented on this error with HttpClient before.  I just upgraded to HttpClient 4.2.3 to see if that would help at all, and it didn't. on how to resolve this would be greatly appreciated. Source)</body>
  </mail>
  <mail>
    <header>RE: Connection Reset errors</header>
    <body>I am running the test using a non-SSL connection and the Connection Reset is not happening. I am going to continue to run the test, but none of the SSL tests ran this long without failing. -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Friday, January 25, 2013 11:07 AM To: 'HttpClient User Discussion' Subject: RE: Connection Reset errors Before the upgrade, she was using HttpClient 4.01. --- Not sure if it is kosher to send an attachment to the list, but here is a test program.  This errors for me after just a minute or two. The website it is connecting to is just a Tomcat server running the default ROOT webapp. It is delivering the default HTML page we have set up on that.  I would imagine that it is ignoring the POST and treating it like a GET In production, where she is having the problem, it is using the default HttpsURLConnection socket factory.  However, for testing, I am using this one to bypass the normal certificate checks and stuff.  It happens to both of us, so I don't think the error has anything to do with the socket factory.  The message that we send in production are also a lot longer, so I don't think it has anything to do with message size either. -----Original Message----- From: Oleg Kalnichevski [mailto:olegk@apache.org] Sent: Friday, January 25, 2013 7:46 AM To: HttpClient User Discussion Subject: Re: Connection Reset errors Mark You do not need to do anything special other than closing the content input stream of the response entity (if it is present) to ensure proper resource deallocation. What is important that it has to be done no matter if you need the content or not. I do not think the problem you are dealing with has anything to do with resource management. There are probably several things you might want to try out (1) if you can confirm that this issue is HttpClient version specific and tell me what version of HttpClient exhibited it first (say, after upgrade from 4.0.3 to 4.1) I could analyze the differences and try to figure out what could potentially be the cause of connection resets.  (2) This is entirely possible this is somehow SSL related and connection gets reset by the SSL stack. You might want to run your app with SSL debug enabled and see if there is anything in the SSL logs that could help explain connection being reset. (3) Otherwise there is no way around getting very close and personal with Wireshark. Oleg not too important.  For instance, if we send a pulse to the server to let it know we are still here.  We don't really care what the response is, if we didn't get an error then we did our part.  If we did get and error, we will try again soon anyway, so no big deal. all the data?  I have never experienced reading stale data, so this seems a bit unlikely to me.  However, if there is implicit cleanup that is being done, could this be, in some way, causing my problems? with the java.net connection.  She has a newer machine, maybe threading issues are just more apparent on her hardware. that might release a connection back to the pool?  I am wondering if there is a way I could be releasing the connection back to the pool, it gets picked up by something else, and then the original thread tries to close it again or something. work harder. and did not happen until we upgrade to 4.1.3 (and now is continuing under 4.2.3).  I will have to check on the upgrade path and see if she had been using a 4.0.x version before this, or if they jumped from a version that used a 3.x version. the request.  Looking at this more closely, I see that the error is on the reading of the data, and the write seems to succeed.  This gives me something to check on, since I should be able to see whether or not the servlet actually got her request or not. (or fails silently) and then it is on the read the problem can be detected?  Or does this mean that the socket was fine during the write operation, but then was somehow severed before the read? using it all along. most others, but I don't think she experiences issues with other applications. Connection Reset.  The stale connection check passed, so HttpClient thinks this is a good connection, right?  Or are there limits to how reliable a stale connection check can be? sure how things were going to turn out with HttpClient, I kept that code in place and made it so I could use either API.  I had her switch back to using the java.net stuff the other day and the problem appeared to go away.  I have configured her system to use the java.net connector again today.  Before I make any conclusions I need some more data from her on each connector.  However, the previous data seems to indicate that it is only an issue when using HttpClient (originally 4.1.3, now 4.2.3). about it. It certainly did that when I last touched it (which admittedly was a looooooong time ago), and that was precisely the reason I had to stop using it and to look for a better alternative. are inevitable and robust HTTP services have to be prepared to deal with them (most likely by re-trying idempotent methods automatically and reporting the problem back to the caller otherwise). of the blocking I/O model: when not blocked in an I/O operation there is no way for the socket to get notified of the opposite endpoint terminating the connection. While kept alive in the pool blocking HTTP connections can get stale. However, the only way to find it out is to try to attempt an I/O operation on such connection. source over and over again. evicting expired connections and connections that have been idle longer than a given period of time. and see that people have commented on this error with HttpClient before.  I just upgraded to HttpClient 4.2.3 to see if that would help at all, and it didn't. on how to resolve this would be greatly appreciated. Source)</body>
  </mail>
  <mail>
    <header>RE: Connection Reset errors</header>
    <body>I set it back to SSL for now, took out the wait() in my loop, set MAX to 1 (pool size).  So, I had just 1 thread making the request over and over again without pausing. Below is the last part of what I got. Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.PoolingClientConnectionManager releaseConnection alive indefinitely Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.PoolingClientConnectionManager releaseConnection kept alive: 1; route allocated: 1 of 1; total allocated: 1 of 1] Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.PoolingClientConnectionManager closeExpiredConnections FINE: Closing expired connections Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.PoolingClientConnectionManager requestConnection alive: 1; route allocated: 1 of 1; total allocated: 1 of 1] Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.PoolingClientConnectionManager leaseConnection kept alive: 0; route allocated: 1 of 1; total allocated: 1 of 1] Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.client.DefaultRequestDirector execute FINE: Stale connection check Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.client.protocol.RequestAddCookies process FINE: CookieSpec selected: best-match Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.client.protocol.RequestAuthCache process FINE: Auth cache not set in the context Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.client.protocol.RequestTargetAuthentication process FINE: Target auth state: UNCHALLENGED Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.client.protocol.RequestProxyAuthentication process FINE: Proxy auth state: UNCHALLENGED Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.client.DefaultRequestDirector tryExecute FINE: Attempt 1 to execute request Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.DefaultClientConnection sendRequestHeader FINE: Sending request: POST / HTTP/1.1 Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.Wire wire FINE: &amp;gt;&amp;gt; "POST / HTTP/1.1[\r][\n]" Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.Wire wire FINE: &amp;gt;&amp;gt; "Content-Type: binary[\r][\n]" Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.Wire wire FINE: &amp;gt;&amp;gt; "Content-Length: 34[\r][\n]" Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.Wire wire FINE: &amp;gt;&amp;gt; "Host: x86test.dev.donnell.com:5502[\r][\n]" Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.Wire wire FINE: &amp;gt;&amp;gt; "Connection: Keep-Alive[\r][\n]" Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.Wire wire FINE: &amp;gt;&amp;gt; "[\r][\n]" Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.DefaultClientConnection sendRequestHeader FINE: &amp;gt;&amp;gt; POST / HTTP/1.1 Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.DefaultClientConnection sendRequestHeader FINE: &amp;gt;&amp;gt; Content-Type: binary Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.DefaultClientConnection sendRequestHeader FINE: &amp;gt;&amp;gt; Content-Length: 34 Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.DefaultClientConnection sendRequestHeader FINE: &amp;gt;&amp;gt; Host: x86test.dev.donnell.com:5502 Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.DefaultClientConnection sendRequestHeader FINE: &amp;gt;&amp;gt; Connection: Keep-Alive Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.Wire wire FINE: &amp;gt;&amp;gt; "0000000100 XXXXXXXXXXXXXXXXXXXXXXX" Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.DefaultClientConnection close FINE: Connection 0.0.0.0:61602&amp;lt;-&amp;gt;192.9.201.75:5502 closed Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.client.DefaultRequestDirector tryExecute FINE: Closing the connection. Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.DefaultClientConnection close FINE: Connection 0.0.0.0:61602&amp;lt;-&amp;gt;192.9.201.75:5502 closed Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.DefaultClientConnection shutdown FINE: Connection 0.0.0.0:61602&amp;lt;-&amp;gt;192.9.201.75:5502 shut down Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.DefaultClientConnection close FINE: Connection 0.0.0.0:61602&amp;lt;-&amp;gt;192.9.201.75:5502 closed Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.PoolingClientConnectionManager releaseConnection kept alive: 0; route allocated: 0 of 1; total allocated: 0 of 1] java.net.SocketException: Connection reset &amp;#009;at java.net.SocketInputStream.read(SocketInputStream.java:168) &amp;#009;at com.sun.net.ssl.internal.ssl.InputRecord.readFully(InputRecord.java:293) &amp;#009;at com.sun.net.ssl.internal.ssl.InputRecord.readV3Record(InputRecord.java:405) &amp;#009;at com.sun.net.ssl.internal.ssl.InputRecord.read(InputRecord.java:360) &amp;#009;at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:863) &amp;#009;at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readDataRecord(SSLSocketImpl.java:820) &amp;#009;at com.sun.net.ssl.internal.ssl.AppInputStream.read(AppInputStream.java:75) &amp;#009;at org.apache.http.impl.io.AbstractSessionInputBuffer.fillBuffer(AbstractSessionInputBuffer.java:166) &amp;#009;at org.apache.http.impl.io.SocketInputBuffer.fillBuffer(SocketInputBuffer.java:90) &amp;#009;at org.apache.http.impl.io.AbstractSessionInputBuffer.readLine(AbstractSessionInputBuffer.java:281) &amp;#009;at org.apache.http.impl.conn.LoggingSessionInputBuffer.readLine(LoggingSessionInputBuffer.java:115) &amp;#009;at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:92) &amp;#009;at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:61) &amp;#009;at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:254) &amp;#009;at org.apache.http.impl.AbstractHttpClientConnection.receiveResponseHeader(AbstractHttpClientConnection.java:289) &amp;#009;at org.apache.http.impl.conn.DefaultClientConnection.receiveResponseHeader(DefaultClientConnection.java:252) &amp;#009;at org.apache.http.impl.conn.ManagedClientConnectionImpl.receiveResponseHeader(ManagedClientConnectionImpl.java:191) &amp;#009;at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:300) &amp;#009;at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:127) &amp;#009;at org.apache.http.impl.client.DefaultRequestDirector.tryExecute(DefaultRequestDirector.java:717) &amp;#009;at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:522) &amp;#009;at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:906) &amp;#009;at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:805) &amp;#009;at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:784) &amp;#009;at dsi.app.TestNetwork$Worker.connect(TestNetwork.java:187) &amp;#009;at dsi.app.TestNetwork$Worker.run(TestNetwork.java:153) &amp;#009;at java.lang.Thread.run(Thread.java:662) Java Result: 1 BUILD SUCCESSFUL (total time: 26 seconds) -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Friday, January 25, 2013 11:25 AM To: 'HttpClient User Discussion' Subject: RE: Connection Reset errors I am running the test using a non-SSL connection and the Connection Reset is not happening. I am going to continue to run the test, but none of the SSL tests ran this long without failing. -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Friday, January 25, 2013 11:07 AM To: 'HttpClient User Discussion' Subject: RE: Connection Reset errors Before the upgrade, she was using HttpClient 4.01. --- Not sure if it is kosher to send an attachment to the list, but here is a test program.  This errors for me after just a minute or two. The website it is connecting to is just a Tomcat server running the default ROOT webapp. It is delivering the default HTML page we have set up on that.  I would imagine that it is ignoring the POST and treating it like a GET In production, where she is having the problem, it is using the default HttpsURLConnection socket factory.  However, for testing, I am using this one to bypass the normal certificate checks and stuff.  It happens to both of us, so I don't think the error has anything to do with the socket factory.  The message that we send in production are also a lot longer, so I don't think it has anything to do with message size either. -----Original Message----- From: Oleg Kalnichevski [mailto:olegk@apache.org] Sent: Friday, January 25, 2013 7:46 AM To: HttpClient User Discussion Subject: Re: Connection Reset errors Mark You do not need to do anything special other than closing the content input stream of the response entity (if it is present) to ensure proper resource deallocation. What is important that it has to be done no matter if you need the content or not. I do not think the problem you are dealing with has anything to do with resource management. There are probably several things you might want to try out (1) if you can confirm that this issue is HttpClient version specific and tell me what version of HttpClient exhibited it first (say, after upgrade from 4.0.3 to 4.1) I could analyze the differences and try to figure out what could potentially be the cause of connection resets.  (2) This is entirely possible this is somehow SSL related and connection gets reset by the SSL stack. You might want to run your app with SSL debug enabled and see if there is anything in the SSL logs that could help explain connection being reset. (3) Otherwise there is no way around getting very close and personal with Wireshark. Oleg not too important.  For instance, if we send a pulse to the server to let it know we are still here.  We don't really care what the response is, if we didn't get an error then we did our part.  If we did get and error, we will try again soon anyway, so no big deal. all the data?  I have never experienced reading stale data, so this seems a bit unlikely to me.  However, if there is implicit cleanup that is being done, could this be, in some way, causing my problems? with the java.net connection.  She has a newer machine, maybe threading issues are just more apparent on her hardware. that might release a connection back to the pool?  I am wondering if there is a way I could be releasing the connection back to the pool, it gets picked up by something else, and then the original thread tries to close it again or something. work harder. and did not happen until we upgrade to 4.1.3 (and now is continuing under 4.2.3).  I will have to check on the upgrade path and see if she had been using a 4.0.x version before this, or if they jumped from a version that used a 3.x version. the request.  Looking at this more closely, I see that the error is on the reading of the data, and the write seems to succeed.  This gives me something to check on, since I should be able to see whether or not the servlet actually got her request or not. (or fails silently) and then it is on the read the problem can be detected?  Or does this mean that the socket was fine during the write operation, but then was somehow severed before the read? using it all along. most others, but I don't think she experiences issues with other applications. Connection Reset.  The stale connection check passed, so HttpClient thinks this is a good connection, right?  Or are there limits to how reliable a stale connection check can be? sure how things were going to turn out with HttpClient, I kept that code in place and made it so I could use either API.  I had her switch back to using the java.net stuff the other day and the problem appeared to go away.  I have configured her system to use the java.net connector again today.  Before I make any conclusions I need some more data from her on each connector.  However, the previous data seems to indicate that it is only an issue when using HttpClient (originally 4.1.3, now 4.2.3). about it. It certainly did that when I last touched it (which admittedly was a looooooong time ago), and that was precisely the reason I had to stop using it and to look for a better alternative. are inevitable and robust HTTP services have to be prepared to deal with them (most likely by re-trying idempotent methods automatically and reporting the problem back to the caller otherwise). of the blocking I/O model: when not blocked in an I/O operation there is no way for the socket to get notified of the opposite endpoint terminating the connection. While kept alive in the pool blocking HTTP connections can get stale. However, the only way to find it out is to try to attempt an I/O operation on such connection. source over and over again. evicting expired connections and connections that have been idle longer than a given period of time. and see that people have commented on this error with HttpClient before.  I just upgraded to HttpClient 4.2.3 to see if that would help at all, and it didn't. on how to resolve this would be greatly appreciated. Source)</body>
  </mail>
  <mail>
    <header>RE: Connection Reset errors</header>
    <body>I was able to put a break point in DefaultClientConnection.close().  It sometimes gets called when a connection is releasedManagedConnection is called.  When the Connection Reset happens, it gets called 3 times in quick succession.  However, looks like this is just normal processing for the failed connection.  Whatever error is the root cause seems to have already occurred. The Connection Reset calls do not seem to be correlated to the normal releasedManagedConnection calls that work. First call to close() ---------------------- DefaultClientConnection.close:168 HttpRequestExecutor.closeConnection:144 HttpRequestExecutor.execute:131 DefaultRequestDirector.tryExecute:717 AbstractHttpClient.execute:906 AbstractHttpClient.execute:805 AbstractHttpClient.execute:784 TestNetwork$Worker.connect:187 TestNetwork$Worker.run:153 Thread.run:662 Second call to close() ---------------------- DefaultClientConnection.close:168 ManagedClientConnectionImpl.close:127 DefaultRequestDirector.tryExecute:723 DefaultRequestDirector.execute:522 AbstractHttpClient.execute:906 AbstractHttpClient.execute:805 AbstractHttpClient.execute:784 TestNetwork$Worker.connect:187 TestNetwork$Worker.run:153 Thread.run:662 Third call to close() ---------------------- DefaultClientConnection.close:168 HttpPoolEntry.close:89 AbstractConnPool.release:323 PoolingClientConnectionManager.releaseConnection:278 ManagedClientConnectionImpl.abortConnection:463 DefaultRequestDirector.abortConnection:1157 DefaultRequestDirector.execute:621 AbstractHttpClient.execute:906 AbstractHttpClient.execute:805 AbstractHttpClient.execute:784 TestNetwork$Worker.connect:187 TestNetwork$Worker.run:153 Thread.run:662 -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Friday, January 25, 2013 11:41 AM To: 'HttpClient User Discussion' Subject: RE: Connection Reset errors I set it back to SSL for now, took out the wait() in my loop, set MAX to 1 (pool size).  So, I had just 1 thread making the request over and over again without pausing. Below is the last part of what I got. Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.PoolingClientConnectionManager releaseConnection alive indefinitely Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.PoolingClientConnectionManager releaseConnection kept alive: 1; route allocated: 1 of 1; total allocated: 1 of 1] Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.PoolingClientConnectionManager closeExpiredConnections FINE: Closing expired connections Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.PoolingClientConnectionManager requestConnection alive: 1; route allocated: 1 of 1; total allocated: 1 of 1] Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.PoolingClientConnectionManager leaseConnection kept alive: 0; route allocated: 1 of 1; total allocated: 1 of 1] Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.client.DefaultRequestDirector execute FINE: Stale connection check Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.client.protocol.RequestAddCookies process FINE: CookieSpec selected: best-match Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.client.protocol.RequestAuthCache process FINE: Auth cache not set in the context Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.client.protocol.RequestTargetAuthentication process FINE: Target auth state: UNCHALLENGED Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.client.protocol.RequestProxyAuthentication process FINE: Proxy auth state: UNCHALLENGED Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.client.DefaultRequestDirector tryExecute FINE: Attempt 1 to execute request Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.DefaultClientConnection sendRequestHeader FINE: Sending request: POST / HTTP/1.1 Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.Wire wire FINE: &amp;gt;&amp;gt; "POST / HTTP/1.1[\r][\n]" Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.Wire wire FINE: &amp;gt;&amp;gt; "Content-Type: binary[\r][\n]" Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.Wire wire FINE: &amp;gt;&amp;gt; "Content-Length: 34[\r][\n]" Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.Wire wire FINE: &amp;gt;&amp;gt; "Host: x86test.dev.donnell.com:5502[\r][\n]" Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.Wire wire FINE: &amp;gt;&amp;gt; "Connection: Keep-Alive[\r][\n]" Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.Wire wire FINE: &amp;gt;&amp;gt; "[\r][\n]" Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.DefaultClientConnection sendRequestHeader FINE: &amp;gt;&amp;gt; POST / HTTP/1.1 Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.DefaultClientConnection sendRequestHeader FINE: &amp;gt;&amp;gt; Content-Type: binary Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.DefaultClientConnection sendRequestHeader FINE: &amp;gt;&amp;gt; Content-Length: 34 Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.DefaultClientConnection sendRequestHeader FINE: &amp;gt;&amp;gt; Host: x86test.dev.donnell.com:5502 Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.DefaultClientConnection sendRequestHeader FINE: &amp;gt;&amp;gt; Connection: Keep-Alive Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.Wire wire FINE: &amp;gt;&amp;gt; "0000000100 XXXXXXXXXXXXXXXXXXXXXXX" Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.DefaultClientConnection close FINE: Connection 0.0.0.0:61602&amp;lt;-&amp;gt;192.9.201.75:5502 closed Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.client.DefaultRequestDirector tryExecute FINE: Closing the connection. Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.DefaultClientConnection close FINE: Connection 0.0.0.0:61602&amp;lt;-&amp;gt;192.9.201.75:5502 closed Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.DefaultClientConnection shutdown FINE: Connection 0.0.0.0:61602&amp;lt;-&amp;gt;192.9.201.75:5502 shut down Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.DefaultClientConnection close FINE: Connection 0.0.0.0:61602&amp;lt;-&amp;gt;192.9.201.75:5502 closed Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.PoolingClientConnectionManager releaseConnection kept alive: 0; route allocated: 0 of 1; total allocated: 0 of 1] java.net.SocketException: Connection reset &amp;#009;at java.net.SocketInputStream.read(SocketInputStream.java:168) &amp;#009;at com.sun.net.ssl.internal.ssl.InputRecord.readFully(InputRecord.java:293) &amp;#009;at com.sun.net.ssl.internal.ssl.InputRecord.readV3Record(InputRecord.java:405) &amp;#009;at com.sun.net.ssl.internal.ssl.InputRecord.read(InputRecord.java:360) &amp;#009;at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:863) &amp;#009;at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readDataRecord(SSLSocketImpl.java:820) &amp;#009;at com.sun.net.ssl.internal.ssl.AppInputStream.read(AppInputStream.java:75) &amp;#009;at org.apache.http.impl.io.AbstractSessionInputBuffer.fillBuffer(AbstractSessionInputBuffer.java:166) &amp;#009;at org.apache.http.impl.io.SocketInputBuffer.fillBuffer(SocketInputBuffer.java:90) &amp;#009;at org.apache.http.impl.io.AbstractSessionInputBuffer.readLine(AbstractSessionInputBuffer.java:281) &amp;#009;at org.apache.http.impl.conn.LoggingSessionInputBuffer.readLine(LoggingSessionInputBuffer.java:115) &amp;#009;at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:92) &amp;#009;at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:61) &amp;#009;at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:254) &amp;#009;at org.apache.http.impl.AbstractHttpClientConnection.receiveResponseHeader(AbstractHttpClientConnection.java:289) &amp;#009;at org.apache.http.impl.conn.DefaultClientConnection.receiveResponseHeader(DefaultClientConnection.java:252) &amp;#009;at org.apache.http.impl.conn.ManagedClientConnectionImpl.receiveResponseHeader(ManagedClientConnectionImpl.java:191) &amp;#009;at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:300) &amp;#009;at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:127) &amp;#009;at org.apache.http.impl.client.DefaultRequestDirector.tryExecute(DefaultRequestDirector.java:717) &amp;#009;at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:522) &amp;#009;at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:906) &amp;#009;at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:805) &amp;#009;at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:784) &amp;#009;at dsi.app.TestNetwork$Worker.connect(TestNetwork.java:187) &amp;#009;at dsi.app.TestNetwork$Worker.run(TestNetwork.java:153) &amp;#009;at java.lang.Thread.run(Thread.java:662) Java Result: 1 BUILD SUCCESSFUL (total time: 26 seconds) -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Friday, January 25, 2013 11:25 AM To: 'HttpClient User Discussion' Subject: RE: Connection Reset errors I am running the test using a non-SSL connection and the Connection Reset is not happening. I am going to continue to run the test, but none of the SSL tests ran this long without failing. -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Friday, January 25, 2013 11:07 AM To: 'HttpClient User Discussion' Subject: RE: Connection Reset errors Before the upgrade, she was using HttpClient 4.01. --- Not sure if it is kosher to send an attachment to the list, but here is a test program.  This errors for me after just a minute or two. The website it is connecting to is just a Tomcat server running the default ROOT webapp. It is delivering the default HTML page we have set up on that.  I would imagine that it is ignoring the POST and treating it like a GET In production, where she is having the problem, it is using the default HttpsURLConnection socket factory.  However, for testing, I am using this one to bypass the normal certificate checks and stuff.  It happens to both of us, so I don't think the error has anything to do with the socket factory.  The message that we send in production are also a lot longer, so I don't think it has anything to do with message size either. -----Original Message----- From: Oleg Kalnichevski [mailto:olegk@apache.org] Sent: Friday, January 25, 2013 7:46 AM To: HttpClient User Discussion Subject: Re: Connection Reset errors Mark You do not need to do anything special other than closing the content input stream of the response entity (if it is present) to ensure proper resource deallocation. What is important that it has to be done no matter if you need the content or not. I do not think the problem you are dealing with has anything to do with resource management. There are probably several things you might want to try out (1) if you can confirm that this issue is HttpClient version specific and tell me what version of HttpClient exhibited it first (say, after upgrade from 4.0.3 to 4.1) I could analyze the differences and try to figure out what could potentially be the cause of connection resets.  (2) This is entirely possible this is somehow SSL related and connection gets reset by the SSL stack. You might want to run your app with SSL debug enabled and see if there is anything in the SSL logs that could help explain connection being reset. (3) Otherwise there is no way around getting very close and personal with Wireshark. Oleg not too important.  For instance, if we send a pulse to the server to let it know we are still here.  We don't really care what the response is, if we didn't get an error then we did our part.  If we did get and error, we will try again soon anyway, so no big deal. all the data?  I have never experienced reading stale data, so this seems a bit unlikely to me.  However, if there is implicit cleanup that is being done, could this be, in some way, causing my problems? with the java.net connection.  She has a newer machine, maybe threading issues are just more apparent on her hardware. that might release a connection back to the pool?  I am wondering if there is a way I could be releasing the connection back to the pool, it gets picked up by something else, and then the original thread tries to close it again or something. work harder. and did not happen until we upgrade to 4.1.3 (and now is continuing under 4.2.3).  I will have to check on the upgrade path and see if she had been using a 4.0.x version before this, or if they jumped from a version that used a 3.x version. the request.  Looking at this more closely, I see that the error is on the reading of the data, and the write seems to succeed.  This gives me something to check on, since I should be able to see whether or not the servlet actually got her request or not. (or fails silently) and then it is on the read the problem can be detected?  Or does this mean that the socket was fine during the write operation, but then was somehow severed before the read? using it all along. most others, but I don't think she experiences issues with other applications. Connection Reset.  The stale connection check passed, so HttpClient thinks this is a good connection, right?  Or are there limits to how reliable a stale connection check can be? sure how things were going to turn out with HttpClient, I kept that code in place and made it so I could use either API.  I had her switch back to using the java.net stuff the other day and the problem appeared to go away.  I have configured her system to use the java.net connector again today.  Before I make any conclusions I need some more data from her on each connector.  However, the previous data seems to indicate that it is only an issue when using HttpClient (originally 4.1.3, now 4.2.3). about it. It certainly did that when I last touched it (which admittedly was a looooooong time ago), and that was precisely the reason I had to stop using it and to look for a better alternative. are inevitable and robust HTTP services have to be prepared to deal with them (most likely by re-trying idempotent methods automatically and reporting the problem back to the caller otherwise). of the blocking I/O model: when not blocked in an I/O operation there is no way for the socket to get notified of the opposite endpoint terminating the connection. While kept alive in the pool blocking HTTP connections can get stale. However, the only way to find it out is to try to attempt an I/O operation on such connection. source over and over again. evicting expired connections and connections that have been idle longer than a given period of time. and see that people have commented on this error with HttpClient before.  I just upgraded to HttpClient 4.2.3 to see if that would help at all, and it didn't. on how to resolve this would be greatly appreciated. Source)</body>
  </mail>
  <mail>
    <header>RE: Connection Reset errors</header>
    <body>I ran my test program using 4.01 and it seems to fail even faster.  (Switching a few things around to get it to compile, or course.  Using ThreadSafeClientConnManager.) This is odd, since the user said she didn't experience the problem until the upgrade which gave her the newer version.  Must also be something else going on. Still, the Java.net stuff is completely error free.  (I can't say for sure if she would notice automatic retries, if they occurred.) Is there any way I can reduce the occurrences of the error?  Something I could set for specific users that are experiencing this problem? ------------------------------------ Stack trace and debug using 4.0.1 FINE: Stale connection check Thread-00:Jan 28, 2013 12:08:45 PM org.apache.http.client.protocol.RequestAddCookies process FINE: CookieSpec selected: best-match Thread-00:Jan 28, 2013 12:08:45 PM org.apache.http.impl.client.DefaultRequestDirector execute FINE: Attempt 1 to execute request Thread-00:Jan 28, 2013 12:08:45 PM org.apache.http.impl.conn.DefaultClientConnection sendRequestHeader FINE: Sending request: POST / HTTP/1.1 Thread-00:Jan 28, 2013 12:08:45 PM org.apache.http.impl.conn.Wire wire FINE: &amp;gt;&amp;gt; "POST / HTTP/1.1[EOL]" Thread-00:Jan 28, 2013 12:08:45 PM org.apache.http.impl.conn.Wire wire FINE: &amp;gt;&amp;gt; "Content-Type: binary[EOL]" Thread-00:Jan 28, 2013 12:08:45 PM org.apache.http.impl.conn.Wire wire FINE: &amp;gt;&amp;gt; "Content-Length: 34[EOL]" Thread-00:Jan 28, 2013 12:08:45 PM org.apache.http.impl.conn.Wire wire FINE: &amp;gt;&amp;gt; "Host: x86test.dev.donnell.com:5502[EOL]" Thread-00:Jan 28, 2013 12:08:45 PM org.apache.http.impl.conn.Wire wire FINE: &amp;gt;&amp;gt; "Connection: Keep-Alive[EOL]" Thread-00:Jan 28, 2013 12:08:45 PM org.apache.http.impl.conn.Wire wire FINE: &amp;gt;&amp;gt; "[EOL]" Thread-00:Jan 28, 2013 12:08:45 PM org.apache.http.impl.conn.DefaultClientConnection sendRequestHeader FINE: &amp;gt;&amp;gt; POST / HTTP/1.1 Thread-00:Jan 28, 2013 12:08:45 PM org.apache.http.impl.conn.DefaultClientConnection sendRequestHeader FINE: &amp;gt;&amp;gt; Content-Type: binary Thread-00:Jan 28, 2013 12:08:45 PM org.apache.http.impl.conn.DefaultClientConnection sendRequestHeader FINE: &amp;gt;&amp;gt; Content-Length: 34 Thread-00:Jan 28, 2013 12:08:45 PM org.apache.http.impl.conn.DefaultClientConnection sendRequestHeader FINE: &amp;gt;&amp;gt; Host: x86test.dev.donnell.com:5502 Thread-00:Jan 28, 2013 12:08:45 PM org.apache.http.impl.conn.DefaultClientConnection sendRequestHeader FINE: &amp;gt;&amp;gt; Connection: Keep-Alive Thread-00:Jan 28, 2013 12:08:45 PM org.apache.http.impl.conn.Wire wire FINE: &amp;gt;&amp;gt; "0000000300 XXXXXXXXXXXXXXXXXXXXXXX" Thread-00:Jan 28, 2013 12:08:45 PM org.apache.http.impl.conn.DefaultClientConnection close FINE: Connection closed Thread-00:Jan 28, 2013 12:08:45 PM org.apache.http.impl.client.DefaultRequestDirector execute FINE: Closing the connection. Thread-00:Jan 28, 2013 12:08:45 PM org.apache.http.impl.conn.DefaultClientConnection close FINE: Connection closed Thread-00:Jan 28, 2013 12:08:45 PM org.apache.http.impl.conn.DefaultClientConnection shutdown FINE: Connection shut down Thread-00:Jan 28, 2013 12:08:45 PM org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager releaseConnection FINE: Released connection is not reusable. Thread-00:Jan 28, 2013 12:08:45 PM org.apache.http.impl.conn.tsccm.ConnPoolByRoute freeEntry Thread-00:Jan 28, 2013 12:08:45 PM org.apache.http.impl.conn.tsccm.ConnPoolByRoute notifyWaitingThread FINE: Notifying no-one, there are no waiting threads java.net.SocketException: Connection reset &amp;#009;at java.net.SocketInputStream.read(SocketInputStream.java:168) &amp;#009;at com.sun.net.ssl.internal.ssl.InputRecord.readFully(InputRecord.java:293) &amp;#009;at com.sun.net.ssl.internal.ssl.InputRecord.readV3Record(InputRecord.java:405) &amp;#009;at com.sun.net.ssl.internal.ssl.InputRecord.read(InputRecord.java:360) &amp;#009;at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:798) &amp;#009;at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readDataRecord(SSLSocketImpl.java:755) &amp;#009;at com.sun.net.ssl.internal.ssl.AppInputStream.read(AppInputStream.java:75) &amp;#009;at org.apache.http.impl.io.AbstractSessionInputBuffer.fillBuffer(AbstractSessionInputBuffer.java:130) &amp;#009;at org.apache.http.impl.io.SocketInputBuffer.fillBuffer(SocketInputBuffer.java:127) &amp;#009;at org.apache.http.impl.io.AbstractSessionInputBuffer.readLine(AbstractSessionInputBuffer.java:233) &amp;#009;at org.apache.http.impl.conn.LoggingSessionInputBuffer.readLine(LoggingSessionInputBuffer.java:100) &amp;#009;at org.apache.http.impl.conn.DefaultResponseParser.parseHead(DefaultResponseParser.java:98) &amp;#009;at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:210) &amp;#009;at org.apache.http.impl.AbstractHttpClientConnection.receiveResponseHeader(AbstractHttpClientConnection.java:271) &amp;#009;at org.apache.http.impl.conn.DefaultClientConnection.receiveResponseHeader(DefaultClientConnection.java:227) &amp;#009;at org.apache.http.impl.conn.AbstractClientConnAdapter.receiveResponseHeader(AbstractClientConnAdapter.java:209) &amp;#009;at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:292) &amp;#009;at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:126) &amp;#009;at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:483) &amp;#009;at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:641) &amp;#009;at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:576) &amp;#009;at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:554) &amp;#009;at dsi.app.TestNetwork$Worker.connect(TestNetwork.java:191) &amp;#009;at dsi.app.TestNetwork$Worker.run(TestNetwork.java:157) &amp;#009;at java.lang.Thread.run(Thread.java:662) -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Friday, January 25, 2013 12:30 PM To: 'HttpClient User Discussion' Subject: RE: Connection Reset errors I was able to put a break point in DefaultClientConnection.close().  It sometimes gets called when a connection is releasedManagedConnection is called.  When the Connection Reset happens, it gets called 3 times in quick succession.  However, looks like this is just normal processing for the failed connection.  Whatever error is the root cause seems to have already occurred. The Connection Reset calls do not seem to be correlated to the normal releasedManagedConnection calls that work. First call to close() ---------------------- DefaultClientConnection.close:168 HttpRequestExecutor.closeConnection:144 HttpRequestExecutor.execute:131 DefaultRequestDirector.tryExecute:717 AbstractHttpClient.execute:906 AbstractHttpClient.execute:805 AbstractHttpClient.execute:784 TestNetwork$Worker.connect:187 TestNetwork$Worker.run:153 Thread.run:662 Second call to close() ---------------------- DefaultClientConnection.close:168 ManagedClientConnectionImpl.close:127 DefaultRequestDirector.tryExecute:723 DefaultRequestDirector.execute:522 AbstractHttpClient.execute:906 AbstractHttpClient.execute:805 AbstractHttpClient.execute:784 TestNetwork$Worker.connect:187 TestNetwork$Worker.run:153 Thread.run:662 Third call to close() ---------------------- DefaultClientConnection.close:168 HttpPoolEntry.close:89 AbstractConnPool.release:323 PoolingClientConnectionManager.releaseConnection:278 ManagedClientConnectionImpl.abortConnection:463 DefaultRequestDirector.abortConnection:1157 DefaultRequestDirector.execute:621 AbstractHttpClient.execute:906 AbstractHttpClient.execute:805 AbstractHttpClient.execute:784 TestNetwork$Worker.connect:187 TestNetwork$Worker.run:153 Thread.run:662 -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Friday, January 25, 2013 11:41 AM To: 'HttpClient User Discussion' Subject: RE: Connection Reset errors I set it back to SSL for now, took out the wait() in my loop, set MAX to 1 (pool size).  So, I had just 1 thread making the request over and over again without pausing. Below is the last part of what I got. Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.PoolingClientConnectionManager releaseConnection alive indefinitely Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.PoolingClientConnectionManager releaseConnection kept alive: 1; route allocated: 1 of 1; total allocated: 1 of 1] Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.PoolingClientConnectionManager closeExpiredConnections FINE: Closing expired connections Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.PoolingClientConnectionManager requestConnection alive: 1; route allocated: 1 of 1; total allocated: 1 of 1] Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.PoolingClientConnectionManager leaseConnection kept alive: 0; route allocated: 1 of 1; total allocated: 1 of 1] Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.client.DefaultRequestDirector execute FINE: Stale connection check Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.client.protocol.RequestAddCookies process FINE: CookieSpec selected: best-match Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.client.protocol.RequestAuthCache process FINE: Auth cache not set in the context Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.client.protocol.RequestTargetAuthentication process FINE: Target auth state: UNCHALLENGED Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.client.protocol.RequestProxyAuthentication process FINE: Proxy auth state: UNCHALLENGED Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.client.DefaultRequestDirector tryExecute FINE: Attempt 1 to execute request Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.DefaultClientConnection sendRequestHeader FINE: Sending request: POST / HTTP/1.1 Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.Wire wire FINE: &amp;gt;&amp;gt; "POST / HTTP/1.1[\r][\n]" Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.Wire wire FINE: &amp;gt;&amp;gt; "Content-Type: binary[\r][\n]" Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.Wire wire FINE: &amp;gt;&amp;gt; "Content-Length: 34[\r][\n]" Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.Wire wire FINE: &amp;gt;&amp;gt; "Host: x86test.dev.donnell.com:5502[\r][\n]" Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.Wire wire FINE: &amp;gt;&amp;gt; "Connection: Keep-Alive[\r][\n]" Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.Wire wire FINE: &amp;gt;&amp;gt; "[\r][\n]" Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.DefaultClientConnection sendRequestHeader FINE: &amp;gt;&amp;gt; POST / HTTP/1.1 Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.DefaultClientConnection sendRequestHeader FINE: &amp;gt;&amp;gt; Content-Type: binary Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.DefaultClientConnection sendRequestHeader FINE: &amp;gt;&amp;gt; Content-Length: 34 Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.DefaultClientConnection sendRequestHeader FINE: &amp;gt;&amp;gt; Host: x86test.dev.donnell.com:5502 Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.DefaultClientConnection sendRequestHeader FINE: &amp;gt;&amp;gt; Connection: Keep-Alive Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.Wire wire FINE: &amp;gt;&amp;gt; "0000000100 XXXXXXXXXXXXXXXXXXXXXXX" Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.DefaultClientConnection close FINE: Connection 0.0.0.0:61602&amp;lt;-&amp;gt;192.9.201.75:5502 closed Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.client.DefaultRequestDirector tryExecute FINE: Closing the connection. Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.DefaultClientConnection close FINE: Connection 0.0.0.0:61602&amp;lt;-&amp;gt;192.9.201.75:5502 closed Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.DefaultClientConnection shutdown FINE: Connection 0.0.0.0:61602&amp;lt;-&amp;gt;192.9.201.75:5502 shut down Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.DefaultClientConnection close FINE: Connection 0.0.0.0:61602&amp;lt;-&amp;gt;192.9.201.75:5502 closed Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.PoolingClientConnectionManager releaseConnection kept alive: 0; route allocated: 0 of 1; total allocated: 0 of 1] java.net.SocketException: Connection reset &amp;#009;at java.net.SocketInputStream.read(SocketInputStream.java:168) &amp;#009;at com.sun.net.ssl.internal.ssl.InputRecord.readFully(InputRecord.java:293) &amp;#009;at com.sun.net.ssl.internal.ssl.InputRecord.readV3Record(InputRecord.java:405) &amp;#009;at com.sun.net.ssl.internal.ssl.InputRecord.read(InputRecord.java:360) &amp;#009;at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:863) &amp;#009;at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readDataRecord(SSLSocketImpl.java:820) &amp;#009;at com.sun.net.ssl.internal.ssl.AppInputStream.read(AppInputStream.java:75) &amp;#009;at org.apache.http.impl.io.AbstractSessionInputBuffer.fillBuffer(AbstractSessionInputBuffer.java:166) &amp;#009;at org.apache.http.impl.io.SocketInputBuffer.fillBuffer(SocketInputBuffer.java:90) &amp;#009;at org.apache.http.impl.io.AbstractSessionInputBuffer.readLine(AbstractSessionInputBuffer.java:281) &amp;#009;at org.apache.http.impl.conn.LoggingSessionInputBuffer.readLine(LoggingSessionInputBuffer.java:115) &amp;#009;at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:92) &amp;#009;at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:61) &amp;#009;at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:254) &amp;#009;at org.apache.http.impl.AbstractHttpClientConnection.receiveResponseHeader(AbstractHttpClientConnection.java:289) &amp;#009;at org.apache.http.impl.conn.DefaultClientConnection.receiveResponseHeader(DefaultClientConnection.java:252) &amp;#009;at org.apache.http.impl.conn.ManagedClientConnectionImpl.receiveResponseHeader(ManagedClientConnectionImpl.java:191) &amp;#009;at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:300) &amp;#009;at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:127) &amp;#009;at org.apache.http.impl.client.DefaultRequestDirector.tryExecute(DefaultRequestDirector.java:717) &amp;#009;at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:522) &amp;#009;at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:906) &amp;#009;at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:805) &amp;#009;at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:784) &amp;#009;at dsi.app.TestNetwork$Worker.connect(TestNetwork.java:187) &amp;#009;at dsi.app.TestNetwork$Worker.run(TestNetwork.java:153) &amp;#009;at java.lang.Thread.run(Thread.java:662) Java Result: 1 BUILD SUCCESSFUL (total time: 26 seconds) -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Friday, January 25, 2013 11:25 AM To: 'HttpClient User Discussion' Subject: RE: Connection Reset errors I am running the test using a non-SSL connection and the Connection Reset is not happening. I am going to continue to run the test, but none of the SSL tests ran this long without failing. -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Friday, January 25, 2013 11:07 AM To: 'HttpClient User Discussion' Subject: RE: Connection Reset errors Before the upgrade, she was using HttpClient 4.01. --- Not sure if it is kosher to send an attachment to the list, but here is a test program.  This errors for me after just a minute or two. The website it is connecting to is just a Tomcat server running the default ROOT webapp. It is delivering the default HTML page we have set up on that.  I would imagine that it is ignoring the POST and treating it like a GET In production, where she is having the problem, it is using the default HttpsURLConnection socket factory.  However, for testing, I am using this one to bypass the normal certificate checks and stuff.  It happens to both of us, so I don't think the error has anything to do with the socket factory.  The message that we send in production are also a lot longer, so I don't think it has anything to do with message size either. -----Original Message----- From: Oleg Kalnichevski [mailto:olegk@apache.org] Sent: Friday, January 25, 2013 7:46 AM To: HttpClient User Discussion Subject: Re: Connection Reset errors Mark You do not need to do anything special other than closing the content input stream of the response entity (if it is present) to ensure proper resource deallocation. What is important that it has to be done no matter if you need the content or not. I do not think the problem you are dealing with has anything to do with resource management. There are probably several things you might want to try out (1) if you can confirm that this issue is HttpClient version specific and tell me what version of HttpClient exhibited it first (say, after upgrade from 4.0.3 to 4.1) I could analyze the differences and try to figure out what could potentially be the cause of connection resets.  (2) This is entirely possible this is somehow SSL related and connection gets reset by the SSL stack. You might want to run your app with SSL debug enabled and see if there is anything in the SSL logs that could help explain connection being reset. (3) Otherwise there is no way around getting very close and personal with Wireshark. Oleg not too important.  For instance, if we send a pulse to the server to let it know we are still here.  We don't really care what the response is, if we didn't get an error then we did our part.  If we did get and error, we will try again soon anyway, so no big deal. all the data?  I have never experienced reading stale data, so this seems a bit unlikely to me.  However, if there is implicit cleanup that is being done, could this be, in some way, causing my problems? with the java.net connection.  She has a newer machine, maybe threading issues are just more apparent on her hardware. that might release a connection back to the pool?  I am wondering if there is a way I could be releasing the connection back to the pool, it gets picked up by something else, and then the original thread tries to close it again or something. work harder. and did not happen until we upgrade to 4.1.3 (and now is continuing under 4.2.3).  I will have to check on the upgrade path and see if she had been using a 4.0.x version before this, or if they jumped from a version that used a 3.x version. the request.  Looking at this more closely, I see that the error is on the reading of the data, and the write seems to succeed.  This gives me something to check on, since I should be able to see whether or not the servlet actually got her request or not. (or fails silently) and then it is on the read the problem can be detected?  Or does this mean that the socket was fine during the write operation, but then was somehow severed before the read? using it all along. most others, but I don't think she experiences issues with other applications. Connection Reset.  The stale connection check passed, so HttpClient thinks this is a good connection, right?  Or are there limits to how reliable a stale connection check can be? sure how things were going to turn out with HttpClient, I kept that code in place and made it so I could use either API.  I had her switch back to using the java.net stuff the other day and the problem appeared to go away.  I have configured her system to use the java.net connector again today.  Before I make any conclusions I need some more data from her on each connector.  However, the previous data seems to indicate that it is only an issue when using HttpClient (originally 4.1.3, now 4.2.3). about it. It certainly did that when I last touched it (which admittedly was a looooooong time ago), and that was precisely the reason I had to stop using it and to look for a better alternative. are inevitable and robust HTTP services have to be prepared to deal with them (most likely by re-trying idempotent methods automatically and reporting the problem back to the caller otherwise). of the blocking I/O model: when not blocked in an I/O operation there is no way for the socket to get notified of the opposite endpoint terminating the connection. While kept alive in the pool blocking HTTP connections can get stale. However, the only way to find it out is to try to attempt an I/O operation on such connection. source over and over again. evicting expired connections and connections that have been idle longer than a given period of time. and see that people have commented on this error with HttpClient before.  I just upgraded to HttpClient 4.2.3 to see if that would help at all, and it didn't. on how to resolve this would be greatly appreciated. Source)</body>
  </mail>
  <mail>
    <header>Re: Connection Reset errors</header>
    <body>things around to get it to compile, or course.  Using ThreadSafeClientConnManager.) which gave her the newer version.  Must also be something else going on. notice automatic retries, if they occurred.) specific users that are experiencing this problem? Mark, This log unfortunately does not help. Interesting bit, though, it that a connection reset happens while trying to read a head of a new message. So, clearly the stale connection check did not work. In the former days (Java 1.2 and possibly 1.3) state connection checking was simply useless with SSL encrypted connections. Apparently it can still be ineffective even with modern JREs. So, running your application with SSL debugging turned on should be more informative: http://docs.oracle.com/javase/1.5.0/docs/guide/security/jsse/ReadDebug.html Oleg process execute sendRequestHeader sendRequestHeader sendRequestHeader sendRequestHeader sendRequestHeader sendRequestHeader close execute close shutdown releaseConnection called when a connection is releasedManagedConnection is called.  When the Connection Reset happens, it gets called 3 times in quick succession.  However, looks like this is just normal processing for the failed connection.  Whatever error is the root cause seems to have already occurred. calls that work. So, I had just 1 thread making the request over and over again without pausing. releaseConnection kept alive indefinitely Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.PoolingClientConnectionManager releaseConnection kept alive: 1; route allocated: 1 of 1; total allocated: 1 of 1] Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.PoolingClientConnectionManager closeExpiredConnections requestConnection kept alive: 1; route allocated: 1 of 1; total allocated: 1 of 1] Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.conn.PoolingClientConnectionManager leaseConnection kept alive: 0; route allocated: 1 of 1; total allocated: 1 of 1] Thread-00:Jan 25, 2013 11:38:01 AM org.apache.http.impl.client.DefaultRequestDirector execute process process process tryExecute sendRequestHeader sendRequestHeader sendRequestHeader sendRequestHeader sendRequestHeader org.apache.http.impl.conn.DefaultClientConnection sendRequestHeader close 11:38:01 AM org.apache.http.impl.client.DefaultRequestDirector tryExecute close 11:38:01 AM org.apache.http.impl.conn.DefaultClientConnection shutdown 2013 11:38:01 AM org.apache.http.impl.conn.DefaultClientConnection close 11:38:01 AM org.apache.http.impl.conn.PoolingClientConnectionManager releaseConnection kept alive: 0; route allocated: 0 of 1; total allocated: 0 of 1] I am going to continue to run the test, but none of the SSL tests ran this long without failing. This errors for me after just a minute or two. It is delivering the default HTML page we have set up on that.  I would imagine that it is ignoring the POST and treating it like a GET socket factory.  However, for testing, I am using this one to bypass the normal certificate checks and stuff.  It happens to both of us, so I don't think the error has anything to do with the socket factory.  The message that we send in production are also a lot longer, so I don't think it has anything to do with message size either. the response entity (if it is present) to ensure proper resource deallocation. What is important that it has to be done no matter if you need the content or not. I do not think the problem you are dealing with has anything to do with resource management. version of HttpClient exhibited it first (say, after upgrade from 4.0.3 to 4.1) I could analyze the differences and try to figure out what could potentially be the cause of connection resets.  the SSL stack. You might want to run your app with SSL debug enabled and see if there is anything in the SSL logs that could help explain connection being reset. is not too important.  For instance, if we send a pulse to the server to let it know we are still here.  We don't really care what the response is, if we didn't get an error then we did our part.  If we did get and error, we will try again soon anyway, so no big deal. all the data?  I have never experienced reading stale data, so this seems a bit unlikely to me.  However, if there is implicit cleanup that is being done, could this be, in some way, causing my problems? and never with the java.net connection.  She has a newer machine, maybe threading issues are just more apparent on her hardware. that might release a connection back to the pool?  I am wondering if there is a way I could be releasing the connection back to the pool, it gets picked up by something else, and then the original thread tries to close it again or something. implicitly? work harder.  and higher, and did not happen until we upgrade to 4.1.3 (and now is continuing under 4.2.3). I will have to check on the upgrade path and see if she had been using a 4.0.x version before this, or if they jumped from a version that used a 3.x version. of retrying the request.  Looking at this more closely, I see that the error is on the reading of the data, and the write seems to succeed.  This gives me something to check on, since I should be able to see whether or not the servlet actually got her request or not. succeeds (or fails silently) and then it is on the read the problem can be detected?  Or does this mean that the socket was fine during the write operation, but then was somehow severed before the read? been using it all along. than most others, but I don't think she experiences issues with other applications. but a Connection Reset.  The stale connection check passed, so HttpClient thinks this is a good connection, right?  Or are there limits to how reliable a stale connection check can be? Not sure how things were going to turn out with HttpClient, I kept that code in place and made it so I could use either API.  I had her switch back to using the java.net stuff the other day and the problem appeared to go away.  I have configured her system to use the java.net connector again today.  Before I make any conclusions I need some more data from her on each connector.  However, the previous data seems to indicate that it is only an issue when using HttpClient (originally 4.1.3, now 4.2.3). knowing about it. It certainly did that when I last touched it (which admittedly was a looooooong time ago), and that was precisely the reason I had to stop using it and to look for a better alternative. resets are inevitable and robust HTTP services have to be prepared to deal with them (most likely by re-trying idempotent methods automatically and reporting the problem back to the caller otherwise). = 10) proxy. of the blocking I/O model: when not blocked in an I/O operation there is no way for the socket to get notified of the opposite endpoint terminating the connection. While kept alive in the pool blocking HTTP connections can get stale. However, the only way to find it out is to try to attempt an I/O operation on such connection. same source over and over again. evicting expired connections and connections that have been idle longer than a given period of time. and see that people have commented on this error with HttpClient before.  I just upgraded to HttpClient 4.2.3 to see if that would help at all, and it didn't. tips on how to resolve this would be greatly appreciated. this: Source) Source) Source)</body>
  </mail>
  <mail>
    <header>RE: Connection Reset errors</header>
    <body>Don't know if this will help either...but here is hoping! -----Original Message----- From: Oleg Kalnichevski [mailto:olegk@apache.org] Sent: Tuesday, January 29, 2013 9:03 AM To: HttpClient User Discussion Subject: Re: Connection Reset errors which gave her the newer version.  Must also be something else going on. specific users that are experiencing this problem? Mark, This log unfortunately does not help. Interesting bit, though, it that a connection reset happens while trying to read a head of a new message. So, clearly the stale connection check did not work. In the former days (Java 1.2 and possibly 1.3) state connection checking was simply useless with SSL encrypted connections. Apparently it can still be ineffective even with modern JREs. So, running your application with SSL debugging turned on should be more informative: http://docs.oracle.com/javase/1.5.0/docs/guide/security/jsse/ReadDebug.html Oleg called when a connection is releasedManagedConnection is called.  When the Connection Reset happens, it gets called 3 times in quick succession.  However, looks like this is just normal processing for the failed connection.  Whatever error is the root cause seems to have already occurred. calls that work. So, I had just 1 thread making the request over and over again without pausing. I am going to continue to run the test, but none of the SSL tests ran this long without failing. This errors for me after just a minute or two. socket factory.  However, for testing, I am using this one to bypass the normal certificate checks and stuff.  It happens to both of us, so I don't think the error has anything to do with the socket factory.  The message that we send in production are also a lot longer, so I don't think it has anything to do with message size either. the response entity (if it is present) to ensure proper resource deallocation. What is important that it has to be done no matter if you need the content or not. I do not think the problem you are dealing with has anything to do with resource management. version of HttpClient exhibited it first (say, after upgrade from 4.0.3 to 4.1) I could analyze the differences and try to figure out what could potentially be the cause of connection resets.  the SSL stack. You might want to run your app with SSL debug enabled and see if there is anything in the SSL logs that could help explain connection being reset. is not too important.  For instance, if we send a pulse to the server to let it know we are still here.  We don't really care what the response is, if we didn't get an error then we did our part.  If we did get and error, we will try again soon anyway, so no big deal. all the data?  I have never experienced reading stale data, so this seems a bit unlikely to me.  However, if there is implicit cleanup that is being done, could this be, in some way, causing my problems? and never with the java.net connection.  She has a newer machine, maybe threading issues are just more apparent on her hardware. that might release a connection back to the pool?  I am wondering if there is a way I could be releasing the connection back to the pool, it gets picked up by something else, and then the original thread tries to close it again or something. implicitly? work harder.  and higher, and did not happen until we upgrade to 4.1.3 (and now is continuing under 4.2.3). I will have to check on the upgrade path and see if she had been using a 4.0.x version before this, or if they jumped from a version that used a 3.x version. of retrying the request.  Looking at this more closely, I see that the error is on the reading of the data, and the write seems to succeed.  This gives me something to check on, since I should be able to see whether or not the servlet actually got her request or not. succeeds (or fails silently) and then it is on the read the problem can be detected?  Or does this mean that the socket was fine during the write operation, but then was somehow severed before the read? been using it all along. than most others, but I don't think she experiences issues with other applications. but a Connection Reset.  The stale connection check passed, so HttpClient thinks this is a good connection, right?  Or are there limits to how reliable a stale connection check can be? Not sure how things were going to turn out with HttpClient, I kept that code in place and made it so I could use either API.  I had her switch back to using the java.net stuff the other day and the problem appeared to go away.  I have configured her system to use the java.net connector again today.  Before I make any conclusions I need some more data from her on each connector.  However, the previous data seems to indicate that it is only an issue when using HttpClient (originally 4.1.3, now 4.2.3). knowing about it. It certainly did that when I last touched it (which admittedly was a looooooong time ago), and that was precisely the reason I had to stop using it and to look for a better alternative. resets are inevitable and robust HTTP services have to be prepared to deal with them (most likely by re-trying idempotent methods automatically and reporting the problem back to the caller otherwise). = 10) proxy. of the blocking I/O model: when not blocked in an I/O operation there is no way for the socket to get notified of the opposite endpoint terminating the connection. While kept alive in the pool blocking HTTP connections can get stale. However, the only way to find it out is to try to attempt an I/O operation on such connection. same source over and over again. evicting expired connections and connections that have been idle longer than a given period of time. and see that people have commented on this error with HttpClient before.  I just upgraded to HttpClient 4.2.3 to see if that would help at all, and it didn't. works.  Any tips on how to resolve this would be greatly appreciated. this: Source) Source) Source)</body>
  </mail>
  <mail>
    <header>RE: Connection Reset errors</header>
    <body>I saw some things on the web with this error, but those seemed to be errors on startup because particular protocols where not enabled.  I changed my Tomcat configuration to use SSL instead of TLS, and removed the cipherSuites attribute.  Similar result.  However I saw the below in the debug output. What is the socket timeout doing there, and why is there a SocketTimeoutException when this is all occurring in the same second. Thread-00:Jan 29, 2013 1:48:32 PM org.apache.http.impl.conn.Wire wire FINE: &amp;lt;&amp;lt; "                        &amp;lt;p&amp;gt;If you page is not redirected, click &amp;lt;a href="JViewer/"&amp;gt;here&amp;lt;/a&amp;gt;[\n]" Thread-00:Jan 29, 2013 1:48:32 PM org.apache.http.impl.conn.Wire wire Thread-00, handling exception: java.net.SocketTimeoutException: Read timed out Thread-00, setSoTimeout(45000) called FINE: &amp;lt;&amp;lt; "                &amp;lt;/BODY&amp;gt;[\n]" Thread-00, setSoTimeout(45000) called [snip] Thread-00, WRITE: TLSv1 Application Data, length = 171 [Raw write]: length = 176 [snip]  [Raw read]: length = 5 0000: 17 03 01 03 0A                                     ..... Thread-00, handling exception: java.net.SocketException: Connection reset %% Invalidated:  [Session-1, SSL_RSA_WITH_RC4_128_MD5] Thread-00, SEND TLSv1 ALERT:  fatal, description = unexpected_message Padded plaintext before ENCRYPTION:  len = 18 0000: 02 0A C7 6D 68 F3 71 E6   E2 D7 E2 55 CD A4 B1 42  ...mh.q....U...B 0010: C8 08                                              .. Thread-00, WRITE: TLSv1 Alert, length = 18 Thread-00, Exception sending alert: java.net.SocketException: Connection reset by peer: socket write error Thread-00, called closeSocket() Thread-00, called close() Thread-00:Jan 29, 2013 1:48:32 PM org.apache.http.impl.conn.PoolingClientConnectionManager releaseConnection -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Tuesday, January 29, 2013 12:39 PM To: 'HttpClient User Discussion' Subject: RE: Connection Reset errors Don't know if this will help either...but here is hoping! -----Original Message----- From: Oleg Kalnichevski [mailto:olegk@apache.org] Sent: Tuesday, January 29, 2013 9:03 AM To: HttpClient User Discussion Subject: Re: Connection Reset errors which gave her the newer version.  Must also be something else going on. specific users that are experiencing this problem? Mark, This log unfortunately does not help. Interesting bit, though, it that a connection reset happens while trying to read a head of a new message. So, clearly the stale connection check did not work. In the former days (Java 1.2 and possibly 1.3) state connection checking was simply useless with SSL encrypted connections. Apparently it can still be ineffective even with modern JREs. So, running your application with SSL debugging turned on should be more informative: http://docs.oracle.com/javase/1.5.0/docs/guide/security/jsse/ReadDebug.html Oleg called when a connection is releasedManagedConnection is called.  When the Connection Reset happens, it gets called 3 times in quick succession.  However, looks like this is just normal processing for the failed connection.  Whatever error is the root cause seems to have already occurred. calls that work. So, I had just 1 thread making the request over and over again without pausing. I am going to continue to run the test, but none of the SSL tests ran this long without failing. This errors for me after just a minute or two. socket factory.  However, for testing, I am using this one to bypass the normal certificate checks and stuff.  It happens to both of us, so I don't think the error has anything to do with the socket factory.  The message that we send in production are also a lot longer, so I don't think it has anything to do with message size either. the response entity (if it is present) to ensure proper resource deallocation. What is important that it has to be done no matter if you need the content or not. I do not think the problem you are dealing with has anything to do with resource management. version of HttpClient exhibited it first (say, after upgrade from 4.0.3 to 4.1) I could analyze the differences and try to figure out what could potentially be the cause of connection resets.  the SSL stack. You might want to run your app with SSL debug enabled and see if there is anything in the SSL logs that could help explain connection being reset. is not too important.  For instance, if we send a pulse to the server to let it know we are still here.  We don't really care what the response is, if we didn't get an error then we did our part.  If we did get and error, we will try again soon anyway, so no big deal. all the data?  I have never experienced reading stale data, so this seems a bit unlikely to me.  However, if there is implicit cleanup that is being done, could this be, in some way, causing my problems? and never with the java.net connection.  She has a newer machine, maybe threading issues are just more apparent on her hardware. that might release a connection back to the pool?  I am wondering if there is a way I could be releasing the connection back to the pool, it gets picked up by something else, and then the original thread tries to close it again or something. implicitly? work harder.  and higher, and did not happen until we upgrade to 4.1.3 (and now is continuing under 4.2.3). I will have to check on the upgrade path and see if she had been using a 4.0.x version before this, or if they jumped from a version that used a 3.x version. of retrying the request.  Looking at this more closely, I see that the error is on the reading of the data, and the write seems to succeed.  This gives me something to check on, since I should be able to see whether or not the servlet actually got her request or not. succeeds (or fails silently) and then it is on the read the problem can be detected?  Or does this mean that the socket was fine during the write operation, but then was somehow severed before the read? been using it all along. than most others, but I don't think she experiences issues with other applications. but a Connection Reset.  The stale connection check passed, so HttpClient thinks this is a good connection, right?  Or are there limits to how reliable a stale connection check can be? Not sure how things were going to turn out with HttpClient, I kept that code in place and made it so I could use either API.  I had her switch back to using the java.net stuff the other day and the problem appeared to go away.  I have configured her system to use the java.net connector again today.  Before I make any conclusions I need some more data from her on each connector.  However, the previous data seems to indicate that it is only an issue when using HttpClient (originally 4.1.3, now 4.2.3). knowing about it. It certainly did that when I last touched it (which admittedly was a looooooong time ago), and that was precisely the reason I had to stop using it and to look for a better alternative. resets are inevitable and robust HTTP services have to be prepared to deal with them (most likely by re-trying idempotent methods automatically and reporting the problem back to the caller otherwise). = 10) proxy. of the blocking I/O model: when not blocked in an I/O operation there is no way for the socket to get notified of the opposite endpoint terminating the connection. While kept alive in the pool blocking HTTP connections can get stale. However, the only way to find it out is to try to attempt an I/O operation on such connection. same source over and over again. evicting expired connections and connections that have been idle longer than a given period of time. and see that people have commented on this error with HttpClient before.  I just upgraded to HttpClient 4.2.3 to see if that would help at all, and it didn't. works.  Any tips on how to resolve this would be greatly appreciated. this: Source) Source) Source)</body>
  </mail>
  <mail>
    <header>RE: Connection Reset errors</header>
    <body>CLUE! I opened up the cipher suites on Tomecat like I mentioned and then made my own socketfactory (limiting the cipher suites) as I saw in an example.  Now when I run the program it dies at the same place every time...on the 101st connection.  This has to be significant in some way...although I don't know how. I about doubled the size of the message I send, and it makes no difference. I put the iteration count in the HttpHeader so I could track it in the Tomcat access log. Tomcat shows that it receives this message (message 100) and that it thinks it succeeded (status == 200) The SocketTimeoutException I noticed before is everywhere in the logs.  This is from the StaleConnectionCheck and is likely irrelevant. -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Tuesday, January 29, 2013 2:01 PM To: 'HttpClient User Discussion' Subject: RE: Connection Reset errors I saw some things on the web with this error, but those seemed to be errors on startup because particular protocols where not enabled.  I changed my Tomcat configuration to use SSL instead of TLS, and removed the cipherSuites attribute.  Similar result.  However I saw the below in the debug output. What is the socket timeout doing there, and why is there a SocketTimeoutException when this is all occurring in the same second. Thread-00:Jan 29, 2013 1:48:32 PM org.apache.http.impl.conn.Wire wire FINE: &amp;lt;&amp;lt; "                        &amp;lt;p&amp;gt;If you page is not redirected, click &amp;lt;a href="JViewer/"&amp;gt;here&amp;lt;/a&amp;gt;[\n]" Thread-00:Jan 29, 2013 1:48:32 PM org.apache.http.impl.conn.Wire wire Thread-00, handling exception: java.net.SocketTimeoutException: Read timed out Thread-00, setSoTimeout(45000) called FINE: &amp;lt;&amp;lt; "                &amp;lt;/BODY&amp;gt;[\n]" Thread-00, setSoTimeout(45000) called [snip] Thread-00, WRITE: TLSv1 Application Data, length = 171 [Raw write]: length = 176 [snip]  [Raw read]: length = 5 0000: 17 03 01 03 0A                                     ..... Thread-00, handling exception: java.net.SocketException: Connection reset %% Invalidated: [Session-1, SSL_RSA_WITH_RC4_128_MD5] Thread-00, SEND TLSv1 ALERT:  fatal, description = unexpected_message Padded plaintext before ENCRYPTION:  len = 18 0000: 02 0A C7 6D 68 F3 71 E6   E2 D7 E2 55 CD A4 B1 42  ...mh.q....U...B 0010: C8 08                                              .. Thread-00, WRITE: TLSv1 Alert, length = 18 Thread-00, Exception sending alert: java.net.SocketException: Connection reset by peer: socket write error Thread-00, called closeSocket() Thread-00, called close() Thread-00:Jan 29, 2013 1:48:32 PM org.apache.http.impl.conn.PoolingClientConnectionManager releaseConnection -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Tuesday, January 29, 2013 12:39 PM To: 'HttpClient User Discussion' Subject: RE: Connection Reset errors Don't know if this will help either...but here is hoping! -----Original Message----- From: Oleg Kalnichevski [mailto:olegk@apache.org] Sent: Tuesday, January 29, 2013 9:03 AM To: HttpClient User Discussion Subject: Re: Connection Reset errors which gave her the newer version.  Must also be something else going on. specific users that are experiencing this problem? Mark, This log unfortunately does not help. Interesting bit, though, it that a connection reset happens while trying to read a head of a new message. So, clearly the stale connection check did not work. In the former days (Java 1.2 and possibly 1.3) state connection checking was simply useless with SSL encrypted connections. Apparently it can still be ineffective even with modern JREs. So, running your application with SSL debugging turned on should be more informative: http://docs.oracle.com/javase/1.5.0/docs/guide/security/jsse/ReadDebug.html Oleg called when a connection is releasedManagedConnection is called.  When the Connection Reset happens, it gets called 3 times in quick succession.  However, looks like this is just normal processing for the failed connection.  Whatever error is the root cause seems to have already occurred. calls that work. So, I had just 1 thread making the request over and over again without pausing. I am going to continue to run the test, but none of the SSL tests ran this long without failing. This errors for me after just a minute or two. socket factory.  However, for testing, I am using this one to bypass the normal certificate checks and stuff.  It happens to both of us, so I don't think the error has anything to do with the socket factory.  The message that we send in production are also a lot longer, so I don't think it has anything to do with message size either. the response entity (if it is present) to ensure proper resource deallocation. What is important that it has to be done no matter if you need the content or not. I do not think the problem you are dealing with has anything to do with resource management. version of HttpClient exhibited it first (say, after upgrade from 4.0.3 to 4.1) I could analyze the differences and try to figure out what could potentially be the cause of connection resets.  the SSL stack. You might want to run your app with SSL debug enabled and see if there is anything in the SSL logs that could help explain connection being reset. is not too important.  For instance, if we send a pulse to the server to let it know we are still here.  We don't really care what the response is, if we didn't get an error then we did our part.  If we did get and error, we will try again soon anyway, so no big deal. all the data?  I have never experienced reading stale data, so this seems a bit unlikely to me.  However, if there is implicit cleanup that is being done, could this be, in some way, causing my problems? and never with the java.net connection.  She has a newer machine, maybe threading issues are just more apparent on her hardware. that might release a connection back to the pool?  I am wondering if there is a way I could be releasing the connection back to the pool, it gets picked up by something else, and then the original thread tries to close it again or something. implicitly? work harder.  and higher, and did not happen until we upgrade to 4.1.3 (and now is continuing under 4.2.3). I will have to check on the upgrade path and see if she had been using a 4.0.x version before this, or if they jumped from a version that used a 3.x version. of retrying the request.  Looking at this more closely, I see that the error is on the reading of the data, and the write seems to succeed.  This gives me something to check on, since I should be able to see whether or not the servlet actually got her request or not. succeeds (or fails silently) and then it is on the read the problem can be detected?  Or does this mean that the socket was fine during the write operation, but then was somehow severed before the read? been using it all along. than most others, but I don't think she experiences issues with other applications. but a Connection Reset.  The stale connection check passed, so HttpClient thinks this is a good connection, right?  Or are there limits to how reliable a stale connection check can be? Not sure how things were going to turn out with HttpClient, I kept that code in place and made it so I could use either API.  I had her switch back to using the java.net stuff the other day and the problem appeared to go away.  I have configured her system to use the java.net connector again today.  Before I make any conclusions I need some more data from her on each connector.  However, the previous data seems to indicate that it is only an issue when using HttpClient (originally 4.1.3, now 4.2.3). knowing about it. It certainly did that when I last touched it (which admittedly was a looooooong time ago), and that was precisely the reason I had to stop using it and to look for a better alternative. resets are inevitable and robust HTTP services have to be prepared to deal with them (most likely by re-trying idempotent methods automatically and reporting the problem back to the caller otherwise). = 10) proxy. of the blocking I/O model: when not blocked in an I/O operation there is no way for the socket to get notified of the opposite endpoint terminating the connection. While kept alive in the pool blocking HTTP connections can get stale. However, the only way to find it out is to try to attempt an I/O operation on such connection. same source over and over again. evicting expired connections and connections that have been idle longer than a given period of time. and see that people have commented on this error with HttpClient before.  I just upgraded to HttpClient 4.2.3 to see if that would help at all, and it didn't. works.  Any tips on how to resolve this would be greatly appreciated. this: Source) Source) Source)</body>
  </mail>
  <mail>
    <header>Re: Connection Reset errors</header>
    <body>Tomcat by default closes persistent connections once it has been used to serve 100 requests. See 'maxKeepAliveRequests' parameter: http://tomcat.apache.org/tomcat-7.0-doc/config/http.html Try setting this value to -1 and see if that makes the problem go away. Oleg</body>
  </mail>
  <mail>
    <header>RE: Connection Reset errors</header>
    <body>Thanks!  I will check it out! -----Original Message----- From: Oleg Kalnichevski [mailto:olegk@apache.org] Sent: Tuesday, January 29, 2013 3:09 PM To: HttpClient User Discussion Subject: Re: Connection Reset errors Tomcat by default closes persistent connections once it has been used to serve 100 requests. See 'maxKeepAliveRequests' parameter: http://tomcat.apache.org/tomcat-7.0-doc/config/http.html Try setting this value to -1 and see if that makes the problem go away. Oleg</body>
  </mail>
  <mail>
    <header>RE: Connection Reset errors</header>
    <body>Wow, that certainly helped my test case!  Now to try it for real. This leaves me with 2 big questions: 1) Is there a reason for Tomcat to behave this way? 2) Why is this not WAY more common? I think the answer to #2 might be (at least partially) that we have our connectionLinger down to 0 to reduce the number of sockets in TIME_WAIT.  So, when Tomcat closed the connection, if the client was a bit too slow, the socket would close before the client could finish reading all the data. I had thought I had tried to change the linger in an earlier test, but maybe I forgot to save the change or something. In any event, she is trying this and we will see how it goes. -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Tuesday, January 29, 2013 3:12 PM To: 'HttpClient User Discussion' Subject: RE: Connection Reset errors Thanks!  I will check it out! -----Original Message----- From: Oleg Kalnichevski [mailto:olegk@apache.org] Sent: Tuesday, January 29, 2013 3:09 PM To: HttpClient User Discussion Subject: Re: Connection Reset errors Tomcat by default closes persistent connections once it has been used to serve 100 requests. See 'maxKeepAliveRequests' parameter: http://tomcat.apache.org/tomcat-7.0-doc/config/http.html Try setting this value to -1 and see if that makes the problem go away. Oleg</body>
  </mail>
  <mail>
    <header>Re: Connection Reset errors</header>
    <body>In the early days of HTTP/1.1 many HTTP agents had issues with persistent connection support. This feature was most likely intended to help broken clients recover by forcing them to open a new connection after a certain number of requests. That explains it. By setting SO_LINGER to zero you are basically instructing Tomcat to terminate connections abnormally by sending a RST (connection reset) command instead of a normal TCP termination procedure. It looks like all this misery was self inflicted. Oleg</body>
  </mail>
  <mail>
    <header>RE: Connection Reset errors</header>
    <body>Thank you so much for your help.  (Setting the linger to 0 was not my idea...) If only I would have double checked myself on this one. The user in question has not had time to test it yet; tomorrow I will know for sure.  Hopefully what caused the error in my test cases also caused the problem for her. Mark -----Original Message----- From: Oleg Kalnichevski [mailto:olegk@apache.org] Sent: Tuesday, January 29, 2013 4:30 PM To: HttpClient User Discussion Subject: Re: Connection Reset errors In the early days of HTTP/1.1 many HTTP agents had issues with persistent connection support. This feature was most likely intended to help broken clients recover by forcing them to open a new connection after a certain number of requests. That explains it. By setting SO_LINGER to zero you are basically instructing Tomcat to terminate connections abnormally by sending a RST (connection reset) command instead of a normal TCP termination procedure. It looks like all this misery was self inflicted. Oleg</body>
  </mail>
  <mail>
    <header>RE: Connection Reset errors</header>
    <body>This is the longest she has gone without getting the error, so I am calling it fixed.  I learned a lot.  And, in going to 4.2.3, it is going noticeable faster now.  It was hard getting here, but everything is good now.  Thanks again! Mark -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Tuesday, January 29, 2013 4:55 PM To: 'HttpClient User Discussion' Subject: RE: Connection Reset errors Thank you so much for your help.  (Setting the linger to 0 was not my idea...) If only I would have double checked myself on this one. The user in question has not had time to test it yet; tomorrow I will know for sure.  Hopefully what caused the error in my test cases also caused the problem for her. Mark -----Original Message----- From: Oleg Kalnichevski [mailto:olegk@apache.org] Sent: Tuesday, January 29, 2013 4:30 PM To: HttpClient User Discussion Subject: Re: Connection Reset errors In the early days of HTTP/1.1 many HTTP agents had issues with persistent connection support. This feature was most likely intended to help broken clients recover by forcing them to open a new connection after a certain number of requests. That explains it. By setting SO_LINGER to zero you are basically instructing Tomcat to terminate connections abnormally by sending a RST (connection reset) command instead of a normal TCP termination procedure. It looks like all this misery was self inflicted. Oleg</body>
  </mail>
  <mail>
    <header>RE: Connection Reset errors</header>
    <body>Looks like I start my counting at 1, so for me it dies always on the 100th connection.  I put this on another laptop, (mine has Vista, his is Windows 7) and it dies too, but not at the same place.  His dies on attempt: 2100 300 1300 1200 2500 See a pattern:  always a multiple of 100.  What is going on?!! -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Tuesday, January 29, 2013 2:59 PM To: 'HttpClient User Discussion' Subject: RE: Connection Reset errors CLUE! I opened up the cipher suites on Tomecat like I mentioned and then made my own socketfactory (limiting the cipher suites) as I saw in an example.  Now when I run the program it dies at the same place every time...on the 101st connection.  This has to be significant in some way...although I don't know how. I about doubled the size of the message I send, and it makes no difference. I put the iteration count in the HttpHeader so I could track it in the Tomcat access log. Tomcat shows that it receives this message (message 100) and that it thinks it succeeded (status == 200) The SocketTimeoutException I noticed before is everywhere in the logs.  This is from the StaleConnectionCheck and is likely irrelevant. -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Tuesday, January 29, 2013 2:01 PM To: 'HttpClient User Discussion' Subject: RE: Connection Reset errors I saw some things on the web with this error, but those seemed to be errors on startup because particular protocols where not enabled.  I changed my Tomcat configuration to use SSL instead of TLS, and removed the cipherSuites attribute.  Similar result.  However I saw the below in the debug output. What is the socket timeout doing there, and why is there a SocketTimeoutException when this is all occurring in the same second. Thread-00:Jan 29, 2013 1:48:32 PM org.apache.http.impl.conn.Wire wire FINE: &amp;lt;&amp;lt; "                        &amp;lt;p&amp;gt;If you page is not redirected, click &amp;lt;a href="JViewer/"&amp;gt;here&amp;lt;/a&amp;gt;[\n]" Thread-00:Jan 29, 2013 1:48:32 PM org.apache.http.impl.conn.Wire wire Thread-00, handling exception: java.net.SocketTimeoutException: Read timed out Thread-00, setSoTimeout(45000) called FINE: &amp;lt;&amp;lt; "                &amp;lt;/BODY&amp;gt;[\n]" Thread-00, setSoTimeout(45000) called [snip] Thread-00, WRITE: TLSv1 Application Data, length = 171 [Raw write]: length = 176 [snip]  [Raw read]: length = 5 0000: 17 03 01 03 0A                                     ..... Thread-00, handling exception: java.net.SocketException: Connection reset %% Invalidated: [Session-1, SSL_RSA_WITH_RC4_128_MD5] Thread-00, SEND TLSv1 ALERT:  fatal, description = unexpected_message Padded plaintext before ENCRYPTION:  len = 18 0000: 02 0A C7 6D 68 F3 71 E6   E2 D7 E2 55 CD A4 B1 42  ...mh.q....U...B 0010: C8 08                                              .. Thread-00, WRITE: TLSv1 Alert, length = 18 Thread-00, Exception sending alert: java.net.SocketException: Connection reset by peer: socket write error Thread-00, called closeSocket() Thread-00, called close() Thread-00:Jan 29, 2013 1:48:32 PM org.apache.http.impl.conn.PoolingClientConnectionManager releaseConnection -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: Tuesday, January 29, 2013 12:39 PM To: 'HttpClient User Discussion' Subject: RE: Connection Reset errors Don't know if this will help either...but here is hoping! -----Original Message----- From: Oleg Kalnichevski [mailto:olegk@apache.org] Sent: Tuesday, January 29, 2013 9:03 AM To: HttpClient User Discussion Subject: Re: Connection Reset errors which gave her the newer version.  Must also be something else going on. specific users that are experiencing this problem? Mark, This log unfortunately does not help. Interesting bit, though, it that a connection reset happens while trying to read a head of a new message. So, clearly the stale connection check did not work. In the former days (Java 1.2 and possibly 1.3) state connection checking was simply useless with SSL encrypted connections. Apparently it can still be ineffective even with modern JREs. So, running your application with SSL debugging turned on should be more informative: http://docs.oracle.com/javase/1.5.0/docs/guide/security/jsse/ReadDebug.html Oleg called when a connection is releasedManagedConnection is called.  When the Connection Reset happens, it gets called 3 times in quick succession.  However, looks like this is just normal processing for the failed connection.  Whatever error is the root cause seems to have already occurred. calls that work. So, I had just 1 thread making the request over and over again without pausing. I am going to continue to run the test, but none of the SSL tests ran this long without failing. This errors for me after just a minute or two. socket factory.  However, for testing, I am using this one to bypass the normal certificate checks and stuff.  It happens to both of us, so I don't think the error has anything to do with the socket factory.  The message that we send in production are also a lot longer, so I don't think it has anything to do with message size either. the response entity (if it is present) to ensure proper resource deallocation. What is important that it has to be done no matter if you need the content or not. I do not think the problem you are dealing with has anything to do with resource management. version of HttpClient exhibited it first (say, after upgrade from 4.0.3 to 4.1) I could analyze the differences and try to figure out what could potentially be the cause of connection resets.  the SSL stack. You might want to run your app with SSL debug enabled and see if there is anything in the SSL logs that could help explain connection being reset. is not too important.  For instance, if we send a pulse to the server to let it know we are still here.  We don't really care what the response is, if we didn't get an error then we did our part.  If we did get and error, we will try again soon anyway, so no big deal. all the data?  I have never experienced reading stale data, so this seems a bit unlikely to me.  However, if there is implicit cleanup that is being done, could this be, in some way, causing my problems? and never with the java.net connection.  She has a newer machine, maybe threading issues are just more apparent on her hardware. that might release a connection back to the pool?  I am wondering if there is a way I could be releasing the connection back to the pool, it gets picked up by something else, and then the original thread tries to close it again or something. implicitly? work harder.  and higher, and did not happen until we upgrade to 4.1.3 (and now is continuing under 4.2.3). I will have to check on the upgrade path and see if she had been using a 4.0.x version before this, or if they jumped from a version that used a 3.x version. of retrying the request.  Looking at this more closely, I see that the error is on the reading of the data, and the write seems to succeed.  This gives me something to check on, since I should be able to see whether or not the servlet actually got her request or not. succeeds (or fails silently) and then it is on the read the problem can be detected?  Or does this mean that the socket was fine during the write operation, but then was somehow severed before the read? been using it all along. than most others, but I don't think she experiences issues with other applications. but a Connection Reset.  The stale connection check passed, so HttpClient thinks this is a good connection, right?  Or are there limits to how reliable a stale connection check can be? Not sure how things were going to turn out with HttpClient, I kept that code in place and made it so I could use either API.  I had her switch back to using the java.net stuff the other day and the problem appeared to go away.  I have configured her system to use the java.net connector again today.  Before I make any conclusions I need some more data from her on each connector.  However, the previous data seems to indicate that it is only an issue when using HttpClient (originally 4.1.3, now 4.2.3). knowing about it. It certainly did that when I last touched it (which admittedly was a looooooong time ago), and that was precisely the reason I had to stop using it and to look for a better alternative. resets are inevitable and robust HTTP services have to be prepared to deal with them (most likely by re-trying idempotent methods automatically and reporting the problem back to the caller otherwise). = 10) proxy. of the blocking I/O model: when not blocked in an I/O operation there is no way for the socket to get notified of the opposite endpoint terminating the connection. While kept alive in the pool blocking HTTP connections can get stale. However, the only way to find it out is to try to attempt an I/O operation on such connection. same source over and over again. evicting expired connections and connections that have been idle longer than a given period of time. and see that people have commented on this error with HttpClient before.  I just upgraded to HttpClient 4.2.3 to see if that would help at all, and it didn't. works.  Any tips on how to resolve this would be greatly appreciated. this: Source) Source) Source)</body>
  </mail>
  <mail>
    <header>Re: Connection Reset errors</header>
    <body>Hi Mark I wish I could help you but I just do not know how. All I can tell you is that connection resets can happen for all sorts of reasons. There is no one common cause. Writing out request message _may_ appear successful simply because the whole message was small enough to fit into the socket buffer. It does not necessarily mean it got transferred to the opposite endpoint. The problem with POST messages is that usually they are not idempotent. This is precisely the reason why HttpClient does not retry entity closing methods automatically. HttpURLConnection used to be careless enough to silently retry POST requests several times prior to throwing an I/O exception. I hope it is no longer the case. If it is, then HttpURLConnection is broken beyond redemption. Oleg  the request.  Looking at this more closely, I see that the error is on the reading of the data, and the write seems to succeed.  This gives me something to check on, since I should be able to see whether or not the servlet actually got her request or not. (or fails silently) and then it is on the read the problem can be detected?  Or does this mean that the socket was fine during the write operation, but then was somehow severed before the read? using it all along. most others, but I don't think she experiences issues with other applications. Connection Reset.  The stale connection check passed, so HttpClient thinks this is a good connection, right?  Or are there limits to how reliable a stale connection check can be? sure how things were going to turn out with HttpClient, I kept that code in place and made it so I could use either API.  I had her switch back to using the java.net stuff the other day and the problem appeared to go away.  I have configured her system to use the java.net connector again today.  Before I make any conclusions I need some more data from her on each connector.  However, the previous data seems to indicate that it is only an issue when using HttpClient (originally 4.1.3, now 4.2.3). about it. It certainly did that when I last touched it (which admittedly was a looooooong time ago), and that was precisely the reason I had to stop using it and to look for a better alternative. are inevitable and robust HTTP services have to be prepared to deal with them (most likely by re-trying idempotent methods automatically and reporting the problem back to the caller otherwise). of the blocking I/O model: when not blocked in an I/O operation there is no way for the socket to get notified of the opposite endpoint terminating the connection. While kept alive in the pool blocking HTTP connections can get stale. However, the only way to find it out is to try to attempt an I/O operation on such connection. source over and over again. evicting expired connections and connections that have been idle longer than a given period of time. that people have commented on this error with HttpClient before.  I just upgraded to HttpClient 4.2.3 to see if that would help at all, and it didn't. on how to resolve this would be greatly appreciated. Source)</body>
  </mail>
  <mail>
    <header>NTLMv2 connection</header>
    <body>When I login to my Exchange server via http-client for the first time, I get the following string out of the http-client to the server log. Subsequent connections does not get the below My sysops production person has asked if this warning can be suppressed since we think we My guess is that in the NTLMv2 negotiation, the Exchange server first requests a Kerberos ticket. If the ticket is unavailable, the server requests credentials, and this warning is 2013/01/18 13:32:58:412 CST [WARN] RequestTargetAuthentication - NEGOTIATE authentication error: No valid credentials provided (Mechanism level: No valid credentials provided (Mechanism</body>
  </mail>
  <mail>
    <header>Re: NTLMv2 connection</header>
    <body>On Fri, 2013-01-18 at 13:43 -0600, Godbey, David J. (HQ-LM020)[DIGITAL string out of the http-client to the server log. Subsequent connections does not get the below warning. All transactions are working properly. we understand it, and it is not really a problem. ticket. If the ticket is unavailable, the server requests credentials, and this warning is issued by http-client. Do I have this right? error: No valid credentials provided (Mechanism level: No valid credentials provided (Mechanism level: Failed to find any Kerberos tgt)) There are two things you could do: (1) Configure the 'org.apache.http.client.protocol.RequestTargetAuthentication' logger to log at ERROR priority only. (2) Disable the SPNego auth scheme altogether by removing it from the registry of supported auth schemes. Oleg</body>
  </mail>
  <mail>
    <header>RE: NTLMv2 connection</header>
    <body>I think we want to support SPNego auth scheme. Isn't not having to go through the NTLMv2 handshake mechanism over and over again good for performance? It looks to me like the Kerberos ticket for the Exchange Web Service expires after 2 or 3 minutes. However, I could be sharing info with the EWS server a dozen or more times over that period. Perhaps I don't quite understand string out of the http-client to the server log. Subsequent connections does not get the below ticket. If the ticket is unavailable, the server requests credentials, and this warning is 'org.apache.http.client.protocol.RequestTargetAuthentication' logger to log at ERROR priority (2) Disable the SPNego auth scheme altogether by removing it from the registry of supported</body>
  </mail>
  <mail>
    <header>[ANNOUNCEMENT] HttpComponents HttpClient 4.3-alpha1 release</header>
    <body>The HttpComponents project is pleased to announce the first ALPHA release of HttpClient 4.3. The 4.3 branch enhances HttpClient in several key areas and includes several notable features and improvements: * Support for Java 7 try-with-resources for resource management (connection release.) * Added fluent Builder classes for HttpEntity, HttpRequest and HttpClient instances. * Deprecation of preference and configuration API based on HttpParams interface in favor of constructor injection and plain configuration objects. * Reliance on object immutability instead of access synchronization for thread safety. Several old classes whose instances can be shared by multiple request exchanges have been replaced by immutable equivalents. * DefaultHttpClient, DecompressingHttpClient, CachingHttpClient and similar classes are deprecated in favor of builder classes that produce immutable HttpClient instances. * HttpClient builders now dynamically construct a request execution pipeline tailored specifically to the user configuration by physically excluding unnecessary protocol components. * There is now an option to construct a minimal HttpClient implementation that can only execute basic HTTP message exchanges without redirects, authentication, state management or proxy support. This feature might be of particular use in web crawler development. * There is now option to avoid strict URI syntax for request URIs by executing HTTP requests with an explicitly specified target host. HttpClient will no longer attempt to parse the request URI if it does not need to extract the target host from it. The summary of the new HttpClient configuration and preference API can be found here: http://wiki.apache.org/HttpComponents/HttpClientConfiguration We are kindly asking all upstream projects to review API changes and help us improve the APIs by providing feedback and sharing ideas on dev@hc.apache.org. This release also includes all fixes from the stable 4.2.x release branch. Please note that new features included in this release are still considered experimental and their API may change in the future 4.3 alpha and beta releases. ------------------- Download - Release notes - HttpComponents site - ------------------- About Apache HttpClient Although the java.net package provides basic functionality for accessing resources via HTTP, it doesn't provide the full flexibility or functionality needed by many applications. HttpClient seeks to fill this void by providing an efficient, up-to-date, and feature-rich package implementing the client side of the most recent HTTP standards and recommendations. Designed for extension while providing robust support for the base HTTP protocol, HttpClient may be of interest to anyone building HTTP-aware client applications such as web browsers, web service clients, or systems that leverage or extend the HTTP protocol for distributed communication.</body>
  </mail>
  <mail>
    <header>Using HttpAsyncClient completely asynchronously, and shutdown client/request appropriately.</header>
    <body>Hello all, So I'm using the DefaultHttpAsyncClient to send a POST http request to a 3rd party that records some information. Almost like a 'tracking' request, (but they dont want it done on the client-side if JS is disabled, or using a GET via &amp;lt;img src=" tag), so I'm making an http POST request to them on the server-side. I also dont want to wait for the request in my code, so using the HttpAsyncClient instead of the HttpClient. I am iffy on threading/concurrency in Java, but think i get the basic jist. I see that a new thread is created for the FutureCallback. Right now the future.get() line below seems to wait for the 'future' thread to get done before going further in the application (so its a 'blocking' operation on an otherwise non-blocking async callback operation i am doing, right?)... I don't need to do anything with the response (i just want to try to send the http POST and do other things while that happens), so I removed the future.get()... but it errors sometimes [and does the 'cancelled' event]... I think maybe cause the httpclient/request is shutdown/closed before the callback can do its thing maybe?... If so, how can I close the httpclient/request with the completed/failed/cancelled callback operations? Here is the error i get: SEVERE: http-outgoing-1 [CLOSED] HTTP protocol exception: null org.apache.http.impl.conn.ConnectionShutdownException org.apache.http.impl.nio.conn.ManagedClientAsyncConnectionImpl.ensurePoolEntry(ManagedClientAsyncConnectionImpl.java:112) org.apache.http.impl.nio.conn.ManagedClientAsyncConnectionImpl.getRoute(ManagedClientAsyncConnectionImpl.java:245) org.apache.http.client.protocol.RequestProxyAuthentication.process(RequestProxyAuthentication.java:74) org.apache.http.protocol.ImmutableHttpProcessor.process(ImmutableHttpProcessor.java:109) org.apache.http.nio.protocol.HttpAsyncRequestExecutor.requestReady(HttpAsyncRequestExecutor.java:151) org.apache.http.impl.nio.client.LoggingAsyncRequestExecutor.requestReady(LoggingAsyncRequestExecutor.java:85) org.apache.http.nio.protocol.HttpAsyncRequestExecutor.connected(HttpAsyncRequestExecutor.java:101) org.apache.http.impl.nio.client.LoggingAsyncRequestExecutor.connected(LoggingAsyncRequestExecutor.java:60) org.apache.http.impl.nio.DefaultHttpClientIODispatch.onConnected(DefaultHttpClientIODispatch.java:107) org.apache.http.impl.nio.DefaultHttpClientIODispatch.onConnected(DefaultHttpClientIODispatch.java:50) org.apache.http.impl.nio.reactor.AbstractIODispatch.connected(AbstractIODispatch.java:75) org.apache.http.impl.nio.reactor.BaseIOReactor.sessionCreated(BaseIOReactor.java:242) org.apache.http.impl.nio.reactor.AbstractIOReactor.processNewChannels(AbstractIOReactor.java:427) org.apache.http.impl.nio.reactor.AbstractIOReactor.execute(AbstractIOReactor.java:291) org.apache.http.impl.nio.reactor.BaseIOReactor.execute(BaseIOReactor.java:106) org.apache.http.impl.nio.reactor.AbstractMultiworkerIOReactor$Worker.run(AbstractMultiworkerIOReactor.java:604) Here is the code pretty much below: Thanks for any ideas, Ari //################## POST params to send in async request //################## to wait for the response to return for the contacting the 3rd party ... if an exception happens there, then I'll just do stuff in the failed/cancelled methods. body and ensure it is fully consumed [seems to be needed to make sure stream is closed]</body>
  </mail>
  <mail>
    <header>Re: Using HttpAsyncClient completely asynchronously, and shutdown client/request appropriately.</header>
    <body>Your cod simply shuts down the client in the finally clause before it has any chance of completing the request. Oleg PS: why on earth are you using HttpAsyncClient for executing a _single_ request?</body>
  </mail>
  <mail>
    <header>Re: Using HttpAsyncClient completely asynchronously, and shutdown client/request appropriately.</header>
    <body>Hey Oleg, I figured that out as well yesterday (that the client and/or request is shutdown/closed before the callback/thread has a chance to do anything with it). That was a very quick example of what I was trying to do ... In reality, one instance of HttpAsyncClient is created for the web application and re-used as needed. Each time its used, it will only be used for one request (but up to 200 per hour). I just didn't want it to take up any time by waiting for a request when more important things need to happen like database inserts (just want to hand it to the httpclient on the side to do 1 peice of work). I guess I could have also spawned a new Worker Thread, and calling the regular HttpClient for 1 request (basically doing similar thing as the HttpAsyncClient, hence why just using HttpAsyncClient). So my real code looks more similar to this now: https://www.some3rdParty.com/write_post_info.php"); //needs to be final so can use it within the callback to release it information *AsyncUtil.getInstance()*.execute(request, Not sure where to shutdown the client for the webapplication. Right now I just shut it down if http client during the starts up throws an Exception. Thanks, -Ari</body>
  </mail>
  <mail>
    <header>Re: Using HttpAsyncClient completely asynchronously, and shutdown client/request appropriately.</header>
    <body>Generally I would stay that one should choose an async HTTP client over a blocking one only when two conditions are met: (1) your application needs to execute ten thousands of requests concurrently and (2) response latency tends to be high (connections can stay idle for a considerable period of time awaiting a response from the target server). Otherwise, you will be much better off executing requests with a blocking client using a pool of worker threads. Servlet context listener's #contextDestroyed() method would be the right place. http://docs.oracle.com/javaee/5/api/javax/servlet/ServletContextListener.html  Oleg</body>
  </mail>
  <mail>
    <header>Re: Using HttpAsyncClient completely asynchronously, and shutdown client/request appropriately.</header>
    <body>Oleg, just wanted to say thanks for your advice. It was very useful. -Ari</body>
  </mail>
  <mail>
    <header>Write multiple files to outputstream without closing the stream</header>
    <body>Hi I am using Http-Core on android .I would like to give the users an option to download multiple files/folders simultaneously.Currently I am able to provide individual files as downloads, and folders as zip content.I am using sockets based http server modelled on the ElementalHttpServer example on the HttpComponents site.I would like to know if there is any way to do this in my voidhandle() method ,using any of the entities without closing the outputstream. Any pointers in the right direction would be greatly appreciated. Thanks and Regards Kalyan</body>
  </mail>
  <mail>
    <header>Re: Write multiple files to outputstream without closing the stream</header>
    <body>MIME multipart response? Googling suggests browser support for such a thing is hit or miss: https://www.google.com/search?q=http+multipart+response</body>
  </mail>
  <mail>
    <header>Re: Write multiple files to outputstream without closing the stream</header>
    <body>Indeed, MIME multipart messages would probably the most natural choice. Have a look at Apache Mime4j. It should give you both MIME parser and MIME writer needed to be able to generate MIME messages on the client side and parse them on the server side. http://james.apache.org/mime4j/index.html Oleg</body>
  </mail>
  <mail>
    <header>connect through proxy</header>
    <body>Hi, I have some URLConnection code that connects through a proxy: ============================ ============================ and I want to convert that to equivalent httpclient code but I can't seem to find the right way to do that. Can someone point me in the right direction? Thanks... Kevin</body>
  </mail>
  <mail>
    <header>Re: connect through proxy</header>
    <body>This piece of code is working for me: params.setParameter(ConnRoutePNames.DEFAULT_PROXY, new You might want to look at something similar. JM 2013/1/24, Kevin Weslowski &amp;lt;weslowsk@accesscomm.ca&amp;gt;:</body>
  </mail>
  <mail>
    <header>Re: connect through proxy</header>
    <body>ok, I tried this: ======================== ======================== But the output is always: HTTP/1.1 407 Proxy Authentication Required ( Forefront TMG requires authorization to fulfill the request. Access to the Web Proxy filter is denied.  ) I didn't need credentials in my earlier Java program...why not there and why now here? And any ideas how to fix this? ----- Original Message ----- Sent: Thursday, January 24, 2013 11:19:29 AM GMT -06:00 Central America Subject: Re: connect through proxy This piece of code is working for me: params.setParameter(ConnRoutePNames.DEFAULT_PROXY, new You might want to look at something similar. JM 2013/1/24, Kevin Weslowski &amp;lt;weslowsk@accesscomm.ca&amp;gt;:</body>
  </mail>
  <mail>
    <header>RE: connect through proxy</header>
    <body>I don't know too much about authenticating proxies.  Is it possible that the authentication is done via some magic from your OS?  I know to get my Webstart stuff to work right I needed to also use the java "native" socket factory.  You can try this and see if it helps. In HttpClient 4.2: -----Original Message----- From: Kevin Weslowski [mailto:weslowsk@accesscomm.ca] Sent: Thursday, January 24, 2013 1:23 PM To: HttpClient User Discussion Subject: Re: connect through proxy ok, I tried this: ======================== HttpParams params = new BasicHttpParams(); params.setParameter(ConnRoutePNames.DEFAULT_PROXY, ClientConnectionManager cm = new BasicClientConnectionManager(); HttpClient httpclient = new DefaultHttpClient(cm, params); HttpGet ======================== But the output is always: HTTP/1.1 407 Proxy Authentication Required ( Forefront TMG requires authorization to fulfill the request. Access to the Web Proxy filter is denied.  ) I didn't need credentials in my earlier Java program...why not there and why now here? And any ideas how to fix this? ----- Original Message ----- Sent: Thursday, January 24, 2013 11:19:29 AM GMT -06:00 Central America Subject: Re: connect through proxy This piece of code is working for me: HttpParams params = new BasicHttpParams(); params.setParameter(ConnRoutePNames.DEFAULT_PROXY, You might want to look at something similar. JM 2013/1/24, Kevin Weslowski &amp;lt;weslowsk@accesscomm.ca&amp;gt;:</body>
  </mail>
  <mail>
    <header>Re: connect through proxy</header>
    <body>thanks, but I couldn't get that to work for me. I did some research and I have the same problem as found in this post: http://stackoverflow.com/questions/13308073/httpcomponents-client-proxy-problems and the suggested solution doesn't work for me... ----- Original Message ----- Sent: Thursday, January 24, 2013 12:45:42 PM GMT -06:00 Central America Subject: RE: connect through proxy I don't know too much about authenticating proxies.  Is it possible that the authentication is done via some magic from your OS?  I know to get my Webstart stuff to work right I needed to also use the java "native" socket factory.  You can try this and see if it helps. In HttpClient 4.2: -----Original Message----- From: Kevin Weslowski [mailto:weslowsk@accesscomm.ca] Sent: Thursday, January 24, 2013 1:23 PM To: HttpClient User Discussion Subject: Re: connect through proxy ok, I tried this: ======================== HttpParams params = new BasicHttpParams(); params.setParameter(ConnRoutePNames.DEFAULT_PROXY, ClientConnectionManager cm = new BasicClientConnectionManager(); HttpClient httpclient = new DefaultHttpClient(cm, params); HttpGet ======================== But the output is always: HTTP/1.1 407 Proxy Authentication Required ( Forefront TMG requires authorization to fulfill the request. Access to the Web Proxy filter is denied.  ) I didn't need credentials in my earlier Java program...why not there and why now here? And any ideas how to fix this? ----- Original Message ----- Sent: Thursday, January 24, 2013 11:19:29 AM GMT -06:00 Central America Subject: Re: connect through proxy This piece of code is working for me: HttpParams params = new BasicHttpParams(); params.setParameter(ConnRoutePNames.DEFAULT_PROXY, You might want to look at something similar. JM 2013/1/24, Kevin Weslowski &amp;lt;weslowsk@accesscomm.ca&amp;gt;:</body>
  </mail>
  <mail>
    <header>RE: connect through proxy</header>
    <body>Did you see my problem/solution regarding NTLMv2 proxy authentication? You could probably do something like that. That thread appeared around October 11. -----Original Message----- From: Kevin Weslowski [mailto:weslowsk@accesscomm.ca] Sent: Thursday, January 24, 2013 3:12 PM To: HttpClient User Discussion Subject: Re: connect through proxy thanks, but I couldn't get that to work for me. I did some research and I have the same problem as found in this post: http://stackoverflow.com/questions/13308073/httpcomponents-client-proxy-problems and the suggested solution doesn't work for me... ----- Original Message ----- Sent: Thursday, January 24, 2013 12:45:42 PM GMT -06:00 Central America Subject: RE: connect through proxy I don't know too much about authenticating proxies.  Is it possible that the authentication is done via some magic from your OS?  I know to get my Webstart stuff to work right I needed to also use the java "native" socket factory.  You can try this and see if it helps. In HttpClient 4.2: -----Original Message----- From: Kevin Weslowski [mailto:weslowsk@accesscomm.ca] Sent: Thursday, January 24, 2013 1:23 PM To: HttpClient User Discussion Subject: Re: connect through proxy ok, I tried this: ======================== HttpParams params = new BasicHttpParams(); params.setParameter(ConnRoutePNames.DEFAULT_PROXY, ======================== But the output is always: HTTP/1.1 407 Proxy Authentication Required ( Forefront TMG requires authorization to fulfill the request. Access to the Web Proxy filter is denied.  ) I didn't need credentials in my earlier Java program...why not there and why now here? And any ideas how to fix this? ----- Original Message ----- Sent: Thursday, January 24, 2013 11:19:29 AM GMT -06:00 Central America Subject: Re: connect through proxy This piece of code is working for me: HttpParams params = new BasicHttpParams(); params.setParameter(ConnRoutePNames.DEFAULT_PROXY, You might want to look at something similar. JM 2013/1/24, Kevin Weslowski &amp;lt;weslowsk@accesscomm.ca&amp;gt;:</body>
  </mail>
  <mail>
    <header>Re: connect through proxy</header>
    <body>I searched the archives but I can't seem to find it...if you can find it, please send me a link...thanks... ----- Original Message ----- Sent: Thursday, January 24, 2013 2:37:17 PM GMT -06:00 Central America Subject: RE: connect through proxy Did you see my problem/solution regarding NTLMv2 proxy authentication? You could probably do something like that. That thread appeared around October 11. -----Original Message----- From: Kevin Weslowski [mailto:weslowsk@accesscomm.ca] Sent: Thursday, January 24, 2013 3:12 PM To: HttpClient User Discussion Subject: Re: connect through proxy thanks, but I couldn't get that to work for me. I did some research and I have the same problem as found in this post: http://stackoverflow.com/questions/13308073/httpcomponents-client-proxy-problems and the suggested solution doesn't work for me... ----- Original Message ----- Sent: Thursday, January 24, 2013 12:45:42 PM GMT -06:00 Central America Subject: RE: connect through proxy I don't know too much about authenticating proxies.  Is it possible that the authentication is done via some magic from your OS?  I know to get my Webstart stuff to work right I needed to also use the java "native" socket factory.  You can try this and see if it helps. In HttpClient 4.2: -----Original Message----- From: Kevin Weslowski [mailto:weslowsk@accesscomm.ca] Sent: Thursday, January 24, 2013 1:23 PM To: HttpClient User Discussion Subject: Re: connect through proxy ok, I tried this: ======================== HttpParams params = new BasicHttpParams(); params.setParameter(ConnRoutePNames.DEFAULT_PROXY, ======================== But the output is always: HTTP/1.1 407 Proxy Authentication Required ( Forefront TMG requires authorization to fulfill the request. Access to the Web Proxy filter is denied.  ) I didn't need credentials in my earlier Java program...why not there and why now here? And any ideas how to fix this? ----- Original Message ----- Sent: Thursday, January 24, 2013 11:19:29 AM GMT -06:00 Central America Subject: Re: connect through proxy This piece of code is working for me: HttpParams params = new BasicHttpParams(); params.setParameter(ConnRoutePNames.DEFAULT_PROXY, You might want to look at something similar. JM 2013/1/24, Kevin Weslowski &amp;lt;weslowsk@accesscomm.ca&amp;gt;:</body>
  </mail>
  <mail>
    <header>RE: connect through proxy</header>
    <body>Issue with NTLM proxy authentication over Https. Also, I posted this on the glassfish metro and jaxb forum. http://www.java.net/forum/topic/glassfish/metro-and-jaxb/custom-authenticator-jax-ws-client-please-help If you need anything else, let me know. I've posted some of the source code, but I'd be happy to forward you the entire servlet if you want. -----Original Message----- From: Kevin Weslowski [mailto:weslowsk@accesscomm.ca] Sent: Thursday, January 24, 2013 4:13 PM To: HttpClient User Discussion Subject: Re: connect through proxy I searched the archives but I can't seem to find it...if you can find it, please send me a link...thanks... ----- Original Message ----- Sent: Thursday, January 24, 2013 2:37:17 PM GMT -06:00 Central America Subject: RE: connect through proxy Did you see my problem/solution regarding NTLMv2 proxy authentication? You could probably do something like that. That thread appeared around October 11. -----Original Message----- From: Kevin Weslowski [mailto:weslowsk@accesscomm.ca] Sent: Thursday, January 24, 2013 3:12 PM To: HttpClient User Discussion Subject: Re: connect through proxy thanks, but I couldn't get that to work for me. I did some research and I have the same problem as found in this post: http://stackoverflow.com/questions/13308073/httpcomponents-client-proxy-problems and the suggested solution doesn't work for me... ----- Original Message ----- Sent: Thursday, January 24, 2013 12:45:42 PM GMT -06:00 Central America Subject: RE: connect through proxy I don't know too much about authenticating proxies.  Is it possible that the authentication is done via some magic from your OS?  I know to get my Webstart stuff to work right I needed to also use the java "native" socket factory.  You can try this and see if it helps. In HttpClient 4.2: -----Original Message----- From: Kevin Weslowski [mailto:weslowsk@accesscomm.ca] Sent: Thursday, January 24, 2013 1:23 PM To: HttpClient User Discussion Subject: Re: connect through proxy ok, I tried this: ======================== HttpParams params = new BasicHttpParams(); params.setParameter(ConnRoutePNames.DEFAULT_PROXY, ======================== But the output is always: HTTP/1.1 407 Proxy Authentication Required ( Forefront TMG requires authorization to fulfill the request. Access to the Web Proxy filter is denied.  ) I didn't need credentials in my earlier Java program...why not there and why now here? And any ideas how to fix this? ----- Original Message ----- Sent: Thursday, January 24, 2013 11:19:29 AM GMT -06:00 Central America Subject: Re: connect through proxy This piece of code is working for me: HttpParams params = new BasicHttpParams(); params.setParameter(ConnRoutePNames.DEFAULT_PROXY, You might want to look at something similar. JM 2013/1/24, Kevin Weslowski &amp;lt;weslowsk@accesscomm.ca&amp;gt;:</body>
  </mail>
  <mail>
    <header>Re: connect through proxy</header>
    <body>Proxy with optional basic authentication. We have a ServerComm class that contains server connection info. You should be able to figure out what it is doing. ---&amp;gt; START ServerComm.ProxyPort), UsernamePasswordCredentials(ServerComm.ProxyUser, ServerComm.ProxyPw) me a link...thanks... do something like that. That thread appeared around October 11. is done via some magic from your OS?  I know to get my Webstart stuff to work right I needed to also use the java "native" socket factory.  You can try this and see if it helps. requires authorization to fulfill the request. And any ideas how to fix this?</body>
  </mail>
  <mail>
    <header>Re: connect through proxy</header>
    <body>thanks for the help, everyone...with your suggestions and some more trial and error I came up with some code that works for me: ========================================================================================================== ========================================================================================================== I hope it helps someone else out! ----- Original Message ----- Sent: Thursday, January 24, 2013 3:13:10 PM GMT -06:00 Central America Subject: Re: connect through proxy I searched the archives but I can't seem to find it...if you can find it, please send me a link...thanks... ----- Original Message ----- Sent: Thursday, January 24, 2013 2:37:17 PM GMT -06:00 Central America Subject: RE: connect through proxy Did you see my problem/solution regarding NTLMv2 proxy authentication? You could probably do something like that. That thread appeared around October 11. -----Original Message----- From: Kevin Weslowski [mailto:weslowsk@accesscomm.ca] Sent: Thursday, January 24, 2013 3:12 PM To: HttpClient User Discussion Subject: Re: connect through proxy thanks, but I couldn't get that to work for me. I did some research and I have the same problem as found in this post: http://stackoverflow.com/questions/13308073/httpcomponents-client-proxy-problems and the suggested solution doesn't work for me... ----- Original Message ----- Sent: Thursday, January 24, 2013 12:45:42 PM GMT -06:00 Central America Subject: RE: connect through proxy I don't know too much about authenticating proxies.  Is it possible that the authentication is done via some magic from your OS?  I know to get my Webstart stuff to work right I needed to also use the java "native" socket factory.  You can try this and see if it helps. In HttpClient 4.2: -----Original Message----- From: Kevin Weslowski [mailto:weslowsk@accesscomm.ca] Sent: Thursday, January 24, 2013 1:23 PM To: HttpClient User Discussion Subject: Re: connect through proxy ok, I tried this: ======================== HttpParams params = new BasicHttpParams(); params.setParameter(ConnRoutePNames.DEFAULT_PROXY, ======================== But the output is always: HTTP/1.1 407 Proxy Authentication Required ( Forefront TMG requires authorization to fulfill the request. Access to the Web Proxy filter is denied.  ) I didn't need credentials in my earlier Java program...why not there and why now here? And any ideas how to fix this? ----- Original Message ----- Sent: Thursday, January 24, 2013 11:19:29 AM GMT -06:00 Central America Subject: Re: connect through proxy This piece of code is working for me: HttpParams params = new BasicHttpParams(); params.setParameter(ConnRoutePNames.DEFAULT_PROXY, You might want to look at something similar. JM 2013/1/24, Kevin Weslowski &amp;lt;weslowsk@accesscomm.ca&amp;gt;:</body>
  </mail>
  <mail>
    <header>How to configure basic authentication for SOCKs Proxy</header>
    <body>Hi,I am using Apache HttpClient 4.2.3 library for for accessing resources via HTTP/HTTPS.Requests are sent through SOCKs proxy which requires 'basic authentication'.I looked at the API doc and found that there is class /ProxyAuthenticationStrategy/, which looks like serves the purpose.But I am not able to figure it out how to use it. Specifically I am not able to find how to provide proxy credentials to /ProxyAuthenticationStrategy/.I looked at the documentation &amp;amp; searched over net but could not find appropriate help over this topic.Can someone please guide me on how to configure basic authentication for SOCKs Proxy?Thanks,Sachin -- View this message in context: http://httpcomponents.10934.n7.nabble.com/How-to-configure-basic-authentication-for-SOCKs-Proxy-tp19030.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: How to configure basic authentication for SOCKs Proxy</header>
    <body>Sachin, SOCKS is a TCP/IP level proxy protocol. It has nothing to do with HTTP and is out of scope as far HttpClient is concerned. HttpClient can be configured to connect all network sockets it creates via a SOCKS proxy but it will make no attempt to provide any user credentials to the SOCKS proxy. Oleg</body>
  </mail>
  <mail>
    <header>Re: How to configure basic authentication for SOCKs Proxy</header>
    <body>Thanks Oleg. Is there any custom way to achieve this functionality ? Regards, Sachin -- View this message in context: http://httpcomponents.10934.n7.nabble.com/How-to-configure-basic-authentication-for-SOCKs-Proxy-tp19030p19045.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: How to configure basic authentication for SOCKs Proxy</header>
    <body>Sachin Honestly I have no idea. I have never worked with the SOCKs protocol. Supposedly the damn thing should be well supported by modern JRE right out of the box. Oleg</body>
  </mail>
  <mail>
    <header>Re: How to configure basic authentication for SOCKs Proxy</header>
    <body>Hi Oleg, Got it working with Authentication as well. I used java.net.Authenticator which provides credentials. I have placed this Custom Authenticator in my extended ClientConnectionOperator. Please have a look at my ClientConnectionOperator code below. Please let me know if you find any issues with the code. /public class SocksProxyClientConnOperator extends &amp;#009;public void openConnection(final OperatedClientConnection conn, final HttpHost target, &amp;#009;public void setSocksAuthenticator(SocksProxyAuthenticator Thanks, Sachin Survase -- View this message in context: http://httpcomponents.10934.n7.nabble.com/How-to-configure-basic-authentication-for-SOCKs-Proxy-tp19030p19118.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: How to configure basic authentication for SOCKs Proxy</header>
    <body>I see nothing wrong with your code. I would just move this logic to a custom SchemeSocketFactory#connect implementation. Socket factories are much easier to plug in than a client connection operator. Oleg</body>
  </mail>
  <mail>
    <header>how to change content length strategy</header>
    <body>hi to all, my device for each http request, returns a response that provides more bytes than specified with Content-Length header. I can know the amount of additional bytes, but I don't know how to tell to httpclient. Can you please help me? Should I change the content length strategy implementing a new ContentLengthStratecy class? is it possible? thank you greetings</body>
  </mail>
  <mail>
    <header>Re: how to change content length strategy</header>
    <body>with Content-Length header. I can know the amount of additional bytes, but I don't know how to tell to httpclient. class? is it possible? I would very strongly to recommend you to not misuse HTTP protocol and do not create HTTP services that grossly violate the specification. Please consider making your code generate properly delineated message and pass whatever additional custom information your particular application requires in a custom header such as 'X-My-Content-Length: 20 bytes shorter or whatever'. Oleg PS: yes, it is definitely possible to plug-in a custom ContentLengthStrategy implementation. It is somewhat easier with 4.3 APIs and slightly more difficult with 4.2 APIs.</body>
  </mail>
  <mail>
    <header>Re: how to change content length strategy</header>
    <body>&amp;#009;&amp;gt; my device for each http request, returns a response that provides more bytes than specified with Content-Length header. I can know the amount of additional bytes, but I don't know how &amp;#009;&amp;gt; Should I change the content length strategy implementing a new ContentLengthStratecy Honestly I didn't understand how to force httpclient to consider my custom content length By the way, can you suggest me where can i find a sample code to change ContentLengthStrategy</body>
  </mail>
  <mail>
    <header>Re: how to change content length strategy</header>
    <body>specified with Content-Length header. I can know the amount of additional bytes, but I don't know how to tell to httpclient. class? is it possible? and not the one specified in device response. or resolve my issue, please? So, you are saying you are not in control of how the device generates response messages? If that is the case, this is how you can work it around --- PoolingClientConnectionManager cm = new PoolingClientConnectionManager() --- It is kind of ugly. It will get less cumbersome with 4.3. Oleg</body>
  </mail>
  <mail>
    <header>Re: how to change content length strategy</header>
    <body>than specified with Content-Length header. I can know the amount of additional bytes, but</body>
  </mail>
  <mail>
    <header>When is canceled called on a request callback?</header>
    <body>We're making 10 concurrent HTTP requests via the HttpAsyncClient (with a 0.2 sec minimum delay between requests).  We are seeing sometimes that the cancel() method on the FutureCallback&amp;lt;HttpResponse&amp;gt; object is being called. But I don't see any documentation to help me understand under what conditions cancelled is being called.  What does it mean when the cancelled method is called?  Am I safe to retry such a request, or is this a fatal condition?  Do I need to reset the Async client in any way after seeing this request? I notice that once cancel is called it seems like the other concurrent connections are canceled at the same time, in some cases I've seen it recover, and other times I've seen it fail all future requests.  Thanks, Ha</body>
  </mail>
  <mail>
    <header>Re: When is canceled called on a request callback?</header>
    <body>There can be various causes of request cancellation, including an abnormal termination of the client itself. Post a _complete_ wire / context log of the session and I'll have a look. http://hc.apache.org/httpcomponents-client-ga/logging.html Oleg</body>
  </mail>
  <mail>
    <header>Http Get retrieve data larger than Integer.MAX_VALUE</header>
    <body>Hi, Is there any way to retrieve a file which is larger than Integer.MAX_VALUE ? ContentLengthInputStream has a cast which can be bigger than Integer.MAX_VALUE Thanks, -- Olivier Lamy Talend: http://coders.talend.com http://twitter.com/olamy | http://linkedin.com/in/olamy</body>
  </mail>
  <mail>
    <header>Re: Http Get retrieve data larger than Integer.MAX_VALUE</header>
    <body>Olivier This applies to one read operation only (unless I am missing something). I believe byte arrays in Java physically cannot be larger than Integer.MAX_VALUE. One can read content entities larger than Integer.MAX_VALUE in multiple chunks, though. Oleg</body>
  </mail>
  <mail>
    <header>Re: Http Get retrieve data larger than Integer.MAX_VALUE</header>
    <body>2013/1/28 Oleg Kalnichevski &amp;lt;olegk@apache.org&amp;gt;: arghh correct :-) -- Olivier</body>
  </mail>
  <mail>
    <header>Question on SSL packet size</header>
    <body>Hey all, I'm using a standard Https connection w/ chunked encoding, trying to write small chunks to a secure socket. I setup an InputStreamEntity that httpclient reads from as the bytes become available. It typically reads 40-50 bytes, which is fine, but seems to do the socket/tcp write in much larger chunks. On my receiving end, I usually read 2K in one read() and 45 bytes (ish) in another one following it immediately. some points: - I've enabled NODELAY - I've noticed in the code that ChunkedOutputStream seems to buffer 2048 bytes by default. Is there any way to alter this ? I've recompiled that to change this value to something smaller, and things are much better over plain http, but still in https, it seems to be sending large packets. Is there some way I can get the SSL socket layer to send in smaller packets? Thanks John</body>
  </mail>
  <mail>
    <header>Interrupt flag getting cleared</header>
    <body>I'm having some trouble tracking this down, but I believe that httpclient 4.2.3 is clearing the interrupt flag. My code looks like this: Sometimes this loop does not terminate when calling Future.cancel(true).  The only piece of diagnostics I have so far is this: Exception 'java.lang.InterruptedException' occurred in thread 'queue-consumer-reader-thread-1' at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.reportInterruptAfterWait(AbstractQueuedSynchronizer.java:2017) Exception 'java.lang.InterruptedException' occurred in thread 'queue-consumer-reader-thread-1' at org.apache.http.impl.conn.tsccm.WaitingThread.await(WaitingThread.java:164) Exception 'java.lang.InterruptedException' occurred in thread 'queue-consumer-reader-thread-1' at org.apache.http.impl.conn.tsccm.ConnPoolByRoute.getEntryBlocking(ConnPoolByRoute.java:410) Exception 'java.lang.InterruptedException' occurred in thread 'queue-consumer-reader-thread-1' at org.apache.http.impl.conn.tsccm.ConnPoolByRoute.getEntryBlocking(ConnPoolByRoute.java:423) Should I not expect the interrupt flag to be preserved?  Do you have any suggestions how I could isolate this bug (I'm not 100% sure if it's in HttpClient or AWS client right now)? Thanks</body>
  </mail>
  <mail>
    <header>Re: Interrupt flag getting cleared</header>
    <body>I am not aware of any place in HttpClient where it might meddle with the interrupt flag. In any case I would recommend using PoolingClientConnectionManager instead of the deprecated ThreadSafeClientConnManager. If the problem still persists after removing all references to deprecated code, the problem is more likely to be caused by the AWS code. Oleg</body>
  </mail>
  <mail>
    <header>Re: Interrupt flag getting cleared</header>
    <body>Is there anywhere that InterruptException is caught and either not rethrown, or the flag is not explicitly set again?  That would be sufficient. I don't think I can since the AWS client creates the connection manager itself and offers no API for providing my own *sigh*.  I've raised a ticket with AWS so we'll see what they have to say.</body>
  </mail>
  <mail>
    <header>Re: Interrupt flag getting cleared</header>
    <body>Such as this, perhaps (I found this one while debugging):</body>
  </mail>
  <mail>
    <header>Re: Interrupt flag getting cleared</header>
    <body>There are two places where InterruptedException is re-thrown as InterruptedIOException. I am not aware of any place where InterruptedException can be caught and not re-thrown. Oleg</body>
  </mail>
  <mail>
    <header>Re: Interrupt flag getting cleared</header>
    <body>But by rethrowing a different exception, the interrupt flag will be cleared, no?</body>
  </mail>
  <mail>
    <header>Re: Interrupt flag getting cleared</header>
    <body>I believe so. Honestly, I just do not know what the correct behavior should be. It does appear, though, it is usually expected that a well behaved application would re-interrupt the thread if it does not propagate the InterruptedException [1] Please raise a JIRA for this defect. Oleg [1] http://www.ibm.com/developerworks/java/library/j-jtp05236/index.html</body>
  </mail>
  <mail>
    <header>Re: Interrupt flag getting cleared</header>
    <body>is have if the Yes, that's the behaviour my code is relying on. Raised https://issues.apache.org/jira/browse/HTTPCLIENT-1311.  Thanks for your help, Oleg!</body>
  </mail>
  <mail>
    <header>recovery of ther HTTPClient after connection disruption - retrying of the HttpRequest</header>
    <body>The original problem I am trying to solve is connection disruption after resume from the sleep mode (on Windows). When the machine is resumed the TCP/IP stack is not ready yet, so all requests queued and processed at the time of rebuilding TCP/IP connectivity are failed. Note that the time needed for complete recovery in Java is even longer because of DNS caching. Especially negative TTL has negative impact as it is explicitly set to 10 seconds in java.security, so there is no chance to change it in run-time or by the system property. I simulate sleep/resume with disconnecting and connecting of the NIC of the virtual machine, so I am able to debug problem. When HttpClient.execute throws some specific exceptions (like SocketException) we detect that if there are some changes on NIC adapter configuration and wait for TCP/IP stack recovery (the special JNI was needed). When conditions are stable we retry to execute  the same HttpRequest. Note that the HttpRequest is reset by reset() method before retry. Unfortunately the execution hangs in AbstractHttpClientConnection.isStale() for some time like 30 secs (see the stack below). After this problem  I tried to close the connection with  HttpRequest.abort() to avoid hang, but I have had no success. Finally the request is failed with NoHttpResponseException. How can I recover the HttpClient and/or HttpRequest so I can retry it. Note that we use some older version of HttpClient - 4.2-alpha + HttpComponents - 4.1 Thanks in advance, Bronislav Gabrhelik ---hanging  stack --- java.net.SocketInputStream.socketRead0 java.net.SocketInputStream.read org.apache.http.impl.io.AbstractSessionInputBuffer.fillBuffer(AbstractSessionInputBuffer.java:166) org.apache.http.impl.io.SocketInputBuffer.fillBuffer(SocketInputBuffer.java:90) org.apache.http.impl.io.SocketInputBuffer.isDataAvailable(SocketInputBuffer.java:101) org.apache.http.impl.AbstractHttpClientConnection.isStale(AbstractHttpClientConnection.java:314) org.apache.http.impl.conn.AbstractClientConnAdapter.isStale(AbstractClientConnAdapter.java:174) org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:464) org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:927) org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:826) com.xythos.client.drive.remoteprotocol.webdav.WDConnection.executeHttpMethodInternal(WDConnection.java:766) com.xythos.client.drive.remoteprotocol.webdav.WDConnection.executeHttpMethod(WDConnection.java:712) com.xythos.client.drive.remoteprotocol.webdav.WDConnection.executeHttpMethod(WDConnection.java:699) com.xythos.client.drive.remoteprotocol.webdav.WDBasicOperations.updateResource(WDBasicOperations.java:815) com.xythos.client.drive.remoteprotocol.webdav.WDConnection.updateResource(WDConnection.java:1406) com.xythos.client.drive.operations.GetAttributesOperation.perform(GetAttributesOperation.java:45) com.xythos.client.drive.operations.RemoteQueue.perform(RemoteQueue.java:782) com.xythos.client.drive.operations.OperationQueue.run(OperationQueue.java:263) java.lang.Thread.run -- exception thrown--- Caused by: org.apache.http.NoHttpResponseException: The target server failed to respond at org.apache.http.impl.conn.DefaultResponseParser.parseHead(DefaultResponseParser.java:108) at org.apache.http.impl.conn.DefaultResponseParser.parseHead(DefaultResponseParser.java:63) at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:254) at org.apache.http.impl.AbstractHttpClientConnection.receiveResponseHeader(AbstractHttpClientConnection.java:285) at org.apache.http.impl.conn.DefaultClientConnection.receiveResponseHeader(DefaultClientConnection.java:252) at org.apache.http.impl.conn.AbstractClientConnAdapter.receiveResponseHeader(AbstractClientConnAdapter.java:220) at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:300) at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:127) at org.apache.http.impl.client.DefaultRequestDirector.tryExecute(DefaultRequestDirector.java:708) at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:515) at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:927) at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:826)</body>
  </mail>
  <mail>
    <header>Re: recovery of ther HTTPClient after connection disruption - retrying of the HttpRequest</header>
    <body>The HttpRequest#abort() interrupts request execution by shutting down the underlying socket. If socket shutdown does not unblock I/O operations blocked on it, I would suspect a JRE level issue. Try upgrading your JRE and see if that makes a difference. Having said that, since you are using JNI anyway, why not simply shutting HttpClient down upon a pre-suspend notification? Oleg</body>
  </mail>
  <mail>
    <header>Socket timeout</header>
    <body>Hello, Just one problem about socket timeout. My app uses the PoolingConnectionManager intensively (hundreds of threads getting connections from it simultaneously). The response (socket) timeout is set to 20 seconds. And this limit is very important, because the cms collector is specifically configured thinking that all requests will take, at most, 20 seconds (otherwise the socket timeout should be triggered and the thread should die). If this does not occur, I'll have an overflow of objects in the young generation (and survivor spaces) and, in consequence, a lot of objects (that should be death) will go to the old generation because they're still alive. Well, I understand that socket timeout is not the same than response timeout. The socket timeout is the maximum amount of seconds allowed between two packets. The response timeout is the maximum time that a response received from a server can take (from the first to the last packet). Therefore, a socket timeout of 20 seconds does not guarantee a response timeout of 20 seconds (in fact, the response timeout will always be greater than socket tiemout because the server can deliver packets slowly but always under the 20 seconds). Then, the question is: how can I implement a response timeout in httpclient that guarantees the 20 seconds? I can imagine some ways to implement it, but maybe using the same httpclient there is a known way to do it. And another question (nothing to see with the above). I'm experimenting some lock contention in the pool (due to the global lock that is guarding it in order to calculate correctly the maxconnections). Reading a previous email, where you said: "What might be a possibility is creating a more lenient and less prone to lock contention issues implementation that may under stress occasionally allocate a few more connections than the max limits.". Is this a feature that you'll implement in the next version? Thanks, Joan.</body>
  </mail>
  <mail>
    <header>PoolingClientConnectionManager and createConnectionOperator</header>
    <body>Hi, I'm trying to override the entity serializer for a http POST like so PoolingClientConnectionManager cm = new However, the createConnection() overriden function is never called. Looking at the code, it seems there's a line in HttpConnPool (used internally by PoolingClientConnectionManager) that simply instantiates a DefaultHttpConnection(). Is there any way to override this behaviour? Thanks a lot, John</body>
  </mail>
  <mail>
    <header>Re: PoolingClientConnectionManager and createConnectionOperator</header>
    <body>John It is a bug in PoolingClientConnectionManager. Please raise a JIRA for this defect. Oleg</body>
  </mail>
  <mail>
    <header>NTLM or digest authentication using a local  user on a domain host doesn't work</header>
    <body>Hi, I have tried several http connections using httpclient to a Windows Server 2008 R2 standard host running  IIS 7.5. I have trouble authenticating local users if the host is included in a domain. Domain users or local users if the host is in a workgroup work fine. So I am using ntlm or digest authentication and:  - Authentication with a domain user works fine  - Authentication with a local user if the host is in a workgroup works fine  - Authentication with a local user (e.g. Administrator) if the host is in a domain returns 401 - Unauthorized My code: //using local user returns "401 - Unauthorized" if the host is part of a domain //domain user works fine: Any feedback would be highly appreciated. Thanks Mihai</body>
  </mail>
  <mail>
    <header>Re: NTLM or digest authentication using a local  user on a domain host doesn't work</header>
    <body>host running  IIS 7.5. I have trouble authenticating local users if the host is included in a domain. Domain users or local users if the host is in a workgroup work fine. 401 - Unauthorized What version of HttpClient are you using? Oleg</body>
  </mail>
  <mail>
    <header>Re: NTLM or digest authentication using a local  user on a domain host doesn't work</header>
    <body>I'm using HttpClient 4.2.3 Mihai -- View this message in context: http://httpcomponents.10934.n7.nabble.com/NTLM-or-digest-authentication-using-a-local-user-on-a-domain-host-doesn-t-work-tp19125p19134.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: NTLM or digest authentication using a local  user on a domain host doesn't work</header>
    <body>Could you please try using JCIFS instead of the default internal NTLM engine (as described here [1]) and see if that makes any difference? Oleg [1] http://hc.apache.org/httpcomponents-client-ga/ntlm.html</body>
  </mail>
  <mail>
    <header>Re: NTLM or digest authentication using a local  user on a domain host doesn't work</header>
    <body>Thank you for your response! I tested using the jcifs-1.3.17 and it works.  Unfortunately I don't think I can use jcifs implementation because of the license. Mihai Oleg Kalnichevski wrote -- View this message in context: http://httpcomponents.10934.n7.nabble.com/NTLM-or-digest-authentication-using-a-local-user-on-a-domain-host-doesn-t-work-tp19125p19136.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: NTLM or digest authentication using a local  user on a domain host doesn't work</header>
    <body>Please raise a JIRA for this defect. Oleg</body>
  </mail>
  <mail>
    <header>Re: NTLM or digest authentication using a local user on a domain host doesn't work</header>
    <body>Did you try to use empty string domain (not null) and let server to use it's default? It might help. Just for testing purposes. Simply the end user should decide if he uses domain or not as he has the knowledge of an environment. Bronislav</body>
  </mail>
  <mail>
    <header>Re: Socket timeout</header>
    <body>There are presently no way to implement a response deadline (or response timeout) with HttpClient other than using an additional monitoring thread. A proper support for response deadlines would be very difficult with a blocking i/o model and would require a substantial amount of ugly code. It should be easier with a non-blocking i/o, though. I experimented with this idea a while ago (you can find the source code of my experimental connection manager in the mail archive) but did not get any considerable performance improvement compared to the standard connection manager. I do not think I will invest any more time into pursuit of this idea, but could provide assistance to anyone willing to take over the work. Oleg</body>
  </mail>
  <mail>
    <header>IllegalArgumentException when URL contains []</header>
    <body>Hello, Calling  httpRequest = new HttpGet(uri); with uri equal to: generates this exception: java.lang.IllegalArgumentException org.apache.jmeter.protocol.http.sampler.HTTPHC4Impl.sample(HTTPHC4Impl.java:249) org.apache.jmeter.protocol.http.sampler.HTTPSamplerProxy.sample(HTTPSamplerProxy.java:62) org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase.sample(HTTPSamplerBase.java:1088) org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase.sample(HTTPSamplerBase.java:1077) org.apache.jmeter.threads.JMeterThread.process_sampler(JMeterThread.java:428) Caused by: java.net.URISyntaxException: Illegal character in path at index 31: http://example.com/path/to/file[3].html Are we supposed to encode this kind of URLs or is it some bug ? Regards Philippe</body>
  </mail>
  <mail>
    <header>Re: IllegalArgumentException when URL contains []</header>
    <body>Philippe The URI in question contains invalid characters. Both '[' and ']' are illegal for URIs and need to be escaped. Oleg</body>
  </mail>
  <mail>
    <header>Re: IllegalArgumentException when URL contains []</header>
    <body>Hello Oleg, Thanks for answer. Is there some helper class in HttpClient for this ? Regards Philippe -- Cordialement. Philippe Mouawad.</body>
  </mail>
  <mail>
    <header>Re: IllegalArgumentException when URL contains []</header>
    <body>You can use URIBuilder in order to construct a well formed URI. Oleg</body>
  </mail>
  <mail>
    <header>Re: IllegalArgumentException when URL contains []</header>
    <body>Thanks Oleg ! -- Cordialement. Philippe Mouawad.</body>
  </mail>
  <mail>
    <header>HTTPClient 4 : Request hangs for 4-5 seconds when using IP's is used without reverse DNS only on Windows</header>
    <body>Hello, We had an issue reported in JMerer related to HttpClient version 4.X.X which does not happen in version 3.1. Thread dump shows thread hangs within InetAddress$1.getHostByAddr: "Thread Group 1-1" prio=6 tid=0x038f3c00 nid=0xd80 runnable [0x03b7f000] Source) Do you remember fixing this kind of issue within version 3.X ?, something like this: - http://www.velocityreviews.com/forums/showpost.php?p=2959030&amp;amp;postcount=8 For completeness JMeter issue is here: - https://issues.apache.org/bugzilla/show_bug.cgi?id=54449 Thanks -- Regards. Philippe M.</body>
  </mail>
  <mail>
    <header>Re: HTTPClient 4 : Request hangs for 4-5 seconds when using IP's is used without reverse DNS only on Windows</header>
    <body>Caching of resolved addresses also has downsides. For instance, it breaks simple load distribution schemes based on DNS round-robin. I am pretty certain HC 3.x does not use InetAddress caching. However, HC 4.x socket initialization logic is significantly different from that of 3.x. Oleg</body>
  </mail>
  <mail>
    <header>Re: HTTPClient 4 : Request hangs for 4-5 seconds when using IP's is used without reverse DNS only on Windows</header>
    <body>UNSUBSCRIBE Med vänliga hälsningar/Best regards Benjamin Janes ------------------------------------------ Senior IT Specialist Cata Technical Lead Open Group Certified IT Specialist / Level 1 Certified IT Specialist Technical Specialist (Master Data Management) IBM Sverige AB V. Varvsgatan 19, 211 19 Malmö Cell Phone no.: +46 (0)707 93 62 89 e-mail: benjamin.janes@se.ibm.com To:     HttpClient User Discussion &amp;lt;httpclient-users@hc.apache.org&amp;gt;, Date:   02/05/2013 10:50 AM Subject:        Re: HTTPClient 4 : Request hangs for 4-5 seconds when using IP's is used without reverse DNS only on Windows Source) Source) sun.security.ssl.SSLSocketImpl.performInitialHandshake(Unknown org.apache.http.conn.ssl.AbstractVerifier.verify(AbstractVerifier.java:91) org.apache.http.conn.ssl.SSLSocketFactory.connectSocket(SSLSocketFactory.java:572) org.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:180) org.apache.http.impl.conn.ManagedClientConnectionImpl.open(ManagedClientConnectionImpl.java:294) org.apache.http.impl.client.DefaultRequestDirector.tryConnect(DefaultRequestDirector.java:640) org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:479) org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:906) org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:805) org.apache.jmeter.protocol.http.sampler.HTTPHC4Impl.sample(HTTPHC4Impl.java:284) org.apache.jmeter.protocol.http.sampler.HTTPSamplerProxy.sample(HTTPSamplerProxy.java:62) org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase.sample(HTTPSamplerBase.java:1075) org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase.sample(HTTPSamplerBase.java:1064) org.apache.jmeter.threads.JMeterThread.process_sampler(JMeterThread.java:426) org.apache.jmeter.threads.JMeterThread.run(JMeterThread.java:255) something http://www.velocityreviews.com/forums/showpost.php?p=2959030&amp;amp;postcount=8 Caching of resolved addresses also has downsides. For instance, it breaks simple load distribution schemes based on DNS round-robin. I am pretty certain HC 3.x does not use InetAddress caching. However, HC 4.x socket initialization logic is significantly different from that of 3.x. Oleg</body>
  </mail>
  <mail>
    <header>Avoiding persistent connections</header>
    <body>I have create a non-keepalive client (no connection reuse) by Nonetheless, in the logs I get ClientConnectionManager - Connection can be kept alive for 9223372036854775807 MILLISECONDS Is that OK? Ciao, &amp;#009;&amp;#009;&amp;#009;&amp;#009;&amp;#009;seba -- View this message in context: http://httpcomponents.10934.n7.nabble.com/Avoiding-persistent-connections-tp19192.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: Avoiding persistent connections</header>
    <body>It is a minor bug in BasicClientConnectionManager. If you use PoolingClientConnectionManager this message will not be logged. Oleg</body>
  </mail>
  <mail>
    <header>responseEntity.writeTo() performance depending on network?</header>
    <body>Hi, We are using httpcore 4.0.1 and httpclient 4.0.3 in one of our products. In a clients test environment, we experience a big delay when calling writeTo(). This is the code:  11:37:26,972 [router#12] DEBUG TERMINAL.SERVICE.CONNECTOR.LRTCS - response code:200 11:37:26,972 [router#12] DEBUG TERMINAL.SERVICE.CONNECTOR.LRTCS - got Entity ... 11:38:49,092 [router#12] DEBUG TERMINAL.SERVICE.CONNECTOR.LRTCS - wrote everything to a stream. The call writeTo() on the responseEntity took more than 80 sek, for a message of 560 kb. The strange thing is that I cannot reproduce their problem, with identical HW, in another network, even if I increase the message size to well above 3 MB. No other threads, garbage collection or other activities occur on the system. As far as i understood the execute(), it blocks until the whole stream is read from the socket. Is that not the case? Can the performance of writeTo() be in some way depending on the network? Not sure if it makes a difference, but the instance of httpResponse.getEntity() in my case is a BasicManagedEntity. Thanks in advance! Regards Oliver -- View this message in context: http://httpcomponents.10934.n7.nabble.com/responseEntity-writeTo-performance-depending-on-network-tp19194.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: responseEntity.writeTo() performance depending on network?</header>
    <body>Is there a reason for using such an outdated version of HttpClient? Absolutely. Smaller messages may fit into the network buffer in their entirety. Larger messages most likely are transmitted with several packets. Delivery of those packets can be affected by network instability or congestion. Oleg</body>
  </mail>
  <mail>
    <header>Re: responseEntity.writeTo() performance depending on network?</header>
    <body>Thanks for your reply Oleg. We have started to use it when it came out, and did not have a direct need to upgrade. But we will plan for that. Of course I am aware of the fact that the network affects the performance of execute(), but I expected all packets to be transferred once execute() returns? My question targets especially the call writeTo(). From what I can see, writeTo() just copies bytes from one place to another, and, in the end, calls the connection manager to release the connection. So can even writeTo() have a varying performance based on the network? Regards Oliver -- View this message in context: http://httpcomponents.10934.n7.nabble.com/responseEntity-writeTo-performance-depending-on-network-tp19194p19203.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: responseEntity.writeTo() performance depending on network?</header>
    <body>Usually this is the case unless the server responds out of sequence with an early response without having received the entire request message. That other place is the network stack and write operations can block indefinitely if the network stack is unable to flush internal output buffer for some reason. There is no guarantee that the network stack can flush the output buffer instantaneously. The speed with which the network stack is able to write packages out is likely to vary. Some packages may even need to be re-transmitted, and so on. Hope this helps Oleg</body>
  </mail>
  <mail>
    <header>Re: responseEntity.writeTo() performance depending on network?</header>
    <body>Yes, this helped. Thanks a lot! Kind regards Oliver -- View this message in context: http://httpcomponents.10934.n7.nabble.com/responseEntity-writeTo-performance-depending-on-network-tp19194p19211.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: responseEntity.writeTo() performance depending on network?</header>
    <body>Is there a special log category that I can use to prove that we are waiting for the network layer? -- View this message in context: http://httpcomponents.10934.n7.nabble.com/responseEntity-writeTo-performance-depending-on-network-tp19194p19212.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: responseEntity.writeTo() performance depending on network?</header>
    <body>None I know of. Wireshark is your best friend. Oleg</body>
  </mail>
  <mail>
    <header>How to enable debug level logs in HttpClient</header>
    <body>Hi, We are using HttpClient 4.2.3 to communicate to a third party Internet URL. To debug any issue that comes during communication, we need to see the debug logs generated by HttpClient classes (for example HttpAuthenticator class). I see that commons-logging-1.1.1.jar is shipped with HttpClient. But do not know how to configure it for logging at debug level. Can some one please tell me necessary steps I should do to see the debug logs of HttpClient. thank you for help, deepak</body>
  </mail>
  <mail>
    <header>Re: How to enable debug level logs in HttpClient</header>
    <body>http://hc.apache.org/httpcomponents-client-ga/logging.html Oleg</body>
  </mail>
  <mail>
    <header>POST redirection question</header>
    <body>Hello everyone, At the beginning, I had something like that : It turns out that I got a 301 Moved permanently. So I made the following modifications, either: -          or the same than above with new LaxRedirectStrategy Each time, after receiving a 301, the client sent a GET request instead of my initial HTTP request, which is a POST one as you can see, to the new location. Any advice ? sample ? Or is it an issue ? Best Regards.</body>
  </mail>
  <mail>
    <header>POST redirection question</header>
    <body>Hello everyone, At the beginning, I had something like that : It turns out that I got a 301 Moved permanently. So I made the following modifications, either: - or              httpClient.setRedirectStrategy(new DefaultRedirectStrategy()                   @Override                   public boolean isRedirected(HttpRequest request, HttpResponse                               isRedirected = super.isRedirected(request,                               fail("Unable to set a redirect                                                       if (responseCode == 301 || responseCode - or the same than above with new LaxRedirectStrategy Each time, after receiving a 301, the client sent a GET request instead of my initial HTTP request, which is a POST one as you can see, to the new location. Any advice ? sample ? Or is it an issue ? Best Regards.</body>
  </mail>
  <mail>
    <header>Re: POST redirection question</header>
    <body>HTTP request, which is a POST one as you can see, to the new location. Only in case of a TEMPORARY_REDIRECT it is valid to redirect the request without changing its method. In all other cases methods other than HEAD and GET get converted to GET. To change this behavior you need to override #getRedirect method http://hc.apache.org/httpcomponents-client-ga/httpclient/xref/org/apache/http/impl/client/DefaultRedirectStrategy.html#213 Oleg</body>
  </mail>
  <mail>
    <header>RE: POST redirection question</header>
    <body>So my understanding is that the default behavior for HTTP/1.1 user agent is to not change But maybe the first paragraph prevails meaning that for 301 user agent automatic redirection Only in case of a TEMPORARY_REDIRECT it is valid to redirect the request without changing its method. In all other cases methods other than HEAD and GET get converted to GET. To change</body>
  </mail>
  <mail>
    <header>RE: POST redirection question</header>
    <body>Hello Francois, Browsers do not respect much this part of the specifications. I remember I made some comprehensive tests (but this was a few years ago) and most browsers were changing POST to GET. a écrit :</body>
  </mail>
  <mail>
    <header>RE: POST redirection question</header>
    <body>Hello François-Xavier, I was not talking of browser behavior. I was talking of HttpClient behavior (eg HttpClient user agent). This is why I have asked the spec question. Best Regards. -----Original Message----- From: Francois-Xavier Bonnet [mailto:fx.bonnet@gmail.com] Sent: mercredi 6 février 2013 09:31 To: HttpClient User Discussion Cc: olegk@apache.org Subject: RE: POST redirection question Hello Francois, Browsers do not respect much this part of the specifications. I remember I made some comprehensive tests (but this was a few years ago) and most browsers were changing POST to GET. Le 6 févr. 2013 09:15, "COURTAULT Francois" &amp;lt;Francois.COURTAULT@gemalto.com&amp;gt; a écrit :</body>
  </mail>
  <mail>
    <header>Re: POST redirection question</header>
    <body>user agent). comprehensive tests (but this was a few years ago) and most browsers were changing POST to GET. écrit : No, you are not. But many older user agents do it anyway, so it simply became an expected behavior. To disambiguate expected behavior in case of a redirect status code 407 has been added by the HTTP/1.1 spec. Correct. Oleg</body>
  </mail>
  <mail>
    <header>Re: POST redirection question</header>
    <body>Francois, What I meant is that changing POST to GET for a 301 redirect is contrary to the specification (and you are right) but this behavior is now a de facto standard. Most servers expect this behavior so following the specification on this point would cause a lot of problems. There is an interesting article about it here: http://www.alanflavell.org.uk/www/post-redirect.html As Oleg already mentioned, you may change this easily by writing a subclass of org.apache.http.impl.client.DefaultRedirectStrategy you will have to rewrite the method that builds the new request when the redirect occurs: org.apache.http.impl.client.DefaultRedirectStrategy.getRedirect(HttpRequest, HttpResponse, HttpContext) user agent). comprehensive tests (but this was a few years ago) and most browsers were changing POST to GET. écrit :</body>
  </mail>
  <mail>
    <header>RE: POST redirection question</header>
    <body>Hello, Thanks a lot for your explanation Oleg and François-Xavier. Best Regards. From: Francois-Xavier Bonnet [mailto:fx.bonnet@gmail.com] On Behalf Of François-Xavier Bonnet Sent: mercredi 6 février 2013 14:30 To: COURTAULT Francois Cc: HttpClient User Discussion; olegk@apache.org; fx.bonnet@gmail.com Subject: Re: POST redirection question Francois, What I meant is that changing POST to GET for a 301 redirect is contrary to the specification (and you are right) but this behavior is now a de facto standard. Most servers expect this behavior so following the specification on this point would cause a lot of problems. There is an interesting article about it here: http://www.alanflavell.org.uk/www/post-redirect.html As Oleg already mentioned, you may change this easily by writing a subclass of org.apache.http.impl.client.DefaultRedirectStrategy you will have to rewrite the method that builds the new request when the redirect occurs: org.apache.http.impl.client.DefaultRedirectStrategy.getRedirect(HttpRequest, HttpResponse, HttpContext) Hello François-Xavier, I was not talking of browser behavior. I was talking of HttpClient behavior (eg HttpClient user agent). This is why I have asked the spec question. Best Regards. -----Original Message----- From: Francois-Xavier Bonnet [mailto:fx.bonnet@gmail.com] Sent: mercredi 6 février 2013 09:31 To: HttpClient User Discussion Subject: RE: POST redirection question Hello Francois, Browsers do not respect much this part of the specifications. I remember I made some comprehensive tests (but this was a few years ago) and most browsers were changing POST to GET. a écrit : Hello Oleg, First, thanks a lot for you answer. Is it written in the rfc 2626 spec because I have not seen it :-( I have only seen at 10.3.2: redirect the So my understanding is that the default behavior for HTTP/1.1 user agent is to not change the HTTP request (eg keep the POST request). Am I wrong ? But maybe the first paragraph prevails meaning that for 301 user agent automatic redirection is not allowed: right ? Best Regards. -----Original Message----- From: Oleg Kalnichevski [mailto:olegk@apache.org] Sent: mardi 5 février 2013 23:31 To: HttpClient User Discussion Subject: Re: POST redirection question Hello everyone, At the beginning, I had something like that : HttpClient httpClient = new DefaultHttpClient(); HttpPost httpPost = new HttpPost(SOME_URL); HttpResponse postResponse = It turns out that I got a 301 Moved permanently. So I made the following modifications, either: - or              httpClient.setRedirectStrategy(new super.isRedirected(request, strategy, responseCode == - or the same than above with new LaxRedirectStrategy Each time, after receiving a 301, the client sent a GET request instead of my initial HTTP request, which is a POST one as you can see, to the new location. Any advice ? sample ? Or is it an issue ? Best Regards. Only in case of a TEMPORARY_REDIRECT it is valid to redirect the request without changing its method. In all other cases methods other than HEAD and GET get converted to GET. To change this behavior you need to override #getRedirect method http://hc.apache.org/httpcomponents-client-ga/httpclient/xref/org/apac he/http/impl/client/DefaultRedirectStrategy.html#213 Oleg --------------------------------------------------------------------</body>
  </mail>
  <mail>
    <header>Re: Using HttpAsyncClient completely asynchronously, and shutdown client/request appropriately.</header>
    <body>Hey all, I've gotten further along and had some followup questions ... I have a single httpclient instance now for the web application... and I am now using the PoolingClientConnectionManager so I can easily do Multiple-Threads at same time if needed, and now using the regular HttpClient (ditched the AsyncClient as suggested in my situation) . I tested and I think the web app works as intended with no expected failures (have not done a load-test though). I was able to set a breakpoint in run() and see two threads do their work at same time. 1. I was just curious if I need to consume the entity in my Thread's run() and/or call releaseConnection () to do any 'cleanup' like how i do at the end of my PostThread class below  ... Note: I want the client available since every minute a new request to send could come in. Not sure if this affects if i want to 'releaseConnection()'. 2. I might have 1 new request/thread being created every minute (possibly around same time too)... The connection to 3rd party might be slow (3second response max... but dont want user to experience it) hence why just kicking it off to a new thread as suggested. cm.setDefaultMaxPerRoute(?);? be with above parameters, and possibly lets say coincidence 5 people spawn a new thread at same time? Not sure if this is also useful, but the url will stay the same... only the params passed to the HttpPost via the UrlEncodedFormEntity will change. Would MaxTotal be 5 since maybe I want 10 threads available to do requests at any given moment? I didn't see documentation on what those really set (but found some code online which says to modify it or will only have 2 threads available in the pool or something like that): http://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/impl/conn/PoolingClientConnectionManager.html#setMaxTotal%28int%29 Attached is some functional code so far: ######################################################################################################################################################################## ###AsyncClientConnectionManager.java public class AsyncClientConnectionManager 3000) 1024) //only called when web server shuts down via ContextListener... httpclient is aleady ready setup to always send a request (could happen every minute) ######################################################################################################################################################################## ###MyWebController.java Spring etc //This method is called when user posts to this form... I want to send a request to a 3rd party public void formPost (HttpSession session, HttpServletResponse response, web application (some3rdParty.com might be slow to respond) returning other new View etc ######################################################################################################################################################################## ###PostThread.java FutureCallback had options for so we can send the info manually to 3rd party</body>
  </mail>
  <mail>
    <header>Re: Using HttpAsyncClient completely asynchronously, and shutdown client/request appropriately.</header>
    <body>By consuming the content entity you enable HttpClient to keep the connection alive and re-use it for subsequent requests. #releaseConnection makes sure resources associated with connection get deallocated but it makes no effort to keep the connection re-usable. So, you might want to use the latter for happy flow and the former for exceptional cases. --- --- If you always want to try to salvage the connection you can do it like this --- --- Those settings tend to be application specific. There is no one general rule that works in all cases. Oleg</body>
  </mail>
  <mail>
    <header>Re: Using HttpAsyncClient completely asynchronously, and shutdown client/request appropriately.</header>
    <body>Sorry. Other way around. Oleg</body>
  </mail>
  <mail>
    <header>NTLM proxy authentication is failing with McAfee web gateway proxy server</header>
    <body>Hi, We are using HttpClient 4.2.3 to communicate to an internet URL through a proxy server. Proxy server has NTLM authentication integrated with an Active Directory. We are able to do NTLM authentication with Ubuntu 12.04 Squid proxy server but not able to do NTLM authentication with McAfee webgateway proxy server. I am attaching HttpClient debug log for both the cases. Can some one please take a look at the logs and tell me why NTLM authentication is failing with McAfee webgateway proxy server. I am using same code to communicate with both of them. Following is the code. NTCredentials creds = new NTCredentials(userName, client.getCredentialsProvider().setCredentials(new AuthScope(host, thank you for help, deepak</body>
  </mail>
  <mail>
    <header>Re: NTLM proxy authentication is failing with McAfee web gateway proxy server</header>
    <body>Had attached the log files but not able to see them on mail thread, so attaching the same again. thank you, deepak ---------- Forwarded message ---------- Date: Wed, Feb 6, 2013 at 6:27 AM Subject: NTLM proxy authentication is failing with McAfee web gateway proxy server Hi, We are using HttpClient 4.2.3 to communicate to an internet URL through a proxy server. Proxy server has NTLM authentication integrated with an Active Directory. We are able to do NTLM authentication with Ubuntu 12.04 Squid proxy server but not able to do NTLM authentication with McAfee webgateway proxy server. I am attaching HttpClient debug log for both the cases. Can some one please take a look at the logs and tell me why NTLM authentication is failing with McAfee webgateway proxy server. I am using same code to communicate with both of them. Following is the code. NTCredentials creds = new NTCredentials(userName, client.getCredentialsProvider().setCredentials(new AuthScope(host, thank you for help, deepak</body>
  </mail>
  <mail>
    <header>Re: NTLM proxy authentication is failing with McAfee web gateway proxy server</header>
    <body>Deepak I see nothing wrong on the HTTP level. There must be some kind of incompatibility at the NTLM protocol level. Please capture both sessions with Wireshart (it has to be Wireshark), raise a JIRA and attach both packet dumps to it. Hopefully Karl will be kind enough to take a look. Oleg</body>
  </mail>
  <mail>
    <header>Re: NTLM proxy authentication is failing with McAfee web gateway proxy server</header>
    <body>Try using jcifs jar . I had the same issue which got resolved using jcifs jar.</body>
  </mail>
  <mail>
    <header>Re: NTLM proxy authentication is failing with McAfee web gateway proxy server</header>
    <body>Still, please consider raising a JIRA and submitting Wireshark packet captures got those cases where JCIFS works and HttpClient's internal NTLM engine does not. This should help us improve our NTLM code. Oleg</body>
  </mail>
  <mail>
    <header>Re: NTLM proxy authentication is failing with McAfee web gateway proxy server</header>
    <body>We had also similar problem with proxy NTLM authentication and we have to use jcifs for fixing of this problem. The bug https://issues.apache.org/jira/browse/HTTPCLIENT-1080 is fixed now so I will do some tests if it has really gone. I think there might be some issues with domain. I would try to put the domain into username as "username@domain" and leave domain as null or empty string. AFAIK  the Windows SSPI API domain can be set to NULL or empty string. The NULL is interpreted as a client side default which is usually the client machine hostnane. The empty string domain means default on the server side, which is Active directory domain, but it depends on implementation. Note that the Active directory username can also contain the at sign('@') character and in such case the username can be formed as e.g "username@email@domain" (at least in SSPI) and can be used only for NTLMv2 authentication. You have to use so called pre-Windows 2000 form when using NTLMv1. As NTLMv1 doesn't support dot in the domain you can use only first part of the domain. You know the NTLMv1 was designed for NetBios networks so username and domain are limited in size and set of characters which can be used. Hope that helps, Bronislav</body>
  </mail>
  <mail>
    <header>Re: Suggested parameters for highly parallel async client</header>
    <body>Just to complete the discussion, I finally set up the async client properly and it's pulling around 5000p/s, whereas the blocking client (with 1000 threads) has peaks of 10000-15000 p/s, and average around 8000p/s, which is in line with your predictions. -- View this message in context: http://httpcomponents.10934.n7.nabble.com/Suggested-parameters-for-highly-parallel-async-client-tp18644p19261.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: Suggested parameters for highly parallel async client</header>
    <body>I am working on improving HttpAsyncClient performance right now and I expect it to get better, but overall with a relatively small number of concurrent connections (&amp;lt;1000) I expect HttpClient to outperform it by 25-30%. Cheers Oleg</body>
  </mail>
  <mail>
    <header>Re: Suggested parameters for highly parallel async client</header>
    <body>Oleg Kalnichevski wrote Well, our code is conditional, so we can test HttpAsyncClient any time by switching a boolean. As I said, we tried even 10000 parallel connections, but we could not push it beyond 5000 p/s. If it becomes faster things might get interesting though... :) Please let us know if you want us to test it. -- View this message in context: http://httpcomponents.10934.n7.nabble.com/Suggested-parameters-for-highly-parallel-async-client-tp18644p19269.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: Suggested parameters for highly parallel async client</header>
    <body>The main characteristic of NIO is ability to handle thousands of concurrent connection is a predictable manner rather than data throughput. I'll let you know once I have something you could take for a spin. Oleg</body>
  </mail>
  <mail>
    <header>Re: Suggested parameters for highly parallel async client</header>
    <body>Hi Oleg, Is the something better to use than the standard InputStream API to process the respons? JM</body>
  </mail>
  <mail>
    <header>Re: Suggested parameters for highly parallel async client</header>
    <body>You see, it is not a matter of 'better' or 'worse'. InputStream API is still being used by an overwhelming majority of parsers and content processing libraries. The trouble is that InputStream is inherently blocking. If you use an async HTTP client to retrieve content and some library based on InputStream API to process it, you pretty much lose all the advantages of asynchronous data transfer. Oleg</body>
  </mail>
  <mail>
    <header>Re: Suggested parameters for highly parallel async client</header>
    <body>We use a WritableByteChannel (backed first by memory, then by disk) to store the data reported in the ByteBuffer by AsyncByteConsumer.onByteReceived(), which I guess should be good practice. -- View this message in context: http://httpcomponents.10934.n7.nabble.com/Suggested-parameters-for-highly-parallel-async-client-tp18644p19271.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Stuck Thread in weblogic because stale connection.Trying to close a stale connection</header>
    <body>Hi, I am getting Stuck Thread in weblogic because stale connection.Trying to close a stale connection java.io.BufferedInputStream.available(BufferedInputStream.java:375) org.appache.commons.httpclient.HttpConnection.isStale(HttpConnection.java:502) Please  let me know how to reproduce and fix this issue Thanks &amp;amp; Regards Gomateswaran D</body>
  </mail>
  <mail>
    <header>Re: get InetAddress for the HTTP_TARGET_HOST</header>
    <body>Hi Telvis, I've used your solution but getting some problem. I'm getting my proxy ip address instead of host (like google.com) ip address. I have set the proxy but still getting the same ip: Following is the code where I'm setting proxy and using your code: false) proxy) AuthScope("&amp;lt;proxy-name&amp;gt;", &amp;lt;port&amp;gt;), new UsernamePasswordCredentials("&amp;lt;proxy-user&amp;gt;", "&amp;lt;password&amp;gt;")) Also when i print the context in the Custom client operator class i'm getting the proxy params correctly. Please let me know if you need some additional info. -- View this message in context: http://httpcomponents.10934.n7.nabble.com/get-InetAddress-for-the-HTTP-TARGET-HOST-tp18332p19322.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: get InetAddress for the HTTP_TARGET_HOST</header>
    <body>I've not tried this with a proxy. Sorry.</body>
  </mail>
  <mail>
    <header>encode querystring value</header>
    <body>Hi all, I have to encode querystring value in a http request in Java. For example: http://mysite.com/service?name=James Smith&amp;amp;address=my street must become: http://mysite.com/service?name=James%20Smith&amp;amp;address=my%20street I have to do this in a method where I have querystring value in input, so I have to encode only the value (James Smith, my street, in my example). I was thinking about using this method org.apache.commons.httpclient.util.URIUtil.encodeWithinQuery: is this right? I have seen many confusing discussion about encoding http request in many other forum. Thanks for answering.</body>
  </mail>
  <mail>
    <header>Re: encode querystring value</header>
    <body>Hi, This method is from HttpClient 3 which is now deprecated and not maintained anymore. In the latest versions you can use class org.apache.http.client.utils.URLEncodedUtils I guess you are already using HttpClient on your project? If not, if you just need to encode values for querystring, you can use commons-codec library: http://commons.apache.org/codec/apidocs/org/apache/commons/codec/net/URLCodec.html#encode(java.lang.String, java.lang.String) Regards, Francois-Xavier only the value (James Smith, my street, in my example). I was thinking about using this method org.apache.commons.httpclient.util.URIUtil.encodeWithinQuery: is this right? I have seen many confusing discussion about encoding http request in many other forum.</body>
  </mail>
  <mail>
    <header>Re: encode querystring value</header>
    <body>Thanks for answering. But URLCodec and URLEncodedUtils both replace space with "+" and not with "%20". Are there any know problems in using URIUtil? I'm not using HttpClient. ________________________________ Inviato: Martedì 12 Febbraio 2013 10:25 Oggetto: Re: encode querystring value  Hi, This method is from HttpClient 3 which is now deprecated and not maintained anymore. In the latest versions you can use class org.apache.http.client.utils.URLEncodedUtils I guess you are already using HttpClient on your project? If not, if you just need to encode values for querystring, you can use commons-codec library: http://commons.apache.org/codec/apidocs/org/apache/commons/codec/net/URLCodec.html#encode(java.lang.String, Regards, Francois-Xavier only the value (James Smith, my street, in my example). I was thinking about using this method org.apache.commons.httpclient.util.URIUtil.encodeWithinQuery: is this right? I have seen many confusing discussion about encoding http request in many other forum.</body>
  </mail>
  <mail>
    <header>Re: encode querystring value</header>
    <body>"+" is the standard way to encode space character. Your site should support it. You can also use class java.net.URLEncoder included in the JDK but spaces will still be encoded as "+". Why would it ba a problem for you?</body>
  </mail>
  <mail>
    <header>Re: encode querystring value</header>
    <body>I've test it and it seems to work. Could I use also java.net.URLEncoder? Is there any difference? Thanks again. ________________________________ Inviato: Martedì 12 Febbraio 2013 11:02 Oggetto: Re: encode querystring value  "+" is the standard way to encode space character. Your site should support it. You can also use class java.net.URLEncoder included in the JDK but spaces will still be encoded as "+". Why would it ba a problem for you? not with "%20". In the latest versions you can use class org.apache.http.client.utils.URLEncodedUtils encode values for querystring, you can use commons-codec library: to encode only the value (James Smith, my street, in my example). I was thinking about using this method org.apache.commons.httpclient.util.URIUtil.encodeWithinQuery: is this right? I have seen many confusing discussion about encoding http request in many other forum.</body>
  </mail>
  <mail>
    <header>Re: encode querystring value</header>
    <body>There is no difference between java.net.URLEncoder and commons-codec.</body>
  </mail>
  <mail>
    <header>Upgrading commons-httpclient-3.x to HttpClient4.x</header>
    <body>Hi everyone We are upgrading our commons-httpclient-3.0-rc4.jar to HttpClient4.2 in our Apps which are deployed on Websphere V7. We have a problem getting the right SSL-Configuration from the Websphere and I found out, that this is because of new way the SSLSocketFactory is being created in the HttpClient4.X In the old commons-httpclient-3.x we get the socketfactory in ReflectionSocketFactory.createSocket() (Oleg you did it :-)) like this: javax.net.ssl.SSLSocketFactory.getDefault() This way we get in Websphere the right SSLSocketFactory: com.ibm.websphere.ssl.protocol.SSLSocketFactory (which is the default in java.security and uses WAS truststore and not java cacerts). With the new HttpClient4.2 this has changed, we get socketfactory from org.apache.http.conn.ssl.SSLSocketFactory.getSocketFactory() which return in Websphere another SSLSocketFactory (com.ibm.jsse2.SSLSocketFactoryImpl) I can workaround this in HttpClient4.X if I use the old way of getting the socketFactory: but I don't understand why the way getting socketFactory in HttpClient4.X has changed, are there any reasons? Oleg, can you explain this please? Thank you Adrian</body>
  </mail>
  <mail>
    <header>Re: Upgrading commons-httpclient-3.x to HttpClient4.x</header>
    <body>are deployed on Websphere V7. out, (Oleg you did it :-)) are there any reasons? Adrian, While in the WAS context javax.net.ssl.SSLSocketFactory#getDefault() might be the right thing to do, generally applications are expected to explicitly configure SSL context they should be operating with. What you have is not a workaround but rather a correct (and recommended) approach to setting up SSL security with HttpClient. What I could do, though, is to make HttpClient use javax.net.ssl.SSLSocketFactory#getDefault() by default in the 4.3 branch. Hope this helps Oleg</body>
  </mail>
  <mail>
    <header>Re: Upgrading commons-httpclient-3.x to HttpClient4.x</header>
    <body>Hi Oleg That would be a big help for us, can you do that? Thank you Adrian -- View this message in context: http://httpcomponents.10934.n7.nabble.com/Upgrading-commons-httpclient-3-x-to-HttpClient4-x-tp19333p19391.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Sending HTTP request sequentially</header>
    <body>Hi, Just now I started using apache httpcomponents-client. My purpose is to send some POST and GET HTTP request one at a time. For this I am following the resources provided in the Apache Httpcomponents Web.   All the time before sending any request I need to create a new instance of org.apache.http.impl.client.DefaultHttpClient . Am I going right way? In my opinion DefaultHttpClient should be instantiated only once then POST, GET request can be sent using org.apache.http.client.methods.HttpPost  and org.apache.http.client.methods.HttpGet respectively.   Correct?   Any helpful web resources always be appreciated.   - Thanks Ravi Joshi</body>
  </mail>
  <mail>
    <header>Re: Sending HTTP request sequentially</header>
    <body>Hi, Generally it is better to have only 1 HttpClient instance and to reuse it. http://hc.apache.org/httpclient-legacy/performance.html#Reuse_of_HttpClient_instance Regards, Francois-Xavier</body>
  </mail>
  <mail>
    <header>NTLM issues with 4.2.3</header>
    <body>Hello. I've been using previous versions of HttpClient forever using the JCIFSEngine. I wanted to give 4.2.3 a try to see if it solved my issues, but unfortunately I'm having the same problems. I was able to turn on debug logging and compare outputs. It's almost identical except for my final 200 vs 401 status code. Of course the type 1, 2, 3 messages have different signatures. Since the messages have addresses that I don't really want public, I was wondering the best way to get help debugging. 2013/02/13 16:09:22:817 EST [DEBUG] headers - &amp;gt;&amp;gt; User-Agent: Apache-HttpClient/4.2.3 (java 1.5) 2013/02/13 16:09:22:817 EST [DEBUG] headers - &amp;gt;&amp;gt; Authorization: NTLM xxxxxx 2013/02/13 16:09:22:928 EST [DEBUG] wire - &amp;lt;&amp;lt; "HTTP/1.1 401 Unauthorized[\r][\n]" 2013/02/13 16:09:22:929 EST [DEBUG] wire - &amp;lt;&amp;lt; "Content-Length: 1539[\r][\n]" 2013/02/13 16:09:22:929 EST [DEBUG] wire - &amp;lt;&amp;lt; "Content-Type: text/html[\r][\n]" 2013/02/13 16:09:22:929 EST [DEBUG] wire - &amp;lt;&amp;lt; "Server: Microsoft-IIS/6.0[\r][\n]" 2013/02/13 16:09:22:929 EST [DEBUG] wire - &amp;lt;&amp;lt; "WWW-Authenticate: NTLM xxxxxx" "MicrosoftSharePointTeamServices: 12.0.0.6520[\r][\n]" Thanks, -- Jason</body>
  </mail>
  <mail>
    <header>Re: NTLM issues with 4.2.3</header>
    <body>Hi Jason Only Wireshark packet captures would be meaningful given Wireshark's ability to decompose NTLM messages into more readable data structures. If you are not willing or able to publish those there is not really much we can do just having wire logs with all NTLM blobs stripped away. Oleg</body>
  </mail>
  <mail>
    <header>Re: NTLM issues with 4.2.3</header>
    <body>Hello. Thanks for the response. I understand. I'm not "not willing", just unable. Attached are edited Wireshark packet dissections (one with and one without JCIFS) with the NTLM information. I'm guessing this might not be enough information. -- Jason</body>
  </mail>
  <mail>
    <header>Re: NTLM issues with 4.2.3</header>
    <body>Hello. Thanks for the response. I understand. I'm not "not willing", just unable. Below are edited Wireshark packet dissections (one with and one without JCIFS) with the NTLM information. HttpClient 2.3 w/JCIFS Key Exchange: Not set 0x10000000: Not set 0x08000000: Not set 0x04000000: Not set Version: Not set 0x01000000: Not set Target Info: Not set Non-NT Session: Not set 0x00200000: Not set Identify: Not set Extended Security: Set Share: Not set Server: Not set Domain: Not set Always Sign: Set 0x00004000: Not set OEM Workstation Supplied: Set OEM Domain Supplied: Set 0x00000800: Not set Only: Not set NTLM key: Set 0x00000100: Not set Lan Manager Key: Not set Datagram: Not set Seal: Not set Sign: Not set 0x00000008: Not set . . . Key Exchange: Not set 0x10000000: Not set 0x08000000: Not set 0x04000000: Not set 0x01000000: Not set Target Info: Set Non-NT Session: Not set 0x00200000: Not set Identify: Not set Extended Security: Set Share: Not set Server: Not set Domain: Set Always Sign: Set 0x00004000: Not set OEM Workstation Supplied: Not set OEM Domain Supplied: Not set 0x00000800: Not set Only: Not set NTLM key: Set 0x00000100: Not set Lan Manager Key: Not set Datagram: Not set Seal: Not set Sign: Not set 0x00000008: Not set . . . 8dd3618bff5fadfc9fa30fa57e71acb01b6579045fa493b0 dd9627930c96414059d00f33e04ee8110101000000000000... name (0x0001) Key Exchange: Not set 0x10000000: Not set 0x08000000: Not set 0x04000000: Not set 0x01000000: Not set Target Info: Set Non-NT Session: Not set 0x00200000: Not set Identify: Not set Extended Security: Set Share: Not set Server: Not set Domain: Not set Always Sign: Set 0x00004000: Not set OEM Workstation Supplied: Not set OEM Domain Supplied: Not set 0x00000800: Not set Only: Not set NTLM key: Set 0x00000100: Not set Lan Manager Key: Not set Datagram: Not set Seal: Not set Sign: Not set 0x00000008: Not set . . . 200 HttpClient 2.3 without JCIFS Key Exchange: Set 0x10000000: Not set 0x08000000: Not set 0x04000000: Not set 0x01000000: Not set Target Info: Not set Non-NT Session: Not set 0x00200000: Not set Identify: Not set Extended Security: Set Share: Not set Server: Not set Domain: Not set Always Sign: Set 0x00004000: Not set OEM Workstation Supplied: Not set OEM Domain Supplied: Not set 0x00000800: Not set Only: Not set NTLM key: Set 0x00000100: Not set Lan Manager Key: Set Datagram: Not set Seal: Not set 0x00000008: Not set Target: Not set . . . Key Exchange: Set 0x10000000: Not set 0x08000000: Not set 0x04000000: Not set 0x01000000: Not set Target Info: Set Non-NT Session: Not set 0x00200000: Not set Identify: Not set Extended Security: Set Share: Not set Server: Not set Domain: Set Always Sign: Set 0x00004000: Not set OEM Workstation Supplied: Not set OEM Domain Supplied: Not set 0x00000800: Not set Only: Not set NTLM key: Set 0x00000100: Not set Lan Manager Key: Not set Datagram: Not set Seal: Not set 0x00000008: Not set . . . 45f11cc8b05653f61374e8b416c4b2ef30f82140cd60f64f 3827c6e6cb6587b38f055f879b3b52b70101000000000000... name (0x0001) Key Exchange: Set 0x10000000: Not set 0x08000000: Not set 0x04000000: Not set 0x01000000: Not set Target Info: Set Non-NT Session: Not set 0x00200000: Not set Identify: Not set Extended Security: Set Share: Not set Server: Not set Domain: Not set Always Sign: Set 0x00004000: Not set OEM Workstation Supplied: Set OEM Domain Supplied: Set 0x00000800: Not set Only: Not set NTLM key: Set 0x00000100: Not set Lan Manager Key: Not set Datagram: Not set Seal: Not set 0x00000008: Not set . . . 401</body>
  </mail>
  <mail>
    <header>Basic proxy authentication on HttpClient 4.3</header>
    <body>Hi I am trying to use HttpClient 4.3 with a proxy that requires basic authentication. What is the proper way to do that on HttpClient 4.3 trunk without using any deprecated API ? Francois-Xavier</body>
  </mail>
  <mail>
    <header>Re: Basic proxy authentication on HttpClient 4.3</header>
    <body>Francois-Xavier I do not think it is that radically different. Take a look at the sample app: http://hc.apache.org/httpcomponents-client-dev/httpclient/examples/org/apache/http/examples/client/ClientProxyAuthentication.java Let me know if that does not help. Oleg</body>
  </mail>
  <mail>
    <header>Re: Basic proxy authentication on HttpClient 4.3</header>
    <body>Thanks Oleg, it works.</body>
  </mail>
  <mail>
    <header>Getting &amp;quot;javax.net.ssl.SSLPeerUnverifiedException: peer not authenticated&amp;quot; error, but not on other server(s)</header>
    <body>Hello all, I was using the httpclient to POST to a https website from a webapp on a regular http:// website, and then tested on our 'prod-staging' server which is an https:// website. It works without any errors on both sites... Then I threw it on another public-facing http:// website we had, and always get that "javax.net.ssl.SSLPeerUnverifiedException: peer not authenticated" error. I think I read you can fix this error in the Apache HttpClient code somehow, or on the server via going to Firefox, View the Cert info, Download/Export the public .crt file, and add it to the server's keystore to it 'trusts' the server you contacting ... But I was then wondering if one of those above steps are required, why it always works on the 1st http:// website (and the https:// website) since the public cert was never added to those servers? Here is my code to initiate the http client: ######################################## //Created one instance when tomcat server starts: ... cm.setMaxTotal(50);           //50 http clients in pools total available cm.setDefaultMaxPerRoute(50); //50 connections per route (1 route = protocol+url+port) so want all those 50 httpclient/connection pools available to this 1 route we always contacting httpclient.getParams() .setIntParameter(CoreConnectionPNames.SO_TIMEOUT, 5000) .setIntParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000) .setIntParameter(CoreConnectionPNames.SOCKET_BUFFER_SIZE, 8 * 1024) //Send request at some point later: HttpResponse response = httpClient.getInstance().execute(httppost, new ######################################## Thanks!, Ari</body>
  </mail>
  <mail>
    <header>HttpClient.execute blocks until EOF of InputStreamBody instead of sending chunks on the fly</header>
    <body>Hey guys, I am pretty new to HttpComponents and just wondered if it is possible to stream data from input stream of unknown length to an upload servlet. I've already tried to get it working with ClientChunkEncodedPost example bundled with HttpComponents 4.2.3 for the client side as well as ServletFileUpload for the server side. However, HttpClient.execute waits until EOF which will never be reached at this stage. This is what I have: 1.       Client: /* csvWriter is not written to at this stage, so is pin */ 2.       Server: Map&amp;lt;RequestParam, String&amp;gt; params) Any help would be appreciated. Thanks! Br, Stefan</body>
  </mail>
  <mail>
    <header>Re: HttpClient.execute blocks until EOF of InputStreamBody instead of sending chunks on the fly</header>
    <body>Hi Stefan, You cannot use piped streams to write and read in the same thread as each read / write operation is blocking. Here client.execute(post) is blocking while trying to read the InputStrean. You should either create separate threads for read and write or consider using HttpAsyncClient. Francois-Xavier from input stream of unknown length to an upload servlet. HttpComponents 4.2.3 for the client side as well as ServletFileUpload for the server side. httpResponse, Map&amp;lt;RequestParam, String&amp;gt; params)</body>
  </mail>
  <mail>
    <header>AW: HttpClient.execute blocks until EOF of InputStreamBody instead of sending chunks on the fly</header>
    <body>Hi Francois-Xavier, Thank you very much for your answer. Switching to HttpAsyncClient made it. It's quite easy to use, good work! However, my client is within an EJB. According to EJB 3.0 specification it's not allowed to spawn new threads which is exclusively the container's job. Any suggestions or best practices? Br, Stefan -----Ursprüngliche Nachricht----- Von: Francois-Xavier Bonnet [mailto:fx.bonnet@gmail.com] Im Auftrag von François-Xavier Bonnet Gesendet: Freitag, 15. Februar 2013 09:33 An: HttpClient User Discussion Cc: Frenzel Stefan Betreff: Re: HttpClient.execute blocks until EOF of InputStreamBody instead of sending chunks on the fly Hi Stefan, You cannot use piped streams to write and read in the same thread as each read / write operation is blocking. Here client.execute(post) is blocking while trying to read the InputStrean. You should either create separate threads for read and write or consider using HttpAsyncClient. Francois-Xavier from input stream of unknown length to an upload servlet. HttpComponents 4.2.3 for the client side as well as ServletFileUpload for the server side. httpResponse, Map&amp;lt;RequestParam, String&amp;gt; params)</body>
  </mail>
  <mail>
    <header>Re: AW: HttpClient.execute blocks until EOF of InputStreamBody instead of sending chunks on the fly</header>
    <body>If you don't want to spawn new threads, you cannot use HttpAsyncClient. Then the most simple way is to produce your csv file in memory and then pass a ByteArrayInputStream to HttpClient. But if the data is too big to be buffered to memory, you can write your own InputStream subclass that produces the data as HttpClient reads it. It would be something like this: easy to use, good work! to spawn new threads which is exclusively the container's job. Any suggestions or best practices? Bonnet chunks on the fly operation is blocking. Here client.execute(post) is blocking while trying to read the InputStrean. from input stream of unknown length to an upload servlet. with HttpComponents 4.2.3 for the client side as well as ServletFileUpload for the server side. httpResponse, Map&amp;lt;RequestParam, String&amp;gt; params)</body>
  </mail>
  <mail>
    <header>AW: AW: HttpClient.execute blocks until EOF of InputStreamBody instead of sending chunks on the fly</header>
    <body>Hi Francois-Xavier, Subclassing InputStream as you suggested worked very well, thank you so much for this idea. Here is what I have done to produce CSV (SuperCSV library) from Hibernate's ScrollableResults and upload it to a servlet on the fly: transformer) &amp;#009;@Override &amp;#009;@Override &amp;#009;&amp;#009;request = new HttpPost("http://localhost/foo/Servlet?filename=" + fileName + "&amp;amp;expiry=" &amp;#009;protected void processRequest(HttpServletRequest httpRequest, HttpServletResponse httpResponse, Map&amp;lt;RequestParam, String&amp;gt; params) &amp;#009;&amp;#009;/* Stream to database or whatever ... */ Hope that might be useful for anyone. Br, Stefan -----Ursprüngliche Nachricht----- Von: Francois-Xavier Bonnet [mailto:fx.bonnet@gmail.com] Im Auftrag von François-Xavier Bonnet Gesendet: Freitag, 15. Februar 2013 12:19 An: HttpClient User Discussion Cc: Frenzel Stefan Betreff: Re: AW: HttpClient.execute blocks until EOF of InputStreamBody instead of sending chunks on the fly If you don't want to spawn new threads, you cannot use HttpAsyncClient. Then the most simple way is to produce your csv file in memory and then pass a ByteArrayInputStream to HttpClient. But if the data is too big to be buffered to memory, you can write your own InputStream subclass that produces the data as HttpClient reads it. It would be something like this: easy to use, good work! to spawn new threads which is exclusively the container's job. Any suggestions or best practices? operation is blocking. Here client.execute(post) is blocking while trying to read the InputStrean. from input stream of unknown length to an upload servlet. with HttpComponents 4.2.3 for the client side as well as ServletFileUpload for the server side. httpResponse, Map&amp;lt;RequestParam, String&amp;gt; params)</body>
  </mail>
  <mail>
    <header>HttpClient 4.2.3 using both SSL encryption and NTLM authentication fails</header>
    <body>I am trying to use a REST call to Sharepoint 2010 via HTTPClient 4.2.3 from a java Liferay 6.1 portlet on Mac OS 10.6.x (snow leopard). The response I always get back is: HTTP/1.1 401 Unauthorized I don't see an SSL handshake in the wire logs, but see a cookie and get a 401 unauthorized response. I have tried various combinations of the sample codes with same results. I have imported the cert into my local MAC's JVM cacerts and am trying to load the cacerts as the keystore. Note - that I've used FireFox and CURL to do the same thing I'm trying to do here programmatically, and it works fine. So the server appears to be set up correctly. The CURL verbose log show the SSL handshake happening first and the NTLM succeeds as the next step. My code is: String opsCalendarURL1 = String opsCalendarURL2 = String opsCalenderURLEncoded = opsCalendarURL1 + URLEncoder.encode( File("/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/ I can attach the wire logs if needed. Thanks a lot for your time! I appreciate any help and pointers. Vanita</body>
  </mail>
  <mail>
    <header>Re: HttpClient 4.2.3 using both SSL encryption and NTLM authentication fails</header>
    <body>You need to set the authorization header param I thik u r server is expecting authorization param either disable it in server side or pass correct param hope it is base64 encoded</body>
  </mail>
  <mail>
    <header>Re: HttpClient 4.2.3 using both SSL encryption and NTLM authentication fails</header>
    <body>I see the authorization header being sent below in the wire and header logs. [DEBUG] headers - &amp;gt;&amp;gt; Authorization: NTLM xxxxxxxxxxxxxxx I also the message indicating auth cache not set. [DEBUG] RequestAuthCache - Auth cache not set in the context I am not sure if these are what you meant needs to be set. Is there something else I can check or correct? Thank you!</body>
  </mail>
  <mail>
    <header>Re: HttpClient 4.2.3 using both SSL encryption and NTLM authentication fails</header>
    <body>r u doing ntml authentication in server or basic authentication bcas u r server may req basic auth and u may do ntml auth means u need to disable basic auth in server side vice versa</body>
  </mail>
  <mail>
    <header>Re: HttpClient 4.2.3 using both SSL encryption and NTLM authentication fails</header>
    <body>Post wire logs. Oleg</body>
  </mail>
  <mail>
    <header>Re: HttpClient 4.2.3 using both SSL encryption and NTLM authentication fails</header>
    <body>Thank you Oleg. Here it is: https://hostname/sites/team-sites/operations/_vti_bin/owssvr.dll?Cmd%3DDisp lay%26List%3D%7B6E460908-D470-4F8A-AF76-CC279E25E0B1%7D%26XMLDATA%3DTRUE ---------------------------------------- executing request: GET https://hostname/sites/team-sites/operations/_vti_bin/owssvr.dll?Cmd%3DDisp lay%26List%3D%7B6E460908-D470-4F8A-AF76-CC279E25E0B1%7D%26XMLDATA%3DTRUE HTTP/1.1 to target: https://hostname:443 2013/02/15 18:47:39:008 GMT [DEBUG] BasicClientConnectionManager - Get 2013/02/15 18:47:39:009 GMT [DEBUG] DefaultClientConnectionOperator - Connecting to hostname:443 2013/02/15 18:47:40:308 GMT [DEBUG] RequestAddCookies - CookieSpec selected: best-match 2013/02/15 18:47:40:308 GMT [DEBUG] RequestAuthCache - Auth cache not set in the context 2013/02/15 18:47:40:308 GMT [DEBUG] RequestTargetAuthentication - Target auth state: UNCHALLENGED 2013/02/15 18:47:40:308 GMT [DEBUG] RequestProxyAuthentication - Proxy auth state: UNCHALLENGED 2013/02/15 18:47:40:308 GMT [DEBUG] DefaultHttpClient - Attempt 1 to execute request 2013/02/15 18:47:40:308 GMT [DEBUG] DefaultClientConnection - Sending request: GET /sites/team-sites/operations/_vti_bin/owssvr.dll?Cmd%3DDisplay%26List%3D%7B 6E460908-D470-4F8A-AF76-CC279E25E0B1%7D%26XMLDATA%3DTRUE HTTP/1.1 2013/02/15 18:47:40:309 GMT [DEBUG] wire - &amp;gt;&amp;gt; "GET /sites/team-sites/operations/_vti_bin/owssvr.dll?Cmd%3DDisplay%26List%3D%7B 6E460908-D470-4F8A-AF76-CC279E25E0B1%7D%26XMLDATA%3DTRUE HTTP/1.1[\r][\n]" 2013/02/15 18:47:40:309 GMT [DEBUG] wire - &amp;gt;&amp;gt; "Host: hostname[\r][\n]" 2013/02/15 18:47:40:309 GMT [DEBUG] wire - &amp;gt;&amp;gt; "Connection: Keep-Alive[\r][\n]" 2013/02/15 18:47:40:309 GMT [DEBUG] wire - &amp;gt;&amp;gt; "User-Agent: Apache-HttpClient/4.2.3 (java 1.5)[\r][\n]" 2013/02/15 18:47:40:309 GMT [DEBUG] wire - &amp;gt;&amp;gt; "[\r][\n]" 2013/02/15 18:47:40:309 GMT [DEBUG] headers - &amp;gt;&amp;gt; GET /sites/team-sites/operations/_vti_bin/owssvr.dll?Cmd%3DDisplay%26List%3D%7B 6E460908-D470-4F8A-AF76-CC279E25E0B1%7D%26XMLDATA%3DTRUE HTTP/1.1 2013/02/15 18:47:40:309 GMT [DEBUG] headers - &amp;gt;&amp;gt; Host: hostname 2013/02/15 18:47:40:309 GMT [DEBUG] headers - &amp;gt;&amp;gt; Connection: Keep-Alive 2013/02/15 18:47:40:309 GMT [DEBUG] headers - &amp;gt;&amp;gt; User-Agent: Apache-HttpClient/4.2.3 (java 1.5) 2013/02/15 18:47:40:372 GMT [DEBUG] wire - &amp;lt;&amp;lt; "HTTP/1.1 401 Unauthorized[\r][\n]" 2013/02/15 18:47:40:372 GMT [DEBUG] wire - &amp;lt;&amp;lt; "Connection: keep-alive[\r][\n]" charset=utf-8[\r][\n]" 2013/02/15 18:47:40:373 GMT [DEBUG] wire - &amp;lt;&amp;lt; "Server: Microsoft-IIS/7.5[\r][\n]" 2013/02/15 18:47:40:373 GMT [DEBUG] wire - &amp;lt;&amp;lt; "SPRequestGuid: 9590ba88-768e-4eb9-a68b-df45b83606d6[\r][\n]" 2013/02/15 18:47:40:373 GMT [DEBUG] wire - &amp;lt;&amp;lt; "X-SharePointHealthScore: 0[\r][\n]" 2013/02/15 18:47:40:373 GMT [DEBUG] wire - &amp;lt;&amp;lt; "WWW-Authenticate: NTLM[\r][\n]" 2013/02/15 18:47:40:373 GMT [DEBUG] wire - &amp;lt;&amp;lt; "X-Powered-By: ASP.NET[\r][\n]" "MicrosoftSharePointTeamServices: 14.0.0.6010[\r][\n]" 2013/02/15 18:47:40:373 GMT [DEBUG] wire - &amp;lt;&amp;lt; "Date: Fri, 15 Feb 2013 18:47:40 GMT[\r][\n]" 2013/02/15 18:47:40:373 GMT [DEBUG] wire - &amp;lt;&amp;lt; "Content-Length: 16[\r][\n]" 2013/02/15 18:47:40:373 GMT [DEBUG] wire - &amp;lt;&amp;lt; "Set-Cookie: path=/[\r][\n]" 2013/02/15 18:47:40:373 GMT [DEBUG] wire - &amp;lt;&amp;lt; "X-PvInfo: [S10201.C11705.A16138.RA0.G0.U349F676B].[OT/html.OG/pages][\r][\n]" 2013/02/15 18:47:40:373 GMT [DEBUG] wire - &amp;lt;&amp;lt; "Vary: Accept-Encoding[\r][\n]" 2013/02/15 18:47:40:373 GMT [DEBUG] wire - &amp;lt;&amp;lt; "[\r][\n]" 2013/02/15 18:47:40:373 GMT [DEBUG] DefaultClientConnection - Receiving response: HTTP/1.1 401 Unauthorized 2013/02/15 18:47:40:373 GMT [DEBUG] headers - &amp;lt;&amp;lt; HTTP/1.1 401 Unauthorized 2013/02/15 18:47:40:373 GMT [DEBUG] headers - &amp;lt;&amp;lt; Connection: keep-alive charset=utf-8 2013/02/15 18:47:40:373 GMT [DEBUG] headers - &amp;lt;&amp;lt; Server: Microsoft-IIS/7.5 2013/02/15 18:47:40:373 GMT [DEBUG] headers - &amp;lt;&amp;lt; SPRequestGuid: 9590ba88-768e-4eb9-a68b-df45b83606d6 2013/02/15 18:47:40:373 GMT [DEBUG] headers - &amp;lt;&amp;lt; X-SharePointHealthScore: 0 2013/02/15 18:47:40:373 GMT [DEBUG] headers - &amp;lt;&amp;lt; WWW-Authenticate: NTLM 2013/02/15 18:47:40:373 GMT [DEBUG] headers - &amp;lt;&amp;lt; X-Powered-By: ASP.NET MicrosoftSharePointTeamServices: 14.0.0.6010 2013/02/15 18:47:40:374 GMT [DEBUG] headers - &amp;lt;&amp;lt; Date: Fri, 15 Feb 2013 18:47:40 GMT 2013/02/15 18:47:40:374 GMT [DEBUG] headers - &amp;lt;&amp;lt; Content-Length: 16 2013/02/15 18:47:40:374 GMT [DEBUG] headers - &amp;lt;&amp;lt; Set-Cookie: BIGipServersharepoint_2010_hostname_pool=2760949138.20480.0000; path=/ 2013/02/15 18:47:40:374 GMT [DEBUG] headers - &amp;lt;&amp;lt; X-PvInfo: [S10201.C11705.A16138.RA0.G0.U349F676B].[OT/html.OG/pages] 2013/02/15 18:47:40:374 GMT [DEBUG] headers - &amp;lt;&amp;lt; Vary: Accept-Encoding 2013/02/15 18:47:40:374 GMT [DEBUG] ResponseProcessCookies - Cookie accepted: "[version: 0][name: BIGipServersharepoint_2010_hostname_pool][value: 2760949138.20480.0000][domain: hostname][path: /][expiry: null]". 2013/02/15 18:47:40:374 GMT [DEBUG] DefaultHttpClient - Connection can be kept alive indefinitely 2013/02/15 18:47:40:374 GMT [DEBUG] DefaultHttpClient - Authentication required 2013/02/15 18:47:40:374 GMT [DEBUG] DefaultHttpClient - hostname:443 requested authentication 2013/02/15 18:47:40:374 GMT [DEBUG] TargetAuthenticationStrategy - Authentication schemes in the order of preference: [negotiate, Kerberos, NTLM, Digest, Basic] 2013/02/15 18:47:40:374 GMT [DEBUG] TargetAuthenticationStrategy - Challenge for negotiate authentication scheme not available 2013/02/15 18:47:40:374 GMT [DEBUG] TargetAuthenticationStrategy - Challenge for Kerberos authentication scheme not available 2013/02/15 18:47:40:374 GMT [DEBUG] TargetAuthenticationStrategy - Challenge for Digest authentication scheme not available 2013/02/15 18:47:40:374 GMT [DEBUG] TargetAuthenticationStrategy - Challenge for Basic authentication scheme not available 2013/02/15 18:47:40:374 GMT [DEBUG] DefaultHttpClient - Selected authentication options: [NTLM] 2013/02/15 18:47:40:374 GMT [DEBUG] wire - &amp;lt;&amp;lt; "401 UNAUTHORIZED" 2013/02/15 18:47:40:375 GMT [DEBUG] RequestAddCookies - CookieSpec selected: best-match 2013/02/15 18:47:40:375 GMT [DEBUG] RequestAddCookies - Cookie [version: 0][name: BIGipServersharepoint_2010_hostname_pool][value: 2760949138.20480.0000][domain: hostname][path: /][expiry: null] match [(secure)hostname:443/sites/team-sites/operations/_vti_bin/owssvr.dll] 2013/02/15 18:47:40:375 GMT [DEBUG] RequestAuthCache - Auth cache not set in the context 2013/02/15 18:47:40:375 GMT [DEBUG] RequestTargetAuthentication - Target auth state: CHALLENGED 2013/02/15 18:47:40:375 GMT [DEBUG] RequestTargetAuthentication - Generating response to an authentication challenge using ntlm scheme 2013/02/15 18:47:40:375 GMT [DEBUG] RequestProxyAuthentication - Proxy auth state: UNCHALLENGED 2013/02/15 18:47:40:375 GMT [DEBUG] DefaultHttpClient - Attempt 2 to execute request 2013/02/15 18:47:40:375 GMT [DEBUG] DefaultClientConnection - Sending request: GET /sites/team-sites/operations/_vti_bin/owssvr.dll?Cmd%3DDisplay%26List%3D%7B 6E460908-D470-4F8A-AF76-CC279E25E0B1%7D%26XMLDATA%3DTRUE HTTP/1.1 2013/02/15 18:47:40:375 GMT [DEBUG] wire - &amp;gt;&amp;gt; "GET /sites/team-sites/operations/_vti_bin/owssvr.dll?Cmd%3DDisplay%26List%3D%7B 6E460908-D470-4F8A-AF76-CC279E25E0B1%7D%26XMLDATA%3DTRUE HTTP/1.1[\r][\n]" 2013/02/15 18:47:40:375 GMT [DEBUG] wire - &amp;gt;&amp;gt; "Host: hostname[\r][\n]" 2013/02/15 18:47:40:375 GMT [DEBUG] wire - &amp;gt;&amp;gt; "Connection: Keep-Alive[\r][\n]" 2013/02/15 18:47:40:375 GMT [DEBUG] wire - &amp;gt;&amp;gt; "User-Agent: Apache-HttpClient/4.2.3 (java 1.5)[\r][\n]" 2013/02/15 18:47:40:375 GMT [DEBUG] wire - &amp;gt;&amp;gt; "Cookie: BIGipServersharepoint_2010_hostname_pool=2760949138.20480.0000[\r][\n]" 2013/02/15 18:47:40:375 GMT [DEBUG] wire - &amp;gt;&amp;gt; "Cookie2: $Version=1[\r][\n]" 2013/02/15 18:47:40:375 GMT [DEBUG] wire - &amp;gt;&amp;gt; "Authorization: NTLM xxxxxxx[\r][\n]" 2013/02/15 18:47:40:375 GMT [DEBUG] wire - &amp;gt;&amp;gt; "[\r][\n]" 2013/02/15 18:47:40:376 GMT [DEBUG] headers - &amp;gt;&amp;gt; GET /sites/team-sites/operations/_vti_bin/owssvr.dll?Cmd%3DDisplay%26List%3D%7B 6E460908-D470-4F8A-AF76-CC279E25E0B1%7D%26XMLDATA%3DTRUE HTTP/1.1 2013/02/15 18:47:40:376 GMT [DEBUG] headers - &amp;gt;&amp;gt; Host: hostname 2013/02/15 18:47:40:376 GMT [DEBUG] headers - &amp;gt;&amp;gt; Connection: Keep-Alive 2013/02/15 18:47:40:376 GMT [DEBUG] headers - &amp;gt;&amp;gt; User-Agent: Apache-HttpClient/4.2.3 (java 1.5) 2013/02/15 18:47:40:376 GMT [DEBUG] headers - &amp;gt;&amp;gt; Cookie: BIGipServersharepoint_2010_hostname_pool=2760949138.20480.0000 2013/02/15 18:47:40:376 GMT [DEBUG] headers - &amp;gt;&amp;gt; Cookie2: $Version=1 2013/02/15 18:47:40:376 GMT [DEBUG] headers - &amp;gt;&amp;gt; Authorization: NTLM xxxxxxx 2013/02/15 18:47:40:411 GMT [DEBUG] wire - &amp;lt;&amp;lt; "HTTP/1.1 401 Unauthorized[\r][\n]" 2013/02/15 18:47:40:411 GMT [DEBUG] wire - &amp;lt;&amp;lt; "Server: Microsoft-IIS/7.5[\r][\n]" 2013/02/15 18:47:40:411 GMT [DEBUG] wire - &amp;lt;&amp;lt; "SPRequestGuid: b97ad6a3-1064-4f9d-8ac6-51f7dad0193e[\r][\n]" 2013/02/15 18:47:40:411 GMT [DEBUG] wire - &amp;lt;&amp;lt; "WWW-Authenticate: NTLM xxxxxxx[\r][\n]" 2013/02/15 18:47:40:411 GMT [DEBUG] wire - &amp;lt;&amp;lt; "X-Powered-By: ASP.NET[\r][\n]" "MicrosoftSharePointTeamServices: 14.0.0.6010[\r][\n]" 2013/02/15 18:47:40:411 GMT [DEBUG] wire - &amp;lt;&amp;lt; "Date: Fri, 15 Feb 2013 18:47:40 GMT[\r][\n]" 2013/02/15 18:47:40:411 GMT [DEBUG] wire - &amp;lt;&amp;lt; "Content-Length: 0[\r][\n]" 2013/02/15 18:47:40:412 GMT [DEBUG] wire - &amp;lt;&amp;lt; "X-PvInfo: [S10201.C11705.A16138.RA16164.G0.U349F676B].[OT/other.OG/other][\r][\n]" 2013/02/15 18:47:40:412 GMT [DEBUG] wire - &amp;lt;&amp;lt; "[\r][\n]" 2013/02/15 18:47:40:412 GMT [DEBUG] DefaultClientConnection - Receiving response: HTTP/1.1 401 Unauthorized 2013/02/15 18:47:40:412 GMT [DEBUG] headers - &amp;lt;&amp;lt; HTTP/1.1 401 Unauthorized 2013/02/15 18:47:40:412 GMT [DEBUG] headers - &amp;lt;&amp;lt; Server: Microsoft-IIS/7.5 2013/02/15 18:47:40:412 GMT [DEBUG] headers - &amp;lt;&amp;lt; SPRequestGuid: b97ad6a3-1064-4f9d-8ac6-51f7dad0193e 2013/02/15 18:47:40:412 GMT [DEBUG] headers - &amp;lt;&amp;lt; WWW-Authenticate: NTLM xxxxxxx 2013/02/15 18:47:40:412 GMT [DEBUG] headers - &amp;lt;&amp;lt; X-Powered-By: ASP.NET MicrosoftSharePointTeamServices: 14.0.0.6010 2013/02/15 18:47:40:412 GMT [DEBUG] headers - &amp;lt;&amp;lt; Date: Fri, 15 Feb 2013 18:47:40 GMT 2013/02/15 18:47:40:412 GMT [DEBUG] headers - &amp;lt;&amp;lt; Content-Length: 0 2013/02/15 18:47:40:412 GMT [DEBUG] headers - &amp;lt;&amp;lt; X-PvInfo: [S10201.C11705.A16138.RA16164.G0.U349F676B].[OT/other.OG/other] 2013/02/15 18:47:40:413 GMT [DEBUG] DefaultHttpClient - Connection can be kept alive indefinitely 2013/02/15 18:47:40:413 GMT [DEBUG] DefaultHttpClient - Authentication required 2013/02/15 18:47:40:413 GMT [DEBUG] DefaultHttpClient - hostname:443 requested authentication 2013/02/15 18:47:40:413 GMT [DEBUG] DefaultHttpClient - Authorization challenge processed 2013/02/15 18:47:40:413 GMT [DEBUG] RequestAddCookies - CookieSpec selected: best-match 2013/02/15 18:47:40:413 GMT [DEBUG] RequestAddCookies - Cookie [version: 0][name: BIGipServersharepoint_2010_hostname_pool][value: 2760949138.20480.0000][domain: hostname][path: /][expiry: null] match [(secure)hostname:443/sites/team-sites/operations/_vti_bin/owssvr.dll] 2013/02/15 18:47:40:413 GMT [DEBUG] RequestAuthCache - Auth cache not set in the context 2013/02/15 18:47:40:413 GMT [DEBUG] RequestTargetAuthentication - Target auth state: HANDSHAKE 2013/02/15 18:47:40:415 GMT [DEBUG] RequestProxyAuthentication - Proxy auth state: UNCHALLENGED 2013/02/15 18:47:40:415 GMT [DEBUG] DefaultHttpClient - Attempt 3 to execute request 2013/02/15 18:47:40:415 GMT [DEBUG] DefaultClientConnection - Sending request: GET /sites/team-sites/operations/_vti_bin/owssvr.dll?Cmd%3DDisplay%26List%3D%7B 6E460908-D470-4F8A-AF76-CC279E25E0B1%7D%26XMLDATA%3DTRUE HTTP/1.1 2013/02/15 18:47:40:416 GMT [DEBUG] wire - &amp;gt;&amp;gt; "GET /sites/team-sites/operations/_vti_bin/owssvr.dll?Cmd%3DDisplay%26List%3D%7B 6E460908-D470-4F8A-AF76-CC279E25E0B1%7D%26XMLDATA%3DTRUE HTTP/1.1[\r][\n]" 2013/02/15 18:47:40:416 GMT [DEBUG] wire - &amp;gt;&amp;gt; "Host: hostname[\r][\n]" 2013/02/15 18:47:40:416 GMT [DEBUG] wire - &amp;gt;&amp;gt; "Connection: Keep-Alive[\r][\n]" 2013/02/15 18:47:40:416 GMT [DEBUG] wire - &amp;gt;&amp;gt; "User-Agent: Apache-HttpClient/4.2.3 (java 1.5)[\r][\n]" 2013/02/15 18:47:40:416 GMT [DEBUG] wire - &amp;gt;&amp;gt; "Cookie: BIGipServersharepoint_2010_hostname_pool=2760949138.20480.0000[\r][\n]" 2013/02/15 18:47:40:416 GMT [DEBUG] wire - &amp;gt;&amp;gt; "Cookie2: $Version=1[\r][\n]" 2013/02/15 18:47:40:416 GMT [DEBUG] wire - &amp;gt;&amp;gt; "Authorization: NTLM xxxxxxx[\r][\n]" 2013/02/15 18:47:40:416 GMT [DEBUG] wire - &amp;gt;&amp;gt; "[\r][\n]" 2013/02/15 18:47:40:416 GMT [DEBUG] headers - &amp;gt;&amp;gt; GET /sites/team-sites/operations/_vti_bin/owssvr.dll?Cmd%3DDisplay%26List%3D%7B 6E460908-D470-4F8A-AF76-CC279E25E0B1%7D%26XMLDATA%3DTRUE HTTP/1.1 2013/02/15 18:47:40:416 GMT [DEBUG] headers - &amp;gt;&amp;gt; Host: hostname 2013/02/15 18:47:40:416 GMT [DEBUG] headers - &amp;gt;&amp;gt; Connection: Keep-Alive 2013/02/15 18:47:40:417 GMT [DEBUG] headers - &amp;gt;&amp;gt; User-Agent: Apache-HttpClient/4.2.3 (java 1.5) 2013/02/15 18:47:40:417 GMT [DEBUG] headers - &amp;gt;&amp;gt; Cookie: BIGipServersharepoint_2010_hostname_pool=2760949138.20480.0000 2013/02/15 18:47:40:417 GMT [DEBUG] headers - &amp;gt;&amp;gt; Cookie2: $Version=1 2013/02/15 18:47:40:417 GMT [DEBUG] headers - &amp;gt;&amp;gt; Authorization: NTLM xxxxxxx 2013/02/15 18:47:40:460 GMT [DEBUG] wire - &amp;lt;&amp;lt; "HTTP/1.1 401 Unauthorized[\r][\n]" 2013/02/15 18:47:40:460 GMT [DEBUG] wire - &amp;lt;&amp;lt; "Server: Microsoft-IIS/7.5[\r][\n]" 2013/02/15 18:47:40:460 GMT [DEBUG] wire - &amp;lt;&amp;lt; "SPRequestGuid: 540b78fa-17b9-47b3-bafc-e351f8cc357b[\r][\n]" 2013/02/15 18:47:40:460 GMT [DEBUG] wire - &amp;lt;&amp;lt; "WWW-Authenticate: NTLM[\r][\n]" 2013/02/15 18:47:40:460 GMT [DEBUG] wire - &amp;lt;&amp;lt; "X-Powered-By: ASP.NET[\r][\n]" "MicrosoftSharePointTeamServices: 14.0.0.6010[\r][\n]" 2013/02/15 18:47:40:460 GMT [DEBUG] wire - &amp;lt;&amp;lt; "Date: Fri, 15 Feb 2013 18:47:40 GMT[\r][\n]" 2013/02/15 18:47:40:460 GMT [DEBUG] wire - &amp;lt;&amp;lt; "Content-Length: 0[\r][\n]" 2013/02/15 18:47:40:460 GMT [DEBUG] wire - &amp;lt;&amp;lt; "X-PvInfo: [S10201.C11705.A16138.RA16164.G0.U349F676B].[OT/other.OG/other][\r][\n]" 2013/02/15 18:47:40:460 GMT [DEBUG] wire - &amp;lt;&amp;lt; "[\r][\n]" 2013/02/15 18:47:40:460 GMT [DEBUG] DefaultClientConnection - Receiving response: HTTP/1.1 401 Unauthorized 2013/02/15 18:47:40:460 GMT [DEBUG] headers - &amp;lt;&amp;lt; HTTP/1.1 401 Unauthorized 2013/02/15 18:47:40:460 GMT [DEBUG] headers - &amp;lt;&amp;lt; Server: Microsoft-IIS/7.5 2013/02/15 18:47:40:460 GMT [DEBUG] headers - &amp;lt;&amp;lt; SPRequestGuid: 540b78fa-17b9-47b3-bafc-e351f8cc357b 2013/02/15 18:47:40:460 GMT [DEBUG] headers - &amp;lt;&amp;lt; WWW-Authenticate: NTLM 2013/02/15 18:47:40:460 GMT [DEBUG] headers - &amp;lt;&amp;lt; X-Powered-By: ASP.NET MicrosoftSharePointTeamServices: 14.0.0.6010 2013/02/15 18:47:40:461 GMT [DEBUG] headers - &amp;lt;&amp;lt; Date: Fri, 15 Feb 2013 18:47:40 GMT 2013/02/15 18:47:40:461 GMT [DEBUG] headers - &amp;lt;&amp;lt; Content-Length: 0 2013/02/15 18:47:40:461 GMT [DEBUG] headers - &amp;lt;&amp;lt; X-PvInfo: [S10201.C11705.A16138.RA16164.G0.U349F676B].[OT/other.OG/other] 2013/02/15 18:47:40:461 GMT [DEBUG] DefaultHttpClient - Connection can be kept alive indefinitely 2013/02/15 18:47:40:461 GMT [DEBUG] DefaultHttpClient - Authentication required 2013/02/15 18:47:40:461 GMT [DEBUG] DefaultHttpClient - hostname:443 requested authentication 2013/02/15 18:47:40:461 GMT [DEBUG] DefaultHttpClient - Authorization challenge processed 2013/02/15 18:47:40:461 GMT [DEBUG] DefaultHttpClient - Authentication failed ---------------------------------------- HTTP/1.1 401 Unauthorized HTTP/1.1 Response content length: 0 2013/02/15 18:47:40:461 GMT [DEBUG] BasicClientConnectionManager - Releasing connection org.apache.http.impl.conn.ManagedClientConnectionImpl@2c72bd07 2013/02/15 18:47:40:461 GMT [DEBUG] BasicClientConnectionManager - Connection can be kept alive indefinitely 2013/02/15 18:47:40:462 GMT [DEBUG] DefaultClientConnection - Connection 0.0.0.0:55851&amp;lt;-&amp;gt;146.189.217.28:443 closed</body>
  </mail>
  <mail>
    <header>Re: HttpClient 4.2.3 using both SSL encryption and NTLM authentication fails</header>
    <body>Vanita, SSL does not seem to be a factor. NTLM authentication failure is likely due to one of two reasons: (1) genuine authentication failure doe to invalid user credentials or (2) incompatibility between HttpClient and the web server (identified as Microsoft-IIS/7.5). To rule out the latter you could try using JCIFS NTLM engine instead of the default one as described here and see if that fixes the problem [1] Oleg [1] http://hc.apache.org/httpcomponents-client-ga/ntlm.html</body>
  </mail>
  <mail>
    <header>Re: HttpClient 4.2.3 using both SSL encryption and NTLM authentication fails</header>
    <body>Thanks a lot for your insight Oleg! I tried using the Java HttpURLConnection with another account and it worked with NTLM and without needing SSL setup.</body>
  </mail>
  <mail>
    <header>Making HTTPClient work with SPNEGO authentication</header>
    <body>Hi, I have been trying to make the HttpClient work with SPNEGO authentication but it fails, see attached httpclient_wire.log and the sample client program. HttpClient version : 4.2.2 Application Server : WebSphere 8.5 JDK version : java version "1.6.0" Java(TM) SE Runtime Environment (build pwi3260sr9fp2-20110625_01(SR9 FP2)) IBM J9 VM (build 2.4, JRE 1.6.0 IBM J9 2.4 Windows Server 2008 R2 x86-32 jvmwi32 60sr9-20110624_85526 (JIT enabled, AOT enabled) ClientKerberosAuthentication.java  httpclient_wire.log SpnegoHttpTest.java The same works with java.net.HttpURLConnection. Are we missing something in HttpClient configuration? why is the client not picking up the windows native client credentials and failing to create a context? any inputs would be great. Best Regards, Preethi. -- View this message in context: http://httpcomponents.10934.n7.nabble.com/Making-HTTPClient-work-with-SPNEGO-authentication-tp19413.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: Making HTTPClient work with SPNEGO authentication</header>
    <body>HttpClient is fully platform independent and makes no use of platform specific features. Oleg</body>
  </mail>
  <mail>
    <header>Re: Making HTTPClient work with SPNEGO authentication</header>
    <body>Thanks Oleg. I have one more question, what configuration needs to be set on Httpclient if one wants the client to try with basic authentication challenge incase SPNEGO fails eg: httpclient.getAuthSchemes().register(AuthPolicy.BASIC, new I set the above configuration hoping the  HttpClient will use the BASIC scheme when the SPNEGO one fails? is it the right way? am i missing something? Best Regards, Preethi -- View this message in context: http://httpcomponents.10934.n7.nabble.com/Making-HTTPClient-work-with-SPNEGO-authentication-tp19413p19466.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: Making HTTPClient work with SPNEGO authentication</header>
    <body>You do not need to do anything other than providing correct user credentials. HttpClient automatically falls back onto a less secure auth scheme as long as it is supported by the server and is present in the authentication challenge response. Oleg</body>
  </mail>
  <mail>
    <header>Re: Making HTTPClient work with SPNEGO authentication</header>
    <body>Thanks Oleg for the information, but looks like the HttpClient is not falling back to basic authentication Please find the live header logs where basic authentication challenge is very much thrown when negotiate fails  liveheader.log whereas the wire logs of HttpClient  does not take the basic credentials and just closes the connection when authentication fails with negotiate challenge, see logs httpclient.log any inputs to understand this will be helpful. Regards, Preethi -- View this message in context: http://httpcomponents.10934.n7.nabble.com/Making-HTTPClient-work-with-SPNEGO-authentication-tp19413p19469.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: Making HTTPClient work with SPNEGO authentication</header>
    <body>It is not supposed to given the server would only accept spnego and nothing else :[DEBUG] headers - &amp;lt;&amp;lt; HTTP/1.1 401 Unauthorized :[DEBUG] headers - &amp;lt;&amp;lt; X-Powered-By: Servlet/3.0 :[DEBUG] headers - &amp;lt;&amp;lt; WWW-Authenticate: Negotiate :[DEBUG] headers - &amp;lt;&amp;lt; Content-Type: text/html; charset=UTF-8 :[DEBUG] headers - &amp;lt;&amp;lt; Content-Language: en-US :[DEBUG] headers - &amp;lt;&amp;lt; Content-Length: 149 :[DEBUG] headers - &amp;lt;&amp;lt; Date: Sat, 23 Feb 2013 16:39:42 GMT :[DEBUG] headers - &amp;lt;&amp;lt; Server: WebSphere Application Server/8.0 Oleg</body>
  </mail>
  <mail>
    <header>Re: Making HTTPClient work with SPNEGO authentication</header>
    <body>Hi Oleg, Thanks for the quick response. The live httpheader logs shows similar request/response header : HTTP/1.1 401 Unauthorized X-Powered-By: Servlet/3.0 WWW-Authenticate: Negotiate Content-Type: text/html; charset=UTF-8 Content-Language: en-US Content-Length: 149 Date: Sat, 23 Feb 2013 16:43:11 GMT Server: WebSphere Application Server/8.0 ---------------------------------------------------------- http://isfdevftp1.in.ibm.com:9080/ibm/iis/test/TestGetSession GET /ibm/iis/test/TestGetSession HTTP/1.1 Host: isfdevftp1.in.ibm.com:9080 User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:18.0) Gecko/20100101 Firefox/18.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate sessionCode=146731693 Connection: keep-alive Authorization: Negotiate YHsGBisGAQUFAqBxMG+gMDAuBgorBgEEAYI3AgIKBgkqhkiC9xIBAgIGCSqGSIb3EgECAgYKKwYBBAGCNwICHqI7BDlOVExNU1NQAAEAAACXsgjiBwAHADIAAAAKAAoAKAAAAAYBsR0AAAAPSVNGREVWRlRQMUlGU0NPUkU= HTTP/1.1 401 Unauthorized X-Powered-By: Servlet/3.0 WWW-Authenticate: Basic realm="IBM Information Server" Content-Language: en-US Content-Length: 0 Date: Sat, 23 Feb 2013 16:43:11 GMT Server: WebSphere Application Server/8.0 so the server is throwing the basic challenge incase of authentication failure, why is the HttpClient wire log not showing the second set of communication log and just closes the connection 2013/02/23 22:09:43:698 IST [DEBUG] DefaultClientConnection - Receiving response : HTTP/1.1 401 Unauthorized 2013/02/23 22:09:43:698 IST [DEBUG] headers - &amp;lt;&amp;lt; HTTP/1.1 401 Unauthorized 2013/02/23 22:09:43:698 IST [DEBUG] headers - &amp;lt;&amp;lt; X-Powered-By: Servlet/3.0 2013/02/23 22:09:43:698 IST [DEBUG] headers - &amp;lt;&amp;lt; WWW-Authenticate: Negotiate charse t=UTF-8 2013/02/23 22:09:43:713 IST [DEBUG] headers - &amp;lt;&amp;lt; Content-Language: en-US 2013/02/23 22:09:43:713 IST [DEBUG] headers - &amp;lt;&amp;lt; Content-Length: 149 2013/02/23 22:09:43:713 IST [DEBUG] headers - &amp;lt;&amp;lt; Date: Sat, 23 Feb 2013 16:39:42 GMT 2013/02/23 22:09:43:713 IST [DEBUG] headers - &amp;lt;&amp;lt; Server: WebSphere Application S erver/8.0 2013/02/23 22:09:43:713 IST [DEBUG] DefaultHttpClient - Connection can be kept a live indefinitely 2013/02/23 22:09:43:713 IST [DEBUG] DefaultHttpClient - Authentication required 2013/02/23 22:09:43:713 IST [DEBUG] DefaultHttpClient - isfdevftp1.in.ibm.com:90 80 requested authentication 2013/02/23 22:09:43:713 IST [DEBUG] DefaultHttpClient - Authorization challenge processed 2013/02/23 22:09:43:713 IST [DEBUG] SPNegoScheme - Received challenge '' from th e auth server 2013/02/23 22:09:43:713 IST [DEBUG] SPNegoScheme - Authentication already attemp ted 2013/02/23 22:09:43:713 IST [DEBUG] DefaultHttpClient - Authentication failed why there is difference in the challenge thrown between the browser and HttpClient? any clarifications would be helpful. Regards, Oleg -- View this message in context: http://httpcomponents.10934.n7.nabble.com/Making-HTTPClient-work-with-SPNEGO-authentication-tp19413p19473.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: Making HTTPClient work with SPNEGO authentication</header>
    <body>You will have to direct this question to the developers of Websphere. Oleg</body>
  </mail>
  <mail>
    <header>HTTPS Proxy using ProxySelectorRoutePlanner is not working as expected</header>
    <body>Hi, We use Apache HTTPClient to submit our requests to the target web application hosted in WebSphere Liberty Application Server. Scenario is to check HTTPS proxy with Apache HTTPClient. I am using Fiddler2 as the HTTPS proxy and submitting the requests using the Apache HTTPClient API. And as mentioned in [ http://hc.apache.org/httpcomponents-client-ga/tutorial/html/connmgmt.html#d5e571 ] the following snippet works well where the requests are routed to the proxy. Here in the below code snippet the port 8888 is the fiddler port number and the application server port is 9944. However, the actual requirement is to make use of the JRE proxy configured at the system level, as detailed at: [ http://www.java.com/en/download/help/proxy_setup.xml ], using which I have setup the proxy as "locahost" and port as 8888. I am using ProxySelector.getDefault() as mentioned in the code snippet from [ http://hc.apache.org/httpcomponents-client-ga/tutorial/html/connmgmt.html#d5e571 ]. ProxySelectorRoutePlanner routePlanner = new ProxySelectorRoutePlanner( But the issue is, the request always goes directly to the target application server and not going via., the proxy. Is there any further httpclient configuration that I have to do? Thanks, Ravi Chamarthy</body>
  </mail>
  <mail>
    <header>turning on httpclient debug log results in password in clear text in the logs</header>
    <body>Hello, I am using httpclient 4.1.3 to authenticate with a CAS server using basic authentication and POST. When I turn on debug logs for the java process, this results in my password being logged in clear text in the logs.(through httpclient wire logging) Is this expected? Any way around this other than sending an encrypted password in the first place? Thanks.</body>
  </mail>
  <mail>
    <header>Re: turning on httpclient debug log results in password in clear text in the logs</header>
    <body>and POST. When I turn on debug logs for the java process, this results in my password being logged in clear text in the logs.(through httpclient wire logging) Is this expected? Any way around this other than sending an encrypted password in the first place? Yogesh Yes, it is. HttpClient does not attempt to obfuscate security sensitive information contained in message headers or body. You should not be using header / wire logging in productive environments. Oleg</body>
  </mail>
  <mail>
    <header>Using a self-signed CA</header>
    <body>I'm trying to access a HTTPS web server, which has a SSL certificate signed by our own CA. I imported the CA public key into my main carets file using: keytool -keystore &amp;lt;PATH_TO_CACERTS&amp;gt;/cacerts -import -trustcacerts -alias "MY_CA" -file ./root.cer (I'm using a Mac, so the cacerts file is  /System/Library/Java/Support/CoreDeploy.bundle/Contents/Home/lib/security/cacerts ) But when I make a simple HTTP GET, I'm still getting: "javax.net.ssl.SSLPeerUnverifiedException: peer not authenticated" Google only seems to give me solutions which involve disabling certificate checking - which isn't what I want. Can someone tell me what I'm doing wrong ? Thanks, GTG -- Gordon Ross</body>
  </mail>
  <mail>
    <header>Re: Using a self-signed CA</header>
    <body>Perhaps cacerts is not really where you point to? It should be at $JAVA_HOME/lib/security/cacerts , where $JAVA_HOME can be obtained from /usr/libexec/java_home -v 1.6. In my case it is /Library/Java/JavaVirtualMachines/1.6.0_37-b06-434.jdk/Contents/Home --E CA. I imported the CA public key into my main carets file using: -file ./root.cer ) which isn't what I want.</body>
  </mail>
  <mail>
    <header>Re: Using a self-signed CA</header>
    <body>, where $JAVA_HOME can be obtained from /usr/libexec/java_home -v 1.6. In my case it is /Library/Java/JavaVirtualMachines/1.6.0_37-b06-434.jdk/Contents/Home $ java -version java version "1.6.0_37" $ /usr/libexec/java_home -v 1.6 /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home $ ls -l /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/security/cacerts […]/cacerts -&amp;gt; /System/Library/Java/Support/CoreDeploy.bundle/Contents/Home/lib/security/cacerts $ keytool -list -keystore /System/Library/Java/Support/CoreDeploy.bundle/Contents/Home/lib/security/cacerts |grep -i my_ca my_ca, Feb 21, 2013, trustedCertEntry, GTG -- Gordon Ross</body>
  </mail>
  <mail>
    <header>Re: Using a self-signed CA</header>
    <body>, where $JAVA_HOME can be obtained from /usr/libexec/java_home -v 1.6. In my case it is /Library/Java/JavaVirtualMachines/1.6.0_37-b06-434.jdk/Contents/Home |grep -i my_ca Gordon The best thing you can do is to explicitly set up the expected SSL context using one of the SSLSocketFactory constructors. This would also enable you to limit the set of trusted CAs to just those you need. --- PoolingClientConnectionManager cm = new --- Oleg</body>
  </mail>
  <mail>
    <header>Posting with non-repeatable entity</header>
    <body>Hello, I am trying to post a multipart entity body using MultipartEntity. I need to use an InputStreamBody, which is non-repeatable (because its getContentLength() returns -1). However, I get an exception in DefaultRequestDirector.tryExecute(). The first thing that happens in this loop is that it checks if the entity is repeatable, and if not, it throws an exception, even though it hasn't even tried once. http://fpaste.org/J1Nm/ When I get there, retryReason is still null, and I end up getting the 2nd exception thrown. This seems bogus to me. There should not be an else-branch and it should try at least once. Or am I totally missing something here? Roman</body>
  </mail>
  <mail>
    <header>Re: Posting with non-repeatable entity</header>
    <body>Roman This may be non-obvious but request repeatability is determined by the request wrapper that keeps track of whether or not the request entity has been consumed (at least once). See EntityEnclosingRequestWrapper#isRepeatable() implementation http://hc.apache.org/httpcomponents-client-ga/httpclient/xref/org/apache/http/impl/client/EntityEnclosingRequestWrapper.html#81 Hope this helps Oleg</body>
  </mail>
  <mail>
    <header>Re: Posting with non-repeatable entity</header>
    <body>Am Donnerstag, den 21.02.2013, 23:08 +0100 schrieb Oleg Kalnichevski: Oh yeah, thanks, this helped. However, I now found out that the request is retried because of authentication. Is it possible to have authentication and not require to retry the request? The body is potentially large, even if I could wrap my InputStreamBody into a temp file and send this instead, I would really like to avoid sending the whole thing twice because of authentication. Any ideas? Roman</body>
  </mail>
  <mail>
    <header>Re: Posting with non-repeatable entity</header>
    <body>'Expect: continue' handshake is your best friend. Oleg</body>
  </mail>
  <mail>
    <header>Re: Posting with non-repeatable entity</header>
    <body>Am Donnerstag, den 21.02.2013, 23:29 +0100 schrieb Oleg Kalnichevski: Yup, that helped! Thanks a lot. For reference: This does it. Cheers, Roman</body>
  </mail>
  <mail>
    <header>HttpRoutePlanner - How does it work with an HTTPS Proxy</header>
    <body>Hi, I have an HTTPS proxy set up so that HTTP clients can send plain HTTP requests securely to the proxy. For example, a client can send an encrypted HTTP GET request to the proxy, which will remove the encryption and send the plain HTTP GET request to the end-site. I learned that this is not a common set up and only Google Chrome has in-built features to support such a scenario. (Info here - http://wiki.squid-cache.org/Features/HTTPS#Encrypted_browser-Squid_connection). I have made Google Chrome work with my HTTPS proxy and hence there is no trouble on the proxy side. I wish to write an HTTP Client that will encrypt all requests to my HTTPS Proxy. I tried setting an HTTPS proxy to DefaultHttpClient this way - https Then trying to execute any request gives me an SSLPeerUnverifiedException. I do not understand the reason why. During my exploration of the DefaultHttpClient API, I came across HttpRoutePlanner and HttpRoute with which we can specify whether the connection to proxies should be encrypted or not. However, I am unable to make this work. Here is a diagram that explains my setup by differentiating it with a HTTP Proxy setup - HTTP Proxy: HTTP Client &amp;lt;------- Plain Text GET, POST Requests -------&amp;gt; HTTP Proxy HTTP Client &amp;lt;------- Plain Text CONNECT Requests -------&amp;gt; HTTP Proxy NOTE: For HTTPS End-Sites, only the CONNECT Request is seen by the proxy. Then an SSL Tunnel is established between the Client and End-Site HTTPS Proxy: HTTP Client &amp;lt;------- Encrypted GET, POST Requests -------&amp;gt; HTTPS Proxy HTTP Client &amp;lt;------- Encrypted CONNECT Requests -------&amp;gt; HTTPS Proxy NOTE: For HTTPS End-Sites, only the initial CONNECT Request should be encrypted to the proxy. The subsequent request will anyway be tunnelled. Can anybody please let me know how I can achieve this goal? I believe HttpRoutePlanner should help, but I don't know how. Thanks. Regards, Sivasubramaniam S.</body>
  </mail>
  <mail>
    <header>Re: HttpRoutePlanner - How does it work with an HTTPS Proxy</header>
    <body>Sivasubramaniam, Apache HttpClient 4.x only supports SSL via proxy only by connection tunneling. It does not support HTTPS proxies. For details see https://issues.apache.org/jira/browse/HTTPCLIENT-1318 Oleg</body>
  </mail>
  <mail>
    <header>AUTO: Ravi C Chamarthy is out of the office (returning 03/01/2013)</header>
    <body>I am out of the office until 03/01/2013. Hi, I am taking off on 27/02 and 28/02 and would be back on 01/03. For any question related to ISF Monet please forward them to Murthy [ Sreenivasa M Sista/India/IBM ]. Thanks, Ravi Chamarthy IBM Information Platform &amp;amp; Solutions IBM Software Group 91 40 669 57140 / ravi.chamarthy@in.ibm.com Note: This is an automated response to your message  "Tony Anecito" sent on 27/02/2013 16:53:15. This is the only notification you will receive while this person is away.</body>
  </mail>
  <mail>
    <header>Internal change with last 4.2.3 with URI ?</header>
    <body>Hi Folks, recently Maven Wagon upgraded to last 4.2.3 client. Now url containing '_' doesn't work anymore. Exception says : java.lang.IllegalArgumentException: Host name may not be null at org.apache.http.HttpHost.&amp;lt;init&amp;gt;(HttpHost.java:79) Url have format: "https://foo_bar.online.com" When testing: host is null so I understand the complain :-). Is there any related change to use URI ? Do I have any workaround ? Thanks -- Olivier Lamy Talend: http://coders.talend.com http://twitter.com/olamy | http://linkedin.com/in/olamy</body>
  </mail>
  <mail>
    <header>Re: Internal change with last 4.2.3 with URI ?</header>
    <body>so BTW _ is not valid according to http://www.ietf.org/rfc/rfc2396.txt So forget my question :-) 2013/3/4 Olivier Lamy &amp;lt;olamy@apache.org&amp;gt;: -- Olivier Lamy Talend: http://coders.talend.com http://twitter.com/olamy | http://linkedin.com/in/olamy</body>
  </mail>
  <mail>
    <header>Re: Internal change with last 4.2.3 with URI ?</header>
    <body>Oliver Indeed, underscore character is not valid for use in DNS names. However it is a very common violation HttpClient provides a work-around for. Try using URIUtils#extractHost method in order to extract a HttpHost value from a URI. Hope this helps Oleg</body>
  </mail>
  <mail>
    <header>Re: Internal change with last 4.2.3 with URI ?</header>
    <body>Note that '_' isn't a valid hostname character: http://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_host_names As an alternative, for your tests, you could try: "https://foo-bar.example.com/" Also, FWIW, you may want to consider using the "example.com" domain for things where you need a hostname but don't intend to actually talk over the network to it. The .example.com domain is specifically reserved for this purpose. On the other hand, .online.com seems to resolve to CNET, so this might end up having unexpected results for both you and CNET if you continue using it for tests. Jon ........ Jon Moore Comcast Cable</body>
  </mail>
  <mail>
    <header>PoolingClientConnectionManager Using Non-standard HTTP Port Question</header>
    <body>Hello, I'm trying to setup a pool of HTTP clients for interacting with an Elastic Search server using their HTTP API. I'll have many threads making simultaneous requests for indexing or searching data so I figured the connection manager was the way to go. Working off the tutorial at http://hc.apache.org/httpcomponents-client-ga/tutorial/html/connmgmt.html I setup a pool and some threads all pulling data from the same host to verify that setDefaultMaxPerRoute() worked correctly (code pasted at the end). It looked god and seemed to spread the load nicely returning:  Starting thread [0] Starting thread [1] Starting thread [2] Starting thread [3] [0] HTTP Status [200] [3] HTTP Status [200] [1] HTTP Status [200] [2] HTTP Status [200] [0] HTTP Status [200] [1] HTTP Status [200] [3] HTTP Status [200] [2] HTTP Status [200] [1] HTTP Status [200] [0] HTTP Status [200] [3] HTTP Status [200] [2] HTTP Status [200] [3] HTTP Status [200] [0] HTTP Status [200] [1] HTTP Status [200] [2] HTTP Status [200] [3] HTTP Status [200] [1] HTTP Status [200] [0] HTTP Status [200] [2] HTTP Status [200] [1] HTTP Status [200]  But by default Elastic Search runs on port 9200. When I tried the same code but with the non-standard port, it looks like pooling doesn't function properly and only one thread handled requests:  Starting thread [1] Starting thread [0] Starting thread [2] Starting thread [3] [0] HTTP Status [200] [0] HTTP Status [200] [0] HTTP Status [200] [0] HTTP Status [200] [0] HTTP Status [200] [0] HTTP Status [200] [0] HTTP Status [200] [0] HTTP Status [200] [0] HTTP Status [200] [0] HTTP Status [200] [0] HTTP Status [200]  So am I doing something goofy or does the pool not handle non-standard ports correctly? I'm using 4.2.3. Thanks!     //              new Scheme("http", 9200,   //        "http://elasticsearchhost:9200/", //        "http://elasticsearchhost:9200/", //        "http://elasticsearchhost:9200/", //        "http://elasticsearchhost:9200/"</body>
  </mail>
  <mail>
    <header>Re: PoolingClientConnectionManager Using Non-standard HTTP Port Question</header>
    <body>Strike my previous post, I tried it with another service and it seemed to work properly on a non-standard port. I'll have to dig into my Elastic Search config and see if it's not handling multiple requests properly.</body>
  </mail>
  <mail>
    <header>RE: PoolingClientConnectionManager Using Non-standard HTTP Port Question</header>
    <body>Final follow up. The ES instance I was running defaulted to listening on IPv6. When I toggled it to listen over the IPv4 address, the connection pool worked beautifully. So it could be an issue with IPv6 from my machine (Windows).</body>
  </mail>
  <mail>
    <header>upgrade commons-httpclient3.1 to httpclient4.2</header>
    <body>Hi All We found commons-httpclient3.1 does not support ipv6 but httpclient4.2 does support ipv6. How to upgrade commons-httpclient3.1 to httpclient4.2 without changing existing code that use httpclient3.1 extensively? You know , there are much different between this 2 versions, at least package name and class names are totally different. Thnaks Tony</body>
  </mail>
  <mail>
    <header>Re: upgrade commons-httpclient3.1 to httpclient4.2</header>
    <body>existing code that use httpclient3.1 extensively? In my experience, not possible (nor probably desirable). Todd Lainhart Rational software IBM Corporation 550 King Street, Littleton, MA 01460-1250 1-978-899-4705 2-276-4705 (T/L) lainhart@us.ibm.com To:     httpclient-users@hc.apache.org, Date:   03/04/2013 09:33 PM Subject:        upgrade commons-httpclient3.1 to httpclient4.2 Hi All We found commons-httpclient3.1 does not support ipv6 but httpclient4.2 does support ipv6. How to upgrade commons-httpclient3.1 to httpclient4.2 without changing existing code that use httpclient3.1 extensively? You know , there are much different between this 2 versions, at least package name and class names are totally different. Thnaks Tony</body>
  </mail>
  <mail>
    <header>Re: Upgrading commons-httpclient-3.x to HttpClient4.x</header>
    <body>branch. Adrian I ended up using a middle way approach. By default HttpClient will continue to use SSL context based on the default trust material shipped with JRE. However, when instructed to use system properties HttpClientBuilder in 4.3 or DefaultSystemHttpClient in 4.2 will use javax.net.ssl.SSLSocketFactory#getDefault() to create a socket factory with a SSL context based on system properties. Oleg</body>
  </mail>
  <mail>
    <header>Usage of HTTP client and core</header>
    <body>Hi, We have downloaded the http component client 4.2.3 bin version. This version contains http core 4.2.2 in lib directory.  Is client bundle with older version of http core? Can I use http component client 4.2.3 and http component core 4.2.3 in my application? -- Thanks and Regards Nagarjuna.S</body>
  </mail>
  <mail>
    <header>Re: Usage of HTTP client and core</header>
    <body>Hi, HttpComponents-client has been developed and tested using HttpComponents-core 4.2.2 This explains why this version is included in the bundle. HttpComponents-core 4.2.3 is binary compatible with all HttpComponents-core 4.2.x versions so you should be able to use it in your project as well. HttpComponents-core 4.2.3 is maintenance release version that fixes a few bugs from previous version. You will find more details in the release notes: http://www.apache.org/dist/httpcomponents/httpcore/RELEASE_NOTES.txt</body>
  </mail>
  <mail>
    <header>Re: Usage of HTTP client and core</header>
    <body>I think it's a mistake but it's not an issue. Please take a look here and look at the last message: http://httpcomponents.10934.n7.nabble.com/ANNOUNCEMENT-HttpComponents-HttpClient-4-2-3-GA-release-td18820.html 2013/3/15 Francois-Xavier Bonnet &amp;lt;francois-xavier.bonnet@centraliens.net&amp;gt;:</body>
  </mail>
  <mail>
    <header>HttpClient - SSL</header>
    <body>hi all, HttpClient documentation, by default, it should use Java SSL Factory right? I am seeing a weird behaviour, If I call a ssl site from java client HttpsURLConnection, it works but same does not work for HttpClient. from HttpClient, I am getting Unknown Certificate error, However, If I dont specify any custom socket, it should use what JRE has, right? THanks, Yuvi -- View this message in context: http://httpcomponents.10934.n7.nabble.com/HttpClient-SSL-tp19561.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>[ANNOUNCEMENT] HttpComponents HttpCore 4.2.4 GA Released</header>
    <body>The Apache HttpComponents project is pleased to announce release 4.2.4 (GA) of HttpComponents HttpCore. This is a maintenance release that fixes a number of bugs found in NIO components since 4.2.3. We advise users of HttpCore NIO of all versions to upgrade. Download - Release notes - HttpComponents site - About HttpComponents Core - HttpCore is a set of low level HTTP transport components that can be used to build custom client and server side HTTP services with a minimal footprint. HttpCore supports two I/O models: a blocking I/O model based on the classic Java I/O and a non-blocking, event driven I/O model based on Java NIO. The blocking I/O model may be more appropriate for data intensive, low latency scenarios, whereas the non-blocking model may be more appropriate for high latency scenarios where raw data throughput is less important than the ability to handle thousands of simultaneous HTTP connections in a resource efficient manner.</body>
  </mail>
  <mail>
    <header>[ANNOUNCEMENT] HttpComponents HttpCore 4.3-beta1 Released</header>
    <body>The Apache HttpComponents project is pleased to announce release 4.3-beta1 of HttpComponents HttpCore. This is the first BETA release from the 4.3 release branch. The main theme of the 4.3 release series is streamlining of component configuration and deprecation of the old configuration API based on HttpParams in favor of constructor-based dependency injection and plain objects for configuration parameters. This release also includes performance optimizations intended to reduce TCP packet fragmentation when writing out HTTP messages both in blocking and non-blocking I/O modes, which should result in up to 20% higher throughput for short entity enclosing messages. This release also includes all fixes from the stable 4.2.x release branch. Download - Release notes - HttpComponents site - About HttpComponents Core - HttpCore is a set of low level HTTP transport components that can be used to build custom client and server side HTTP services with a minimal footprint. HttpCore supports two I/O models: a blocking I/O model based on the classic Java I/O and a non-blocking, event driven I/O model based on Java NIO. The blocking I/O model may be more appropriate for data intensive, low latency scenarios, whereas the non-blocking model may be more appropriate for high latency scenarios where raw data throughput is less important than the ability to handle thousands of simultaneous HTTP connections in a resource efficient manner.</body>
  </mail>
  <mail>
    <header>Re: [ANNOUNCEMENT] HttpComponents HttpCore 4.3-beta1 Released</header>
    <body>Hi, I have a couple of questions that center around migration to 4.3 beta 1. 1. Can I use a httpclient 4.1 front end with a 4.3 beta 1 server side code? 2. I am using http commons and wondering if I need to use that with this 4.3 beta release. 3. What version of jackson JSON works with this 4.3 beta 1? 4. I am using client side http connection pooling. What do you recommend and do you have an example using 4.3 beta 1? Thanks, -Tony ________________________________ To: announce@apache.org; private@hc.apache.org; dev@hc.apache.org; httpclient-users@hc.apache.org Sent: Monday, March 25, 2013 11:55 AM Subject: [ANNOUNCEMENT] HttpComponents HttpCore 4.3-beta1 Released  The Apache HttpComponents project is pleased to announce release 4.3-beta1 of HttpComponents HttpCore. This is the first BETA release from the 4.3 release branch. The main theme of the 4.3 release series is streamlining of component configuration and deprecation of the old configuration API based on HttpParams in favor of constructor-based dependency injection and plain objects for configuration parameters. This release also includes performance optimizations intended to reduce TCP packet fragmentation when writing out HTTP messages both in blocking and non-blocking I/O modes, which should result in up to 20% higher throughput for short entity enclosing messages.  This release also includes all fixes from the stable 4.2.x release branch. Download - Release notes - HttpComponents site - About HttpComponents Core - HttpCore is a set of low level HTTP transport components that can be used to build custom client and server side HTTP services with a minimal footprint. HttpCore supports two I/O models: a blocking I/O model based on the classic Java I/O and a non-blocking, event driven I/O model based on Java NIO. The blocking I/O model may be more appropriate for data intensive, low latency scenarios, whereas the non-blocking model may be more appropriate for high latency scenarios where raw data throughput is less important than the ability to handle thousands of simultaneous HTTP connections in a resource efficient manner.</body>
  </mail>
  <mail>
    <header>Re: [ANNOUNCEMENT] HttpComponents HttpCore 4.3-beta1 Released</header>
    <body>Absolutely. Both sides simply talk HTTP to one another but otherwise are fully independent. I am not sure I understand what you are referring to by http commons HttpCore is content agnostic. There are restrictions as to how the content of HTTP messages is generated and processed an example using 4.3 beta 1? Please see this demo app as an example https://svn.apache.org/repos/asf/httpcomponents/httpcore/tags/4.3-beta1/httpcore/src/examples/org/apache/http/examples/ElementalPoolingHttpGet.java Hope this helps Oleg</body>
  </mail>
  <mail>
    <header>Re: [ANNOUNCEMENT] HttpComponents HttpCore 4.3-beta1 Released</header>
    <body>Hi Oleg, I am using commons-httpclient-3.1.jar. Is that needed for your example for 4.3-beta 1? Regards, -Tony ________________________________ Sent: Monday, March 25, 2013 2:05 PM Subject: Re: [ANNOUNCEMENT] HttpComponents HttpCore 4.3-beta1 Released  Absolutely. Both sides simply talk HTTP to one another but otherwise are fully independent. I am not sure I understand what you are referring to by http commons HttpCore is content agnostic. There are restrictions as to how the content of HTTP messages is generated and processed an example using 4.3 beta 1? Please see this demo app as an example https://svn.apache.org/repos/asf/httpcomponents/httpcore/tags/4.3-beta1/httpcore/src/examples/org/apache/http/examples/ElementalPoolingHttpGet.java Hope this helps Oleg</body>
  </mail>
  <mail>
    <header>Re: [ANNOUNCEMENT] HttpComponents HttpCore 4.3-beta1 Released</header>
    <body>No, it is not. Oleg release. you have an example using 4.3 beta 1?</body>
  </mail>
  <mail>
    <header>Re: [ANNOUNCEMENT] HttpComponents HttpCore 4.3-beta1 Released</header>
    <body>Hi Oleg, Looks like I can not use this. I use Jersey for Rest web services and do not see a way to use what you have. Maybe I am wrong? Thanks, -Tony ________________________________ Sent: Tuesday, March 26, 2013 1:36 PM Subject: Re: [ANNOUNCEMENT] HttpComponents HttpCore 4.3-beta1 Released  No, it is not. Oleg release. you have an example using 4.3 beta 1?</body>
  </mail>
  <mail>
    <header>Re: [ANNOUNCEMENT] HttpComponents HttpCore 4.3-beta1 Released</header>
    <body>Hi Oleg, I googled for examples of Restful web service request/response and found maybe one or two references that may work. Seems having the headers of the request setup correctly is important which makes sense. I will look some more before I try coding something. Regards, -Tony Anecito JavaOne 2010 Dukes Award Winner Future of Java Founder MyUniPortal ________________________________ Sent: Tuesday, March 26, 2013 6:54 PM Subject: Re: [ANNOUNCEMENT] HttpComponents HttpCore 4.3-beta1 Released  Hi Oleg, Looks like I can not use this. I use Jersey for Rest web services and do not see a way to use what you have. Maybe I am wrong? Thanks, -Tony ________________________________ Sent: Tuesday, March 26, 2013 1:36 PM Subject: Re: [ANNOUNCEMENT] HttpComponents HttpCore 4.3-beta1 Released No, it is not. Oleg release. you have an example using 4.3 beta 1?</body>
  </mail>
  <mail>
    <header>SSL verification - is it a warning, can it be made strict?</header>
    <body>Hi, I am trying to talk to an https secured site but failing - or so I thought... Getting exceptions like this: javax.net.ssl.SSLPeerUnverifiedException: peer not authenticated 09:10:19:404|TH5 INFO: Backtrace: But some POST's are getting through - getting 200 and 404 responses (its a basic HTTP interface) I expected that it would be failing all requests. My program has around 20 threads doing the posts in parallel - I am using the PoolingClientConnectionManager.  Then I am also caching the HttpPost objects - could that be part of the problem? I am using httpclient-4.2.3 / httpcore-4.2.4, using code pretty much like the ClientCustomSSL example to configure an SSLSocketFactory with a trust store containing the certificates in question. (although I get the same effect if I dont specify the trust store/Socket Factory). Running Java 1.6.0_37 on Linux. Will stop re-using the HttpPost objects - see if that helps. Thanks in advance for any tips/thoughts, Chris _____________________________________________________________ This email (including any attachments to it) is confidential, legally privileged, subject to copyright and is sent for the personal attention of the intended recipient only. If you have received this email in error, please advise us immediately and delete it. You are notified that disclosing, copying, distributing or taking any action in reliance on the contents of this information is strictly prohibited. Although we have taken reasonable precautions to ensure no viruses are present in this email, we cannot accept responsibility for any loss or damage arising from the viruses in this email or attachments. We exclude any liability for the content of this email, or for the consequences of any actions taken on the basis of the information provided in this email or its attachments, unless that information is subsequently confirmed in writing. _____________________________________________________________</body>
  </mail>
  <mail>
    <header>RE: SSL verification - is it a warning, can it be made strict?</header>
    <body>Hi, I am trying it with less threads and that seems to help. I am also getting (and have been all along) intermittent connection issues, like so: java.net.SocketException: Connection reset 12:02:06:752|TH12 INFO: Backtrace: I wonder if its possible that if these occur during the SSL connection part that it results in the SSLPeerUnverified error? Regards, Chris _____________________________________________________________ This email (including any attachments to it) is confidential, legally privileged, subject to copyright and is sent for the personal attention of the intended recipient only. If you have received this email in error, please advise us immediately and delete it. You are notified that disclosing, copying, distributing or taking any action in reliance on the contents of this information is strictly prohibited. Although we have taken reasonable precautions to ensure no viruses are present in this email, we cannot accept responsibility for any loss or damage arising from the viruses in this email or attachments. We exclude any liability for the content of this email, or for the consequences of any actions taken on the basis of the information provided in this email or its attachments, unless that information is subsequently confirmed in writing. _____________________________________________________________</body>
  </mail>
  <mail>
    <header>RE: SSL verification - is it a warning, can it be made strict?</header>
    <body>I am jumping in on a conversation I have not really followed, so I apologize if I am just adding noise to your conversion. When I saw you mention random ConnectionReset errors, I recalled when I was getting this error. It turned out to be something in the Tomcat configuration.  If you are using Tomcat, you may want to try to add this to your connector: maxKeepAliveRequests="-1" Tomcat, by default, closes persistent connections periodically.  With the ConnectionLinger set to 0 (as we had it), this caused problems. Here is what Oleg said in an email: -----Original Message----- From: Oleg Kalnichevski [mailto:olegk@apache.org] Sent: Tuesday, January 29, 2013 3:09 PM To: HttpClient User Discussion Subject: Re: Connection Reset errors -----Original Message----- From: Kimpton, C (Chris) [mailto:Chris.Kimpton@rabobank.com] Sent: Thursday, March 28, 2013 8:04 AM To: 'httpclient-users@hc.apache.org' Subject: RE: SSL verification - is it a warning, can it be made strict? Hi, I am trying it with less threads and that seems to help. I am also getting (and have been all along) intermittent connection issues, like so: java.net.SocketException: Connection reset 12:02:06:752|TH12 INFO: Backtrace: I wonder if its possible that if these occur during the SSL connection part that it results in the SSLPeerUnverified error? Regards, Chris _____________________________________________________________ This email (including any attachments to it) is confidential, legally privileged, subject to copyright and is sent for the personal attention of the intended recipient only. If you have received this email in error, please advise us immediately and delete it. You are notified that disclosing, copying, distributing or taking any action in reliance on the contents of this information is strictly prohibited. Although we have taken reasonable precautions to ensure no viruses are present in this email, we cannot accept responsibility for any loss or damage arising from the viruses in this email or attachments. We exclude any liability for the content of this email, or for the consequences of any actions taken on the basis of the information provided in this email or its attachments, unless that information is subsequently confirmed in writing. _____________________________________________________________</body>
  </mail>
  <mail>
    <header>RE: SSL verification - is it a warning, can it be made strict?</header>
    <body>Thanks Mark - I am not using Tomcat on my side - but the server at the other end might be... will investigate that next week. Cheers. -- View this message in context: http://httpcomponents.10934.n7.nabble.com/SSL-verification-is-it-a-warning-can-it-be-made-strict-tp19625p19635.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>RE: SSL verification - is it a warning, can it be made strict?</header>
    <body>Not caching the HttpPost objects may have helped, but still getting a few intermittent SSLPeerUnverified issues. I now have an HttpClient object per thread (along with an HttpHost object). Each HttpClient has its own PoolingClientConnectionManager - which probably could be shared - but isnt. Although that shouldn't cause an issue - should it? There are 2 end points we are connecting to - half the threads use one and the other half connect to the other. Cheers, Chris -----Original Message----- From: Kimpton, C (Chris) Sent: 28 March 2013 09:30 To: 'httpclient-users@hc.apache.org' Subject: SSL verification - is it a warning, can it be made strict? Hi, I am trying to talk to an https secured site but failing - or so I thought... Getting exceptions like this: javax.net.ssl.SSLPeerUnverifiedException: peer not authenticated 09:10:19:404|TH5 INFO: Backtrace: But some POST's are getting through - getting 200 and 404 responses (its a basic HTTP interface) I expected that it would be failing all requests. My program has around 20 threads doing the posts in parallel - I am using the PoolingClientConnectionManager.  Then I am also caching the HttpPost objects - could that be part of the problem? I am using httpclient-4.2.3 / httpcore-4.2.4, using code pretty much like the ClientCustomSSL example to configure an SSLSocketFactory with a trust store containing the certificates in question. (although I get the same effect if I dont specify the trust store/Socket Factory). Running Java 1.6.0_37 on Linux. Will stop re-using the HttpPost objects - see if that helps. Thanks in advance for any tips/thoughts, Chris _____________________________________________________________ This email (including any attachments to it) is confidential, legally privileged, subject to copyright and is sent for the personal attention of the intended recipient only. If you have received this email in error, please advise us immediately and delete it. You are notified that disclosing, copying, distributing or taking any action in reliance on the contents of this information is strictly prohibited. Although we have taken reasonable precautions to ensure no viruses are present in this email, we cannot accept responsibility for any loss or damage arising from the viruses in this email or attachments. We exclude any liability for the content of this email, or for the consequences of any actions taken on the basis of the information provided in this email or its attachments, unless that information is subsequently confirmed in writing. _____________________________________________________________</body>
  </mail>
  <mail>
    <header>Best way to perform file upload robust enough to be fault tolerant to network failure</header>
    <body>Hello to all http experts, Could you give me some advices in order to know how to perform file uploads which will be fault tolerant to potential network issues ? What is the best option to be used : chunked content, usage of content-range, multipart knowing that we can have a lot of file upload concurrent requests with files which can have a size between 2Mb to 200Mb  and we can pause/resume the uploading process ? Best Regards.</body>
  </mail>
  <mail>
    <header>inputStream.read() blocks at end of chunk</header>
    <body>I need a persistent Http connection over which I will receive multiple XML responses.  Each XML response should be a chunk from the server. I'm using httpclient-4.2.3 and the following code.  Currently, the HttpClient blocks on the inputStream.read() on the character following the of the chunk.  The read eventually (~15 seconds) returns and things continue.  I should note that the first read() fills the buffer with the 180 (b4) chars of the first chunk.  It's the second read that blocks. Is there a way to get access to the chunk size prior to the read?  In the case capture in the DEBUG output below, it's 180 (b4) chars. Or is there a better way to read this full chunk, even if it spans multiple buffers and therefore multiple reads? == &amp;#009;&amp;#009;&amp;#009;&amp;#009;&amp;#009;&amp;#009;// TODO: Need to check here for multiple messages in the same chunk &amp;#009;&amp;#009;&amp;#009;&amp;#009;&amp;#009;&amp;#009;&amp;#009;BroadWorksResponse broadworksResponse = BroadWorksResponse &amp;#009;&amp;#009;&amp;#009;&amp;#009;&amp;#009;&amp;#009;&amp;#009;if (broadworksResponse != null) &amp;#009;&amp;#009;&amp;#009;&amp;#009;&amp;#009;&amp;#009;// &amp;#009;&amp;#009;&amp;#009;// TODO Auto-generated catch block &amp;#009;&amp;#009;&amp;#009;// TODO Auto-generated catch block DEBUG [org.apache.http.impl.conn.DefaultClientConnection] Sending request: POST /com.broadsoft.async/com.broadsoft.xsi-events/v2.0/channel HTTP/1.1 DEBUG [org.apache.http.wire] &amp;gt;&amp;gt; "POST /com.broadsoft.async/com.broadsoft.xsi-events/v2.0/channel HTTP/1.1[\r][\n]" DEBUG [org.apache.http.wire] &amp;gt;&amp;gt; "Content-Length: 233[\r][\n]" DEBUG [org.apache.http.wire] &amp;gt;&amp;gt; "Content-Type: text/plain; charset=ISO-8859-1[\r][\n]" DEBUG [org.apache.http.wire] &amp;gt;&amp;gt; "Host: ews1.vwave.net:80[\r][\n]" DEBUG [org.apache.http.wire] &amp;gt;&amp;gt; "Connection: Keep-Alive[\r][\n]" DEBUG [org.apache.http.wire] &amp;gt;&amp;gt; "User-Agent: Apache-HttpClient/4.2.3 (java 1.5)[\r][\n]" DEBUG [org.apache.http.wire] &amp;gt;&amp;gt; "Cookie: JSESSIONID=C041612511AE5606103DC6CDB2C79973[\r][\n]" DEBUG [org.apache.http.wire] &amp;gt;&amp;gt; "Cookie2: $Version=1[\r][\n]" DEBUG [org.apache.http.wire] &amp;gt;&amp;gt; "Authorization: Basic MjI5MzE2MDAxMkB2d2F2ZS5uZXQ6c2lnbmFsbWUwMQ==[\r][\n]" DEBUG [org.apache.http.wire] &amp;gt;&amp;gt; "[\r][\n]" DEBUG [org.apache.http.headers] &amp;gt;&amp;gt; POST /com.broadsoft.async/com.broadsoft.xsi-events/v2.0/channel HTTP/1.1 DEBUG [org.apache.http.headers] &amp;gt;&amp;gt; Content-Length: 233 DEBUG [org.apache.http.headers] &amp;gt;&amp;gt; Content-Type: text/plain; charset=ISO-8859-1 DEBUG [org.apache.http.headers] &amp;gt;&amp;gt; Host: ews1.vwave.net:80 DEBUG [org.apache.http.headers] &amp;gt;&amp;gt; Connection: Keep-Alive DEBUG [org.apache.http.headers] &amp;gt;&amp;gt; User-Agent: Apache-HttpClient/4.2.3 (java 1.5) DEBUG [org.apache.http.headers] &amp;gt;&amp;gt; Cookie: JSESSIONID=C041612511AE5606103DC6CDB2C79973 DEBUG [org.apache.http.headers] &amp;gt;&amp;gt; Cookie2: $Version=1 DEBUG [org.apache.http.headers] &amp;gt;&amp;gt; Authorization: Basic MjI5MzE2MDAxMkB2d2F2ZS5uZXQ6c2lnbmFsbWUwMQ== DEBUG [org.apache.http.wire] &amp;gt;&amp;gt; "&amp;lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&amp;gt;[\n]" DEBUG [org.apache.http.wire] &amp;gt;&amp;gt; "&amp;lt;Channel xmlns="http://schema.broadsoft.com/xsi"&amp;gt;[\n]" DEBUG [org.apache.http.wire] &amp;gt;&amp;gt; "&amp;lt;channelSetId&amp;gt;TempTestChannelSetId&amp;lt;/channelSetId&amp;gt;[\n]" DEBUG [org.apache.http.wire] &amp;gt;&amp;gt; "&amp;lt;priority&amp;gt;1&amp;lt;/priority&amp;gt;[\n]" DEBUG [org.apache.http.wire] &amp;gt;&amp;gt; "&amp;lt;weight&amp;gt;50&amp;lt;/weight&amp;gt;[\n]" DEBUG [org.apache.http.wire] &amp;gt;&amp;gt; "&amp;lt;expires&amp;gt;3600&amp;lt;/expires&amp;gt;[\n]" DEBUG [org.apache.http.wire] &amp;gt;&amp;gt; "&amp;lt;/Channel&amp;gt;[\n]" DEBUG [org.apache.http.wire] &amp;lt;&amp;lt; "HTTP/1.1 200 OK[\r][\n]" DEBUG [org.apache.http.wire] &amp;lt;&amp;lt; "Date: Mon, 01 Apr 2013 21:21:46 GMT[\r][\n]" DEBUG [org.apache.http.wire] &amp;lt;&amp;lt; "Server: Apache-Coyote/1.1[\r][\n]" DEBUG [org.apache.http.wire] &amp;lt;&amp;lt; "Expires: Thu, 01 Jan 1970 00:00:00 GMT[\r][\n]" DEBUG [org.apache.http.wire] &amp;lt;&amp;lt; "Content-Language: en-US[\r][\n]" DEBUG [org.apache.http.wire] &amp;lt;&amp;lt; "Cache-Control: no-store[\r][\n]" DEBUG [org.apache.http.wire] &amp;lt;&amp;lt; "Pragma: no-cache[\r][\n]" DEBUG [org.apache.http.wire] &amp;lt;&amp;lt; "Content-Type: application/xml;charset=UTF-8[\r][\n]" Path=/com.broadsoft.xsi-events[\r][\n]" DEBUG [org.apache.http.wire] &amp;lt;&amp;lt; "Keep-Alive: timeout=15, max=98[\r][\n]" DEBUG [org.apache.http.wire] &amp;lt;&amp;lt; "Connection: Keep-Alive[\r][\n]" DEBUG [org.apache.http.wire] &amp;lt;&amp;lt; "Transfer-Encoding: chunked[\r][\n]" DEBUG [org.apache.http.wire] &amp;lt;&amp;lt; "[\r][\n]" DEBUG [org.apache.http.impl.conn.DefaultClientConnection] Receiving response: HTTP/1.1 200 OK DEBUG [org.apache.http.headers] &amp;lt;&amp;lt; HTTP/1.1 200 OK DEBUG [org.apache.http.headers] &amp;lt;&amp;lt; Date: Mon, 01 Apr 2013 21:21:46 GMT DEBUG [org.apache.http.headers] &amp;lt;&amp;lt; Server: Apache-Coyote/1.1 DEBUG [org.apache.http.headers] &amp;lt;&amp;lt; Expires: Thu, 01 Jan 1970 00:00:00 GMT DEBUG [org.apache.http.headers] &amp;lt;&amp;lt; Content-Language: en-US DEBUG [org.apache.http.headers] &amp;lt;&amp;lt; Cache-Control: no-store DEBUG [org.apache.http.headers] &amp;lt;&amp;lt; Pragma: no-cache DEBUG [org.apache.http.headers] &amp;lt;&amp;lt; Content-Type: application/xml;charset=UTF-8 Path=/com.broadsoft.xsi-events DEBUG [org.apache.http.headers] &amp;lt;&amp;lt; Keep-Alive: timeout=15, max=98 DEBUG [org.apache.http.headers] &amp;lt;&amp;lt; Connection: Keep-Alive DEBUG [org.apache.http.headers] &amp;lt;&amp;lt; Transfer-Encoding: chunked WARN [org.apache.http.client.protocol.ResponseProcessCookies] Cookie rejected: "[version: 0][name: JSESSIONID][value: BC1A855C506266CB346506641C735FFC][domain: ews1.vwave.net][path: /com.broadsoft.xsi-events][expiry: null]". Illegal path attribute "/com.broadsoft.xsi-events". Path of origin: "/com.broadsoft.async/com.broadsoft.xsi-events/v2.0/channel" DEBUG [org.apache.http.impl.client.DefaultHttpClient] Connection can be kept alive for 15000 MILLISECONDS DEBUG [org.apache.http.impl.client.DefaultHttpClient] Authentication succeeded DEBUG [org.apache.http.impl.client.TargetAuthenticationStrategy] Caching 'basic' auth scheme for http://ews1.vwave.net:80 OUTPUT: http://ews1.vwave.net:80/com.broadsoft.async/com.broadsoft.xsi-events/v2.0/channel org.apache.http.entity.StringEntity@78c36c6f DEBUG [org.apache.http.wire] &amp;lt;&amp;lt; "b4[\r][\n]" DEBUG [org.apache.http.wire] &amp;lt;&amp;lt; "&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;[\n]" DEBUG [org.apache.http.wire] &amp;lt;&amp;lt; "&amp;lt;Channel xmlns="http://schema.broadsoft.com/xsi"&amp;gt;&amp;lt;channelId&amp;gt;c9d5b432-db96-4256-8771-cdb6e3a1e897&amp;lt;/channelId&amp;gt;&amp;lt;expires&amp;gt;3600&amp;lt;/expires&amp;gt;&amp;lt;/Channel&amp;gt;" DEBUG [org.apache.http.wire] &amp;lt;&amp;lt; "[\r][\n]"</body>
  </mail>
  <mail>
    <header>Re: inputStream.read() blocks at end of chunk</header>
    <body>I'm still having trouble reading full chunks when chunked encoded. &amp;#009;&amp;#009;if (bytesRead &amp;lt; buffer.length) &amp;#009;// TODO: Need to check here for multiple messages in the same chunk &amp;#009;// TODO: Detect if there are buffers for the same chunk &amp;#009;&amp;#009;BroadWorksResponse broadworksResponse = BroadWorksResponse &amp;#009;&amp;#009;if (broadworksResponse != null) Anyone have any thoughts on getting the whole chuck without blocking on read? -- View this message in context: http://httpcomponents.10934.n7.nabble.com/inputStream-read-blocks-at-end-of-chunk-tp19642p19829.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Error trying to download a Gzip file.</header>
    <body>Hi All, I use the following code and run the method multiple times, a few times I get a response in gzip which is what I expect and a few time I get a response that is completely different(non Gzip and html format) .However if I download the same URL multiple times using Mozilla or IE I consistently get the same GZIP response , Is this an error with the server I am trying to reach to , or do I need to set parameters to get a consistent response ? Thanks. The URL I am trying to download is * http://www.walmart.com/navigation6.xml.gz* , can you please let me know ? Thanks</body>
  </mail>
  <mail>
    <header>Re: Error trying to download a Gzip file.</header>
    <body>I notice you aren't checking your status code. Error response have a body/response entity too. Take a look at response.getStatusLine().getStatusCode() and getStatusReasonPhrase(). I bet the server is limiting you in the instances where you're seeing non-gziped content.</body>
  </mail>
  <mail>
    <header>Re: Error trying to download a Gzip file.</header>
    <body>Stephen, Thanks, I now checked the reason phrase and it returns "Not Found" when I get a non gzip page not found error and an OK when I successfully get a gzip file download. As I said earlier in multiple iterations , the first one is successful almost  all the time and any subsequent request after that can fail. Is there any way I can "stick" to the fist successful server instance using the HttpClient , is there any way around  ? Thanks for your help. On Mon, Apr 1, 2013 at 11:48 PM, Stephen J. Butler &amp;lt;stephen.butler@gmail.com</body>
  </mail>
  <mail>
    <header>Re: Error trying to download a Gzip file.</header>
    <body>This really doesn't sound like a problem with HttpClient. Rather, an issue with Walmart's servers. Maybe you're querying the server too often and they're rate limiting you. Or if the same pattern always works in a browser then they're sniffing your UserAgent and doing something different. In any event, if this is an approved API for Walmart.com, you need to contact them. Or just cache the response yourself in the code and use a cached value when you get a 404. There's nothing wrong with HttpClient. It's doing exactly what the server told it to do.</body>
  </mail>
  <mail>
    <header>Re: Error trying to download a Gzip file.</header>
    <body>Thanks Stephen .I completely agree with you , I am just accessing publicly available data , one thing that I would like to mention though is that I get the following warning every time this happens . *Invalid cookie header: "Set-Cookie: ". Cookie name may not be empty*. Even though I have  set a lenient cookie -policy as illustrated here in section 3.5 . http://hc.apache.org/httpcomponents-client-ga/tutorial/html/statemgmt.html#d4e777 On Tue, Apr 2, 2013 at 4:19 PM, Stephen J. Butler "</body>
  </mail>
  <mail>
    <header>Re: Error trying to download a Gzip file.</header>
    <body>Even a lenient cookie policy cannot allow a cookie with no name. Sounds like the server is having problems processing your request and is returning invalid  HTTP headers as a result. I suggest you capture the headers and check. for "</body>
  </mail>
  <mail>
    <header>How to get the default windows user/password and the domain name for the current logined user?</header>
    <body>Hi, all: When use httpcomponents protected web resource in intranet, we can provide NTCredentials with windows user/password and the domain name. But is there a way to get the default windows user/password and the domain name for the current logined user in this machine. So I can use these info to access the protected resource. Thanks very much for any reply and help. -- View this message in context: http://httpcomponents.10934.n7.nabble.com/How-to-get-the-default-windows-user-password-and-the-domain-name-for-the-current-logined-user-tp19675.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>RE: How to get the default windows user/password and the domain name for the current logined user?</header>
    <body>You could get the current user's domain and name from: http://docs.oracle.com/javase/1.5.0/docs/guide/security/jaas/spec/com/sun/security/auth/module/NTSystem.html Good luck getting the password. -----Original Message----- From: yuanyun.cn [mailto:yuanyun.cn@gmail.com] Sent: Wednesday, April 03, 2013 8:50 AM To: httpclient-users@hc.apache.org Subject: How to get the default windows user/password and the domain name for the current logined user? Hi, all: When use httpcomponents protected web resource in intranet, we can provide NTCredentials with windows user/password and the domain name. But is there a way to get the default windows user/password and the domain name for the current logined user in this machine. So I can use these info to access the protected resource. Thanks very much for any reply and help. -- View this message in context: http://httpcomponents.10934.n7.nabble.com/How-to-get-the-default-windows-user-password-and-the-domain-name-for-the-current-logined-user-tp19675.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>RE: How to get the default windows user/password and the domain name for the current logined user?</header>
    <body>Thanks for your reply. The client machine and the machine running protected resource is in same domain, and the logged-on user can access the resource with its user/password. I tried URLConnection in java, it can access the resource successfully: when URLConnection receives unauthorized error 401 for the first request, and detect the remote server supports nltm, URLConnection will create a token and add the http header like: Authorization: NTLM TlRMTVNTUAABAAAAB7IIogwA. Then the request will succeed. How can we do this using apache httpcomponents? Can httpcomponents add the Authorization token using logged-on user info automatically? Thanks. -- View this message in context: http://httpcomponents.10934.n7.nabble.com/How-to-get-the-default-windows-user-password-and-the-domain-name-for-the-current-logined-user-tp19675p19709.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Correct way to retrieve the associated ClientConnectionManager from a HttpClient instance</header>
    <body>Hi all mates! when the application shuts down, I would like to shutdown the associated ClientConnectionManager, but I see that since 4.3 version, HttpClient# getConnectionManager() is a deprecated method. Can you suggest me please what is the correct way to retrieve the associated ClientConnectionManager from a HttpClient instance? Many thanks in advance, all the best! -Simo http://people.apache.org/~simonetripodi/ http://simonetripodi.livejournal.com/ http://twitter.com/simonetripodi http://www.99soft.org/</body>
  </mail>
  <mail>
    <header>Re: Correct way to retrieve the associated ClientConnectionManager from a HttpClient instance</header>
    <body>Hi Simone, I guess you are using a CloseableHttpClient. Then to shutdown properly the ConnectionManager, you just have to call .close() method. FX</body>
  </mail>
  <mail>
    <header>reconfiguring a running HttpClient instance</header>
    <body>Hi all again mates, sorry for the beginner's question, but I am now in the middle of the need of reconfiguring a running instance of the HttpClient - is there any way, without using the deprecated methods, to reconfigure some parameters, such us the proxy and so on? Many thanks in advance, all the best! -Simo http://people.apache.org/~simonetripodi/ http://simonetripodi.livejournal.com/ http://twitter.com/simonetripodi http://www.99soft.org/</body>
  </mail>
  <mail>
    <header>Re: reconfiguring a running HttpClient instance</header>
    <body>No, you cannot reconfigure an existing instance. An HttpClient is now an immutable object. If you need to change some settings, you have to create a new HtpClient.</body>
  </mail>
  <mail>
    <header>Re: reconfiguring a running HttpClient instance</header>
    <body>This is absolutely true. However, generally one should rarely need to reconfigure an existing HttpClient instance. Pretty much all HttpClient level settings are just defaults that can always be overridden either at the request level (through RequestConfig) or at the session level (through HttpContext). Hope this helps Oleg</body>
  </mail>
  <mail>
    <header>Re: Authenticate Proxy using currently logged on domain user's credentials</header>
    <body>Oleg, Sorry for replying to this old post. But I am facing the same problem when use http client. Java URLConnection can use the credential of current logged-on user to access the protected web resource in remote machine which is in same domain. But http client can't, I have to add a NTCredential via httpclient.getCredentialsProvider().setCredentials which is impossible in product environment as the application has to ask user for this information. So I am wondering whether there is a way to do this now via httpclient? Thanks... -- View this message in context: http://httpcomponents.10934.n7.nabble.com/Authenticate-Proxy-using-currently-logged-on-domain-user-s-credentials-tp11338p19712.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>RE: SSL verification - is it a warning, can it be made strict?</header>
    <body>Hi, The problem seems to have disappeared - looks like it was a 'load' related issue. Thanks, Chris -----Original Message----- From: Mark Claassen [mailto:mac01@donnell.com] Sent: 28 March 2013 20:39 To: 'HttpClient User Discussion' Subject: RE: SSL verification - is it a warning, can it be made strict? I am jumping in on a conversation I have not really followed, so I apologize if I am just adding noise to your conversion. When I saw you mention random ConnectionReset errors, I recalled when I was getting this error. It turned out to be something in the Tomcat configuration.  If you are using Tomcat, you may want to try to add this to your connector: maxKeepAliveRequests="-1" Tomcat, by default, closes persistent connections periodically.  With the ConnectionLinger set to 0 (as we had it), this caused problems. Here is what Oleg said in an email: -----Original Message----- From: Oleg Kalnichevski [mailto:olegk@apache.org] Sent: Tuesday, January 29, 2013 3:09 PM To: HttpClient User Discussion Subject: Re: Connection Reset errors -----Original Message----- From: Kimpton, C (Chris) [mailto:Chris.Kimpton@rabobank.com] Sent: Thursday, March 28, 2013 8:04 AM To: 'httpclient-users@hc.apache.org' Subject: RE: SSL verification - is it a warning, can it be made strict? Hi, I am trying it with less threads and that seems to help. I am also getting (and have been all along) intermittent connection issues, like so: java.net.SocketException: Connection reset 12:02:06:752|TH12 INFO: Backtrace: I wonder if its possible that if these occur during the SSL connection part that it results in the SSLPeerUnverified error? Regards, Chris _____________________________________________________________ This email (including any attachments to it) is confidential, legally privileged, subject to copyright and is sent for the personal attention of the intended recipient only. If you have received this email in error, please advise us immediately and delete it. You are notified that disclosing, copying, distributing or taking any action in reliance on the contents of this information is strictly prohibited. Although we have taken reasonable precautions to ensure no viruses are present in this email, we cannot accept responsibility for any loss or damage arising from the viruses in this email or attachments. We exclude any liability for the content of this email, or for the consequences of any actions taken on the basis of the information provided in this email or its attachments, unless that information is subsequently confirmed in writing. _____________________________________________________________</body>
  </mail>
  <mail>
    <header>Proxy exceptions</header>
    <body>Hi all mates, is there any way to setup exception for proxy, in HttpClient instances? I mean, domains such as "localhost" or "127.0.0.1" should be skipped by proxy resolution, as well as more domains which could be configured by users - is there any API to achieve it? Many thanks in advance, all the best! -Simo http://people.apache.org/~simonetripodi/ http://simonetripodi.livejournal.com/ http://twitter.com/simonetripodi http://www.99soft.org/</body>
  </mail>
  <mail>
    <header>Re: Proxy exceptions</header>
    <body>This is what HttpRoutePlanner is for. One can selectively construct different routes based on request properties, target host or contextual attributes. Hope this helps Oleg</body>
  </mail>
  <mail>
    <header>Re: Proxy exceptions</header>
    <body>Thanks Oleg, it does indeed! All the best, -Simo http://people.apache.org/~simonetripodi/ http://simonetripodi.livejournal.com/ http://twitter.com/simonetripodi http://www.99soft.org/</body>
  </mail>
  <mail>
    <header>Re: Proxy exceptions</header>
    <body>Hi again Oleg, please apologise for the silly question, but... could you provide me please a sample of how to use the RoutePlanner in the way I described? Sorry, but I haven't figured out how to... many thanks in advance! best, -Simo http://people.apache.org/~simonetripodi/ http://simonetripodi.livejournal.com/ http://twitter.com/simonetripodi http://www.99soft.org/</body>
  </mail>
  <mail>
    <header>Re: Proxy exceptions</header>
    <body>Something like that should probably suffice. Hope this helps Oleg --- public HttpRoute determineRoute(</body>
  </mail>
  <mail>
    <header>Re: Proxy exceptions</header>
    <body>priceless! thanks a lot Oleg for your kind help, much more than appreciated! all the best, -Simo http://people.apache.org/~simonetripodi/ http://simonetripodi.livejournal.com/ http://twitter.com/simonetripodi http://www.99soft.org/</body>
  </mail>
  <mail>
    <header>Re: Proxy exceptions</header>
    <body>Hi again Oleg, I managed my RoutePlanner implementation by extending the DefaultRoutePlanner, which is simple and straightforward :) Now my question is: is there any way to set Proxy's username/password inside the RoutePlanner? Many thanks in advance, all the best! -Simo http://people.apache.org/~simonetripodi/ http://simonetripodi.livejournal.com/ http://twitter.com/simonetripodi http://www.99soft.org/</body>
  </mail>
  <mail>
    <header>Re: Proxy exceptions</header>
    <body>Yes, there is. One can get hold of the actual credentials provider from HttpContext. However, I would recommend keeping route planning and credential management aspects separate. Is there a really good reason to meddle with user credentials from inside HttpRoutePlanner implementation? Cheers Oleg</body>
  </mail>
  <mail>
    <header>Re: Proxy exceptions</header>
    <body>Hi Oleg, thanks again for your help! All these questions are about looking for a solution for HTTPCLIENT-1238: the scenario is that a power-user can add/upload/delete proxy configurations dynamically, so the best moment to determine which proxy cinfiguration is available (if any) is when DefaultRoutePlanner#determineRoute() is invoked... in that way, we can avoid an HttpClient instance is built with a Proxy configuration which could be not available at the time of the invocation. Anyway, I am open to every idea, since I am not expert about HttpClient APIs :) Do you have any suggestion? Many thanks in advance, all the best! -Simo http://people.apache.org/~simonetripodi/ http://simonetripodi.livejournal.com/ http://twitter.com/simonetripodi http://www.99soft.org/ be</body>
  </mail>
  <mail>
    <header>Re: Proxy exceptions</header>
    <body>If I had to implement this feature I would consider using a custom route planner and a credentials provider implementations both backed by the same structure (a proxy selector of some sort). This would ensure consistency of proxy settings without having to manually update the credential provider from inside the route planner. Hope this helps Oleg me should be be or</body>
  </mail>
  <mail>
    <header>Re: Proxy exceptions</header>
    <body>It really helps, thanks a lot Oleg! :) best, -Simo http://people.apache.org/~simonetripodi/ http://simonetripodi.livejournal.com/ http://twitter.com/simonetripodi http://www.99soft.org/ in HttpClient should be could be host or</body>
  </mail>
  <mail>
    <header>EntityUtils.consume question</header>
    <body>Hello,  Is there any overhead in executing a EntityUtils.consume(httpEntity) if the response has been completely consumed before? (reading and closing the entity.getContent() inputStream)  Thanks,  Joan.</body>
  </mail>
  <mail>
    <header>Re: EntityUtils.consume question</header>
    <body>This can depend on HttpEntity implementation but for the one used internally by HttpClient the overhead is minimal. Oleg</body>
  </mail>
  <mail>
    <header>receiving a multipart entity at a http server</header>
    <body>Hi, I am trying to receive a multipart entity at my http server and am having trouble to parse it. The request includes a header: boundary=-------------------------acebdf13572468 my code does the following: and when I look at the the read bytes they hold: includes a BasicHttpEntity and when I read it I see the content is: ---------------------------acebdf13572468 filename="Data-Did_2013-03-03_06-05-15-6352000_Fid_114.plf" Content-Type: application/octet-stream I actually need the bytes in the sent file. Can someone send me a short code example on how to do it? Regards, Nir</body>
  </mail>
  <mail>
    <header>Re: receiving a multipart entity at a http server</header>
    <body>Nir HttpClient does not provide a mime parser. You should consider using either Commons Upload [1] or Mime4j [2] to parse multipart content on the server side. Oleg [1] http://commons.apache.org/proper/commons-fileupload/ [2] http://james.apache.org/mime4j/index.html</body>
  </mail>
  <mail>
    <header>Re: receiving a multipart entity at a http server</header>
    <body>Oleg. thank's a lot. I started to understand that this is the case and you assured my assumption. regards, Nir</body>
  </mail>
  <mail>
    <header>AysncHttpclient TimeoutException after 2 days of running</header>
    <body>Hello, I am using Aysnc Httpclient with total of  12000 connections and 512 connection per host. The client works fine for around 2 days and after that all the request fail with below exception.  Any one have any clue on how to debug this ? Looks like a leak of connections to me. Any suggestions, tips ?                   final AsyncHttpClient asyncClient = new AsyncHttpClient(                 new AsyncHttpClientConfig.Builder()                 .setCompressionEnabled(config.getCompressEnabled())                 .setConnectionTimeoutInMs(connectionTimeout)                 .setMaximumConnectionsPerHost(maxConnectionsPerService)         ShutdownHookSorter.INSTANCE.registerShutdownResource( 2013-04-10 00:35:52 Sender$HttpCallback [WARN] Failed Http request: POST http://xyz/ HTTP/1.1 : duration(MS): 50529 java.util.concurrent.TimeoutException at org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests(AbstractNIOConnPool.java:244) at org.apache.http.nio.pool.AbstractNIOConnPool.lease(AbstractNIOConnPool.java:192) at org.apache.http.impl.nio.conn.PoolingClientAsyncConnectionManager.leaseConnection(PoolingClientAsyncConnectionManager.java:176) at org.apache.http.impl.nio.client.DefaultAsyncRequestDirector.requestConnection(DefaultAsyncRequestDirector.java:629) at org.apache.http.impl.nio.client.DefaultAsyncRequestDirector.start(DefaultAsyncRequestDirector.java:233) at org.apache.http.impl.nio.client.AbstractHttpAsyncClient.execute(AbstractHttpAsyncClient.java:540) at org.apache.http.impl.nio.client.AbstractHttpAsyncClient.execute(AbstractHttpAsyncClient.java:554) at org.apache.http.impl.nio.client.AbstractHttpAsyncClient.execute(AbstractHttpAsyncClient.java:584) at org.apache.http.impl.nio.client.AbstractHttpAsyncClient.execute(AbstractHttpAsyncClient.java:569) at com.yahoo.jedi.events.vespa.VespaSender.sendUpdate(VespaSender.java:59) at com.yahoo.jedi.events.vespa.FlagEventListener.onMessage(FlagEventListener.java:101) at org.apache.activemq.ActiveMQMessageConsumer.dispatch(ActiveMQMessageConsumer.java:1321) at org.apache.activemq.ActiveMQSessionExecutor.dispatch(ActiveMQSessionExecutor.java:131) at org.apache.activemq.ActiveMQSessionExecutor.iterate(ActiveMQSessionExecutor.java:202) at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:129) at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:47) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:722) Thanks Jaikit</body>
  </mail>
  <mail>
    <header>Re: AysncHttpclient TimeoutException after 2 days of running</header>
    <body>My bad.. I pasted Ning client's initialization. Please find below Apache Httpclient initialization.      // Set up the scheme Thanks Hello, I am using Aysnc Httpclient with total of  12000 connections and 512 connection per host. The client works fine for around 2 days and after that all the request fail with below exception.  Any one have any clue on how to debug this ? Looks like a leak of connections to me. Any suggestions, tips ?                   final AsyncHttpClient asyncClient = new AsyncHttpClient(                 new AsyncHttpClientConfig.Builder()                 .setCompressionEnabled(config.getCompressEnabled())                 .setConnectionTimeoutInMs(connectionTimeout)                 .setMaximumConnectionsPerHost(maxConnectionsPerService)         ShutdownHookSorter.INSTANCE.registerShutdownResource( 2013-04-10 00:35:52 Sender$HttpCallback [WARN] Failed Http request: POST http://xyz/ HTTP/1.1 : duration(MS): 50529 java.util.concurrent.TimeoutException at org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests(AbstractNIOConnPool.java:244) at org.apache.http.nio.pool.AbstractNIOConnPool.lease(AbstractNIOConnPool.java:192) at org.apache.http.impl.nio.conn.PoolingClientAsyncConnectionManager.leaseConnection(PoolingClientAsyncConnectionManager.java:176) at org.apache.http.impl.nio.client.DefaultAsyncRequestDirector.requestConnection(DefaultAsyncRequestDirector.java:629) at org.apache.http.impl.nio.client.DefaultAsyncRequestDirector.start(DefaultAsyncRequestDirector.java:233) at org.apache.http.impl.nio.client.AbstractHttpAsyncClient.execute(AbstractHttpAsyncClient.java:540) at org.apache.http.impl.nio.client.AbstractHttpAsyncClient.execute(AbstractHttpAsyncClient.java:554) at org.apache.http.impl.nio.client.AbstractHttpAsyncClient.execute(AbstractHttpAsyncClient.java:584) at org.apache.http.impl.nio.client.AbstractHttpAsyncClient.execute(AbstractHttpAsyncClient.java:569) at com.yahoo.jedi.events.vespa.VespaSender.sendUpdate(VespaSender.java:59) at com.yahoo.jedi.events.vespa.FlagEventListener.onMessage(FlagEventListener.java:101) at org.apache.activemq.ActiveMQMessageConsumer.dispatch(ActiveMQMessageConsumer.java:1321) at org.apache.activemq.ActiveMQSessionExecutor.dispatch(ActiveMQSessionExecutor.java:131) at org.apache.activemq.ActiveMQSessionExecutor.iterate(ActiveMQSessionExecutor.java:202) at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:129) at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:47) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:722) Thanks Jaikit</body>
  </mail>
  <mail>
    <header>Re: AysncHttpclient TimeoutException after 2 days of running</header>
    <body>Adding some more details: Total Request per second: 250  (hitting 19 hosts) Also I am using default IOReactorConfig which has default socket timeout and connection timeout which according to documentation is value for non blocking operation. However I do set HttpParams in AsynClient 1. Do I also need to set sockettimeout, connectiontimeout in IOReactorConfig ? 2. Selection period is default to 1000ms =&amp;gt; any suggestions if that is good enough for 250 rps 3.  new PoolingClientAsyncConnectionManager(ioreactor, ymailRegistry); ==&amp;gt; This sets timeToLive to -1 . TimetoLive is later used to expire leased connection. Can this lead to most of the request being timeout ? Thanks My bad.. I pasted Ning client's initialization. Please find below Apache Httpclient initialization.      // Set up the scheme Thanks Hello, I am using Aysnc Httpclient with total of  12000 connections and 512 connection per host. The client works fine for around 2 days and after that all the request fail with below exception.  Any one have any clue on how to debug this ? Looks like a leak of connections to me. Any suggestions, tips ?                   final AsyncHttpClient asyncClient = new AsyncHttpClient(                 new AsyncHttpClientConfig.Builder()                 .setCompressionEnabled(config.getCompressEnabled())                 .setConnectionTimeoutInMs(connectionTimeout)                 .setMaximumConnectionsPerHost(maxConnectionsPerService)         ShutdownHookSorter.INSTANCE.registerShutdownResource( 2013-04-10 00:35:52 Sender$HttpCallback [WARN] Failed Http request: POST http://xyz/ HTTP/1.1 : duration(MS): 50529 java.util.concurrent.TimeoutException at org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests(AbstractNIOConnPool.java:244) at org.apache.http.nio.pool.AbstractNIOConnPool.lease(AbstractNIOConnPool.java:192) at org.apache.http.impl.nio.conn.PoolingClientAsyncConnectionManager.leaseConnection(PoolingClientAsyncConnectionManager.java:176) at org.apache.http.impl.nio.client.DefaultAsyncRequestDirector.requestConnection(DefaultAsyncRequestDirector.java:629) at org.apache.http.impl.nio.client.DefaultAsyncRequestDirector.start(DefaultAsyncRequestDirector.java:233) at org.apache.http.impl.nio.client.AbstractHttpAsyncClient.execute(AbstractHttpAsyncClient.java:540) at org.apache.http.impl.nio.client.AbstractHttpAsyncClient.execute(AbstractHttpAsyncClient.java:554) at org.apache.http.impl.nio.client.AbstractHttpAsyncClient.execute(AbstractHttpAsyncClient.java:584) at org.apache.http.impl.nio.client.AbstractHttpAsyncClient.execute(AbstractHttpAsyncClient.java:569) at com.yahoo.jedi.events.vespa.VespaSender.sendUpdate(VespaSender.java:59) at com.yahoo.jedi.events.vespa.FlagEventListener.onMessage(FlagEventListener.java:101) at org.apache.activemq.ActiveMQMessageConsumer.dispatch(ActiveMQMessageConsumer.java:1321) at org.apache.activemq.ActiveMQSessionExecutor.dispatch(ActiveMQSessionExecutor.java:131) at org.apache.activemq.ActiveMQSessionExecutor.iterate(ActiveMQSessionExecutor.java:202) at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:129) at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:47) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:722) Thanks Jaikit</body>
  </mail>
  <mail>
    <header>Re: AysncHttpclient TimeoutException after 2 days of running</header>
    <body>Jaikit Apparently for some reason the connection manager runs out of connections (the total number of leased connections exceeds 12000). This suggests a connection leak. Could you please run your code with context logging for connection management / request execution turned on as described here? http://hc.apache.org/httpcomponents-client-ga/logging.html You should be able to see when connections start to pile up in the connection pool and what kind of request or condition may have lead to it. I can help analyzing the log. You might want to reduce the connection pool size to minimum before running the test. Oleg HTTP/1.1 : duration(MS): 50529</body>
  </mail>
  <mail>
    <header>Re: AysncHttpclient TimeoutException after 2 days of running</header>
    <body>Hi Oleg, Thanks for suggestion. I enabled context logging and I ran 2 set of tests. One with connectionPerService set to 512 and another set to just 1 Case1: ConnectionsPerService: 512, TotalConnections: 12288 2013-04-11 00:39:31 DefaultHttpAsyncClient [DEBUG] [exchange: 322920] Request connection for 2013-04-11 00:39:31 PoolingClientAsyncConnectionManager [DEBUG] Connection request: [route: of 12288] After 322920 requests - all request fails with TimeoutException.  Case2: ConnectionsPerService: 1, TotalConnections: 5 2013-04-11 01:09:33 DefaultHttpAsyncClient [DEBUG] [exchange: 54989] Request connection for 2013-04-11 00:58:20 PoolingClientAsyncConnectionManager [DEBUG] Connection request: [route: 5]  After 54989 - all request fails with TimeoutException I do not see any other exception other than TimeoutException after connectiontimeout which I set to 2s. I am not sure where the leak is :( . Any ideas ? Any other  Also can I use TimeToLive on leased connection to overcome leak ? Thanks, Jaikit Jaikit Apparently for some reason the connection manager runs out of connections (the total number of leased connections exceeds 12000). This suggests a connection leak. Could you please run your code with context logging for connection management / request execution turned on as described here? http://hc.apache.org/httpcomponents-client-ga/logging.html You should be able to see when connections start to pile up in the connection pool and what kind of request or condition may have lead to it. I can help analyzing the log. You might want to reduce the connection pool size to minimum before running the test. Oleg HTTP/1.1 : duration(MS): 50529</body>
  </mail>
  <mail>
    <header>Re: AysncHttpclient TimeoutException after 2 days of running</header>
    <body>Would you be able to upgrade to the latest snapshot off svn trunk, make sure your code doesnt use any deprecated functionality, re-run the tests and pass the complete detailed logs onto me? Oleg -- Sent from my phone. Please excuse my brevity.</body>
  </mail>
  <mail>
    <header>Re: AysncHttpclient TimeoutException after 2 days of running</header>
    <body>Yes - I can but I would need couple of days. Once I am done, I will let you know the results and logs. Thanks Would you be able to upgrade to the latest snapshot off svn trunk, make sure your code doesnt use any deprecated functionality, re-run the tests and pass the complete detailed logs onto me? Oleg -- Sent from my phone. Please excuse my brevity.</body>
  </mail>
  <mail>
    <header>Core dump caused by org.apache.http.client.protocol.RequestAddCookies.process</header>
    <body>Hi Httpclient-users, We are using HttpAsyncClient library to do web crawling. Basically we are just using the method provided by the sample code (http://hc.apache.org/httpcomponents-asyncclient-dev/httpasyncclient/examples/org/apache/http/examples/nio/client/AsyncClientHttpExchangeFutureCallback.java), but has a much larger request size (~9000). While our program runs perfectly fine on my laptop (MacOSX 10.8.2, Intel i5), often times it core dumps on our cluster. Furthermore, even the program aborted for one time, when we re-started it, it became normal. The JVM log indicates that it is caused by org.apache.http.client.protocol.RequestAddCookies.process. We found a relevant issue at http://mail-archives.apache.org/mod_mbox/hc-httpclient-users/201208.mbox/%3CCAOGo0VaG+W8Rv54d2dYBk1kv3Rb0tO0eVKvS-REq_yFTk31a4Q@mail.gmail.com%3E, but there was no solution. Could you help to look into this issue? Also, We have the core dump file. Do you have a FTP server so we can drop the file? Thanks a lot ! --------------------------------------------------------- JVM Log File (only the very beginning): --------------------------------------------------------- # # A fatal error has been detected by the Java Runtime Environment: # #  SIGSEGV (0xb) at pc=0x00007f284d1d9967, pid=1985, tid=139810931042048 # # JRE version: 7.0_17-b02 # Java VM: Java HotSpot(TM) 64-Bit Server VM (23.7-b01 mixed mode linux-amd64 compressed oops) # Problematic frame: # J  org.apache.http.client.protocol.RequestAddCookies.process(Lorg/apache/http/HttpRequest;Lorg/apache/http/protocol/HttpContext;)V # # Failed to write core dump. Core dumps have been disabled. To enable core dumping, try "ulimit -c unlimited" before starting Java again # # If you would like to submit a bug report, please visit: #   http://bugreport.sun.com/bugreport/crash.jsp # -------------------------------------------------- Java Runtime arguments ------------------------------------------------- -Xmx4g ---------------------------------------------------- System Information: ---------------------------------------------------- $ uname -a Linux ip-10-212-71-144 3.2.0-36-virtual #57-Ubuntu SMP Tue Jan 8 22:04:49 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux $ java -version java version "1.7.0_17" Java(TM) SE Runtime Environment (build 1.7.0_17-b02) Java HotSpot(TM) 64-Bit Server VM (build 23.7-b01, mixed mode) $ cat /proc/meminfo  | head - n 1 MemTotal:        7629484 kB $ cat /proc/cpuinfo processor&amp;#009;: 0 vendor_id&amp;#009;: GenuineIntel cpu family&amp;#009;: 6 model&amp;#009;&amp;#009;: 23 model name&amp;#009;: Intel(R) Xeon(R) CPU           E5430  @ 2.66GHz stepping&amp;#009;: 10 microcode&amp;#009;: 0xa07 cpu MHz&amp;#009;&amp;#009;: 2666.760 cache size&amp;#009;: 6144 KB fpu&amp;#009;&amp;#009;: yes fpu_exception&amp;#009;: yes cpuid level&amp;#009;: 13 wp&amp;#009;&amp;#009;: yes flags&amp;#009;&amp;#009;: fpu tsc msr pae cx8 cmov pat pse36 clflush dts mmx fxsr sse sse2 ss ht pbe syscall nx lm constant_tsc arch_perfmon pebs bts rep_good nopl pni dtes64 monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr pdcm dca sse4_1 lahf_lm dtherm tpr_shadow vnmi flexpriority bogomips&amp;#009;: 5333.52 clflush size&amp;#009;: 64 cache_alignment&amp;#009;: 64 address sizes&amp;#009;: 38 bits physical, 48 bits virtual power management: processor&amp;#009;: 1 vendor_id&amp;#009;: GenuineIntel cpu family&amp;#009;: 6 model&amp;#009;&amp;#009;: 23 model name&amp;#009;: Intel(R) Xeon(R) CPU           E5430  @ 2.66GHz stepping&amp;#009;: 10 microcode&amp;#009;: 0xa07 cpu MHz&amp;#009;&amp;#009;: 2666.760 cache size&amp;#009;: 6144 KB fpu&amp;#009;&amp;#009;: yes fpu_exception&amp;#009;: yes cpuid level&amp;#009;: 13 wp&amp;#009;&amp;#009;: yes flags&amp;#009;&amp;#009;: fpu tsc msr pae cx8 cmov pat pse36 clflush dts mmx fxsr sse sse2 ss ht pbe syscall nx lm constant_tsc arch_perfmon pebs bts rep_good nopl pni dtes64 monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr pdcm dca sse4_1 lahf_lm dtherm tpr_shadow vnmi flexpriority bogomips&amp;#009;: 5333.52 clflush size&amp;#009;: 64 cache_alignment&amp;#009;: 64 address sizes&amp;#009;: 38 bits physical, 48 bits virtual power management:</body>
  </mail>
  <mail>
    <header>Re: Core dump caused by org.apache.http.client.protocol.RequestAddCookies.process</header>
    <body>Sorry I forgot to mention that we are using HttpAsyncClient 4.0-beta3. Thanks, Yu the method provided by the sample code (http://hc.apache.org/httpcomponents-asyncclient-dev/httpasyncclient/examples/org/apache/http/examples/nio/client/AsyncClientHttpExchangeFutureCallback.java), but has a much larger request size (~9000). it core dumps on our cluster. Furthermore, even the program aborted for one time, when we re-started it, it became normal. The JVM log indicates that it is caused by org.apache.http.client.protocol.RequestAddCookies.process. We found a relevant issue at http://mail-archives.apache.org/mod_mbox/hc-httpclient-users/201208.mbox/%3CCAOGo0VaG+W8Rv54d2dYBk1kv3Rb0tO0eVKvS-REq_yFTk31a4Q@mail.gmail.com%3E, but there was no solution. Could you help to look into this issue? Also, We have the core dump file. Do you have a FTP server so we can drop the file? oops) "ulimit -c unlimited" before starting Java again x86_64 x86_64 GNU/Linux nx lm constant_tsc arch_perfmon pebs bts rep_good nopl pni dtes64 monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr pdcm dca sse4_1 lahf_lm dtherm tpr_shadow vnmi flexpriority nx lm constant_tsc arch_perfmon pebs bts rep_good nopl pni dtes64 monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr pdcm dca sse4_1 lahf_lm dtherm tpr_shadow vnmi flexpriority</body>
  </mail>
  <mail>
    <header>Re: Core dump caused by org.apache.http.client.protocol.RequestAddCookies.process</header>
    <body>the method provided by the sample code (http://hc.apache.org/httpcomponents-asyncclient-dev/httpasyncclient/examples/org/apache/http/examples/nio/client/AsyncClientHttpExchangeFutureCallback.java), but has a much larger request size (~9000). times it core dumps on our cluster. Furthermore, even the program aborted for one time, when we re-started it, it became normal. The JVM log indicates that it is caused by org.apache.http.client.protocol.RequestAddCookies.process. We found a relevant issue at http://mail-archives.apache.org/mod_mbox/hc-httpclient-users/201208.mbox/%3CCAOGo0VaG+W8Rv54d2dYBk1kv3Rb0tO0eVKvS-REq_yFTk31a4Q@mail.gmail.com%3E, but there was no solution. Could you help to look into this issue? Also, We have the core dump file. Do you have a FTP server so we can drop the file? oops) try "ulimit -c unlimited" before starting Java again Anything that results in segmentation fault inside JRE and a core dump is most likely to be a JVM or JIT compile bug. I do not think there is anything I could to help you other than suggesting to upgrade to the latest JRE 1.7 or downgrade to the latest JRE 1.6 and see if that makes any difference or reporting the problem to Oracle. Oleg</body>
  </mail>
  <mail>
    <header>Re: [twitter-semantic-search] Core dump caused by org.apache.http.client.protocol.RequestAddCookies.process</header>
    <body>Hi Oleg, Thanks for your advice. After degrading from JVM 1.7 to JVM 1.6.0_43, the issue seems to be resolved, at least for now. Thanks, Yu using the method provided by the sample code (http://hc.apache.org/httpcomponents-asyncclient-dev/httpasyncclient/examples/org/apache/http/examples/nio/client/AsyncClientHttpExchangeFutureCallback.java), but has a much larger request size (~9000). often times it core dumps on our cluster. Furthermore, even the program aborted for one time, when we re-started it, it became normal. The JVM log indicates that it is caused by org.apache.http.client.protocol.RequestAddCookies.process. We found a relevant issue at http://mail-archives.apache.org/mod_mbox/hc-httpclient-users/201208.mbox/%3CCAOGo0VaG+W8Rv54d2dYBk1kv3Rb0tO0eVKvS-REq_yFTk31a4Q@mail.gmail.com%3E, but there was no solution. Could you help to look into this issue? Also, We have the core dump file. Do you have a FTP server so we can drop the file? compressed oops) try "ulimit -c unlimited" before starting Java again</body>
  </mail>
  <mail>
    <header>Smartcard (Cac) remote authentication</header>
    <body>Gentlemen, I am needing to perform a routine with HttpClient, every day I need to connect to a website that requires authentication using smart card. I connect this website and then check if there is any notification to me. I would like to automate this routine, but I'm standing on the state of the smart card authentication, needed a light from you, how it can be possible to pass this check. The remote server which I want to connect, use the SEAM framework. Any tips on how to do this? Best regards! -- View this message in context: http://httpcomponents.10934.n7.nabble.com/Smartcard-Cac-remote-authentication-tp19770.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>RE: Smartcard (Cac) remote authentication</header>
    <body>Hopefully someone will respond to this beside me...I am curious to read the replies. What OS are you using? I did something similar to this, although my case was different enough that this is probably not going to be too helpful. What I had to do is use HttpClient to connect to a webserver using a smart card containing the client's certificate.  However, the client was accessing my app via Webstart.  The clients were on Windows.  Webstart has all the stuff necessary to deal with the smartcard.  (Probably through Windows native APIs.)  All I really needed to do was to force HttpClient to use the HttpsURLConnection default SSL socket factory.  In the older version of HttpClient, this was a bit tricky, but with the newer versions of HttpClient, using the default socket factory is easy. Mark -----Original Message----- From: Rodrigoferra [mailto:rodrigof.php@gmail.com] Sent: Thursday, April 11, 2013 11:24 AM To: httpclient-users@hc.apache.org Subject: Smartcard (Cac) remote authentication Gentlemen, I am needing to perform a routine with HttpClient, every day I need to connect to a website that requires authentication using smart card. I connect this website and then check if there is any notification to me. I would like to automate this routine, but I'm standing on the state of the smart card authentication, needed a light from you, how it can be possible to pass this check. The remote server which I want to connect, use the SEAM framework. Any tips on how to do this? Best regards! -- View this message in context: http://httpcomponents.10934.n7.nabble.com/Smartcard-Cac-remote-authentication-tp19770.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: Smartcard (Cac) remote authentication</header>
    <body>not going to be too helpful. the client's certificate.  However, the all the stuff necessary to deal with the force HttpClient to use the HttpsURLConnection but with the newer versions of HttpClient, There is no black magic involved in making HttpClient use SSL material stored on an external medium such as a smart card. All it takes an SSLContext or SSLSocketFactorty instance created based on the content of the smart card. How exactly this can be done depends I cannot tell but the card reader vendor should. Hope this helps somewhat. Oleg that requires authentication using smart authentication, needed a light from you, how the SEAM framework.</body>
  </mail>
  <mail>
    <header>Re: Smartcard (Cac) remote authentication</header>
    <body>Thanks for the replyes! Thats the point, I need to get in touch with the vendor to apply for it! Best regards! Rodrigo Ferrari (48) 9699 0008 TIM escreveu: is probably not going to be too helpful. containing the client's certificate.  However, the has all the stuff necessary to deal with the to force HttpClient to use the HttpsURLConnection tricky, but with the newer versions of HttpClient, a website that requires authentication using smart card authentication, needed a light from you, how use the SEAM framework. -- View this message in context: http://httpcomponents.10934.n7.nabble.com/Smartcard-Cac-remote-authentication-tp19770p19846.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>4.2.3 gzip caching still broken?</header>
    <body>I'm using 4.2.3 with gzip compression and CachingHttpClient. Initially I implemented the custom request/response interceptors as described here: https://hc.apache.org/httpcomponents-client-ga/httpclient/examples/org/apache/http/examples/client/ClientGZipContentCompression.java which did not work, resulting in the issue described here: https://issues.apache.org/jira/browse/HTTPCLIENT-1163. It appeared to me from reading this issue that using the "CompressionDecorator" would resolve the issue so I modified my code to use DecompressingHttpClient ( https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/impl/client/DecompressingHttpClient.html) but the issue still persists as we can see from the below log output. It is caching using one (broken?) key but then looking it up using a different (correct?) key which is consistent with the bug above: https://www.surespot.me:8080/images/b:f1/165 uri: https://www.surespot.me:8080/images/b:f1/165] Am I missing something or is this still broken? Thanks, Adam</body>
  </mail>
  <mail>
    <header>Re: 4.2.3 gzip caching still broken?</header>
    <body>I have done some more research on this and it appears that the caching is working, however it is adding 2 entries to the backing cache: one each with cache miss for the get with the pre-pended url, and uses double the storage space in whatever mechanism you are backing the client with. There was a bug in my backing store which led to me initially believing it was not caching the (correct) url. tl;dr it is caching but adding a duplicate invalid entry that never gets hit. which</body>
  </mail>
  <mail>
    <header>Re: 4.2.3 gzip caching still broken?</header>
    <body>Adam This problem has been fixed properly in the 4.3 branch. Give 4.3-beta1 a try. Oleg which</body>
  </mail>
  <mail>
    <header>Re: 4.2.3 gzip caching still broken?</header>
    <body>Hi Adam, This is related to the way the caching module handles cache variants. In this case I suspect the origin is (correctly) setting Vary: Accept-Encoding. There are two cache entries here; however only one of them should have the response body present, IIRC. The version without the prepended request headers is treated as the "parent" entry and the one with the headers is the actual cached variant. This structure is in place because certain requests that pass through the cache are required to invalidate all the variants for that URL, so we need someplace to tie those together. It doubles the header space used but not double the response body space. As there are more variants the overhead for the duplicated headers drops further. request come through it did not have the Accept-Encoding: gzip on it at that point. I think this means you have the DecompressingHttpClient and CachingHttpClient wired up backwards. You want the CachingHttpClient as close to the final DefaultHttpClient as possible. So these should be layered as: DecompressingHttpClient -&amp;gt; CachingHttpClient -&amp;gt; DefaultHttpClient One of the updates in the 4.3 release will take more care of this wiring for you out of the box. Jon ........ Jon Moore which</body>
  </mail>
  <mail>
    <header>Re: 4.2.3 gzip caching still broken?</header>
    <body>Jon and Oleg, Thanks for your responses. Caching both the variant and non variant URLs makes sense, thanks for the explanation, but I'm still not sure it's functioning correctly. In BasicHttpCache I don't see how it would cache both URLs without my faulty updateEntry behavior. If I were checking the key set by the parentUri in updateEntry, this would return null because putEntry is never called with the parentUri explicitly. Unless you are saying updateEntry is supposed to update non-existent URLs? Oleg, the storeVariantEntry code in BasicHttpCache looks the same as 4.2.3 here: https://github.com/apache/httpclient/blob/trunk/httpclient-cache/src/main/java/org/apache/http/impl/client/cache/BasicHttpCache.java so I'm not sure how it could be fixed? Thanks, Adam</body>
  </mail>
  <mail>
    <header>Re: 4.2.3 gzip caching still broken?</header>
    <body>Adam, I was more referring to refactoring of the way the caching aspect gets wired into the HTTP request processing pipeline. If you think there is something wrong with the BasicHttpCache#storeVariantEntry Jonathan is the expert. Anyway, feel free to raise a JIRA for this issue to make sure it does not fall between the cracks. A test case demonstrating (reproducing) the issue would help a great deal to ensure it gets resolved sooner. Oleg I</body>
  </mail>
  <mail>
    <header>Re: 4.2.3 gzip caching still broken?</header>
    <body>This is still broken in 4.2.5. Created an issue with attached test: https://issues.apache.org/jira/browse/HTTPCLIENT-1347 Thanks, Adam</body>
  </mail>
  <mail>
    <header>Re: 4.2.3 gzip caching still broken?</header>
    <body>More investigation. The problem seems to arise in BasicHttpCache: the variantURI and parentURI are different. In my storage implementation my updateEntry looks like: @Override public void updateEntry(String arg0, HttpCacheUpdateCallback arg1) throws so it ended up adding 2 entries in my cache, one for the parentURI and one My updateEntry implementation is probably flawed in that I should get the entry and check it exists before blindly updating it, but I am curious as to why BasicHttpCache would put the entry with one key and update the entry with a different key? Thanks, Adam which</body>
  </mail>
  <mail>
    <header>[ANNOUNCEMENT] HttpComponents HttpClient 4.2.4 GA release</header>
    <body>The HttpComponents project is pleased to announce 4.2.4 GA release of Apache HttpClient. This is a bug fix release that addresses a number of issues reported since release 4.2.3. Users of HttpClient 4.x are advised to upgrade. ------------------- Download - Release notes - HttpComponents site - ------------------- About Apache HttpClient Although the java.net package provides basic functionality for accessing resources via HTTP, it doesn't provide the full flexibility or functionality needed by many applications. HttpClient seeks to fill this void by providing an efficient, up-to-date, and feature-rich package implementing the client side of the most recent HTTP standards and recommendations. Designed for extension while providing robust support for the base HTTP protocol, HttpClient may be of interest to anyone building HTTP-aware client applications such as web browsers, web service clients, or systems that leverage or extend the HTTP protocol for distributed communication.</body>
  </mail>
  <mail>
    <header>[ANNOUNCEMENT] HttpComponents HttpClient 4.3-beta1 release</header>
    <body>The HttpComponents project is pleased to announce the first BETA release of HttpClient 4.3. The 4.3 branch enhances HttpClient in several key areas and includes several notable features and improvements: * Support for Java 7 try-with-resources for resource management (connection release.) * Added fluent Builder classes for HttpEntity, HttpRequest and HttpClient instances. * Deprecation of preference and configuration API based on HttpParams interface in favor of constructor injection and plain configuration objects. * Reliance on object immutability instead of access synchronization for thread safety. Several old classes whose instances can be shared by multiple request exchanges have been replaced by immutable equivalents. * DefaultHttpClient,  DecompressingHttpClient, CachingHttpClient and similar classes are deprecated in favor of builder classes that produce immutable HttpClient instances. * HttpClient builders now dynamically construct a request execution pipeline tailored specifically to the user configuration by physically excluding unnecessary protocol components. * There is now an option to construct a minimal HttpClient implementation that can only execute basic HTTP message exchanges without redirects, authentication, state management or proxy support. This feature might be of particular use in web crawler development. * There is now option to avoid strict URI syntax for request URIs by executing HTTP requests with an explicitly specified target host. HttpClient will no longer attempt to parse the request URI if it does not need to extract the target host from it. The summary of the new HttpClient configuration and preference API can be found here: http://wiki.apache.org/HttpComponents/HttpClientConfiguration This release also includes all fixes from the stable 4.2.x release branch. ------------------- Download - Release notes - HttpComponents site - ------------------- About Apache HttpClient Although the java.net package provides basic functionality for accessing resources via HTTP, it doesn't provide the full flexibility or functionality needed by many applications. HttpClient seeks to fill this void by providing an efficient, up-to-date, and feature-rich package implementing the client side of the most recent HTTP standards and recommendations. Designed for extension while providing robust support for the base HTTP protocol, HttpClient may be of interest to anyone building HTTP-aware client applications such as web browsers, web service clients, or systems that leverage or extend the HTTP protocol for distributed communication.</body>
  </mail>
  <mail>
    <header>javax.net.ssl.SSLPeerUnverifiedException: peer not authenticated</header>
    <body>Hello , We had a report recently on JMeter project: Investigations didn't help us solve issue that seems to occur on this particular website: https://clui.xstratacoal.com.au And even with JAVA Pure API. See the 2 snippet attached to the bug inspired from: Any ideas about this ? Thanks Regards Philippe</body>
  </mail>
  <mail>
    <header>Re: javax.net.ssl.SSLPeerUnverifiedException: peer not authenticated</header>
    <body>A note about this: -Dhttps.protocols=SSLv3 fixes issue for Java Implementation. So it seems the server only supports SSLv3, attempt to negotiate upwards from v2 to v3 seems not to be supported by server. To fix it for HC family it seems we need to call: Is there a better way to fix this ? Thanks Regards Philippe -- Cordialement. Philippe Mouawad.</body>
  </mail>
  <mail>
    <header>Re: javax.net.ssl.SSLPeerUnverifiedException: peer not authenticated</header>
    <body>Philippe This is the right fix for the problem. What we can do, though, is to provide a configuration option to simplify the initialization process of newly created SSL sockets. Please raise an enhancement request in JIRA for this issue. Oleg</body>
  </mail>
  <mail>
    <header>Re: javax.net.ssl.SSLPeerUnverifiedException: peer not authenticated</header>
    <body>Hello Oleg, Created: https://issues.apache.org/jira/browse/HTTPCLIENT-1343 Regards Philippe -- Cordialement. Philippe Mouawad.</body>
  </mail>
  <mail>
    <header>Repeated cookies with same name and value</header>
    <body>Hello,  Im querying an url (with head method) and printing all the response headers received:   while (it.hasNext())  These are the headers:  Date = Sun, 14 Apr 2013 16:43:04 GMT Server = Microsoft-IIS/6.0 Etag = X-XSS-Protection = 0 SRV = 18 X-Powered-By = ASP.NET X-AspNet-Version = 4.0.30319 Set-Cookie = purgado=1; expires=Tue, 14-May-2013 16:43:04 GMT; path=/ Set-Cookie = devType=0; expires=Tue, 14-May-2013 16:43:04 GMT; path=/ Set-Cookie = preferencia=-1; expires=Sun, 14-Apr-2013 17:43:04 GMT; path=/ HttpOnly path=/; HttpOnly path=/; HttpOnly Set-Cookie = preferencia=-1; expires=Sun, 14-Apr-2013 17:43:04 GMT; path=/ Set-Cookie = preferencia=-1; expires=Sun, 14-Apr-2013 17:43:04 GMT; path=/ Set-Cookie = preferencia=-1; expires=Sun, 14-Apr-2013 17:43:04 GMT; path=/ Set-Cookie = preferencia=-1; expires=Sun, 14-Apr-2013 17:43:04 GMT; path=/ Set-Cookie = preferencia=-1; expires=Sun, 14-Apr-2013 17:43:04 GMT; path=/ Set-Cookie = preferencia=-1; expires=Sun, 14-Apr-2013 17:43:04 GMT; path=/ Set-Cookie = preferencia=-1; expires=Sun, 14-Apr-2013 17:43:04 GMT; path=/ Set-Cookie = preferencia=-1; expires=Sun, 14-Apr-2013 17:43:04 GMT; path=/ Set-Cookie = preferencia=-1; expires=Sun, 14-Apr-2013 17:43:04 GMT; path=/ Set-Cookie = preferencia=-1; expires=Sun, 14-Apr-2013 17:43:04 GMT; path=/ Set-Cookie = preferencia=-1; expires=Sun, 14-Apr-2013 17:43:04 GMT; path=/ Cache-Control = private Content-Type = text/html; charset=iso-8859-1 Content-Length = 172813   Obviously this is not a problem with HttpClient, but is it posible to receive the same cookie 12 times? Does this complain the http specification? Should HttpResponse remove the repeated headers with exactly the same name and value?  Thanks, Joan.</body>
  </mail>
  <mail>
    <header>Re: Repeated cookies with same name and value</header>
    <body>This behavior is silly but I do not think it violates the HTTP state management spec. No, I do not think so. As long as the response message is well formed it is not up to HttpClient to decide which headers may be superfluous or meaningless. Oleg</body>
  </mail>
  <mail>
    <header>how to customize my HttpURLConnection to modify http response header?</header>
    <body>hi all, oracle's network forum and don't get a solution. I think you guys here are experts of java network programming, so I come here for help. https://forums.oracle.com/forums/thread.jspa?threadID=2523938&amp;amp;tstart=0 ------------------------------------------------------------- brower(https://forums.oracle.com/forums/thread.jspa?threadID=2521487&amp;amp;tstart=0) I want to implement my HttpURLConnection which extends sun.net.www.protocol.http.HttpURLConnection. @Override //I want to modify response header here. but the response headers are stored in " private MessageHeader responses;". I can't modify it. I want to copy sun.net.www.protocol.http.HttpURLConnection out and modify it myself. but I can't get source codes of it in JDK/src.zip. I searched and found http://grepcode.com/snapshot/repository.grepcode.com/java/root/jdk/openjdk/7-b147/ but it depends so many things of sun.net package. any good method for me ? thanks.</body>
  </mail>
  <mail>
    <header>FailoverHttpClient</header>
    <body>A friend of mine created an extension to the DefaultHttpClient that allows for failover. Essentially, it will try one host and if that host is not available, then it will try others. The code can be found here: https://github.com/mcaprari/httpclient-failover Figured it might be useful to folks, so I thought I'd pass it along... Bill-</body>
  </mail>
  <mail>
    <header>is onCharReceived called after onResponseReceived? and accessing HttpResponse in AsyncHttpClient</header>
    <body>Hi, ​Two questions- ​ ​1)​ In ​​ org.apache.ht ​​ tp.nio.client.methods.AsyncCharConsumer, is onCharReceived called after onResponseReceived? So far my testing shows so but I am looking for official documentation. Can someone please point to me to documentation which describes the order in which these events are called ​? 2) Also, does HttpResponse response in onResponseReceived ( ​ org.apache.ht ​​ tp.nio.client.methods.AsyncCharConsumer ​)​ contain full response or just headers? ​I think it contains only headers as when I try to access content, I get exception- SEVERE: http-outgoing-2 [ACTIVE(666)] HTTP protocol exception: Content has not been provided java.lang.IllegalStateException: Content has not been provided​ Can someone please confirm this? I am using httpasyncclient version 4.0-beta3 ​</body>
  </mail>
  <mail>
    <header>Re: is onCharReceived called after onResponseReceived? and accessing HttpResponse in AsyncHttpClient</header>
    <body>This is correct. Unfortunately other things always kept me busy and I had no bandwidth for HttpAsyncClient documentation. HTTP messages passed to async message consumers contain full message head (status line or request line plus all headers) and an HttpEntity which is not attached to any data stream and is merely a descriptor. Hope this helps Oleg</body>
  </mail>
  <mail>
    <header>[Asking]About HttpClient 4.2.4 Release</header>
    <body>Hi Team, I have a question about HttpClient 4.2.4 Release and wish team can answer me as quickly as possible. release of 4.2.x .However, from the following maven repo[2], I found that 4.2.4 can be used. So, My question is that, Is 4.2.4 truely released and why it is not written in [1]? [1]: http://hc.apache.org/downloads.cgi [2]: http://repo1.maven.org/maven2/org/apache/httpcomponents/httpclient-osgi/4.2.4/ Thanks --Tang Yong −−−−−−−−−−−−−−−−−−−−−− Tang Yong Senior Engineer Glassfish Team Developer(OSGi&amp;amp;OSGi-JavaEE) OSGi Alliance Supporter Blog: http://osgizone.typepad.com/tangyong/ Nanjing Fujitsu NanDa Software Tec CO.,LTD http://www.fujitsu.com/cn/fnst Tel: +86-25-86630566-8310 Fax: +86-25-83317685　　　　　　　　　　　　　　 −−−−−−−−−−−−−−−−−−−−−−</body>
  </mail>
  <mail>
    <header>Re: [Asking]About HttpClient 4.2.4 Release</header>
    <body>Hi Tang Yong Nope.. I do see 4.2.4 as the final release ( see below) KEYS &amp;lt;http://www.apache.org/dist/httpcomponents/httpclient/KEYS&amp;gt; Release Notes Binary * 4.2.4.tar.gz * 4.2.4.zip * 4.2.4.tar.gz (OSGi bundle) * 4.2.4.zip (OSGi bundle) Source * 4.2.4.tar.gz * 4.2.4.zip Its truly released .. and I do see it under [1] regards asankha -- Asankha C. Perera AdroitLogic, http://adroitlogic.org http://esbmagic.blogspot.com</body>
  </mail>
  <mail>
    <header>Re: [Asking]About HttpClient 4.2.4 Release</header>
    <body>Hi Asankha, I made a confirmation for [1], maybe because I am in China, while accessing [1], automatically selecting a most nearest mirror site(http://mirror.bit.edu.cn/apache/) for me, then, in the most nearest mirror site, still is HttpClient 4.2.3 (GA). Whether you can get the same result while changing your mirror site intohttp://mirror.bit.edu.cn/apache/ ? Thanks --Tang -- −−−−−−−−−−−−−−−−−−−−−− Tang Yong Senior Engineer Glassfish Team Developer(OSGi&amp;amp;OSGi-JavaEE) OSGi Alliance Supporter Blog: http://osgizone.typepad.com/tangyong/ Nanjing Fujitsu NanDa Software Tec CO.,LTD http://www.fujitsu.com/cn/fnst Tel: +86-25-86630566-8310 Fax: +86-25-83317685　　　　　　　　　　　　　　 −−−−−−−−−−−−−−−−−−−−−−</body>
  </mail>
  <mail>
    <header>Re: [Asking]About HttpClient 4.2.4 Release</header>
    <body>Tang and all The ASF project sites are hosted on multiple hosts. It appears that hosts 140.211.11.131 and 192.87.106.229 are out of sync. I get different content if I repeatedly hit refresh button on my browser. I am about to release HttpClient 4.2.5 and update the site. If that does not fix the problem I'll report it to infrastructure. Oleg ; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.8.1-P1 &amp;lt;&amp;lt;&amp;gt;&amp;gt; hc.apache.org ;; global options: +cmd ;; Got answer: ;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 20731 ;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 0 ;; QUESTION SECTION: ;hc.apache.org.&amp;#009;&amp;#009;&amp;#009;IN&amp;#009;A ;; ANSWER SECTION: hc.apache.org.&amp;#009;&amp;#009;1782&amp;#009;IN&amp;#009;A&amp;#009;140.211.11.131 hc.apache.org.&amp;#009;&amp;#009;1782&amp;#009;IN&amp;#009;A&amp;#009;192.87.106.229</body>
  </mail>
  <mail>
    <header>Re: [Asking]About HttpClient 4.2.4 Release</header>
    <body>Thanks Oleg! &amp;gt; I get different &amp;gt; content if I repeatedly hit refresh button on my browser. Yes. &amp;gt; I am about to release HttpClient 4.2.5 and update the site. If that does &amp;gt; not fix the problem I'll report it to infrastructure. Thanks again! --Tang -- －－－－－－－－－－－－－－－－－－－－－－ Tang Yong Senior Engineer Glassfish Team Developer(OSGi&amp;amp;OSGi-JavaEE) OSGi Alliance Supporter Blog: http://osgizone.typepad.com/tangyong/ Nanjing Fujitsu NanDa Software Tec CO.,LTD http://www.fujitsu.com/cn/fnst Tel: +86-25-86630566-8310 Fax: +86-25-83317685　　　　　　　　　　　　　　 －－－－－－－－－－－－－－－－－－－－－－</body>
  </mail>
  <mail>
    <header>Re: [Asking]About HttpClient 4.2.4 Release</header>
    <body>Also, please note that mirrors may take a day or two to update themselves. Some mirrors may take longer. If the version has been announced on the mailing lists, but is not available on your local mirror, please try another local mirror. Or wait a day or so longer. I checked http://mirror.bit.edu.cn/apache/httpcomponents/httpclient/binary/just now and I can see 4.2.4 there. I am about to release HttpClient 4.2.5 and update the site. If that does</body>
  </mail>
  <mail>
    <header>Re: [Asking]About HttpClient 4.2.4 Release</header>
    <body>Although 4.2.4 is there, from download page with the mirror, this is not updated into 4.2.4. -- －－－－－－－－－－－－－－－－－－－－－－ Tang Yong Senior Engineer Glassfish Team Developer(OSGi&amp;amp;OSGi-JavaEE) OSGi Alliance Supporter Blog: http://osgizone.typepad.com/tangyong/ Nanjing Fujitsu NanDa Software Tec CO.,LTD http://www.fujitsu.com/cn/fnst Tel: +86-25-86630566-8310 Fax: +86-25-83317685　　　　　　　　　　　　　　 －－－－－－－－－－－－－－－－－－－－－－</body>
  </mail>
  <mail>
    <header>Re: [Asking]About HttpClient 4.2.4 Release</header>
    <body>Sebastian The problem is that the project site behaves erratically due to two hosts having different content. There is apparently some sort of load distribution mechanism most likely based on DNS round-robin. Depending on location and luck (or lack thereof) when hitting hc.apache.org you might either get site content deployed at 4.2.4 or 4.2.3. Bin/src distributions are actually fine. Oleg</body>
  </mail>
  <mail>
    <header>Re: [Asking]About HttpClient 4.2.4 Release</header>
    <body>Those are the us and eu ADF mirrors. AFAIK you should always get your local one - but maybe you get DNS round-robin if one's location is indeterminate. I see; I thought the OP was complaining that his mirror did not have 4.2.4, but I now see he was directed to 4.2.3 on his local mirror. The EU mirror for hc.apache.org seems to be seriously out of date; I'll report this to infra. is the</body>
  </mail>
  <mail>
    <header>Re: [Asking]About HttpClient 4.2.4 Release</header>
    <body>Hi Tang I do not see that mirror, but going into it, I do see 4.2.4 binaries on it.. e.g. http://mirror.bit.edu.cn/apache/httpcomponents/httpclient/binary/ http://mirror.bit.edu.cn/apache/httpcomponents/httpclient/binary/httpcomponents-client-4.2.4-bin.zip regards asankha -- Asankha C. Perera AdroitLogic, http://adroitlogic.org http://esbmagic.blogspot.com</body>
  </mail>
  <mail>
    <header>Re: [Asking]About HttpClient 4.2.4 Release</header>
    <body>Hi Asankha, I can understand what you said and no problem, I have known 4.2.4 is available. Thanks all from your reply. --Tang -- −−−−−−−−−−−−−−−−−−−−−− Tang Yong Senior Engineer Glassfish Team Developer(OSGi&amp;amp;OSGi-JavaEE) OSGi Alliance Supporter Blog: http://osgizone.typepad.com/tangyong/ Nanjing Fujitsu NanDa Software Tec CO.,LTD http://www.fujitsu.com/cn/fnst Tel: +86-25-86630566-8310 Fax: +86-25-83317685　　　　　　　　　　　　　　 −−−−−−−−−−−−−−−−−−−−−−</body>
  </mail>
  <mail>
    <header>valid HTTP request</header>
    <body>Hi, I have a question which involves both the code and the validity of an HTTP message. I am using httpcore-4.2.3. I receive from a client an HTTP (HTTP/1.1) request with the following headers: Content-type: text/xml Host: some host User-agent: UA Connection: keep-alive Accept: text/xml Content-Length: 109 The entity is a an xml of of length of 109 bytes. At the end of the xml there are two extra bytes with the value of 0x0d and 0xoa (/r/n), these bytes are the 110'th and 111'th bytes. In my code I call: *EntityUtils.toString(entity, "UTF-8");* at the end of the handling of the request my server returns 200-OK to the client. the problem is that after I finish handling the request, the connection is still open and I call *httpService.handleRequest(conn, context);* This call sees the two extra bytes and returns 400-Bad request to the sender. Now my question are: Thanks, Nir</body>
  </mail>
  <mail>
    <header>Re: valid HTTP request</header>
    <body>Hi, You should fix the client that sends this request. An incorrect content-length header value makes it impossible to reuse http connections and can lead to locked connections and timeouts for example. In your case, I think disabling connection keep-alive could be a quick fix but this is not very good for performance.</body>
  </mail>
  <mail>
    <header>Re: valid HTTP request</header>
    <body>Another option would be to provide a more lenient message parser that can silently skip empty lines preceding a valid request line. Oleg</body>
  </mail>
  <mail>
    <header>[ANNOUNCEMENT] HttpComponents HttpClient 4.2.5 GA release</header>
    <body>The HttpComponents project is pleased to announce 4.2.5 GA release of Apache HttpClient. This is a bug fix release that addresses a number of issues reported since release 4.2.4 including a major bug that can lead to re-use of persistent connections in a inconsistent state. All users of HttpClient 4.2 are strongly advised to upgrade. ------------------- Download - Release notes - HttpComponents site - ------------------- About Apache HttpClient Although the java.net package provides basic functionality for accessing resources via HTTP, it doesn't provide the full flexibility or functionality needed by many applications. HttpClient seeks to fill this void by providing an efficient, up-to-date, and feature-rich package implementing the client side of the most recent HTTP standards and recommendations. Designed for extension while providing robust support for the base HTTP protocol, HttpClient may be of interest to anyone building HTTP-aware client applications such as web browsers, web service clients, or systems that leverage or extend the HTTP protocol for distributed communication.</body>
  </mail>
  <mail>
    <header>Re: [ANNOUNCEMENT] HttpComponents HttpClient 4.2.5 GA release</header>
    <body>Hello, Just a clarification, does HTTPCLIENT-1340&amp;lt;https://issues.apache.org/jira/browse/HTTPCLIENT-1340&amp;gt;affects 4.2.3 ? JIRA indicates 4.2.3 Beta. Thanks Regards Philippe -- Cordialement. Philippe Mouawad.</body>
  </mail>
  <mail>
    <header>Re: [ANNOUNCEMENT] HttpComponents HttpClient 4.2.5 GA release</header>
    <body>The bug affects all versions of 4.2.x prior to 4.2.5. The bug does not affect 4.3.x series. Oleg</body>
  </mail>
  <mail>
    <header>Re: [ANNOUNCEMENT] HttpComponents HttpClient 4.2.5 GA release</header>
    <body>However the JIRA says: *Affects Version/s:*  4.2.4, 4.3 Beta1 Is that wrong? Oleg</body>
  </mail>
  <mail>
    <header>Re: [ANNOUNCEMENT] HttpComponents HttpClient 4.2.5 GA release</header>
    <body>Hello, Well I just want to be sure it does not affect 4.3 and only 4.3 Beta1. Regards Philippe -- Cordialement. Philippe Mouawad.</body>
  </mail>
  <mail>
    <header>Re: [ANNOUNCEMENT] HttpComponents HttpClient 4.2.5 GA release</header>
    <body>It depends how you look at it. The bug does not affect new code in 4.3 but it does affect old deprecated code. Oleg</body>
  </mail>
  <mail>
    <header>Re: [ANNOUNCEMENT] HttpComponents HttpClient 4.2.5 GA release</header>
    <body>Sorry Oleg, I mixed up my question. So does HTTPCLIENT-1340 affect 4.2.3 version of HttpClient ? I am confused about JIRA indicating it affects 4.2.3 BETA which suggest 4.2.3 could also be concerned. Thanks Regards Philippe -- Cordialement. Philippe Mouawad.</body>
  </mail>
  <mail>
    <header>Re: [ANNOUNCEMENT] HttpComponents HttpClient 4.2.5 GA release</header>
    <body>The bug affects ALL versions of 4.2.x prior to 4.2.5 (including 4.2.3). It also affects deprecated code in 4.3 branch. Oleg a can or to fill and base or</body>
  </mail>
  <mail>
    <header>Re: [ANNOUNCEMENT] HttpComponents HttpClient 4.2.5 GA release</header>
    <body>Are there any plans to fix the deprecated code? I'm not saying we should, just wondering how to make the JIRA clearer. It looks odd if one of the affected versions is never apparently fixed. I'll add a comment to the issue, but it would be useful to be able to tidy up the Fix version at some point. If dep. code is not to be fixed, perhaps we could add a dummy version 4.3 (deprecated code) ? Oleg GA a that for or to the</body>
  </mail>
  <mail>
    <header>Re: [ANNOUNCEMENT] HttpComponents HttpClient 4.2.5 GA release</header>
    <body>Sebastian I did already back-port the fix to deprecated classes in 4.3 and clearly stated that fact in JIRA comments. This is also the reason why I kept 4.3-beta1 listed among affected versions Oleg does 4.2.5 GA addresses a bug that state. upgrade. for or seeks to standards for the building clients, for</body>
  </mail>
  <mail>
    <header>Re: [ANNOUNCEMENT] HttpComponents HttpClient 4.2.5 GA release</header>
    <body>"It also affects deprecated code in 4.3 branch." I cannot reconcile those two statements. But is 4.3-beta1 not superseded by 4.3 ? If so, can we just mark it fixed in 4.3? Oleg bug 4.2.5 GA that a major bug to HTTP support for building service for</body>
  </mail>
  <mail>
    <header>Re: [ANNOUNCEMENT] HttpComponents HttpClient 4.2.5 GA release</header>
    <body>My English certainly has its limits but I fail to see a contradiction in those statements. The bug affects all releases from the 4.3 branch (which is currently trunk). The bug has been fixed in SVN trunk by back-porting the fix from the 4.2 branch. Oleg The bug in announce 4.2.5 GA that a major bug inconsistent advised to full HttpClient and recent HTTP support for to anyone building web service protocol for</body>
  </mail>
  <mail>
    <header>Re: [ANNOUNCEMENT] HttpComponents HttpClient 4.2.5 GA release</header>
    <body>I am [It's probably more a question of context/perspective than English, because yours is better than quite a few native speakers! I don't always immediately understand US English, because they ascribe different meanings to some English words, e.g. pavement, table(verb)] I took the first sentence to mean that the deprecated classes in 4.3 have been fixed (i.e. are not affected) I took the second to mean that the deprecated code in 4.3 branch (i.e. trunk) is still affected. That is the contradiction I could not understand, see further below. The bug affects all releases from the 4.3 branch So I take it that the bug affects all existing 4.3 releases, but has since been fixed in trunk and therefore the bug will be fixed in the next 4.3 release? Is that correct? If so, the Jira can be update at some point to add a 4.3 release to the Fix. Oleg 4.2.5. The new to announce release that including a major in a inconsistent advised to basic the full HttpClient and most recent HTTP robust support to anyone web service HTTP protocol for</body>
  </mail>
  <mail>
    <header>Re: [ANNOUNCEMENT] HttpComponents HttpClient 4.2.5 GA release</header>
    <body>? I am 4.2.3 Yes and no. New connection management code in 4.3 has been pretty much completely rewritten and has diverged significantly from the original code affected by the bug. It never exhibited the said defect to start with. Users of 4.3 who migrated off the deprecated API have nothing to worry about. If all it takes is changing some attributes on the JIRA ticket by all of means go ahead and do what you deem appropriate. Oleg to to 4.2.5. The new pleased to announce fix release that 4.2.4 including a major in a inconsistent strongly advised to provides basic provide the full HttpClient up-to-date, and the most recent HTTP robust support interest to anyone browsers, web service the HTTP protocol for</body>
  </mail>
  <mail>
    <header>Re: [ANNOUNCEMENT] HttpComponents HttpClient 4.2.5 GA release</header>
    <body>? suggest So does the deprecated code that remains in 4.3 still suffer from the bug? I need to think on that further. Philippe Mouawad prior to 4.2.5. affect new is pleased to announce a bug fix release that 4.2.4 including a in a are strongly advised to provides basic provide the full applications. up-to-date, and of the most recent providing robust be of interest to anyone as web browsers, web extend the HTTP protocol e-mail:</body>
  </mail>
  <mail>
    <header>Re: [ANNOUNCEMENT] HttpComponents HttpClient 4.2.5 GA release</header>
    <body>of HttpClient ? suggest (including JIRA and No, it does not. I back-ported the fix from 4.2 to 4.3 (deprecated code only). Oleg I to be dummy Philippe Mouawad 4.2.x prior to 4.2.5. not affect new is pleased to announce is a bug fix release that release 4.2.4 including a connections in a 4.2 are strongly advised to - package provides basic it doesn't provide the full by many applications. efficient, up-to-date, and side of the most recent while providing robust may be of interest to anyone such as web browsers, web or extend the HTTP protocol e-mail:</body>
  </mail>
  <mail>
    <header>Re: [ANNOUNCEMENT] HttpComponents HttpClient 4.2.5 GA release</header>
    <body>of which suggest 4.2.5 the JIRA 4.3 I meant all deprecated code here, not the new code, but should have been specific. I was not sure, but I though the "no" could mean that the deprecated has not been fixed in trunk. New connection management code in 4.3 has been pretty much That bit I understood. In conjunction with my reading of "no", that last sentence made me wonder if a user switching to the next version of 4.3 would encounter the bug if they did not migrate off the deprecated API. So I asked the question above. This then confused me at first, but I think I see where the discrepancy is now. My understanding is now: Users of existing 4.3 releases will only suffer from the bug if they use deprecated code. When the next 4.3 release is made, users will not suffer from the bug even if they don't migrate from the deprecated code. I hope that's correct now? Sorry to go on about it but I want to be sure what the position is before clarifying the JIRA versions. Oleg why to be add a dummy +0200, Philippe Mouawad does Beta. of 4.2.x prior to Beta1 bug does not affect at 12:41 PM, Oleg project is pleased to This is a bug fix release since release 4.2.4 including a connections in a 4.2 are strongly site - package provides basic it doesn't provide the full by many applications. an efficient, up-to-date, and client side of the most recent while providing robust may be of interest to such as web browsers, web or extend the HTTP e-mail: commands, e-mail: e-mail:</body>
  </mail>
  <mail>
    <header>Re: [ANNOUNCEMENT] HttpComponents HttpClient 4.2.5 GA release</header>
    <body>version of BETA which suggest to 4.2.5 to make the JIRA in 4.3 4.3 by has That is absolutely correct. Oleg</body>
  </mail>
  <mail>
    <header>Question about pool starvation options</header>
    <body>I'm trying to determine how to solve a problem where I have one domain I talk to that, for the most part, performs well.  I can expect most request to be responded to within a few seconds (I'll call them TypeA requests), but it also supports some "special" requests which are going to take much longer (up to 2 minutes) which I'll call TypeB.  From a usage perspective, it's probably going to be about 95% TypeA and 5% TypeB. I'm currently using HttpClient 4 and I'm using ThreadSafeClientConnManager to manage connection pooling.  On application startup, each HttpRoute is configured using the connectionManager.setMaxForRoute() method to establish the maximum connection pool size. Since these request share the same domain, they share the same connection pool.  I'm trying to figure out how to make it so that if I get a flurry of TypeB transactions, it doesn't completely consume the connections in the pool and starve TypeA request, which are far more important than the TypeB requests. One thought is to try to force them to have separate connection pools.  I'm not sure if this is possible with a single instance of HttpClient, so I guess that's my first question. My second question is: Would switching to the asynchronous client help here?  I have a limited understanding of it, but I'm assuming it supports HTTP pipelining, but does that help me in this case?  If I interpreted what I read about pipelining correctly, it seems that I can send multiple requests down the same connection, but the responses must be received in order they were sent.  If that's the case, I'd think pipelining does not help in my use case because the TypeA responses would get held up behind a TypeB responses.  In fact, this would seem far worse because now the TypeB responses aren't only affecting the pool, they're affecting individual TypeA requests.  This leads me to think I may not be understanding what I read. Thanks, Mike</body>
  </mail>
  <mail>
    <header>Re: Question about pool starvation options</header>
    <body>for the most part, performs well.  I can expect most request to be responded to within a few seconds (I'll call them TypeA requests), but it also supports some "special" requests which are going to take much longer (up to 2 minutes) which I'll call TypeB.  From a usage perspective, it's probably going to be about 95% TypeA and 5% TypeB. connection pooling.  On application startup, each HttpRoute is configured using the connectionManager.setMaxForRoute() method to establish the maximum connection pool size. trying to figure out how to make it so that if I get a flurry of TypeB transactions, it doesn't completely consume the connections in the pool and starve TypeA request, which are far more important than the TypeB requests. if this is possible with a single instance of HttpClient, so I guess that's my first question. a limited understanding of it, but I'm assuming it supports HTTP pipelining, but does that help me in this case?  If I interpreted what I read about pipelining correctly, it seems that I can send multiple requests down the same connection, but the responses must be received in order they were sent.  If that's the case, I'd think pipelining does not help in my use case because the TypeA responses would get held up behind a TypeB responses.  In fact, this would seem far worse because now the TypeB responses aren't only affecting the pool, they're affecting individual TypeA requests.  This leads me to think I may not be understanding what I read. Mike, Pipelining will do you little good. If you do no feel like building a custom connection manager I would recommend using different connection pools for different types of requests. Oleg</body>
  </mail>
  <mail>
    <header>Transient Slow Posts</header>
    <body>Hi I'm using httpclient 3.0.1, which is beyond my control to change. The problem I'm investigating involves several requests that take minutes to resolve. I have access to the logs at the destination and I have narrowed the problem down to between when we call HttpClient.execute() on our PostMethod to the time it eventually shows up in the access logs on the other end. Here's the code in use: MultiThreadedHttpConnectionManager connManager =  new client.getState().setCredentials( post.setRequestEntity(new try catch (Exception e) finally The data being submitting is not large, but would it help if the content was chunked? Or do I need to explicitly set the content length? Of the posts that are taking minutes long half of them are right around 1:35, with others grouped around 3:10 and 4:40 oddly.  Any ideas what is going on?</body>
  </mail>
  <mail>
    <header>Apache HTTP Client fails to return 404 for a non-existing file.</header>
    <body>Hello, I am working with Apache's HTTP async client and have encountered a possible bug (race condition). PROBLEM: While  accessing a nonexistent file on the server, I would ALWAYS expect to receive a "404 : component not found" error message. However, the behavior is sporadic. Sometimes I receive the correct message, whereas, on the other occasions it throw the following exception: org.apache.http.impl.nio.client.LoggingAsyncRequestExecutor exception SEVERE: http-outgoing-1 [ACTIVE] HTTP protocol exception: An established connection was aborted by the software in your host machine java.io.IOException: An established connection was aborted by the software in your host machine at sun.nio.ch.SocketDispatcher.read0(Native Method) at sun.nio.ch.SocketDispatcher.read(SocketDispatcher.java:43) at sun.nio.ch.IOUtil.readIntoNativeBuffer(IOUtil.java:225) at sun.nio.ch.IOUtil.read(IOUtil.java:198) at sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:359) at org.apache.http.impl.nio.reactor.SessionInputBufferImpl.fill(SessionInputBufferImpl.java:97) at org.apache.http.impl.nio.codecs.AbstractMessageParser.fillBuffer(AbstractMessageParser.java:115) at org.apache.http.impl.nio.DefaultNHttpClientConnection.consumeInput(DefaultNHttpClientConnection.java:167) at org.apache.http.impl.nio.DefaultHttpClientIODispatch.onInputReady(DefaultHttpClientIODispatch.java:125) at org.apache.http.impl.nio.DefaultHttpClientIODispatch.onInputReady(DefaultHttpClientIODispatch.java:50) at org.apache.http.impl.nio.reactor.AbstractIODispatch.inputReady(AbstractIODispatch.java:112) at org.apache.http.impl.nio.reactor.BaseIOReactor.readable(BaseIOReactor.java:160) at org.apache.http.impl.nio.reactor.AbstractIOReactor.processEvent(AbstractIOReactor.java:342) at org.apache.http.impl.nio.reactor.AbstractIOReactor.processEvents(AbstractIOReactor.java:320) at org.apache.http.impl.nio.reactor.AbstractIOReactor.execute(AbstractIOReactor.java:280) at org.apache.http.impl.nio.reactor.BaseIOReactor.execute(BaseIOReactor.java:106) at org.apache.http.impl.nio.reactor.AbstractMultiworkerIOReactor$Worker.run(AbstractMultiworkerIOReactor.java:604) at java.lang.Thread.run(Thread.java:722) java.io.IOException: An established connection was aborted by the software in your host machine INVESTIGATION: I downloaded the source code and tried to investigate it myself. Interestingly, I found that the "IOReactorStatus" is set to "SHUTDOWN_REQUEST" only after the exception has already been thrown. I am not sure if this is the root cause or not, but I would highly appreciate if somebody could please confirm if it's a known issue and if there exists a solution. Thanks, Poonam</body>
  </mail>
  <mail>
    <header>Re: Apache HTTP Client fails to return 404 for a non-existing file.</header>
    <body>condition). "404 : component not found" error message. on the other occasions it throw the following exception: aborted by the software in your host machine machine machine that the "IOReactorStatus" is set to "SHUTDOWN_REQUEST" only after the exception has already been thrown. could please confirm if it's a known issue and if there exists a solution. Poonam HTTP 404 response is in no way no different or special as far as HTTP exchange handling is concerned. It is just a 4xx message potentially enclosing a content entity. That is it. If you are seeing this kind of behavior for non-existent resources but not for normal resources (status 200) I would strongly suspect a server side issue. A wire / content log produced by HttpAsyncClient or a Wireshark packet dump might help prove or disprove that. http://hc.apache.org/httpcomponents-client-ga/logging.html Oleg</body>
  </mail>
  <mail>
    <header>RE: Apache HTTP Client fails to return 404 for a non-existing file.</header>
    <body>I am testing the server functionality at my end to make sure that it works as expected. In that the "IOReactorStatus" is set to "SHUTDOWN_REQUEST" only after the exception has already HTTP 404 response is in no way no different or special as far as HTTP exchange handling is concerned. It is just a 4xx message potentially enclosing a content entity. That is it. If you are seeing this kind of behavior for non-existent resources but not for normal resources 200) I would strongly suspect a server side issue. A wire / content log produced by HttpAsyncClient</body>
  </mail>
  <mail>
    <header>RE: Apache HTTP Client fails to return 404 for a non-existing file.</header>
    <body>- If my understanding is incorrect about the above observation, then why would the client that the "IOReactorStatus" is set to "SHUTDOWN_REQUEST" only after the exception has already HTTP 404 response is in no way no different or special as far as HTTP exchange handling is concerned. It is just a 4xx message potentially enclosing a content entity. That is it. If you are seeing this kind of behavior for non-existent resources but not for normal resources 200) I would strongly suspect a server side issue. A wire / content log produced by HttpAsyncClient</body>
  </mail>
  <mail>
    <header>Re: Apache HTTP Client fails to return 404 for a non-existing file.</header>
    <body>Layer? still send the request body after acknowledging? Please generate a wire / context log of the session exhibiting the problem as described in the logging guide and post it to this list. Oleg</body>
  </mail>
  <mail>
    <header>RE: Apache HTTP Client fails to return 404 for a non-existing file.</header>
    <body>2013/04/30 14:05:59:241 EDT [DEBUG] DefaultHttpAsyncClient - [exchange: 1] Request connection 2013/04/30 14:05:59:243 EDT [DEBUG] PoolingClientAsyncConnectionManager - Connection request: 2013/04/30 14:05:59:308 EDT [DEBUG] PoolingClientAsyncConnectionManager - Connection leased: 2013/04/30 14:05:59:310 EDT [DEBUG] DefaultHttpAsyncClient - [exchange: 1] Connection allocated: 2013/04/30 14:05:59:329 EDT [DEBUG] IOSessionImpl - http-outgoing-1 172.28.9.179:53408&amp;lt;-&amp;gt;172.28.9.108:9910[ACTIVE][r:]: 2013/04/30 14:05:59:329 EDT [DEBUG] IOSessionImpl - http-outgoing-1 172.28.9.179:53408&amp;lt;-&amp;gt;172.28.9.108:9910[ACTIVE][rw:]: 2013/04/30 14:05:59:330 EDT [DEBUG] IOSessionImpl - http-outgoing-1 172.28.9.179:53408&amp;lt;-&amp;gt;172.28.9.108:9910[ACTIVE][rw:]: 2013/04/30 14:05:59:330 EDT [DEBUG] HttpAsyncRequestExecutor - http-outgoing-1 [ACTIVE] Request 2013/04/30 14:05:59:331 EDT [DEBUG] DefaultHttpAsyncClient - [exchange: 1] Attempt 1 to execute 2013/04/30 14:05:59:331 EDT [DEBUG] IOSessionImpl - http-outgoing-1 172.28.9.179:53408&amp;lt;-&amp;gt;172.28.9.108:9910[ACTIVE][rw:]: 2013/04/30 14:05:59:344 EDT [DEBUG] headers - http-outgoing-1 &amp;gt;&amp;gt; POST /multipleFunctions/mymagic 2013/04/30 14:05:59:346 EDT [DEBUG] IOSessionImpl - http-outgoing-1 172.28.9.179:53408&amp;lt;-&amp;gt;172.28.9.108:9910[ACTIVE][rw:]: 2013/04/30 14:05:59:347 EDT [DEBUG] IOSessionImpl - http-outgoing-1 172.28.9.179:53408&amp;lt;-&amp;gt;172.28.9.108:9910[ACTIVE][rw:w]: 2013/04/30 14:05:59:347 EDT [DEBUG] wire - http-outgoing-1 &amp;gt;&amp;gt; "POST /multipleFunctions/mymagic 2013/04/30 14:05:59:348 EDT [DEBUG] HttpAsyncRequestExecutor - http-outgoing-1 [ACTIVE] Output 2013/04/30 14:05:59:348 EDT [DEBUG] IOSessionImpl - http-outgoing-1 172.28.9.179:53408&amp;lt;-&amp;gt;172.28.9.108:9910[ACTIVE][rw:w]: 2013/04/30 14:05:59:348 EDT [DEBUG] HttpAsyncRequestExecutor - http-outgoing-1 [ACTIVE] [content 2013/04/30 14:05:59:348 EDT [DEBUG] IOSessionImpl - http-outgoing-1 172.28.9.179:53408&amp;lt;-&amp;gt;172.28.9.108:9910[ACTIVE][r:w]: 2013/04/30 14:05:59:349 EDT [DEBUG] HttpAsyncRequestExecutor - http-outgoing-1 [ACTIVE] Request 2013/04/30 14:05:59:500 EDT [DEBUG] IOSessionImpl - http-outgoing-1 172.28.9.179:53408&amp;lt;-&amp;gt;172.28.9.108:9910[ACTIVE][r:r]: 2013/04/30 14:05:59:500 EDT [DEBUG] wire - http-outgoing-1 &amp;lt;&amp;lt; "HTTP/1.1 404 Component 2013/04/30 14:05:59:507 EDT [DEBUG] headers - http-outgoing-1 &amp;lt;&amp;lt; HTTP/1.1 404 Component 2013/04/30 14:05:59:508 EDT [DEBUG] HttpAsyncRequestExecutor - http-outgoing-1 [ACTIVE] Response 2013/04/30 14:05:59:508 EDT [DEBUG] DefaultHttpAsyncClient - [exchange: 1] Response received 2013/04/30 14:05:59:513 EDT [DEBUG] HttpAsyncRequestExecutor - http-outgoing-1 [ACTIVE] Input 2013/04/30 14:05:59:514 EDT [DEBUG] IOSessionImpl - http-outgoing-1 172.28.9.179:53408&amp;lt;-&amp;gt;172.28.9.108:9910[ACTIVE][r:r]: 2013/04/30 14:05:59:515 EDT [DEBUG] IOSessionImpl - http-outgoing-1 172.28.9.179:53408&amp;lt;-&amp;gt;172.28.9.108:9910[ACTIVE][r:r]: 2013/04/30 14:05:59:515 EDT [DEBUG] DefaultHttpAsyncClient - [exchange: 1] Response fully 2013/04/30 14:05:59:516 EDT [DEBUG] DefaultHttpAsyncClient - [exchange: 1] Connection cannot 2013/04/30 14:05:59:516 EDT [DEBUG] DefaultHttpAsyncClient - [exchange: 1] releasing connection 2013/04/30 14:05:59:516 EDT [DEBUG] IOSessionImpl - http-outgoing-1 0.0.0.0:53408&amp;lt;-&amp;gt;172.28.9.108:9910[CLOSED][]: 2013/04/30 14:05:59:516 EDT [DEBUG] IOSessionImpl - http-outgoing-1 0.0.0.0:53408&amp;lt;-&amp;gt;172.28.9.108:9910[CLOSED][]: 2013/04/30 14:05:59:516 EDT [DEBUG] PoolingClientAsyncConnectionManager - Connection released: 2013/04/30 14:05:59:517 EDT [DEBUG] HttpAsyncRequestExecutor - http-outgoing-1 [CLOSED] [content 2013/04/30 14:05:59:517 EDT [DEBUG] PoolingClientAsyncConnectionManager - Connection manager com.mathworks.mps.client.MWHttpException: Failed HTTP request; Response Status: 404, Response 2013/04/30 14:05:59:520 EDT [DEBUG] PoolingClientAsyncConnectionManager - Connection manager 2013/04/30 14:06:45:790 EDT [DEBUG] DefaultHttpAsyncClient - [exchange: 1] Request connection 2013/04/30 14:06:45:793 EDT [DEBUG] PoolingClientAsyncConnectionManager - Connection request: 2013/04/30 14:06:45:838 EDT [DEBUG] PoolingClientAsyncConnectionManager - Connection leased: 2013/04/30 14:06:45:840 EDT [DEBUG] DefaultHttpAsyncClient - [exchange: 1] Connection allocated: 2013/04/30 14:06:45:863 EDT [DEBUG] IOSessionImpl - http-outgoing-1 172.28.9.179:53452&amp;lt;-&amp;gt;172.28.9.108:9910[ACTIVE][r:]: 2013/04/30 14:06:45:863 EDT [DEBUG] IOSessionImpl - http-outgoing-1 172.28.9.179:53452&amp;lt;-&amp;gt;172.28.9.108:9910[ACTIVE][rw:]: 2013/04/30 14:06:45:864 EDT [DEBUG] IOSessionImpl - http-outgoing-1 172.28.9.179:53452&amp;lt;-&amp;gt;172.28.9.108:9910[ACTIVE][rw:]: 2013/04/30 14:06:45:864 EDT [DEBUG] HttpAsyncRequestExecutor - http-outgoing-1 [ACTIVE] Request 2013/04/30 14:06:45:865 EDT [DEBUG] DefaultHttpAsyncClient - [exchange: 1] Attempt 1 to execute 2013/04/30 14:06:45:865 EDT [DEBUG] IOSessionImpl - http-outgoing-1 172.28.9.179:53452&amp;lt;-&amp;gt;172.28.9.108:9910[ACTIVE][rw:]: 2013/04/30 14:06:45:882 EDT [DEBUG] headers - http-outgoing-1 &amp;gt;&amp;gt; POST /multipleFunctions/mymagic 2013/04/30 14:06:45:885 EDT [DEBUG] IOSessionImpl - http-outgoing-1 172.28.9.179:53452&amp;lt;-&amp;gt;172.28.9.108:9910[ACTIVE][rw:]: 2013/04/30 14:06:45:886 EDT [DEBUG] IOSessionImpl - http-outgoing-1 172.28.9.179:53452&amp;lt;-&amp;gt;172.28.9.108:9910[ACTIVE][rw:w]: 2013/04/30 14:06:45:886 EDT [DEBUG] wire - http-outgoing-1 &amp;gt;&amp;gt; "POST /multipleFunctions/mymagic 2013/04/30 14:06:45:887 EDT [DEBUG] HttpAsyncRequestExecutor - http-outgoing-1 [ACTIVE] Output 2013/04/30 14:06:45:887 EDT [DEBUG] IOSessionImpl - http-outgoing-1 172.28.9.179:53452&amp;lt;-&amp;gt;172.28.9.108:9910[ACTIVE][rw:w]: 2013/04/30 14:06:45:887 EDT [DEBUG] HttpAsyncRequestExecutor - http-outgoing-1 [ACTIVE] [content 2013/04/30 14:06:45:887 EDT [DEBUG] IOSessionImpl - http-outgoing-1 172.28.9.179:53452&amp;lt;-&amp;gt;172.28.9.108:9910[ACTIVE][r:w]: 2013/04/30 14:06:45:888 EDT [DEBUG] HttpAsyncRequestExecutor - http-outgoing-1 [ACTIVE] Request 2013/04/30 14:06:45:888 EDT [ERROR] HttpAsyncRequestExecutor - http-outgoing-1 [ACTIVE] HTTP protocol exception: An established connection was aborted by the software in your host machine machine&amp;gt;java.io.IOException: An established connection was aborted by the software in your 2013/04/30 14:06:45:889 EDT [DEBUG] IOSessionImpl - http-outgoing-1 172.28.9.179:53452&amp;lt;-&amp;gt;172.28.9.108:9910[ACTIVE][r:r]: 2013/04/30 14:06:45:890 EDT [DEBUG] DefaultHttpAsyncClient - [exchange: 1] aborting connection 2013/04/30 14:06:45:890 EDT [DEBUG] PoolingClientAsyncConnectionManager - Connection manager 2013/04/30 14:06:45:890 EDT [DEBUG] IOSessionImpl - http-outgoing-1 0.0.0.0:53452&amp;lt;-&amp;gt;172.28.9.108:9910[CLOSED][]: 2013/04/30 14:06:45:890 EDT [DEBUG] IOSessionImpl - http-outgoing-1 0.0.0.0:53452&amp;lt;-&amp;gt;172.28.9.108:9910[CLOSED][]: 2013/04/30 14:06:45:891 EDT [DEBUG] IOSessionImpl - http-outgoing-1 0.0.0.0:53452&amp;lt;-&amp;gt;172.28.9.108:9910[CLOSED][]: 2013/04/30 14:06:45:892 EDT [DEBUG] PoolingClientAsyncConnectionManager - Connection manager Please generate a wire / context log of the session exhibiting the problem as described in</body>
  </mail>
  <mail>
    <header>Re: Apache HTTP Client fails to return 404 for a non-existing file.</header>
    <body>0 of 10; total allocated: 0 of 20] 1 of 10; total allocated: 0 of 20] Set attribute http.nio.exchange-handler Event set [w] Connected Set attribute http.nio.http-exchange-state Request ready to execute request Set timeout 10000 UNCHALLENGED HTTP/1.1 application/x-google-protobuf 19 Event set [w] 229 bytes written HTTP/1.1[\r][\n]" 19[\r][\n]" Output ready 19 bytes written [content length: 19; pos: 19; completed: true] Event cleared [w] Request ready 96 bytes read not found. (request id=0:532:0)[\r][\n]" 0[\r][\n]" not found. (request id=0:532:0) 0 Response received HTTP/1.1 404 Component not found. (request id=0:532:0) Input ready 0 bytes read Close read cannot be kept alive Remove attribute http.nio.exchange-handler Shutdown 0 of 10; total allocated: 0 of 20] [content length: 0; pos: 0; completed: true] Disconnected manager is shutting down Response Message: Component not found. (request id=0:532:0) manager shut down 0 of 10; total allocated: 0 of 20] 1 of 10; total allocated: 0 of 20] Set attribute http.nio.exchange-handler Event set [w] Connected Set attribute http.nio.http-exchange-state Request ready to execute request Set timeout 10000 UNCHALLENGED HTTP/1.1 application/x-google-protobuf 19 Event set [w] 229 bytes written HTTP/1.1[\r][\n]" 19[\r][\n]" Output ready 19 bytes written [content length: 19; pos: 19; completed: true] Event cleared [w] Request ready HTTP protocol exception: An established connection was aborted by the software in your host machine &amp;lt;java.io.IOException: An established connection was aborted by the software in your host machine&amp;gt;java.io.IOException: An established connection was aborted by the software in your host machine Shutdown machine manager is shutting down Shutdown Shutdown Disconnected Shutdown machine manager shut down Poonam I am sorry but I see nothing wrong about the way HttpAsyncClient handles the exchange. As far as I can tell the connection gets terminated before the client manages to get a response. I appears that for some reason the i/o reactor gets terminated prematurely and shuts down all active connections. If you can reproduce the problem with a test case, I can have a look at it. Oleg</body>
  </mail>
  <mail>
    <header>RE: Apache HTTP Client fails to return 404 for a non-existing file.</header>
    <body>Thanks a lot for looking into the log. I spoke with my manager here and we decided to have HTTP protocol exception: An established connection was aborted by the software in your host machine &amp;lt;java.io.IOException: An established connection was aborted by the software in your host machine&amp;gt;java.io.IOException: An established connection was aborted by the software I am sorry but I see nothing wrong about the way HttpAsyncClient handles the exchange. As far as I can tell the connection gets terminated before the client manages to get a response. I appears that for some reason the i/o reactor gets terminated prematurely and shuts down</body>
  </mail>
  <mail>
    <header>HTTP async client and accessing server certificate (SSL)</header>
    <body>Hi, I am currently using the HTTP async client in my application to communicate with a proprietary server. Now, I need to extend the functionality to include HTTPS support. We need to provide client authentication and I have the following picture of how I can provide client credentials. My first question is, is this the correct approach? Am I missing anything here? ************************************************ SSLContext context = ..... ; // Create with user provided keystore/truststore AsyncScheme scheme = new AsyncScheme( "https", 9910, new PoolingClientAsyncConnectionManager connectionMgr = ************************************************ My second question is about server authorization for which I need access to the server certificate. I need to get the CN value from the certificate which I am later going to use internally. I am basically looking for something similar to java.net.HttpsUrlConnection.getPeerPrincipal or java.net.HttpsUrlConnection.getServerCertificates. Any help will be greatly appreciated. Thanks Sachin</body>
  </mail>
  <mail>
    <header>Re: HTTP async client and accessing server certificate (SSL)</header>
    <body>You can get full access to the SSL session details from the local execution context: --- (ManagedClientAsyncConnection) context.getAttribute( --- Hope this helps Oleg</body>
  </mail>
  <mail>
    <header>Proxy chaining</header>
    <body>Hello, I have a question on proxy chaining. Target) out of the box by using TUNNEL_TARGET.  However, when I provide an extra proxy in the chain using a custom HttpRoutePlanner#determineRoute(), (Source -&amp;gt; P0 -&amp;gt; P1 -&amp;gt; Target)  I use TUNNEL_PROXY and need to implement a custom DefaultRequestDirector#createTunnelToProxy().  Im just not sure what all should be done in this method.  My route object looks correct, I can see both proxies and target but Im just not sure if I need to make a connection to the 1st proxy using a custom HttpConnect method object.  I noticed there is no Http "CONNECT" method, there is HttpGet, HttpPost and HttpDelete.  Should I create my own HttpConnect object for proxy chaining or can I accomplish the "Connect" command on the 1st proxy in the chain some other way? Any example code or advice would be appreicated, thank you. -Ryan</body>
  </mail>
  <mail>
    <header>Re: Proxy chaining</header>
    <body>Ryan, HttpClient routing API is fully proxy chaining aware. However, request execution code presently only supports connection tunneling through a single proxy only. Protocol logic for proxy chaining still needs to be implemented. There is no class representing CONNECT method in HttpClient because it is a special purpose method and as such it should never be executed by the end users of HttpClient. Hope this makes some sense. Oleg</body>
  </mail>
  <mail>
    <header>Re: Proxy chaining</header>
    <body>Thanks Oleg. Thanks for the pointer on CONNECT. Makes sense.  Ive forked the httpclient 4.2.x branch locally so I have my own copy to work with. I dont mind submitting patches if I have something usable and generic enough when Im done. So am I correct in thinking I should still use a "CONNECT" method for chaining but I should make HttpConnect() a private inner class of  my custom RequestDirector class so end users wont call it?  Does HttpClient use the "CONNECT" method anywhere internally that I am missing so I can see it being used as an example? Just trying to figure out if Im barking up the right tree with the CONNECT method for proxy chaining.  I can proxy chain using command line telnet, so I am just trying to recreate the same calls in httpclient at this point. Thanks again for all the help, -Ryan</body>
  </mail>
  <mail>
    <header>Re: Proxy chaining</header>
    <body>Ryan I think you are not the right track. Have a look at the #createTunnelToTarget. It basically contains all the necessary machinery to establish a simple (one proxy hop) route. You will need to do something very similar once per proxy hop. Things will get _very_ difficult though if you decide to support different authentication contexts per individual proxy hops. This will likely to require a major refactoring of authentication state management in HttpClient. Oleg</body>
  </mail>
  <mail>
    <header>Re: Proxy chaining</header>
    <body>Thanks Oleg. Great help.  Ive been using the logic from createTunnelToTarget() initially but wasnt sure if I needed a "CONNECT" method.  Now I see thats what the tunnelToTarget is doing, making a connect.  Thanks for pointing me back. A question about auth support for proxies, would it make more sense to fork 4.3.x instead of 4.2.x if I wanted to attempt auth support for proxy chains? Thanks again for all the help. -Ryan</body>
  </mail>
  <mail>
    <header>Re: Proxy chaining</header>
    <body>Yes, absolutely. The most fundamental change that would have to make to achieve that is to support multiple proxy AuthStates, one per proxy hop. Oleg to I a</body>
  </mail>
  <mail>
    <header>Re: Proxy chaining</header>
    <body>Thanks as always Oleg! I and need to not the</body>
  </mail>
  <mail>
    <header>Preferred approach for wire level request &amp;quot;tracing&amp;quot; in HttpClient 4.2/4.3</header>
    <body>Hi, I'm currently in the process of upgrading HttpClient from 4.1 to 4.2, (but also looking at the changes in 4.3-beta1) and meeting some challenges on the way. One of them is the replacement of deprecated API, most notably org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager. Previously we created a subclass of ThreadSafeClientConnManager to implement wire level HTTP request/response pair tracing for debugging purposes. To achieve this we implemented a subclass of DefaultClientConnection that writes all HTTP requests and associated responses to disk, by using a specific org.apache.http.io.Session(Input|Output)Buffer implementation, analogous to org.apache.http.impl.conn.LoggingSession(Input|Output)Buffer. We used the DefaultClientConnectionOperator hook to expose our implementation of DefaultClientConnection to ThreadSafeClientConnManager. The drawback of our current approach is that we used a rather ugly way (using reflection) to close the forked input and output streams in an override of ThreadSafeClientConnManager.releaseConnection() because DefaultClientConnection instances are wrapped in a ManagedClientConnection instance and the managed DefaultClientConnection was not directly accessible. Due to API changes, this hack is no longer possible in 4.2. What would be the preferred approach to implement this functionality in 4.2/4.3? Regards, Walco</body>
  </mail>
  <mail>
    <header>Re: Preferred approach for wire level request &amp;quot;tracing&amp;quot; in HttpClient 4.2/4.3</header>
    <body>What's deficient about the built in wire log? http://hc.apache.org/httpcomponents-client-ga/logging.html</body>
  </mail>
  <mail>
    <header>Re: Preferred approach for wire level request &amp;quot;tracing&amp;quot; in HttpClient 4.2/4.3</header>
    <body>Hi Stephen, Good question. The wire log is not sufficient to fulfill our requirement of being able to storing HTTP requests/response pairs in a specific directory format (one directory per source/destination host/day). Regards, Walco On Tue, May 7, 2013 at 5:58 AM, Stephen J. Butler</body>
  </mail>
  <mail>
    <header>Re: Preferred approach for wire level request &amp;quot;tracing&amp;quot; in HttpClient 4.2/4.3</header>
    <body>Walco What specifically are you having difficulties with: implementing trace logging or making the standard pooling connection manager use your custom connection class? Oleg</body>
  </mail>
  <mail>
    <header>Re: Preferred approach for wire level request &amp;quot;tracing&amp;quot; in HttpClient 4.2/4.3</header>
    <body>Hi Oleg, We have an implementation of tracing to files in place, based on the 4.1 API. In 4.2.3, there was an issue that a custom ClientConnectionOperator was not honored everywhere, but that is now fixed. The issue that remains is that we had a suboptimal approach to close the forked streams if a response is complete in case of persistent HTTP connections, an event that is not "signaled" in our custom OperatedClientConnection. This approach consists of an override of the method PoolingClientConnectionManager.releaseConnection(), and using reflection to get our custom connection implementation from the ManagedClientConnection in order to close the forked file input/output streams we allocated earlier. Regards, Walco</body>
  </mail>
  <mail>
    <header>Re: Preferred approach for wire level request &amp;quot;tracing&amp;quot; in HttpClient 4.2/4.3</header>
    <body>Walco If I understand it correctly and your goal is to enhance connection instances with additional functionality on a per request basis I am afraid the only proper solution would be to develop a custom connection manager. Oleg</body>
  </mail>
  <mail>
    <header>why are so different the response headers as reported by wget and httpclient?</header>
    <body>~ and what do you have to do get the same or a similar response in order to strategize around the "HTTP/1.1 302 Moved Temporarily" using httpclient? ~ thanks, lbrtchx ~ // __ wget $ wget --server-response --spider "http://download.ted.com/talks/LuisVonAhn_2011X-480p.mp4?apikey=TEDDOWNLOAD" Spider mode enabled. Check if remote file exists. --2013-05-06 22:51:07-- http://download.ted.com/talks/LuisVonAhn_2011X-480p.mp4?apikey=TEDDOWNLOAD Resolving download.ted.com (download.ted.com)... 54.242.198.180 Connecting to download.ted.com (download.ted.com)|54.242.198.180|:80... connected. HTTP request sent, awaiting response... HTTP/1.1 302 Moved Temporarily Server: nginx Date: Tue, 07 May 2013 02:51:22 GMT Content-Type: text/html Connection: keep-alive X-Cache: HIT Location: http://video.ted.com/talk/podcast/2011X/None/LuisVonAhn_2011X-480p.mp4 Location: http://video.ted.com/talk/podcast/2011X/None/LuisVonAhn_2011X-480p.mp4 [following] Spider mode enabled. Check if remote file exists. --2013-05-06 22:51:08-- http://video.ted.com/talk/podcast/2011X/None/LuisVonAhn_2011X-480p.mp4 Resolving video.ted.com (video.ted.com)... 4.27.18.254, 8.254.54.254 Connecting to video.ted.com (video.ted.com)|4.27.18.254|:80... connected. HTTP request sent, awaiting response... HTTP/1.1 200 OK Cache-Control: public, max-age=31536000 Date: Tue, 07 May 2013 02:51:22 GMT Content-Length: 116040512 Content-Type: video/mp4 ETag: "72d080c60cb8fdd4add7187d3ffedcd3" Expires: Sun, 27 Apr 2014 13:47:31 GMT Last-Modified: Sat, 11 Aug 2012 01:47:29 GMT Accept-Ranges: bytes Server: AmazonS3 x-amz-id-2: g2uS6EA5QCq8d0uwrem9QQueXR+L8lHNj85ePL1WD8Ju6iV94J3QuRGsCdqPgTMN x-amz-request-id: F83B24FCD7D43060 Connection: keep-alive Length: 116040512 (111M) [video/mp4] Remote file exists. ~ // __ httpclient // __ |http://download.ted.com/talks/LuisVonAhn_2011X-480p.mp4?apikey=TEDDOWNLOAD| // __ httpResponse.getStatusLine().toString(): |HTTP/1.1 404 Not Found| // __  7 response headers received from server: // __ Server: Footprint 4.8/FPMCP // __ Mime-Version: 1.0 // __ Date: Tue, 07 May 2013 02:44:01 GMT // __ Content-Type: text/html // __ Content-Length: 633 // __ Expires: Tue, 07 May 2013 02:44:01 GMT // __ Connection: close ~</body>
  </mail>
  <mail>
    <header>Re: why are so different the response headers as reported by wget and httpclient?</header>
    <body>What does a full wire log show? http://hc.apache.org/httpcomponents-client-ga/logging.html</body>
  </mail>
  <mail>
    <header>Re: why are so different the response headers as reported by wget and httpclient?</header>
    <body>a full wire log shows: $ java -Dorg.apache.commons.logging.Log=org.apache.commons.logging.impl.SimpleLog -Dorg.apache.commons.logging.simplelog.showdatetime=true -Dorg.apache.commons.logging.simplelog.log.org.apache.http=DEBUG -Dorg.apache.commons.logging.simplelog.log.org.apache.http.wire=ERROR HC_DownMetaHTTPHeaders02Test ... // __ |http://download.ted.com/talks/LuisVonAhn_2011X-480p.mp4?apikey=TEDDOWNLOAD| // __ httpGet.getRequestLine(): |GET http://download.ted.com/talks/LuisVonAhn_2011X-480p.mp4?apikey=TEDDOWNLOAD HTTP/1.1| // ___ after (new HttpGet(http://download.ted.com/talks/LuisVonAhn_2011X-480p.mp4?apikey=TEDDOWNLOAD)): |00 hours, 00 mins, 00 seconds 000 (ms)| // __ aHost: |download.ted.com| // __ aRqLn: |GET http://download.ted.com/talks/LuisVonAhn_2011X-480p.mp4?apikey=TEDDOWNLOAD HTTP/1.1| // __ RqstHdrs.length: |7|[Lorg.apache.http.Header;@ca8d94| 2013/05/07 00:31:06:169 GMT [DEBUG] BasicClientConnectionManager - Get 2013/05/07 00:31:06:172 GMT [DEBUG] DefaultClientConnectionOperator - Connecting to download.ted.com:80 2013/05/07 00:31:06:193 GMT [DEBUG] RequestAddCookies - CookieSpec selected: best-match 2013/05/07 00:31:06:193 GMT [DEBUG] RequestAddCookies - Cookie [version: 0][name: symfony][value: 1cqnumd1nhgttffc2lkb08u8t2][domain: .ted.com][path: /][expiry: null] match [download.ted.com:80/talks/LuisVonAhn_2011X-480p.mp4] 2013/05/07 00:31:06:193 GMT [DEBUG] RequestAuthCache - Auth cache not set in the context 2013/05/07 00:31:06:207 GMT [DEBUG] RequestTargetAuthentication - Target auth state: UNCHALLENGED 2013/05/07 00:31:06:207 GMT [DEBUG] RequestProxyAuthentication - Proxy auth state: UNCHALLENGED 2013/05/07 00:31:06:207 GMT [DEBUG] DefaultHttpClient - Attempt 1 to execute request 2013/05/07 00:31:06:208 GMT [DEBUG] DefaultClientConnection - Sending request: GET /talks/LuisVonAhn_2011X-480p.mp4?apikey=TEDDOWNLOAD HTTP/1.1 2013/05/07 00:31:06:208 GMT [DEBUG] headers - &amp;gt;&amp;gt; GET /talks/LuisVonAhn_2011X-480p.mp4?apikey=TEDDOWNLOAD HTTP/1.1 2013/05/07 00:31:06:209 GMT [DEBUG] headers - &amp;gt;&amp;gt; Host: download.ted.com 2013/05/07 00:31:06:209 GMT [DEBUG] headers - &amp;gt;&amp;gt; Connection: keep-alive 2013/05/07 00:31:06:210 GMT [DEBUG] headers - &amp;gt;&amp;gt; User-Agent: Mozilla/5.0 (X11; Linux i686; rv:10.0.4) Gecko/20100101 Firefox/10.0.4 Iceweasel/10.0.4 2013/05/07 00:31:06:210 GMT [DEBUG] headers - &amp;gt;&amp;gt; Accept: text/html, text/*;q=0.9, image/jpeg;q=0.9, image/png;q=0.9, image/*;q=0.9, */*;q=0.8 2013/05/07 00:31:06:210 GMT [DEBUG] headers - &amp;gt;&amp;gt; Accept-Encoding: gzip, deflate, x-gzip, x-deflate 2013/05/07 00:31:06:213 GMT [DEBUG] headers - &amp;gt;&amp;gt; Accept-Charset: utf-8,*;q=0.5 2013/05/07 00:31:06:213 GMT [DEBUG] headers - &amp;gt;&amp;gt; Accept-Language: en-US,en;q=0.9 2013/05/07 00:31:06:213 GMT [DEBUG] headers - &amp;gt;&amp;gt; Cookie: symfony=1cqnumd1nhgttffc2lkb08u8t2 2013/05/07 00:31:06:213 GMT [DEBUG] headers - &amp;gt;&amp;gt; Cookie2: $Version=1 2013/05/07 00:31:06:595 GMT [DEBUG] DefaultClientConnection - Receiving response: HTTP/1.1 302 Moved Temporarily 2013/05/07 00:31:06:595 GMT [DEBUG] headers - &amp;lt;&amp;lt; HTTP/1.1 302 Moved Temporarily 2013/05/07 00:31:06:596 GMT [DEBUG] headers - &amp;lt;&amp;lt; Server: nginx 2013/05/07 00:31:06:596 GMT [DEBUG] headers - &amp;lt;&amp;lt; Date: Tue, 07 May 2013 04:31:21 GMT 2013/05/07 00:31:06:596 GMT [DEBUG] headers - &amp;lt;&amp;lt; Content-Type: text/html 2013/05/07 00:31:06:596 GMT [DEBUG] headers - &amp;lt;&amp;lt; Transfer-Encoding: chunked 2013/05/07 00:31:06:596 GMT [DEBUG] headers - &amp;lt;&amp;lt; Connection: keep-alive 2013/05/07 00:31:06:596 GMT [DEBUG] headers - &amp;lt;&amp;lt; X-Cache: MISS 2013/05/07 00:31:06:596 GMT [DEBUG] headers - &amp;lt;&amp;lt; Location: http://video.ted.com/talk/podcast/2011X/None/LuisVonAhn_2011X-480p.mp4 2013/05/07 00:31:06:596 GMT [DEBUG] DefaultHttpClient - Connection can be kept alive indefinitely 2013/05/07 00:31:06:596 GMT [DEBUG] DefaultRedirectStrategy - Redirect requested to location 'http://video.ted.com/talk/podcast/2011X/None/LuisVonAhn_2011X-480p.mp4' 2013/05/07 00:31:06:596 GMT [DEBUG] DefaultHttpClient - Resetting target auth state 2013/05/07 00:31:06:596 GMT [DEBUG] DefaultHttpClient - Redirecting to 'http://video.ted.com/talk/podcast/2011X/None/LuisVonAhn_2011X-480p.mp4' 2013/05/07 00:31:06:596 GMT [DEBUG] BasicClientConnectionManager - Releasing connection org.apache.http.impl.conn.ManagedClientConnectionImpl@15005d 2013/05/07 00:31:06:596 GMT [DEBUG] BasicClientConnectionManager - Connection can be kept alive indefinitely 2013/05/07 00:31:06:597 GMT [DEBUG] BasicClientConnectionManager - Get 2013/05/07 00:31:06:597 GMT [DEBUG] DefaultClientConnection - Connection 0.0.0.0:43290&amp;lt;-&amp;gt;54.242.198.180:80 closed 2013/05/07 00:31:06:597 GMT [DEBUG] DefaultClientConnectionOperator - Connecting to video.ted.com:80 2013/05/07 00:31:06:612 GMT [DEBUG] RequestAddCookies - CookieSpec selected: best-match 2013/05/07 00:31:06:612 GMT [DEBUG] RequestAddCookies - Cookie [version: 0][name: symfony][value: 1cqnumd1nhgttffc2lkb08u8t2][domain: .ted.com][path: /][expiry: null] match [video.ted.com:80/talk/podcast/2011X/None/LuisVonAhn_2011X-480p.mp4] 2013/05/07 00:31:06:612 GMT [DEBUG] RequestAuthCache - Auth cache not set in the context 2013/05/07 00:31:06:613 GMT [DEBUG] RequestTargetAuthentication - Target auth state: UNCHALLENGED 2013/05/07 00:31:06:613 GMT [DEBUG] RequestProxyAuthentication - Proxy auth state: UNCHALLENGED 2013/05/07 00:31:06:613 GMT [DEBUG] DefaultHttpClient - Attempt 2 to execute request 2013/05/07 00:31:06:613 GMT [DEBUG] DefaultClientConnection - Sending request: GET /talk/podcast/2011X/None/LuisVonAhn_2011X-480p.mp4 HTTP/1.1 2013/05/07 00:31:06:613 GMT [DEBUG] headers - &amp;gt;&amp;gt; GET /talk/podcast/2011X/None/LuisVonAhn_2011X-480p.mp4 HTTP/1.1 2013/05/07 00:31:06:614 GMT [DEBUG] headers - &amp;gt;&amp;gt; Host: download.ted.com 2013/05/07 00:31:06:614 GMT [DEBUG] headers - &amp;gt;&amp;gt; Connection: keep-alive 2013/05/07 00:31:06:614 GMT [DEBUG] headers - &amp;gt;&amp;gt; User-Agent: Mozilla/5.0 (X11; Linux i686; rv:10.0.4) Gecko/20100101 Firefox/10.0.4 Iceweasel/10.0.4 2013/05/07 00:31:06:614 GMT [DEBUG] headers - &amp;gt;&amp;gt; Accept: text/html, text/*;q=0.9, image/jpeg;q=0.9, image/png;q=0.9, image/*;q=0.9, */*;q=0.8 2013/05/07 00:31:06:614 GMT [DEBUG] headers - &amp;gt;&amp;gt; Accept-Encoding: gzip, deflate, x-gzip, x-deflate 2013/05/07 00:31:06:615 GMT [DEBUG] headers - &amp;gt;&amp;gt; Accept-Charset: utf-8,*;q=0.5 2013/05/07 00:31:06:615 GMT [DEBUG] headers - &amp;gt;&amp;gt; Accept-Language: en-US,en;q=0.9 2013/05/07 00:31:06:615 GMT [DEBUG] headers - &amp;gt;&amp;gt; Cookie: symfony=1cqnumd1nhgttffc2lkb08u8t2 2013/05/07 00:31:06:615 GMT [DEBUG] headers - &amp;gt;&amp;gt; Cookie2: $Version=1 2013/05/07 00:31:06:629 GMT [DEBUG] DefaultClientConnection - Receiving response: HTTP/1.1 404 Not Found 2013/05/07 00:31:06:632 GMT [DEBUG] headers - &amp;lt;&amp;lt; HTTP/1.1 404 Not Found 2013/05/07 00:31:06:632 GMT [DEBUG] headers - &amp;lt;&amp;lt; Server: Footprint 4.8/FPMCP 2013/05/07 00:31:06:632 GMT [DEBUG] headers - &amp;lt;&amp;lt; Mime-Version: 1.0 2013/05/07 00:31:06:633 GMT [DEBUG] headers - &amp;lt;&amp;lt; Date: Tue, 07 May 2013 04:31:21 GMT 2013/05/07 00:31:06:633 GMT [DEBUG] headers - &amp;lt;&amp;lt; Content-Type: text/html 2013/05/07 00:31:06:633 GMT [DEBUG] headers - &amp;lt;&amp;lt; Content-Length: 632 2013/05/07 00:31:06:633 GMT [DEBUG] headers - &amp;lt;&amp;lt; Expires: Tue, 07 May 2013 04:31:21 GMT 2013/05/07 00:31:06:633 GMT [DEBUG] headers - &amp;lt;&amp;lt; Connection: close // __ httpResponse.getStatusLine().toString(): |HTTP/1.1 404 Not Found| 2013/05/07 00:31:06:634 GMT [DEBUG] BasicClientConnectionManager - Releasing connection org.apache.http.impl.conn.ManagedClientConnectionImpl@cb03c4 2013/05/07 00:31:06:634 GMT [DEBUG] DefaultClientConnection - Connection 0.0.0.0:52042&amp;lt;-&amp;gt;4.27.18.254:80 shut down // __ request line: |GET http://download.ted.com/talks/LuisVonAhn_2011X-480p.mp4?apikey=TEDDOWNLOAD HTTP/1.1| // __  7 response headers received from server: // __ Server: Footprint 4.8/FPMCP // __ Mime-Version: 1.0 // __ Date: Tue, 07 May 2013 04:31:21 GMT // __ Content-Type: text/html // __ Content-Length: 632 // __ Expires: Tue, 07 May 2013 04:31:21 GMT // __ Connection: close</body>
  </mail>
  <mail>
    <header>Re: why are so different the response headers as reported by wget and httpclient?</header>
    <body>This is suspicious: [snip] 2013/05/07 00:31:06:613 GMT [DEBUG] headers - &amp;gt;&amp;gt; GET It's passing the wrong 'Host' line. That's why you are getting a 404. Are you using standard code to handle the redirect, or writing your own?</body>
  </mail>
  <mail>
    <header>Re: why are so different the response headers as reported by wget and httpclient?</header>
    <body>well, the code section in which I set the host I pasted bellow ( I will have to do the redirect myself and I would like to handle/get all the response headers of every redirect. How do you do that? Could you point me to some basic redirect code example? ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ String aRqLn = httpGet.getRequestLine().toString();   // Request Line ... // __ parsing host from URL ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ lbrtchx</body>
  </mail>
  <mail>
    <header>Re: why are so different the response headers as reported by wget and httpclient?</header>
    <body>Yes, but that's not correct after the redirect. First time it connects the 'Host' line should be 'download.ted.com'. But the second time, after following the redirect, it needs to be 'video.ted.com'. I see, you're setting the request header manually! That's why HttpClient is failing to properly set the Host header. I'd suggest you not set the Host header manually and let HttpClient do it. It will add it itself; that's mandated by the HTTP 1.1 spec. If you insist on handling the redirect manually, set the ClientPNames.HANDLE_REDIRECTS parameter to Boolean.FALSE. Then the return from executing your request will be the raw redirect, and you'll have to catch that case and resubmit the request on the proper URL.</body>
  </mail>
  <mail>
    <header>Re: why are so different the response headers as reported by wget and httpclient?</header>
    <body>That did it! HC is seamlessly handling redirection, yet I still have 2 questions: 1) even if, since all I need are the headers, for which I "only" need to go: // __ closing underlying stream (just getting all HTTP headers for this URL's connection) the InputStream is taking like a minute to actually close. Why is that happening? It seems once you go "GET ..." the server does as you tell it and sends the data anyway, which seems to be patiently swallowed by HC, even if the data is not saved to local storage Is there a way to just get the headers and the negotiation without the actual payload? (like the spider option of wget) 2) What is the listener interface you need to implement to replicate with HC what you get from the wire log via commons logging? Thanks, lbrtchx</body>
  </mail>
  <mail>
    <header>Re: why are so different the response headers as reported by wget and httpclient?</header>
    <body>A HEAD request, instead of GET, should return just the headers. Although I'm not a 100% sure about that... the server might still be allowed to respond with a body for a HEAD request. Either way, use EntityUtils.consumeQuietly(ent) is the best way to handle unwanted entity content. Just closing the input stream is a little rude.</body>
  </mail>
  <mail>
    <header>[ANNOUNCEMENT] HttpComponents HttpCore 4.3-beta2 Released</header>
    <body>The Apache HttpComponents project is pleased to announce release 4.3-beta2 of HttpComponents HttpCore. This release addresses performance issues in the non-blocking connection pool implementation and also includes a number of performance improvements in the low level NIO based transport components. Download - Release notes - HttpComponents site - About HttpComponents Core - HttpCore is a set of low level HTTP transport components that can be used to build custom client and server side HTTP services with a minimal footprint. HttpCore supports two I/O models: a blocking I/O model based on the classic Java I/O and a non-blocking, event driven I/O model based on Java NIO.</body>
  </mail>
  <mail>
    <header>Re: HTTP async client and accessing server certificate (SSL)</header>
    <body>Hi Oleg, Thanks a lot for the response. I have one more question. In my client application, I need to provide extra authorization based on the common name in the server certificate. I want to allow the request-response exchange (I am sending a POST request) only after the server passes this extra authorization step. Is using BasicAsyncResponseConsumer going be too late for me to access the server certificate? I want the behavior similar to following sample code based on HttpsURLConnection : ************************************************************************************************************ HttpsURLConnection urlConnection = ... ... urlConnection.connect(); //Establish connection for initial SSL handshake ************************************************************************************************************ Thanks once again Sachin</body>
  </mail>
  <mail>
    <header>Re: HTTP async client and accessing server certificate (SSL)</header>
    <body>Hi Sachin There is currently no easy way of obtaining the SSL session details prior to issuing a request. Feel free to raise an improvement request in JIRA for this problem. Oleg</body>
  </mail>
  <mail>
    <header>Re: HTTP async client and accessing server certificate (SSL)</header>
    <body>Hi Oleg, Thanks for your reply. I started digging through the Apache async client code and have come with a way to access the server certificate immediately after the SSL handshake in the verify method of SSLSetupHandler, To achieve this, I created my own MySSLLayeringStrategy class that extends SSLLayeringStrategy as shows below : ******************************************************** SSLMode.CLIENT, this.sslContext, extra authorization based on peer DN ******************************************************** Now, I am using MySSLLayeringStrategy to create AsyncScheme ******************************************************** AsyncScheme scheme = new AsyncScheme( "https", 443, new ******************************************************** This seems to be doing the job but the exception thrown in the verify method causes the DefaultHttpAsyncClient instance to close abnormally as I can see from the exception thrown: ******************************************************** .May 30, 2013 2:30:18 PM org.apache.http.impl.nio.client.InternalIOReactorExceptionHandler handle SEVERE: Fatal runtime error java.lang.RuntimeException: Authorization failed .... .... May 30, 2013 2:30:18 PM org.apache.http.impl.nio.client.AbstractHttpAsyncClient doExecute SEVERE: I/O reactor terminated abnormally org.apache.http.nio.reactor.IOReactorException: I/O dispatch worker terminated abnormally at org.apache.http.impl.nio.reactor.AbstractMultiworkerIOReactor.execute(AbstractMultiworkerIOReactor.java:382) at org.apache.http.impl.nio.conn.PoolingClientAsyncConnectionManager.execute(PoolingClientAsyncConnectionManager.java:108) Caused by: java.lang.RuntimeException: Authorization failed ******************************************************** Is my approach for accessing server certificate safe? If so, what is the safe way of throwing exception from the verify method? Thanks Sachin</body>
  </mail>
  <mail>
    <header>Re: HTTP async client and accessing server certificate (SSL)</header>
    <body>Why are throwing a RuntimeException exception for what is clearly an SSL issue? Oleg</body>
  </mail>
  <mail>
    <header>Re: HTTP async client and accessing server certificate (SSL)</header>
    <body>Throwing an SSLException was the right thing to do. Now, everything is working as expected. Thanks a lot Sachin</body>
  </mail>
  <mail>
    <header>error matching ssl certificate</header>
    <body>I have a single server configured hosting 3 domains, A.com, B.com, C.com, all with their own SSL certificates. Accessing these domains via a browser and SSL all works just fine. However, the web app on B needs to process a callback from C over SSL. B has a wildcard certificate for *.B.com, and the production site is just B.com. My testing sandbox is at X.B.com. Both work fine with the wildcard certificate in a browser. To send the callback I am using HttpClient 4.2.3 : httpClient.getParams().setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, However, this throws the following exception : at org.apache.http.conn.ssl.AbstractVerifier.verify(AbstractVerifier.java:227) ~[httpclient-4.2.3.jar:4.2.3] I even tried setting the Host header manually to "X.B.com" and it still didn't help (even though the docs say that this is set based upon the URI provided to HttpClient). What do I need to do to make the client negotiate the SSL connection for the correct host so that the correct SSL certificate is matched up? Again, the wildcard certificate works just fine in a browser for both B.com and X.B.com, but not for HttpClient. Thanks Chris</body>
  </mail>
  <mail>
    <header>Re: error matching ssl certificate</header>
    <body>I suspect this is due to SNI extensions [1] that are supported by the browser but are not fully supported by Java. If your application is running on Oracle Java 1.7 you can activate SNI support as described here [2]. Please note the code snippet in the Wiki page is written using HttpClient 4.3 APIs but a similar technique can be used with earlier versions of HttpClient. Oleg [1] http://en.wikipedia.org/wiki/Server_Name_Indication [2] https://wiki.apache.org/HttpComponents/SNISupport</body>
  </mail>
  <mail>
    <header>Re: error matching ssl certificate</header>
    <body>Thanks for the wikipedia link - I have been scratching my head in confusion over this wondering why it wasn't using the Host header, and now it all makes sense. I'm still running under TC6, so no Java 7 at the moment. Is there a solution for Java 6? If not, I'll have to upgrade because getting another IP address is really just a bandaid (and a bad one at that) as I have a feeling I'm going to run into this problem again shortly. How stable is the beta of HttpClient 4.3? Thanks Chris</body>
  </mail>
  <mail>
    <header>Re: error matching ssl certificate</header>
    <body>None I know of. It is quite stable for a BETA ;-) If you app is to go productive in a few months I would strongly recommend migrating to 4.3 already. 4.3 GA can be expected by mid Summer. Oleg</body>
  </mail>
  <mail>
    <header>[ANNOUNCEMENT] HttpComponents HttpAsyncClient 4.0-beta4 Released</header>
    <body>Apache HttpComponents project is pleased to announce the fourth BETA release of HttpAsyncClient 4.0. This release delivers significant performance improvements in request execution, especially for short HTTP messages, and also re-aligns programming interfaces used by the library with HttpCore 4.3 and HttpClient 4.3 APIs. Configuration and preference APIs of HttpAsyncClient are now consistent with those used by HttpClient 4.3. Users of HttpAsyncClient are advised to upgrade. ------------------- Download - Release notes - HttpComponents site - ------------------- About Apache HttpAsyncClient Although the java.net package provides basic functionality for accessing resources via HTTP, it doesn't provide the full flexibility or functionality needed by many applications. HttpAsyncClient seeks to fill this void by providing an efficient, up-to-date, and feature-rich package with an event-driven programming interface based on a non-blocking I/O model.</body>
  </mail>
  <mail>
    <header>Truning off Chunked Encoding...</header>
    <body>Hi All,   I recently upgraded from http client 3.1 to 4.2.5 and discovered that some http proxies (earlier version squid proxy does not supported it) will not work with 4.2.5 due to not supporting chunked encoding.   So for now how do I tell 4.2.5 not to use chunked encoding? I do not have control over proxies to get them to upgrade that do not support chunked encoding.   Thanks, -Tony</body>
  </mail>
  <mail>
    <header>Re: Truning off Chunked Encoding...</header>
    <body>Use the setChunked method on the entity which defines the content. There is a content size limit of around 2GB if you do not use chunked transfer.</body>
  </mail>
  <mail>
    <header>Re: Turning off Chunked Encoding...</header>
    <body>Thanks David, I am curious does anyone know if chunked encoding by default was enabled in httpclient sometime after httpclient 3.1? I see hints of it when I google. Thanks, -Tony ________________________________ Sent: Monday, May 20, 2013 7:49 AM Subject: Re: Truning off Chunked Encoding...  Use the setChunked method on the entity which defines the content. There is a content size limit of around 2GB if you do not use chunked transfer.</body>
  </mail>
  <mail>
    <header>Re: Turning off Chunked Encoding...</header>
    <body>sometime after httpclient 3.1? I see hints of it when I google. Chunk content coding was always on since early 2.x versions. Support for chunk transfer encoding is mandated by the HTTP/1.1 spec. Oleg</body>
  </mail>
  <mail>
    <header>Re: Truning off Chunked Encoding...</header>
    <body>Alternatively, one can make HttpClient use HTTP/1.0, which will automatically disable chunk content coding. Oleg</body>
  </mail>
  <mail>
    <header>Re: Truning off Chunked Encoding...</header>
    <body>Thanks I realized that but was trying to avoid doing that. I will stick with latest HttpClient since most my users do not use a proxy and those corps who have http 1.1 issues and chuncked encoding will need to fix thier infrastructure.   Many Thanks, -Tony Sent: Wednesday, May 22, 2013 1:58 AM Subject: Re: Truning off Chunked Encoding... Alternatively, one can make HttpClient use HTTP/1.0, which will automatically disable chunk content coding. Oleg</body>
  </mail>
  <mail>
    <header>Re: HttpClient with PoolingClientConnectionManager throws read time out</header>
    <body>Guys, I'm having this same issue, but it's not clear to me if there was a resolution, and what was the settings required to avoid hitting this timeout. Thanks -- View this message in context: http://httpcomponents.10934.n7.nabble.com/HttpClient-with-PoolingClientConnectionManager-throws-read-time-out-tp18437p20125.html Sent from the HttpClient-User mailing list archive at Nabble.com.</body>
  </mail>
  <mail>
    <header>Re: HttpClient with PoolingClientConnectionManager throws read time out</header>
    <body>Did you set the CoreConnectionPNames.SO_TIMEOUT somewhere in your code? According to the httpclient-tutorial.pdf, if you didn't set the socket timeout, your read operation should never be timed out.  Here's the copied and pasted section from the PDF. CoreConnectionPNames.SO_TIMEOUT='http.socket.timeout': defines the socket timeout (SO_TIMEOUT) in milliseconds, which is the timeout for waiting for data or, put differently, a maximum period inactivity between two consecutive data packets). A timeout value of zero is interpreted as an infinite timeout. This parameter expects a value of type java.lang.Integer. If this parameter is not set, read operations will not time out (infinite timeout). Good luck! dc</body>
  </mail>
  <mail>
    <header>Target server digest authentication fails with Proxy Basic auth</header>
    <body>Hi Folks, We are trying to do HTTPGet on a target server enabled with Digest authentication. It works perfectly fine, however when proxy with basic authentication is introduced target authentication is failing. We are using IBM JDK, HTTP Client 4.2.5. Has anybody faced similar issues and knows a fix to it? Code: Credentials targetCredentials = new UsernamePasswordCredentials(targetUser, Credentials proxyCredentials = new UsernamePasswordCredentials(proxyUser, -- Regards, Srihari NA</body>
  </mail>
  <mail>
    <header>Re: Target server digest authentication fails with Proxy Basic auth</header>
    <body>Please post a complete wire log of the session. See HttpClient logging guide for instructions on wire / context logging. Oleg</body>
  </mail>
  <mail>
    <header>Re: Target server digest authentication fails with Proxy Basic auth</header>
    <body>Here I have attached logs for both scenarios with log level of org.apache.http.level = FINEST Target server with Digest Auth is working fine Target server with Digest Auth with Proxy (Basic Auth) fails -- Regards, Srihari NA</body>
  </mail>
  <mail>
    <header>Re: Target server digest authentication fails with Proxy Basic auth</header>
    <body>It is a known compatibility issue with Microsoft IIS server caused by what I believe is a bug in Microsoft's implementation of the DIGEST scheme. Please see this JIRA for detailed explanation. https://issues.apache.org/jira/browse/HTTPCLIENT-1071 Oleg</body>
  </mail>
  <mail>
    <header>ByPassing NTLM authentication in HTTP Client 4.X</header>
    <body>Hi , We are facing problem in NTLM authentication while using HTTP Client version 4.1.1 version ( we tried with 4.2.5 as well same problem). We are getting following exception while connect in NTLM proxy authentication environment: org.apache.http.client.protocol.RequestProxyAuthentication - Proxy authentication error: Credentials cannot be used for NTLM authentication: ( With Status Code : 407) We had written following way the code : After that we tried as mentioned in below link which also does not work: http://hc.apache.org/httpcomponents-client-ga/ntlm.html Then we thought of by passing NTLM authentication as mentioned below : Again bad luck. And Java's URLConnection works well with NTLM without any issues so we are wondering what is something missing in HTTP Client or the way we are using. Please suggest what could be the solution ASAP. Best Regards, Sumit Kumar Software Architect eRevMax Technologies Pvt. Ltd. Phone: +91 (0) 80 416 84 990| Mobile: +91 (0) 9741622116 | Skype: sumitkjm</body>
  </mail>
  <mail>
    <header>AUTO: Ravi C Chamarthy is out of the office (returning 05/30/2013)</header>
    <body>I am out of the office until 05/30/2013. Hi, I am on vacation from 28/05 to 30/05. For any question related to ISF Monet please forward them to Murthy [ Sreenivasa M Sista/India/IBM ]. Thanks, Ravi Chamarthy IBM Information Platform &amp;amp; Solutions IBM Software Group 91 40 669 57140 / ravi.chamarthy@in.ibm.com Note: This is an automated response to your message  "ByPassing NTLM authentication in HTTP Client 4.X" sent on 28/05/2013 19:50:55. This is the only notification you will receive while this person is away.</body>
  </mail>
  <mail>
    <header>Setting HTTP headers in InputStreamEntity</header>
    <body>I ​ am using InputStreamEntity ​;  I am reading data from a file input stream and sending it to remote server ; everything seems to be working fine. ​Now, I would like to be able to set a header just before inputstream finishes i.e. as soon as I read the last but one byte, I want to set a header. See below sample code-</body>
  </mail>
  <mail>
    <header>Re: Setting HTTP headers in InputStreamEntity</header>
    <body>Hit send too soon- The code is- left in inputStream But above code doesn't set header. I verified using Wireshark that headers have not been already sent so I believe there is still an opportunity to set them. Please suggest a way to handle this requirement. Thanks!</body>
  </mail>
  <mail>
    <header>4.3 issues</header>
    <body>Some of you have helped me in the past, so the initial paragraph you already know, but for completeness: I develop business process applications that operate around Microsoft Exchange and use EWS to manipulate Exchange objects. Since my agency went to NTLMv2 authentication, I could no longer use Java to authenticate to Exchange (all Red Hat Enterprise servers). To solve my authentication dilemma, I've set up a proxy to handle communications with Exchange since http components provided me the best way to authenticate and interact with Exchange. In a nutshell, my JAX-WS application interacts with a local "proxy servlet" that unloads the SOAP request, packs the request into an HttpPost object all folded up nicely with the NTLMv2 authentication objects, and gets SOAP response out of the entity returned by the Exchange server. The SOAP response is then returned to the proxy client. One other thing, in addition to the XML SOAP packet, the proxy must turnaround some of the HTTP headers as well. My last deployment went with core and client versions 4.2. Everything is working great on production right now. How can I help you? I can always stick with 4.2, but I'm willing to do my part to help insure a great HC product. You guys are among the most active, competent, and helpful open source practitioners, so anything I can do to help, let me know. Anyway, here is what I've found. I'm in the midst of a new development cycle to accommodate an upgrade to our Exchange server. I collect my jars using ivyresolve set to latest.release, and ivy gathered up the 4.3 jars (RCs I think) posted to maven site recently. My business processing has been broken in these new jars. What happens is when I contact the Exchange server with my SOAP request, Exchange returns this HTML error packet (which kinda sucks since the whole process is supposed to by XML based (why don't they send back an XML error packet), so the error my client sees is malformed XML error): I believe the request verb is the Exchange method requested, in this case, it was FindItem, What I notice is that some of the classes I use have been deprecated in 4.3, including: DefaultHttpClient, Not only are they deprecated, but they appear to be broken for my purposes. I don't really care about this if you don't since I can use 4.2, but if you do and would like me to trouble shoot, I am willing to do this. Alternatively, since I've completed my development work and submitted my artifacts to sysops using HC 4.2, I am now looking to convert my proxy servlet to use 4.3 for the next cycle. When I finish that process, hopefully all will work, and I will certainly let you know. I understand that you do not have access to an Exchange server running NTLMv2, so I'm happy to provide you with test activities there. Please let me know if there is anything more you'd like me to do. Thanks for all the good work, Dave</body>
  </mail>
  <mail>
    <header>Intercepting and responding to requests on client-side</header>
    <body>Hi, I'd like to be able to intercept requests targeted for certain endpoints issued by HttpClient and implement a custom handler for those requests. The handler should be able to generate a response for the requests on the client-side without actually connecting to a remote server. Is this possible with HttpClient? I've looked at HttpRequestInterceptor and HttpResponseInterceptor APIs, but these interceptors don't seem to be able to generate the actual response. marko</body>
  </mail>
  <mail>
    <header>Re: Intercepting and responding to requests on client-side</header>
    <body>Marco, Please upgrade to 4.3 and have a look at the new execution chain APIs. You can use the caching exec as an example of how HttpClient can be made to respond with a response without hitting the target server. Oleg</body>
  </mail>
  <mail>
    <header>Re: Intercepting and responding to requests on client-side</header>
    <body>thanks Oleg! I did some experimenting earlier with HC 4.2 using the following approach: - create a custom HttpClient subclass with overridden createRequestExecutor() method - make createRequestExecutor() return a custom HttpRequestExecutor with overridded execute() method I noticed that one problem with this approach was that I'm not able to intercept redirected requests. HC seems to be using DefaultRequestDirector for executing the redirected requests instead of the custom executor. Does using the new executions chain APIs solve this issue? marko</body>
  </mail>
  <mail>
    <header>Re: Intercepting and responding to requests on client-side</header>
    <body>It should. Oleg</body>
  </mail>
  <mail>
    <header>Re: Intercepting and responding to requests on client-side</header>
    <body>ok. I did some experimenting with this using HC 4.3b1, and it does appear to work. My proto code is available here: https://github.com/marko-asplund/tech-protos/blob/master/hc-proto/src/main/java/fi/markoa/proto/hc/RequestInterceptionDemo.java Is this the correct way to use the new API? Are any big changes expected in HC 4.3 beta before the final release? Any estimates for HC 4.3 final release date? As a side note, try-with-resources doesn't seem to work well with a set of related resources some of which implement AutoCloseable and some that don't. For example it doesn't seem to be practical to use try-with-resources with CloseableHttpClient, CloseableHttpResponse and HttpEntity, because if the first two would be closed automatically while the last one would be closed in a finally block, the resources would be closed in an incorrect order. marko</body>
  </mail>
  <mail>
    <header>Re: Intercepting and responding to requests on client-side</header>
    <body>I had something different in mind (see my pull request) but if that works then it is certainly not wrong. https://github.com/marko-asplund/tech-protos/pull/1 No big changes are planned. I just need to rewrite the tutorial. You can expect 4.3b2 in a week or two and a GA by the end of summer. It is no longer necessary to consume response entities from a finally clause. CloseableHttpResponse#close() will take care of resource deallocation in case the response content has not been fully consumed. Hope this helps Oleg</body>
  </mail>
  <mail>
    <header>Re: Intercepting and responding to requests on client-side</header>
    <body>Thanks a lot Oleg! I did some further testing and it turned out that my version of the code was actually trying to open a connection to the redirect target before the execute() method got a chance to run. This is a problem because the URLs refer to non-existent target in my case. Your solution on the other hand did not have this problem. marko</body>
  </mail>
  <mail>
    <header>4.3 issue with NTLMv2 authentication</header>
    <body>Ok, I guess my previous post was a bit winded, and I got no response. No big deal. I was able to get my application working using HC 4.3 for NTLMv2 authentication. I used your ClientPreemptiveDigestAuthentication class as a guide, and replaced all DigestScheme stuff with NTLM scheme stuff. I attach my code that is a slight variant of the Digest class. You may add this to your examples package if you wish. I do see one issue you may want to address. This call in the code below (line 44): entity.getContentLength() always returns -1 for me. The entity does unpack properly containing my SOAP response, even though getContentLength does not tell me the size of the payload. Of secondary importance, the symmetry is missing for the NTLMScheme class. You cannot instantiate an NTLMScheme object like you can a DigestScheme object, you need to go directly to an AuthScheme through the NTLMSchmeFactory. And the NTLMSchemeFactory does not have a getNTLMScheme method, just a method that returns an AuthScheme object. I don't see any way of actually handling an NTLMScheme object. Or perhaps you meant to hide the DigestScheme object behind a factory? I suppose not a big deal, but maybe something you want to consider. // Create AuthCache instance // NTLM-based AuthScheme // Add AuthCache to the execution context</body>
  </mail>
  <mail>
    <header>Re: 4.3 issue with NTLMv2 authentication</header>
    <body>On Mon, 2013-06-03 at 15:15 +0000, Godbey, David J. (HQ-LM020)[DIGITAL Actually I did respond to your first message. It was stored in my SENT box but for some reason never delivered to my SMTP server. I often use my mobile as a modem to connect to the Internet. Probably it got lost due to bad connection over radio. your ClientPreemptiveDigestAuthentication class as a guide, and replaced all DigestScheme stuff with NTLM scheme stuff. I attach my code that is a slight variant of the Digest class. You may add this to your examples package if you wish. NTLMv2 should work out of the box. If it does not please provide two wire / context logs: one generated with the 4.2.x version and another one with 4.3.x. always returns -1 for me. This is expected. Entity content is not delimited with a Content-Length header. Larger entities usually get transmitted chunk coded and their length is not known. does not tell me the size of the payload. instantiate an NTLMScheme object like you can a DigestScheme object, you need to go directly to an AuthScheme through the NTLMSchmeFactory. And the NTLMSchemeFactory does not have a getNTLMScheme method, just a method that returns an AuthScheme object. I don't see any way of actually handling an NTLMScheme object. Or perhaps you meant to hide the DigestScheme object behind a factory? I suppose not a big deal, but maybe something you want to consider Please raise a JIRA for this issue. Oleg</body>
  </mail>
  <mail>
    <header>RE: 4.3 issue with NTLMv2 authentication</header>
    <body>I raised two tickets per your request, 1363 and 1364. Let me know if you need anything more Actually I did respond to your first message. It was stored in my SENT box but for some reason never delivered to my SMTP server. I often use my mobile as a modem to connect to the Internet. your ClientPreemptiveDigestAuthentication class as a guide, and replaced all DigestScheme stuff with NTLM scheme stuff. I attach my code that is a slight variant of the Digest class. NTLMv2 should work out of the box. If it does not please provide two wire / context logs: This is expected. Entity content is not delimited with a Content-Length header. Larger entities</body>
  </mail>
  <mail>
    <header>RE: 4.3 issue with NTLMv2 authentication</header>
    <body>NTLMv2 in 4.3 works out of the box for the new classes. See tickets for more info. I'm reporting Actually I did respond to your first message. It was stored in my SENT box but for some reason never delivered to my SMTP server. I often use my mobile as a modem to connect to the Internet. your ClientPreemptiveDigestAuthentication class as a guide, and replaced all DigestScheme stuff with NTLM scheme stuff. I attach my code that is a slight variant of the Digest class. NTLMv2 should work out of the box. If it does not please provide two wire / context logs: This is expected. Entity content is not delimited with a Content-Length header. Larger entities</body>
  </mail>
  <mail>
    <header>Re: 4.3 issues</header>
    <body>On Fri, 2013-05-31 at 12:48 +0000, Godbey, David J. (HQ-LM020)[DIGITAL for completeness: EWS to manipulate Exchange objects. Since my agency went to NTLMv2 authentication, I could no longer use Java to authenticate to Exchange (all Red Hat Enterprise servers). To solve my authentication dilemma, I've set up a proxy to handle communications with Exchange since http components provided me the best way to authenticate and interact with Exchange. In a nutshell, my JAX-WS application interacts with a local "proxy servlet" that unloads the SOAP request, packs the request into an HttpPost object all folded up nicely with the NTLMv2 authentication objects, and gets SOAP response out of the entity returned by the Exchange server. The SOAP response is then returned to the proxy client. One other thing, in addition to the XML SOAP packet, the proxy must turnaround some of the HTTP headers as well. My last deployment went with core and client versions 4.2. Everything is working great on production right now. insure a great HC product. You guys are among the most active, competent, and helpful open source practitioners, so anything I can do to help, let me know. Anyway, here is what I've found. server. I collect my jars using ivyresolve set to latest.release, and ivy gathered up the 4.3 jars (RCs I think) posted to maven site recently. My business processing has been broken in these new jars. What happens is when I contact the Exchange server with my SOAP request, Exchange returns this HTML error packet (which kinda sucks since the whole process is supposed to by XML based (why don't they send back an XML error packet), so the error my client sees is malformed XML error): Not only are they deprecated, but they appear to be broken for my purposes. I don't really care about this if you don't since I can use 4.2, but if you do and would like me to trouble shoot, I am willing to do this. sysops using HC 4.2, I am now looking to convert my proxy servlet to use 4.3 for the next cycle. When I finish that process, hopefully all will work, and I will certainly let you know. I understand that you do not have access to an Exchange server running NTLMv2, so I'm happy to provide you with test activities there. Dave You can help us by actually trying out 4.3 APIs and giving feedback. I have not yet gotten around to updating the tutorial but all examples shipped with the distribution has already been ported. They should be a reasonable starting point. 4.2 APIs in the 4.3 branch should not be broken. If they are, I would like to fix it. Please open a JIRA for all regressions you have found and attach two wire / context logs - one generated with the 4.2.x version and another one with 4.3.x. Oleg</body>
  </mail>
  <mail>
    <header>Multiple connections with different SSL parameters</header>
    <body>Short version:- I'm trying to work out how to connect to multiple servers at the same time but with potentially different SSL requirements for those servers. E.g. use different client auth certs, which might be signed by the same CA. I've looked at and used the PoolingClientConnectionManager along with the SchemeRegistry.  However it seems that only one socket factory can be set for any given Scheme. Any advice on the best way to achieve this? What (I think) I'd really like is to have an optional socket factory per target host, in addition to the default for the scheme. More info: I've tried adding Schemes with a unique name, which works OK until the server sends a redirect.  I'd have to start intercepting these and re-writing the URL each time. I could sub-class PoolingClientConnectionManager and implement my own ClientConnectionOperator as a sub-class of DefaultClientConnectionOperator, and ensure that the right Scheme is in place, but it doesn't look like that's an intended way of extended the class.</body>
  </mail>
  <mail>
    <header>Re: Multiple connections with different SSL parameters</header>
    <body>You should implement a custom SSL socket factory that creates a new SSLContext for each new connection based on custom parameters passed to the #createSocket(HttpParams) method. HTTP parameters can be set on individual requests as appropriate. Oleg</body>
  </mail>
  <mail>
    <header>Re: Multiple connections with different SSL parameters</header>
    <body>Ah yes, that seems such an obvious solution now.  Seems to work nicely. Many thanks.</body>
  </mail>
  <mail>
    <header>Charset for header values when using HttpMultipartMode.STRICT</header>
    <body>I am using HttpClient 4.2.2 to upload a file with non ascii characters in the name using a multipart request.  The issue I'm running into is the character encoding used for the filename in the header is always US-ASCII instead of using the charset on the HttpMultipart MIME entity. When constructing a new MultipartEntity I pass in a mode of STRICT which, after looking at the source, I found will always use MIME.DEFAULT_CHARSET (US-ASCII).  If I use the BROWSER_COMPATIBLE mode then the specified charset is used, but this mode will only write Content-Disposition and Content-Type headers.  Is there a reason that a multipart request with a mode of STRICT will always use US-ASCII for header values? Thanks, Brad</body>
  </mail>
  <mail>
    <header>Re: Charset for header values when using HttpMultipartMode.STRICT</header>
    <body>a multipart request.  The issue I'm running into is the character encoding used for the filename in the header is always US-ASCII instead of using the charset on the HttpMultipart MIME entity. When constructing a new MultipartEntity I pass in a mode of STRICT which, after looking at the source, I found will always use MIME.DEFAULT_CHARSET (US-ASCII).  If I use the BROWSER_COMPATIBLE mode then the specified charset is used, but this mode will only write Content-Disposition and Content-Type headers.  Is there a reason that a multipart request with a mode of STRICT will always use US-ASCII for header values? This is due to the requirement of the MIME specification. Non-ASCII characters are not allowed in MIME headers and must be escaped using Base64 or Quote-Printable encoding as described in RFC 2047 [1]. For more complex manipulations with MIME formatted content you might want to use mime4j [2] instead of HttpMime Oleg [1] http://tools.ietf.org/html/rfc2047 [2] http://james.apache.org/mime4j/index.html</body>
  </mail>
  <mail>
    <header>Forcing IP address in HTTP requests</header>
    <body>It would be useful to be able to start an HTTP request towards a server specifying the IP address together with the request, so that no DNS resolution is performed (unless, of course, redirection handling is enabled). This effect can be obtained with a custom DNS resolution class, but for a number of reasons (typically, to avoid double caching) we would find useful to have a direct way to do it. Maybe there's a way and we missed it. Suggestions? Should I add a Jira issue? seba Ciao, &amp;#009;&amp;#009;&amp;#009;&amp;#009;&amp;#009;seba</body>
  </mail>
  <mail>
    <header>Re: Forcing IP address in HTTP requests</header>
    <body>IP address together with the request, so that no DNS resolution is performed (unless, of course, redirection handling is enabled). (typically, to avoid double caching) we would find useful to have a direct way to do it. What's wrong with using an explicit HttpHost with a resolved address? --- CloseableHttpResponse httpResponse = httpClient.execute( --- Oleg</body>
  </mail>
  <mail>
    <header>Re: Forcing IP address in HTTP requests</header>
    <body>Ahem... :) Of course. The problem is that somehow when looking for something like this I thought that HttpHost constructors requiring a String required the same string of the request. If I might make a suggestion, having a constructor accepting an InetAddress would make it very clear that this is not the case when browsing through the API. Thanks! Ciao, &amp;#009;&amp;#009;&amp;#009;&amp;#009;&amp;#009;seba</body>
  </mail>
  <mail>
    <header>Re: Forcing IP address in HTTP requests</header>
    <body>I thought that HttpHost constructors requiring a String required the same string of the request. it very clear that this is not the case when browsing through the API. Sure. Please raise a JIRA in HttpCore for this enhancement. https://issues.apache.org/jira/browse/HTTPCORE Oleg</body>
  </mail>
  <mail>
    <header>default to cached response on error?</header>
    <body>Hello I'm using the CachingHttpClient and have configured a retry handler for certain types of errors... but what I really want to do is use a previously cached response (for certain types of errors) and only retry if there is no previously cached response. Is this possible? thanks sam</body>
  </mail>
  <mail>
    <header>Re: default to cached response on error?</header>
    <body>I do not think so. Oleg</body>
  </mail>
  <mail>
    <header>Re: default to cached response on error?</header>
    <body>Hello, Did you try stale-if-error request header ?</body>
  </mail>
  <mail>
    <header>Re: default to cached response on error?</header>
    <body>No, thanks for the pointer. Does CachingHttpClient support that?</body>
  </mail>
  <mail>
    <header>Re: default to cached response on error?</header>
    <body>Yes, CachingHttpClient supports this. You can add the header in the request and CachingHttpClient will send the cached version instead of the error page even if the cache entry is stale. For example: Cache-Control: stale-if-error=1200 But the resource must be cacheable in the first place. In addition the resource must also be revalidatable (Last-modified or Etag response header in the response) in current version.</body>
  </mail>
  <mail>
    <header>Re: default to cached response on error?</header>
    <body>When you say the resource must be revalidatable in the current version, does that mean my resource server must successfully respond with a 304? And thanks for the confirmation, Jon, regarding the build in support. I'll play around with this and see how it goes. sam</body>
  </mail>
  <mail>
    <header>Re: default to cached response on error?</header>
    <body>No, the origin doesn't have to respond with a 304; a 200 is fine for that. In the current implementation, "being revalidatable" just means the cached response needs to have either an ETag or Last-Modified header (so that a conditional revalidation request can be sent). I opened a bug against this, since it should also work for any cached response, not just revalidatable ones. https://issues.apache.org/jira/browse/HTTPCLIENT-1368 Jon</body>
  </mail>
  <mail>
    <header>Re: default to cached response on error?</header>
    <body>Ah... cool. My responses happen to be revalidatable so sounds like this solution is just what I was looking for. Thanks!</body>
  </mail>
  <mail>
    <header>Re: default to cached response on error?</header>
    <body>previously no Hi Sam, The CachingHttpClient does implement RFC 5861[1], in particular the stale-if-error cache control directive that Francois-Xavier mentioned may help you here if you're able to have your origin set that or can include it in your request[2]. The CachingHttpClient will already serve you an existing stale cache entry if an IOException happens while waiting for an origin response. Other than that, though, if you are talking about getting an explicit 4XX/5XX error response from the server and using a stale cache entry instead, that would not be RFC2616-compliant cache behavior and would have to be implemented as an opt-in override option. Patches welcome! Jon [1] http://tools.ietf.org/html/rfc5861 [2] I just perused the source code again, and I think there's a bug (I'll open a JIRA issue for it) where the stale-if-error request directive will only work for revalidatable cache entries (that have ETag or Last-Modified), although this should also be applicable to non-revalidatable entries too.</body>
  </mail>
</mails>

