<?xml version="1.0" encoding="UTF-8"?>
<mails>
  <mail>
    <header>Re: [jdom-interest] XPathExpression question</header>
    <date>Sat Jun 08 10:35:18 CEST 2013</date>
    <body>Hi Wayne, all.    I created an issue: [1] &lt;a class="exlink mklink" href="https://github.com/hunterhacker/jdom/issues/120" rel="nofollow"&gt; https://github.com/hunterhacker/jdom/issues/120 &lt;/a&gt; and I have pushed a fix [2] &lt;a class="exlink mklink" href="https://github.com/hunterhacker/jdom/commit/7d009dea5c1bf3c2c450bb6f4ded551610b7039b" rel="nofollow"&gt; https://github.com/hunterhacker/jdom/commit/7d009dea5c1bf3c2c450bb6f4ded551610b7039b &lt;/a&gt;  for this issue up to github. I will release 2.0.6 in about two weeks, unless something else comes up first (this is a 'normal' process for JDOM - to delay a release to see if anything else is found first).    Feel free to pull/build the code yourself (pull branch 2.0.x) in the mean time, or to work around the problem. If you want, I can e-mail you a hot-fix jar for JDOM that would contain the fix.    Rolf    On 08/06/2013 11:02 AM, Rolf Lear wrote:    Hi Wayne.    This is a bug.... thanks. The clone() method of the default (Jaxen) implementation does not do a correct clone().    Technically, the Jaxen API requires a Variable 'context', and while the clone() operation successfully duplicates the variable context, and querying the JDOM wrapper for variable values successfully returns the correct data (different sets of variables for the original and the clone), the actual Jaxen API is *always* given the context from the original instance. The JDOM test cases made sure that the right values were set in the new instance, and that they were independant of the original instance, but did not run through the Jaxen code that had the wrong instance....    I will fix this asap.    If you want a workaround.... it seems that a thread-local is a good option:    tl_pathMap = HashMap&amp;lt;String,org.jdom2.xpath.XPathExpression&amp;lt;Element&amp;gt;&amp;gt; init = ......    then you can use it with:    XPathExpression&amp;lt;Element&amp;gt; xPath =       List&amp;lt;Element&amp;gt; elems =    Rolf    On 07/06/2013 2:35 PM, Keeney, Wayne wrote:    Here's hoping this question gets to the right place.    We are using JDOM2 (2.0.3) and it's my understanding that instances of XPathExpression are not thread safe.  We were using clone as a (hopefully) more efficient method of getting our "own" instance of a pre compiled XPathExpression safe from other thread access.  This is not my main question, but is it more efficient?    My main question has to do with setting variables on the XPathExpression. I could not get the variable setting to work on a cloned copy of an XPathExpression, but it works if I set the variable before cloning.  The problem with this, is of course, thread safety.    Is this a known bug, maybe fixed?    This works (but opens an opportunity for threading problems since we're using precompiled static instances):    XPathExpression&amp;lt;Element&amp;gt; xPath =    xPath.setVariable("variable", namespace,    List&amp;lt;Element&amp;gt; elems =    But this doesn't work, it doesn't seem to recognize the variable replacement:    XPathExpression&amp;lt;Element&amp;gt; xPath =    xPath.setVariable("variable", namespace,    List&amp;lt;Element&amp;gt; elems =    pathmap is just a map of precompiled XPathExpressions.    Thanks,    Wayne Keeney    SAT Services    _______________________________________________ To control your jdom-interest membership: [3]http://www.jdom.org/mailman/options/jdom-interest/ &lt;span&gt; your &lt;a class="email mklink"&gt; ... &lt;/a&gt; @yourhost.com &lt;/span&gt;   _______________________________________________ To control your jdom-interest membership: [4]http://www.jdom.org/mailman/options/jdom-interest/ &lt;span&gt; your &lt;a class="email mklink"&gt; ... &lt;/a&gt; @yourhost.com &lt;/span&gt;   References    Visible links 1. &lt;a class="exlink mklink" href="https://github.com/hunterhacker/jdom/issues/120" rel="nofollow"&gt; https://github.com/hunterhacker/jdom/issues/120 &lt;/a&gt;  2. &lt;br/&gt; &lt;a class="exlink mklink" href="https://github.com/hunterhacker/jdom/commit/7d009dea5c1bf3c2c450bb6f4ded551610b7039b" rel="nofollow"&gt; https://github.com/hunterhacker/jdom/commit/7d009dea5c1bf3c2c450bb6f4ded551610b7039b &lt;/a&gt;  3. http://www.jdom.org/mailman/options/jdom-interest/ &lt;span&gt; your &lt;a class="email mklink"&gt; ... &lt;/a&gt; @yourhost.com &lt;/span&gt;  4. http://www.jdom.org/mailman/options/jdom-interest/ &lt;span&gt; your &lt;a class="email mklink"&gt; ... &lt;/a&gt; @yourhost.com &lt;/span&gt;</body>
  </mail>
  <mail>
    <header>Re: [jdom-interest] XPathExpression question</header>
    <date>Sat Jun 08 08:02:05 CEST 2013</date>
    <body>Hi Wayne.    This is a bug.... thanks. The clone() method of the default (Jaxen) implementation does not do a correct clone().    Technically, the Jaxen API requires a Variable 'context', and while the clone() operation successfully duplicates the variable context, and querying the JDOM wrapper for variable values successfully returns the correct data (different sets of variables for the original and the clone), the actual Jaxen API is *always* given the context from the original instance. The JDOM test cases made sure that the right values were set in the new instance, and that they were independant of the original instance, but did not run through the Jaxen code that had the wrong instance....    I will fix this asap.    If you want a workaround.... it seems that a thread-local is a good option:    private static final ThreadLocal&amp;lt;Map&amp;lt;String,XPathExpression&amp;lt;Element&amp;gt;&amp;gt;&amp;gt; tl_pathMap = HashMap&amp;lt;String,org.jdom2.xpath.XPathExpression&amp;lt;Element&amp;gt;&amp;gt; init = new ......    then you can use it with:             Rolf    On 07/06/2013 2:35 PM, Keeney, Wayne wrote:   &lt;div class="quote quote-1"&gt;   Here's hoping this question gets to the right place.    We are using JDOM2 (2.0.3) and it's my understanding that instances of XPathExpression are not thread safe.  We were using clone as a (hopefully) more efficient method of getting our "own" instance of a pre compiled XPathExpression safe from other thread access.  This is not my main question, but is it more efficient?    My main question has to do with setting variables on the XPathExpression.  I could not get the variable setting to work on a cloned copy of an XPathExpression, but it works if I set the variable before cloning.  The problem with this, is of course, thread safety.    Is this a known bug, maybe fixed?    This works (but opens an opportunity for threading problems since we're using precompiled static instances):             But this doesn't work, it doesn't seem to recognize the variable replacement:             pathmap is just a map of precompiled XPathExpressions.    Thanks,    Wayne Keeney    SAT Services</body>
  </mail>
  <mail>
    <header>Re: [jdom-interest] XPathExpression question</header>
    <date>Fri Jun 07 11:48:24 CEST 2013</date>
    <body>Hi Wayne.    You are asking in the right place.... :)    Other people may provide an answer sooner, but, I suspect that I will have to study your question in detail (and reproduce some things to check).    I will do that this evening (EST) and get back to you (I am at a conference now).    Rolf    On 2013-06-07 14:35, Keeney, Wayne wrote:   &lt;div class="quote quote-1"&gt;  Here's hoping this question gets to the right place.    We are using JDOM2 (2.0.3) and it's my understanding that instances of XPathExpression are not thread safe. We were using clone as a (hopefully) more efficient method of getting our "own" instance of a pre compiled XPathExpression safe from other thread access. This is not my main question, but is it more efficient?    My main question has to do with setting variables on the XPathExpression. I could not get the variable setting to work on a cloned copy of an XPathExpression, but it works if I set the variable before cloning. The problem with this, is of course, thread safety.    Is this a known bug, maybe fixed?    This works (but opens an opportunity for threading problems since we're using precompiled static instances):             But this doesn't work, it doesn't seem to recognize the variable replacement:             pathmap is just a map of precompiled XPathExpressions.    Thanks,    Wayne Keeney    SAT Services   &lt;/div&gt; &lt;div class="footer noise"&gt;   &lt;/div&gt;</body>
  </mail>
  <mail>
    <header>[jdom-interest] XPathExpression question</header>
    <date>Fri Jun 07 11:35:22 CEST 2013</date>
    <body>Here's hoping this question gets to the right place.    We are using JDOM2 (2.0.3) and it's my understanding that instances of &lt;br/&gt; XPathExpression are not thread safe.  We were using clone as a (hopefully) more &lt;br/&gt; efficient method of getting our "own" instance of a pre compiled XPathExpression &lt;br/&gt; safe from other thread access.  This is not my main question, but is it more &lt;br/&gt; efficient?    My main question has to do with setting variables on the XPathExpression.  I &lt;br/&gt; could not get the variable setting to work on a cloned copy of an &lt;br/&gt; XPathExpression, but it works if I set the variable before cloning.  The problem &lt;br/&gt; with this, is of course, thread safety.    Is this a known bug, maybe fixed?    This works (but opens an opportunity for threading problems since we're using &lt;br/&gt; precompiled static instances): List&amp;lt;Element&amp;gt; elems = &lt;br/&gt;    But this doesn't work, it doesn't seem to recognize the variable replacement: XPathExpression&amp;lt;Element&amp;gt; xPath = &lt;br/&gt; List&amp;lt;Element&amp;gt; elems = &lt;br/&gt;    pathmap is just a map of precompiled XPathExpressions.    Thanks,    Wayne Keeney SAT Services</body>
  </mail>
  <mail>
    <header>Re: [jdom-interest] Planning for JDOM 2.1.x</header>
    <date>Mon Apr 29 05:37:31 CEST 2013</date>
    <body>Hi all.    An update to the JDOM 2.1.x process is as follows... JDOM 2.0.x has been branched off from the master branch in GitHub (it has been branched for a while). Essentially JDOM 2.0.x versions are now in maintenance mode (fully supported still, but no new features). The 'master' branch in GitHub contains the work going in to the future JDOM 2.1.x release stream.    Currently the list of items scheduled for inclusion to JDOM 2.1.x are: - improved StAX support - extended XPath API that allows for 'indexed' JDOM Documents that in turn will allow for improved XPath performance - use Iterable&amp;lt;...&amp;gt; inputs to many of the bulk methods ( like addAll(Iterable&amp;lt;? extends Content&amp;gt; content) ) which makes JDOM more friendly in some cases - NamespaceStack has been updated with some new query methods, and one new 'push' method. - native support for Saxon 9.5 HE (just released) -&amp;gt; faster XPAths, as well as faster XSLT and extended support for XPath 2.0, etc.    These items are all already committed to the master branch, or are in a partially implemented state.    I expect to be releasing a Beta version of 2.1.x in a few weeks, but I am looking for people to test the code too.    If anyone has an interest in being more involved in the planning and implementation of these items, please speak up.    Thanks    Rolf</body>
  </mail>
  <mail>
    <header>[jdom-announce] JDOM 2.0.5 released</header>
    <date>Mon Apr 29 03:30:37 CEST 2013</date>
    <body>Hi All.    I have just released JDOM 2.0.5 with the following fixes:    * Fixes Issue 106 - Uses different methods on StAX Stream output to ensure that Namespace URI's are prefixed correctly. * Fixes Issue 111 - Improve documentation for SAXBuilder.build(String) so that it is more obvious that the String is not actual XML values, but a URI. * Fixes Issue 112 - Improves performance of SAXBuilder when there are large ( greater than 1KB ) text sections in the input XML. * Fixes Issue 113 - Compile (and test) against Jaxen 1.1.6 * Fixes Issue 114 - Setting the Line Separator for JDOM would not work from System.properties(). * Fixes Issue 115 - Correctly set the 'xmlns' prefix and URI for Namespace declarations in DOMOutputter. * Fixes Issue 116 - JDOM 1.x uses an iterator to output XML child content, modify JDOM 2.x to do the same.    JDOM 2.0.5 is available here on the [1]jdom.org site here: [2] &lt;a class="exlink mklink" href="http://jdom.org/dist/binary/jdom-2.0.5.zip" rel="nofollow"&gt; http://jdom.org/dist/binary/jdom-2.0.5.zip &lt;/a&gt; and also available on Maven (the publish/synchronization process can take an hour or more).    Previous versions of JDOM 2.x have been available on the GitHub Download pages. The download pages are no longer supported by GitHub. This version, and future versions will not be available there. [3] &lt;a class="exlink mklink" href="http://search.maven.org/#artifactdetails" rel="nofollow"&gt; http://search.maven.org/#artifactdetails &lt;/a&gt; |org.jdom|jdom2|2.0.5|jar    Happy coding    Rolf    References    Visible links 1. &lt;a class="exlink mklink" href="http://www.jdom.org/" rel="nofollow"&gt; http://www.jdom.org/ &lt;/a&gt;  2. &lt;a class="exlink mklink" href="http://jdom.org/dist/binary/jdom-2.0.5.zip" rel="nofollow"&gt; http://jdom.org/dist/binary/jdom-2.0.5.zip &lt;/a&gt;  3. &lt;a class="exlink mklink" href="http://search.maven.org/#artifactdetails%7Corg.jdom%7Cjdom2%7C2.0.5%7Cjar" rel="nofollow"&gt; http://search.maven.org/#artifactdetails%7Corg.jdom%7Cjdom2%7C2.0.5%7Cjar &lt;/a&gt;</body>
  </mail>
  <mail>
    <header>[jdom-interest] JDOM 2.0.5 released</header>
    <date>Mon Apr 29 03:30:37 CEST 2013</date>
    <body>Hi All.    I have just released JDOM 2.0.5 with the following fixes:    * Fixes Issue 106 - Uses different methods on StAX Stream output to ensure that Namespace URI's are prefixed correctly. * Fixes Issue 111 - Improve documentation for SAXBuilder.build(String) so that it is more obvious that the String is not actual XML values, but a URI. * Fixes Issue 112 - Improves performance of SAXBuilder when there are large ( greater than 1KB ) text sections in the input XML. * Fixes Issue 113 - Compile (and test) against Jaxen 1.1.6 * Fixes Issue 114 - Setting the Line Separator for JDOM would not work from System.properties(). * Fixes Issue 115 - Correctly set the 'xmlns' prefix and URI for Namespace declarations in DOMOutputter. * Fixes Issue 116 - JDOM 1.x uses an iterator to output XML child content, modify JDOM 2.x to do the same.    JDOM 2.0.5 is available here on the [1]jdom.org site here: [2] &lt;a class="exlink mklink" href="http://jdom.org/dist/binary/jdom-2.0.5.zip" rel="nofollow"&gt; http://jdom.org/dist/binary/jdom-2.0.5.zip &lt;/a&gt; and also available on Maven (the publish/synchronization process can take an hour or more).    Previous versions of JDOM 2.x have been available on the GitHub Download pages. The download pages are no longer supported by GitHub. This version, and future versions will not be available there. [3] &lt;a class="exlink mklink" href="http://search.maven.org/#artifactdetails" rel="nofollow"&gt; http://search.maven.org/#artifactdetails &lt;/a&gt; |org.jdom|jdom2|2.0.5|jar    Happy coding    Rolf    References    Visible links 1. &lt;a class="exlink mklink" href="http://www.jdom.org/" rel="nofollow"&gt; http://www.jdom.org/ &lt;/a&gt;  2. &lt;a class="exlink mklink" href="http://jdom.org/dist/binary/jdom-2.0.5.zip" rel="nofollow"&gt; http://jdom.org/dist/binary/jdom-2.0.5.zip &lt;/a&gt;  3. &lt;a class="exlink mklink" href="http://search.maven.org/#artifactdetails%7Corg.jdom%7Cjdom2%7C2.0.5%7Cjar" rel="nofollow"&gt; http://search.maven.org/#artifactdetails%7Corg.jdom%7Cjdom2%7C2.0.5%7Cjar &lt;/a&gt;</body>
  </mail>
  <mail>
    <header>Re: [jdom-interest] streaming document output</header>
    <date>Tue Apr 23 12:29:12 CEST 2013</date>
    <body>Rolf,    The iterator based code worked fine for our use case and we can stream a dynamic document. Yay! Sometime this week I am going to integrate this into another  system which has the potential to stream lots of data; at that point I'll be able to determine that memory consumption remains modest.    So -- this is excellent. I'll use the jar you sent me for now and watch for the next release.    Thanks again,    Pat    On 04/12/2013 03:07 PM, Rolf Lear wrote:   &lt;div class="quote quote-1"&gt;  See attached. - Jar, and the two files I changed (just in case).    Please try it... it is iterator-only, passes my tests (except one which I have updated now because this code produces a better result in one extreme use case....)</body>
  </mail>
  <mail>
    <header>Re: [jdom-interest] streaming document output</header>
    <date>Thu Apr 11 19:25:19 CEST 2013</date>
    <body>OK, that means I have had to alter the more complicated AbstractFormattedWalker class.    I have a test build I would like you to run. Is this an option? Can I email it to you? It passes all my JUnit tests, and uses just an iterator for all the output.    Thanks    Rolf    On 11/04/2013 4:28 PM, Patrick Dowler wrote:   &lt;div class="quote quote-1"&gt;   We normally use Format.getPrettyFormat()</body>
  </mail>
  <mail>
    <header>Re: [jdom-interest] streaming document output</header>
    <date>Thu Apr 11 13:28:25 CEST 2013</date>
    <body>We normally use Format.getPrettyFormat()    Patrick    On 04/11/2013 11:30 AM, Rolf Lear wrote:   &lt;div class="quote quote-1"&gt;  Oh, are you using 'raw' output, or are you making it 'pretty' or other format?</body>
  </mail>
</mails>

